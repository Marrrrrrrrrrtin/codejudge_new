{"task_id": "0", "program": "import itertools\nfrom random import shuffle\ndef task_func(numbers=list(range(1, 3))):\n\n    pass\nimport itertools\nfrom random import shuffle\ndef task_func(numbers=list(range(1, 3))):\n    \"\"\"\n    Calculates the average of the sums of absolute differences between each pair of consecutive numbers for all permutations of a given list. Each permutation is shuffled before calculating the differences.\n\n    Args:\n        numbers (list): A list of numbers. Default is numbers from 1 to 10.\n\n    Returns:\n        float: The average of the sums of absolute differences for each shuffled permutation of the list.\n    \"\"\"\n    # Calculate the sum of absolute differences for each permutation\n    sums = []\n    for perm in itertools.permutations(numbers):\n        # Shuffle the permutation\n        shuffle(perm)\n        # Calculate the sum of absolute differences\n        sum_abs_diff = 0\n        for i in range(len(perm) - 1):\n            sum_abs_diff += abs(perm[i] - perm[i + 1])\n        sums.append(sum_abs_diff)\n\n    # Calculate the average of the sums\n    return sum(sums) / len(sums)\nnumbers = [1, 2, 3, 4, 5]", "problem": "Calculates the average of the sums of absolute differences between each pair of consecutive numbers for all permutations of a given list. Each permutation is shuffled before calculating the differences. Args: - numbers (list): A list of numbers. Default is numbers from 1 to 10.\nThe function should output with:\n    float: The average of the sums of absolute differences for each shuffled permutation of the list.\nYou should write self-contained code starting with:\n```\nimport itertools\nfrom random import shuffle\ndef task_func(numbers=list(range(1, 3))):\n```", "solution": "import itertools\nfrom random import shuffle\ndef task_func(numbers=list(range(1, 3))):\n    permutations = list(itertools.permutations(numbers))\n    sum_diffs = 0\n\n    for perm in permutations:\n        perm = list(perm)\n        shuffle(perm)\n        diffs = [abs(perm[i] - perm[i+1]) for i in range(len(perm)-1)]\n        sum_diffs += sum(diffs)\n\n    avg_sum_diffs = sum_diffs / len(permutations)\n    \n    return avg_sum_diffs", "pass": false}
{"task_id": "1", "program": "import collections\nimport random\nimport string\ndef task_func(length=100):\n\n    pass\nimport collections\nimport random\nimport string\ndef task_func(length=100):\n    if length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n\n    # Generate a random string of the specified length\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(length))\n\n    # Count the occurrence of each character in the string\n    char_counts = collections.Counter(random_string)\n\n    return char_counts", "problem": "Generate a random string of the specified length composed of uppercase and lowercase letters, and then count the occurrence of each character in this string.\nThe function should raise the exception for: ValueError if the length is a negative number\nThe function should output with:\n    dict: A dictionary where each key is a character from the generated string and the value\n    is the count of how many times that character appears in the string.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport string\ndef task_func(length=100):\n```", "solution": "import collections\nimport random\nimport string\ndef task_func(length=100):\n    if length < 0:\n        raise ValueError\n    random_string = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase, k=length))\n    char_counts = collections.Counter(random_string)\n    return dict(char_counts)", "pass": true}
{"task_id": "2", "program": "import random\nimport statistics\ndef task_func(LETTERS):\n\n    pass\nimport random\nimport statistics\ndef task_func(LETTERS):\n    # Create a dictionary with random letters as keys and lists of random integers as values\n    d = {random.choice(LETTERS): [random.randint(1, 10) for _ in range(5)] for _ in range(10)}\n\n    # Sort the dictionary by the mean of the values in descending order\n    sorted_d = {k: v for k, v in sorted(d.items(), key=lambda item: statistics.mean(item[1]), reverse=True)}\n\n    return sorted_d\nLETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "problem": "Create a dictionary in which keys are random letters and values are lists of random integers. The dictionary is then sorted by the mean of the values in descending order, demonstrating the use of the statistics library.\nThe function should output with:\n    dict: The sorted dictionary with letters as keys and lists of integers as values, sorted by their mean values.\nYou should write self-contained code starting with:\n```\nimport random\nimport statistics\ndef task_func(LETTERS):\n```", "solution": "import random\nimport statistics\ndef task_func(LETTERS):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    sorted_dict = dict(sorted(random_dict.items(), key=lambda item: statistics.mean(item[1]), reverse=True))\n    return sorted_dict", "pass": false}
{"task_id": "3", "program": "import random\nimport numpy as np\ndef task_func(LETTERS):\n\n    pass\nimport random\nimport numpy as np\ndef task_func(LETTERS):\n    # Create a dictionary where keys are specified letters and values are lists of random integers\n    letter_list = {}\n    for letter in LETTERS:\n        letter_list[letter] = random.sample(range(101), random.randint(1, 10))\n\n    # Calculate the mean of these integers for each key and return a dictionary of these means\n    means = {}\n    for letter, values in letter_list.items():\n        means[letter] = np.mean(values)\n\n    return means\nLETTERS = ['a', 'b', 'c', 'd', 'e']", "problem": "Create a dictionary where keys are specified letters and values are lists of random integers. Then calculate the mean of these integers for each key and return a dictionary of these means.\nThe function should output with:\n    dict: A dictionary where each key is a letter from the input list and the value is the mean of\n    a randomly generated list of integers (with each list having 1 to 10 integers ranging from 0 to 100).\nYou should write self-contained code starting with:\n```\nimport random\nimport numpy as np\ndef task_func(LETTERS):\n```", "solution": "import random\nimport numpy as np\ndef task_func(LETTERS):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    mean_dict = {k: np.mean(v) for k, v in random_dict.items()}\n    return mean_dict", "pass": true}
{"task_id": "4", "program": "from collections import Counter\nimport itertools\ndef task_func(d):\n\n    pass\nfrom collections import Counter\nimport itertools\ndef task_func(d):\n    # Flatten the list of lists into a single list\n    flat_list = list(itertools.chain.from_iterable(d.values()))\n\n    # Count the occurrences of each integer in the flattened list\n    counter = Counter(flat_list)\n\n    # Return a dictionary with the counts for each integer\n    return {k: v for k, v in counter.items()}\nd = {1: [1, 2, 3], 2: [4, 5, 6], 3: [7, 8, 9]}", "problem": "Count the occurrence of each integer in the values of the input dictionary, where each value is a list of integers, and return a dictionary with these counts. The resulting dictionary's keys are the integers, and the values are their respective counts across all lists in the input dictionary.\nThe function should output with:\n    dict: A dictionary where each key is an integer from any of the input lists, and the value is the count of\n    how often that integer appears in all the lists combined.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\ndef task_func(d):\n```", "solution": "from collections import Counter\nimport itertools\ndef task_func(d):\n    count_dict = Counter(itertools.chain.from_iterable(d.values()))\n    return dict(count_dict)", "pass": true}
{"task_id": "5", "program": "import random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n\n    pass\nimport random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n    # Create a dictionary where keys are letters from the input list and values are lists of random integers\n    dict = {letter: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for letter in LETTERS}\n\n    # Calculate the population standard deviation for each list of integers and return a dictionary of these values\n    return {letter: math.sqrt(sum((x - mean) ** 2 for x in values) / (len(values) - 1)) for letter, values in dict.items()}", "problem": "Create a dictionary where keys are letters from a predefined list LETTERS and values are lists of random integers. Then, calculates the population standard deviation for each list of integers and returns a dictionary of these values. The random integers for each key are generated within the range 0 to 100, and each list contains between 1 to 10 integers.\nThe function should output with:\n    dict: A dictionary where each key corresponds to a letter from the input list and each value is the\n    population standard deviation of a list of random integers associated with that key.\nYou should write self-contained code starting with:\n```\nimport random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n```", "solution": "import random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    sd_dict = {\n        k: math.sqrt(sum((i - sum(v) / len(v)) ** 2 for i in v) / len(v))\n        for k, v in random_dict.items()\n    }\n    return sd_dict", "pass": false}
{"task_id": "6", "program": "import os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n\n    pass\nimport os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n    \"\"\"\n    Find the latest log file in a specified directory that matches a given regex pattern.\n\n    Args:\n        pattern (str): The regex pattern to match against the log file names.\n        log_dir (str): The directory to search for log files. Defaults to '/var/log/'.\n\n    Returns:\n        str or None: The path to the most recent log file that matches the pattern, or None if no matching files are found.\n    \"\"\"\n    # Get a list of all files in the log directory\n    files = os.listdir(log_dir)\n\n    # Filter the files based on the regex pattern\n    matching_files = [f for f in files if re.match(pattern, f)]\n\n    # If no files match the pattern, return None\n    if not matching_files:\n        return None\n\n    # Get the most recent file based on modification time\n    latest_file = max(matching_files, key=os.path.getmtime)\n\n    # Return the path to the latest file\n    return os.path.join(log_dir, latest_file)", "problem": "Find the latest log file in a specified directory that matches a given regex pattern. This function searches through all files in the specified directory, filters them based on the provided regex pattern, and returns the path to the most recent log file based on modification time. If no files match the pattern or the directory is empty, the function returns None.\nThe function should output with:\n    str or None: The path to the most recent log file that matches the pattern, or None if no matching files are found.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n```", "solution": "import os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n    log_files = [f for f in os.listdir(log_dir) if re.match(pattern, f)]\n    log_files = sorted(log_files, key=lambda f: os.path.getmtime(os.path.join(log_dir, f)), reverse=True)\n\n    return os.path.join(log_dir, log_files[0]) if log_files else None", "pass": true}
{"task_id": "7", "program": "import csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n\n    pass\nimport csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n    \"\"\"\n    Find the best-selling product from a given CSV file with sales data.\n    This function parses a CSV file assumed to have a header followed by rows containing two columns: 'product' and 'quantity'.\n    It computes the total sales per product and determines the product with the highest cumulative sales.\n    The CSV file must include at least these two columns, where 'product' is the name of the product as a string and 'quantity' is the number of units sold as an integer.\n    Args:\n        csv_file_path (str): The file path to the CSV file containing sales data.\n    Returns:\n        str: The name of the top-selling product based on the total quantity sold.\n    \"\"\"\n    with open(csv_file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        sales = collections.defaultdict(int)\n        for row in reader:\n            sales[row['product']] += int(row['quantity'])\n        top_seller = max(sales.items(), key=operator.itemgetter(1))[0]\n        return top_seller\ncsv_file_path = 'sales.csv'", "problem": "Find the best-selling product from a given CSV file with sales data. This function parses a CSV file assumed to have a header followed by rows containing two columns: 'product' and 'quantity'. It computes the total sales per product and determines the product with the highest cumulative sales. The CSV file must include at least these two columns, where 'product' is the name of the product as a string and 'quantity' is the number of units sold as an integer. Args: csv_file_path (str): The file path to the CSV file containing sales data.\nThe function should output with:\n    str: The name of the top-selling product based on the total quantity sold.\nYou should write self-contained code starting with:\n```\nimport csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n```", "solution": "import csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n    with open(csv_file_path, 'r') as f:\n        reader = csv.reader(f)\n        next(reader)  # Skip the header row\n        sales_data = collections.defaultdict(int)\n        for row in reader:\n            product, quantity = row[0], int(row[1])\n            sales_data[product] += quantity\n\n    top_selling_product = max(sales_data.items(), key=operator.itemgetter(1))[0]\n\n    return top_selling_product", "pass": true}
{"task_id": "8", "program": "from collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n\n    pass\nfrom collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n    # Convert elements in 'T1' to integers\n    T1 = [int(x) for x in T1]\n    # Create a list of random integers where the number of integers is determined by the sum of the integers in 'T1'\n    random_list = [randint(0, RANGE) for _ in range(sum(T1))]\n    # Count the occurrences of each number in the generated list using a Counter\n    counter = Counter(random_list)\n    return counter\nT1 = [1, 2, 3]\nRANGE = 100", "problem": "Convert elements in 'T1' to integers and create a list of random integers where the number of integers is determined by the sum of the integers in `T1`. Random integers are generated between 0 and `RANGE` (default is 100). Count the occurrences of each number in the generated list using a Counter.\nThe function should output with:\n    Counter: A Counter object representing the count of each number appearing in the list of generated random integers.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n```", "solution": "from collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_nums = sum(flattened_list)\n\n    random_nums = [randint(0, RANGE) for _ in range(total_nums)]\n    counts = Counter(random_nums)\n\n    return counts", "pass": false}
{"task_id": "9", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n    # Create a Pandas DataFrame from the list of pairs\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    # Visualize the data using a bar chart\n    ax = sns.barplot(x='Category', y='Value', data=df)\n\n    # Set the title of the barplot\n    ax.set_title('Category vs Value')\n\n    return df, ax\nlist_of_pairs = [('A', 10), ('B', 8), ('C', 13), ('D', 9), ('E', 11)]", "problem": "Create a Pandas DataFrame from a list of pairs and visualize the data using a bar chart. - The title of the barplot should be set to 'Category vs Value'`.\nThe function should output with:\n    tuple:\n    DataFrame: A pandas DataFrame with columns 'Category' and 'Value'.\n    Axes: A matplotlib Axes displaying a bar chart of categories vs. values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=\"Category\", y=\"Value\", data=df)\n    plt.title(\"Category vs Value\")\n    ax = plt.gca()\n    return df, ax", "pass": true}
{"task_id": "10", "program": "import numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n\n    pass\nimport numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n    \"\"\"\n    Convert elements in 'T1' to integers and create a list of random integers. The size of the list is the sum of the integers in `T1`. Calculate and return the mean, median, and mode of the list.\n    The function should raise the exception for: statistics.StatisticsError if T1 is empty\n    The function should output with:\n        tuple: A tuple containing the mean, median, and mode of the generated list of random integers.\n        The mean and median are floats, and the mode is an integer. The calculations use the generated\n        list whose size is determined by the sum of converted integers from `T1`.\n    \"\"\"\n    if not T1:\n        raise statistics.StatisticsError(\"T1 is empty\")\n\n    # Convert elements in T1 to integers\n    T1 = [int(x) for x in T1]\n\n    # Create a list of random integers with the sum of the converted integers in T1\n    random_list = [random.randint(0, RANGE) for _ in range(sum(T1))]\n\n    # Calculate the mean, median, and mode of the list\n    mean = statistics.mean(random_list)\n    median = statistics.median(random_list)\n    mode = statistics.mode(random_list)\n\n    return (mean, median, mode)\nT1 = [1, 2, 3]", "problem": "Convert elements in 'T1' to integers and create a list of random integers. The size of the list is the sum of the integers in `T1`. Calculate and return the mean, median, and mode of the list.\nThe function should raise the exception for: statistics.StatisticsError if T1 is empty\nThe function should output with:\n    tuple: A tuple containing the mean, median, and mode of the generated list of random integers.\n    The mean and median are floats, and the mode is an integer. The calculations use the generated\n    list whose size is determined by the sum of converted integers from `T1`.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n```", "solution": "import numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n    if len(T1) <= 0:\n        raise statistics.StatisticsError\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_nums = sum(flattened_list)\n    random_nums = [random.randint(0, RANGE) for _ in range(total_nums)]\n    mean = np.mean(random_nums)\n    median = np.median(random_nums)\n    mode = statistics.mode(random_nums)\n    return mean, median, mode", "pass": false}
{"task_id": "11", "program": "import numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n\n    pass\nimport numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n    # Convert elements in T1 to integers\n    T1 = [int(x) for x in itertools.chain.from_iterable(T1)]\n\n    # Create a list of random integers\n    random_list = [random.randint(0, max_value) for _ in range(sum(T1))]\n\n    # Calculate the 25th, 50th, and 75th percentiles of the list\n    p25 = np.percentile(random_list, 25)\n    p50 = np.percentile(random_list, 50)\n    p75 = np.percentile(random_list, 75)\n\n    return (p25, p50, p75)\nT1 = (('1', '2', '3'), ('4', '5', '6'))", "problem": "Converts elements in 'T1', a tuple of tuples containing string representations of integers, to integers and creates a list of random integers. The size of the list equals the sum of these integers. Returns the 25th, 50th, and 75th percentiles of this list.\nThe function should output with:\n    tuple: A tuple (p25, p50, p75) representing the 25th, 50th, and 75th percentiles of the list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n```", "solution": "import numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_nums = sum(flattened_list)\n\n    random_nums = [random.randint(0, max_value) for _ in range(total_nums)]\n\n    p25 = np.percentile(random_nums, 25)\n    p50 = np.percentile(random_nums, 50)\n    p75 = np.percentile(random_nums, 75)\n\n    return p25, p50, p75", "pass": true}
{"task_id": "12", "program": "import subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n\n    pass\nimport subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n    \"\"\"Runs the provided backup shell script and logs the start time, end time, and exit status in a specified JSON log file.\n\n    Args:\n        script_name (str): The name of the backup shell script to run.\n        log_file (str): The path to the JSON log file to write the log data to.\n\n    Returns:\n        dict: A dictionary containing the start time, end time, and exit status of the script execution.\n\n    Raises:\n        FileNotFoundError: If the script file does not exist.\n        RuntimeError: If there is an error executing the script.\n    \"\"\"\n    if not os.path.isfile(script_name):\n        raise FileNotFoundError(f\"Script file '{script_name}' does not exist.\")\n\n    start_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    try:\n        subprocess.run(script_name, check=True)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(f\"Error executing script '{script_name}': {e}\")\n    end_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    with open(log_file, \"w\") as f:\n        json.dump({\"start_time\": start_time, \"end_time\": end_time, \"exit_status\": 0}, f)\n\n    return {\"start_time\": start_time, \"end_time\": end_time, \"exit_status\": 0}", "problem": "Runs the provided backup shell script and logs the start time, end time, and exit status in a specified JSON log file.\nThe function should raise the exception for: FileNotFoundError: If the script file does not exist. RuntimeError: If there is an error executing the script.\nThe function should output with:\n    dict: A dictionary containing:\n    'start_time': The start time of the script execution in the format '%Y-%m-%d %H:%M:%S'.\n    'end_time': The end time of the script execution in the format '%Y-%m-%d %H:%M:%S'.\n    'exit_status': The exit status of the script execution (0 for success, other values indicate an error).\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n```", "solution": "import subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n    log_data = {}\n\n    if not os.path.isfile(script_name):\n        raise FileNotFoundError(f\"Script {script_name} does not exist.\")\n\n    start_time = datetime.now()\n    log_data['start_time'] = start_time.strftime('%Y-%m-%d %H:%M:%S')\n\n    try:\n        exit_status = subprocess.call(['./' + script_name])\n    except Exception as e:\n        raise RuntimeError(f\"Failed to run {script_name}: {str(e)}\")\n\n    end_time = datetime.now()\n    log_data['end_time'] = end_time.strftime('%Y-%m-%d %H:%M:%S')\n    log_data['exit_status'] = exit_status\n\n    with open(log_file, 'w') as f:\n        json.dump(log_data, f)\n    \n    return log_data", "pass": false}
{"task_id": "13", "program": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n\n    pass\nimport subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download all files from a specific directory on an FTP server using wget in a subprocess.\n\n    Args:\n        ftp_server (str): The FTP server address. Default is 'ftp.dlptest.com'.\n        ftp_user (str): The FTP server username. Default is 'dlpuser'.\n        ftp_password (str): The FTP server password. Default is 'rNrKYTX9g7z3RgJRmxWuGHbeu'.\n        ftp_dir (str): The directory path on the FTP server from which files need to be downloaded. Default is '/ftp/test'.\n\n    Raises:\n        Exception: If there is a failure in connecting to the FTP server.\n        Exception: If there is a failure in logging into the FTP server.\n        Exception: If there is a failure in changing to the specified directory.\n\n    Returns:\n        List[str]: A list of filenames that were attempted to be downloaded from the FTP server.\n    \"\"\"\n    # Connect to the FTP server\n    try:\n        ftp = ftplib.FTP(ftp_server)\n    except Exception as e:\n        raise Exception(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n\n    # Log in to the FTP server\n    try:\n        ftp.login(ftp_user, ftp_password)\n    except Exception as e:\n        raise Exception(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n\n    # Change to the specified directory\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        raise Exception(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n\n    # Get a list of all files in the directory\n    files = []\n    ftp.retrlines(\"LIST\", files.append)\n\n    # Download all files using wget\n    filenames = []\n    for file in files:\n        filename = file.split()[-1]\n        subprocess.run([\"wget\", f\"ftp://{ftp_user}:{ftp_password}@{ftp_server}/{ftp_dir}/{filename}\"])\n        filenames.append(filename)\n\n    return filenames", "problem": "Download all files from a specific directory on an FTP server using wget in a subprocess. Args: ftp_server (str): The FTP server address. Default is 'ftp.dlptest.com'. ftp_user (str): The FTP server username. Default is 'dlpuser'. ftp_password (str): The FTP server password. Default is 'rNrKYTX9g7z3RgJRmxWuGHbeu'. ftp_dir (str): The directory path on the FTP server from which files need to be downloaded. Default is '/ftp/test'.\nThe function should raise the exception for: Exception: If there is a failure in connecting to the FTP server. Outputs the message \"Failed to connect to FTP server {ftp_server}: {str(e)}\" If there is a failure in logging into the FTP server. Outputs the message \"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\" If there is a failure in changing to the specified directory. Outputs the message \"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\"\nThe function should output with:\n    List[str]: A list of filenames that were attempted to be downloaded from the FTP server.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n```", "solution": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    # Attempt to connect to the FTP server\n    try:\n        ftp_obj = ftplib.FTP(ftp_server)\n    except Exception as e:\n        raise Exception(f'Failed to connect to FTP server {ftp_server}: {str(e)}')\n\n    # Attempt to login to the FTP server\n    try:\n        ftp_obj.login(ftp_user, ftp_password)\n    except Exception as e:\n        raise Exception(f'Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}')\n\n    # Attempt to change to the specified directory\n    try:\n        ftp_obj.cwd(ftp_dir)\n    except Exception as e:\n        raise Exception(f'Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}')\n\n    # Directory to store downloaded files\n    download_dir = \"downloaded_files\"\n    if not os.path.exists(download_dir):\n        os.makedirs(download_dir)\n\n    downloaded_files = []\n    for filename in ftp_obj.nlst():\n        command = f'wget ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{filename} -P {download_dir}'\n        subprocess.call(command, shell=True)\n        downloaded_files.append(filename)\n\n    ftp_obj.quit()\n    return downloaded_files", "pass": false}
{"task_id": "14", "program": "import configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n\n    pass\nimport configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n    \"\"\"\n    Archive a specified project directory into a ZIP file based on the configuration specified in a config file.\n    This function reads a configuration file to determine the project directory and archives this directory into a ZIP file.\n    The ZIP file's name will be the project directory's basename, stored in the specified archive directory.\n    Configuration File Format:\n        [Project]\n        directory=path_to_project_directory\n    The function should raise the exception for:\n        FileNotFoundError: If the `config_file_path` does not exist or the specified project directory does not exist.\n    Exception: If the ZIP archive cannot be created.\n    The function should output with:\n        bool: True if the ZIP archive is successfully created, otherwise an exception is raised.\n    \"\"\"\n    # Read the configuration file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Get the project directory from the configuration file\n    project_dir = config['Project']['directory']\n\n    # Check if the project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory '{project_dir}' does not exist.\")\n\n    # Create the archive directory if it does not exist\n    if not os.path.exists(archieve_dir):\n        os.makedirs(archieve_dir)\n\n    # Create the ZIP archive\n    zip_file_path = os.path.join(archieve_dir, os.path.basename(project_dir) + '.zip')\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for root, dirs, files in os.walk(project_dir):\n            for file in files:\n                zip_file.write(os.path.join(root, file))\n\n    return True", "problem": "Archive a specified project directory into a ZIP file based on the configuration specified in a config file. This function reads a configuration file to determine the project directory and archives this directory into a ZIP file. The ZIP file's name will be the project directory's basename, stored in the specified archive directory. Configuration File Format: [Project] directory=path_to_project_directory\nThe function should raise the exception for: FileNotFoundError: If the `config_file_path` does not exist or the specified project directory does not exist. Exception: If the ZIP archive cannot be created.\nThe function should output with:\n    bool: True if the ZIP archive is successfully created, otherwise an exception is raised.\nYou should write self-contained code starting with:\n```\nimport configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n```", "solution": "import configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    project_dir = config.get('Project', 'directory')\n\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(f'Directory {project_dir} does not exist.')\n\n    archive_file = f'{archieve_dir}/{os.path.basename(project_dir)}.zip'\n    \n    # Using shutil to create the zip archive\n    shutil.make_archive(base_name=os.path.splitext(archive_file)[0], format='zip', root_dir=project_dir)\n\n    if not os.path.isfile(archive_file):\n        raise Exception(f\"Failed to create archive {archive_file}\")\n\n    return True", "pass": false}
{"task_id": "15", "program": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n\n    pass\nimport subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute a list of shell commands read from a CSV file and save the outputs in separate files.\n    Each command's output is written to a unique file in the specified output directory.\n    If a command fails, the error message along with the exit code is appended to the respective output file.\n\n    Args:\n        commands_file_path (str): The path to the CSV file containing the list of shell commands.\n        output_dir_path (str): The path to the output directory where the output files will be saved.\n\n    Returns:\n        list of str: A list of paths to the output files created in the output directory, each named as\n        'command_X_output.txt', where X is the command index. If a command execution fails,\n        the output file will contain a descriptive error message and the exit code.\n\n    Raises:\n        FileNotFoundError: If the commands_file_path does not exist.\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"{commands_file_path} does not exist.\")\n\n    # Read the commands from the CSV file\n    with open(commands_file_path, \"r\") as f:\n        reader = csv.reader(f)\n        commands = [row[0] for row in reader]\n\n    # Create the output directory if it does not exist\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    # Execute each command and save the output to a file\n    output_files = []\n    for i, command in enumerate(commands):\n        output_file_path = os.path.join(output_dir_path, f\"command_{i}_output.txt\")\n        try:\n            with open(output_file_path, \"w\") as f:\n                subprocess.run(command, shell=True, stdout=f, stderr=subprocess.STDOUT)\n        except subprocess.CalledProcessError as e:\n            with open(output_file_path, \"a\") as f:\n                f.write(f\"Error: {e.stderr.decode()}\\nExit code: {e.returncode}\")\n        output_files.append(output_file_path)\n\n    return output_files", "problem": "Execute a list of shell commands read from a CSV file and save the outputs in separate files. Each command's output is written to a unique file in the specified output directory. If a command fails, the error message along with the exit code is appended to the respective output file.\nThe function should raise the exception for: FileNotFoundError: If the commands_file_path does not exist.\nThe function should output with:\n    list of str: A list of paths to the output files created in the output directory, each named as\n    'command_X_output.txt', where X is the command index. If a command execution fails,\n    the output file will contain a descriptive error message and the exit code.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n```", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    # Check if commands_file_path exists\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"File '{commands_file_path}' not found.\")\n    \n    # Check if output_dir_path exists, if not, create it\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n    \n    # Read commands from the CSV file\n    with open(commands_file_path, 'r') as f:\n        reader = csv.reader(f)\n        commands = [cmd[0] for cmd in list(reader)]\n    \n    output_files = []\n    for i, command in enumerate(commands):\n        output_file = f'{output_dir_path}/command_{i+1}_output.txt'\n        with open(output_file, 'w') as f:\n            ret_code = subprocess.call(command, shell=True, stdout=f, stderr=subprocess.STDOUT)\n            if ret_code != 0:\n                f.write(f\"\\nError executing command, exited with code {ret_code}\")\n        output_files.append(output_file)\n\n    return output_files", "pass": false}
{"task_id": "16", "program": "import os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n\n    pass\nimport os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n    \"\"\"Backup all '.log' files in a specified directory to a tar.gz file and delete the original files after backup.\n\n    The backup file is named 'logs_backup.tar.gz' and placed in the specified backup directory.\n\n    Args:\n        directory (str): The directory to search for '.log' files.\n        backup_dir (str): The directory to place the backup file.\n\n    Returns:\n        str: The path to the backup file if logs are found, otherwise returns a message 'No logs found to backup'.\n\n    Raises:\n        FileNotFoundError: If the specified directory does not exist.\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    log_files = glob.glob(os.path.join(directory, \"*.log\"))\n    if not log_files:\n        return \"No logs found to backup.\"\n\n    backup_file = os.path.join(backup_dir, \"logs_backup.tar.gz\")\n    with open(backup_file, \"wb\") as f_out:\n        with subprocess.Popen([\"tar\", \"-czf\", \"-\", *log_files], stdout=subprocess.PIPE) as proc:\n            for line in proc.stdout:\n                f_out.write(line)\n\n    for log_file in log_files:\n        os.remove(log_file)\n\n    return backup_file", "problem": "Backup all '.log' files in a specified directory to a tar.gz file and delete the original files after backup. The backup file is named 'logs_backup.tar.gz' and placed in the specified backup directory.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist.\nThe function should output with:\n    str: The path to the backup file if logs are found, otherwise returns a message 'No logs found to backup'.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n```", "solution": "import os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return \"No logs found to backup.\"\n\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    subprocess.call(['tar', '-czvf', backup_file] + log_files)\n\n    for file in log_files:\n        os.remove(file)\n\n    return backup_file", "pass": true}
{"task_id": "17", "program": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n\n    pass\nimport subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if a particular process is running based on its name. If it is not running, start it using the process name as a command. If it is running, terminate the process and restart it by executing the process name as a command.\n    The function should output with:\n        str: A message indicating the action taken:\n        \"Process not found. Starting <process_name>.\"\n        \"Process found. Restarting <process_name>.\"\n    \"\"\"\n    # Check if the process is running\n    process = psutil.process_iter()\n    for proc in process:\n        if proc.name() == process_name:\n            # If the process is running, terminate it\n            proc.terminate()\n            time.sleep(1)\n            # Start the process again\n            subprocess.run(process_name)\n            return f\"Process found. Restarting {process_name}.\"\n    # If the process is not running, start it\n    subprocess.run(process_name)\n    return f\"Process not found. Starting {process_name}.\"", "problem": "Check if a particular process is running based on its name. If it is not running, start it using the process name as a command. If it is running, terminate the process and restart it by executing the process name as a command.\nThe function should output with:\n    str: A message indicating the action taken:\n    \"Process not found. Starting <process_name>.\"\n    \"Process found. Restarting <process_name>.\"\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n```", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    is_running = any([proc for proc in psutil.process_iter() if proc.name() == process_name])\n    \n    # If the process is running, terminate it\n    if is_running:\n        for proc in psutil.process_iter():\n            if proc.name() == process_name:\n                proc.terminate()\n                time.sleep(5)\n        subprocess.Popen(process_name)\n        return f\"Process found. Restarting {process_name}.\"\n    else:\n        subprocess.Popen(process_name)\n        return f\"Process not found. Starting {process_name}.\"", "pass": false}
{"task_id": "18", "program": "import subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n\n    pass\nimport subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n    \"\"\"\n    Divide a CSV file into several smaller files and shuffle the lines in each file.\n    This function takes a CSV file path as input, divides it into smaller files using the shell 'split' command, and shuffles the rows in each of the resulting files.\n    The output files are named with a 'split_' prefix.\n    The function should output with:\n        list: The paths to the split files. Returns an empty list if the file does not exist, is not a CSV file, or if an error occurs during processing.\n    \"\"\"\n    # Check if the file exists and is a CSV file\n    if not os.path.isfile(file) or not file.endswith(\".csv\"):\n        return []\n\n    # Split the file into smaller files using the shell 'split' command\n    subprocess.run([\"split\", \"-l\", \"1000\", file, \"split_\"])\n\n    # Get the paths to the split files\n    split_files = glob.glob(\"split_*.csv\")\n\n    # Shuffle the rows in each split file\n    for split_file in split_files:\n        with open(split_file, \"r\") as f:\n            lines = f.readlines()\n            random.shuffle(lines)\n        with open(split_file, \"w\") as f:\n            f.writelines(lines)\n\n    return split_files", "problem": "Divide a CSV file into several smaller files and shuffle the lines in each file. This function takes a CSV file path as input, divides it into smaller files using the shell 'split' command, and shuffles the rows in each of the resulting files. The output files are named with a 'split_' prefix.\nThe function should output with:\n    list: The paths to the split files. Returns an empty list if the file does not exist, is not a CSV file, or if an error occurs during processing.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n```", "solution": "import subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n    # Check if file exists\n    if not os.path.exists(file):\n        print(\"Provided file does not exist.\")\n        return []\n    \n    # Check for CSV file extension\n    if not file.endswith('.csv'):\n        print(\"Provided file is not a CSV.\")\n        return []\n\n    try:\n        subprocess.call(['split', '-n', '5', '-d', file, 'split_'])\n        split_files = glob.glob('split_*')\n\n        for split_file in split_files:\n            with open(split_file, 'r') as f:\n                reader = csv.reader(f)\n                rows = list(reader)\n\n            random.shuffle(rows)\n\n            with open(split_file, 'w') as f:\n                writer = csv.writer(f)\n                writer.writerows(rows)\n\n        return split_files\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return []", "pass": false}
{"task_id": "19", "program": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n\n    pass\nimport os\nimport glob\nimport zipfile\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including subdirectories) located in the specified directory and returns the path to the created zip file.\n    The zip name is always 'files.zip'.\n    The function should raise the exception for: FileNotFoundError: if the specified directory does not exist.\n    The function should output with:\n        str: The path to the generated zip file. Returns None if the directory does not contain any files.\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    files = glob.glob(os.path.join(directory, \"*\"))\n    if not files:\n        return None\n\n    with zipfile.ZipFile(\"files.zip\", \"w\") as zip_file:\n        for file in files:\n            zip_file.write(file)\n\n    return os.path.join(directory, \"files.zip\")", "problem": "Zips all files (not including subdirectories) located in the specified directory and returns the path to the created zip file.\nNote that: Notes: The zip name is always 'files.zip'\nThe function should raise the exception for: FileNotFoundError: if the specified directory does not exist\nThe function should output with:\n    str: The path to the generated zip file. Returns None if the directory does not contain any files.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport zipfile\ndef task_func(directory):\n```", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = [f for f in glob.glob(os.path.join(directory, '*')) if os.path.isfile(f)]\n    if not files:\n        return None\n    zip_file_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_file_path, 'w') as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n    \n    return zip_file_path", "pass": false}
{"task_id": "20", "program": "import ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n\n    pass\nimport ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n    # Read the CSV file\n    df = pd.read_csv(csv_file)\n\n    # Convert the string representations of dictionaries in the 'dict_column' column to Python dictionaries\n    df['dict_column'] = df['dict_column'].apply(ast.literal_eval)\n\n    # Visualize the data with Seaborn's pairplot\n    ax = sns.pairplot(df, hue='dict_column')\n\n    return df, ax", "problem": "Read a CSV file, convert the string representations of dictionaries in a specific column ('dict_column') to Python dictionaries, and visualize the data with Seaborn's pairplot.\nThe function should output with:\n    tuple: A tuple containing:\n    df (DataFrame): The DataFrame after reading and processing the CSV file.\n    ax (PairGrid): Seaborn's PairGrid object after plotting.\nYou should write self-contained code starting with:\n```\nimport ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n```", "solution": "import ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    df[\"dict_column\"] = df[\"dict_column\"].apply(ast.literal_eval)\n    # Convert 'dict_column' to string representation for plotting\n    df[\"hue_column\"] = df[\"dict_column\"].apply(str)\n    ax = sns.pairplot(df, hue=\"hue_column\")\n    return df, ax", "pass": false}
{"task_id": "21", "program": "import psutil\nimport platform\ndef task_func():\n\n    pass\nimport psutil\nimport platform\ndef task_func():\n    # Get system details\n    system_details = {}\n    system_details['OS'] = platform.system()\n    system_details['Architecture'] = platform.architecture()[0]\n    system_details['Memory Usage'] = psutil.virtual_memory().percent\n    return system_details", "problem": "Obtain system details, including operating system, architecture, and memory usage. This function gathers information about the system's operating system, architecture, and memory usage. It calculates the percentage of used memory  by comparing the total and currently used memory. The gathered details are then returned in a dictionary format with specific keys for each piece of information.\nThe function should output with:\n    dict: A dictionary containing:\n    'OS': Operating System name (e.g., 'Windows', 'Linux').\n    'Architecture': System architecture (typically first item from platform.architecture(), e.g., '64bit').\n    'Memory Usage': Formatted string representing the percentage of memory currently in use,\n    calculated as (used memory / total memory) * 100.\nYou should write self-contained code starting with:\n```\nimport psutil\nimport platform\ndef task_func():\n```", "solution": "import psutil\nimport platform\ndef task_func():\n    system_info = {}\n\n    system_info['OS'] = platform.system()\n    system_info['Architecture'] = platform.architecture()[0]\n\n    total_memory = psutil.virtual_memory().total\n    used_memory = psutil.virtual_memory().used\n    system_info['Memory Usage'] = f'{used_memory/total_memory*100:.2f}%'\n\n    return system_info", "pass": false}
{"task_id": "22", "program": "import collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n\n    pass\nimport collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n    # Combine the two lists by alternating their elements\n    combined_list = [x for x in zip_longest(l1, l2)]\n\n    # Create a random sample of size K from the combined list\n    sample = choices(combined_list, k=K)\n\n    # Calculate the frequency of each element in the sample\n    counter = collections.Counter(sample)\n\n    return counter", "problem": "Combine two lists by alternating their elements, even if they are of different lengths. Elements from the longer list without a counterpart in the shorter one will be included on their own. Then, create a random sample of size K from the combined list, and calculate the frequency of each element in the sample.\nThe function should output with:\n    collections.Counter: An object that counts the frequency of each element in the sample.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n```", "solution": "import collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n    combined = [val for pair in zip_longest(l1, l2) for val in pair if val is not None]\n    sample = choices(combined, k=K)\n    freq = collections.Counter(sample)\n    return freq", "pass": false}
{"task_id": "23", "program": "import numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2,THRESHOLD = 0.5):\n\n    pass\nimport numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2, THRESHOLD = 0.5):\n    \"\"\"\n    Alternates elements from two numeric lists, calculates the absolute difference of each element from a predefined threshold, and returns the element closest to this threshold.\n    Notes:\n        - If l1 and l2 are of different lengths, elements from the longer list without a corresponding pair in the shorter list will not be paired with 'None'.\n        - Only existing numeric elements are considered.\n        - The threshold is fixed at 0.5. Adjustments to the threshold require changes to the THRESHOLD constant.\n    The function should output with:\n        - float: The element from the combined list that is closest to the threshold of 0.5.\n    \"\"\"\n    # zip_longest is used to pair elements from l1 and l2, with elements from the longer list paired with 'None' if there is no corresponding element in the shorter list\n    combined_list = [abs(x - y) for x, y in zip_longest(l1, l2, fillvalue=None)]\n    # filter out non-numeric elements\n    combined_list = [x for x in combined_list if isinstance(x, (int, float))]\n    # calculate the absolute difference of each element from the threshold\n    combined_list = [abs(x - THRESHOLD) for x in combined_list]\n    # return the element closest to the threshold\n    return min(combined_list)\nl1 = [1, 2, 3, 4, 5]\nl2 = [10, 20, 30, 40, 50]", "problem": "Alternates elements from two numeric lists, calculates the absolute difference of each element from a predefined threshold, and returns the element closest to this threshold.\nNote that: Notes: If l1 and l2 are of different lengths, elements from the longer list without a corresponding pair in the shorter list will not be paired with 'None'. Only existing numeric elements are considered. The threshold is fixed at 0.5. Adjustments to the threshold require changes to the THRESHOLD constant.\nThe function should output with:\n    float: The element from the combined list that is closest to the threshold of 0.5.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2,THRESHOLD = 0.5):\n```", "solution": "import numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2,THRESHOLD = 0.5):\n    combined = [val for pair in zip_longest(l1, l2) for val in pair if val is not None]\n    differences = np.abs(np.array(combined) - THRESHOLD)\n    closest_index = np.argmin(differences)\n    return combined[closest_index]", "pass": false}
{"task_id": "24", "program": "import base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n\n    pass\nimport base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n    if not password:\n        raise ValueError(\"Password cannot be empty\")\n    salt = os.urandom(SALT_LENGTH)\n    hashed_password = hashlib.pbkdf2_hmac(\"sha256\", password.encode(\"utf-8\"), salt, 100000)\n    return (base64.b64encode(salt), base64.b64encode(hashed_password))\npassword = \"password123\"", "problem": "Hashes a password using the PBKDF2 HMAC algorithm with SHA-256 as the hashing algorithm, combined with a randomly generated salt, and returns both the salt and the hashed password, each base64-encoded.\nThe function should raise the exception for: ValueError if the password is None or empty\nThe function should output with:\n    tuple[bytes, bytes]: A tuple containing the base64-encoded salt and the base64-encoded hashed password as byte strings.\nYou should write self-contained code starting with:\n```\nimport base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n```", "solution": "import base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n    if not password:\n        raise ValueError\n    salt = os.urandom(SALT_LENGTH)\n    hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)\n    return base64.b64encode(salt), base64.b64encode(hashed_password)", "pass": true}
{"task_id": "25", "program": "import base64\nimport json\nimport zlib\ndef task_func(data_dict):\n\n    pass\nimport base64\nimport json\nimport zlib\ndef task_func(data_dict):\n    json_str = json.dumps(data_dict)\n    compressed_data = zlib.compress(json_str.encode())\n    base64_data = base64.b64encode(compressed_data)\n    return base64_data.decode()", "problem": "Serializes a dictionary to a JSON string, compresses it using zlib, and then encodes the compressed data with base64.\nThe function should output with:\n    str: A base64 encoded string that represents the zlib-compressed JSON string of the dictionary.\nYou should write self-contained code starting with:\n```\nimport base64\nimport json\nimport zlib\ndef task_func(data_dict):\n```", "solution": "import base64\nimport json\nimport zlib\ndef task_func(data_dict):\n    json_str = json.dumps(data_dict)\n    compressed = zlib.compress(json_str.encode())\n    return base64.b64encode(compressed).decode()", "pass": true}
{"task_id": "26", "program": "import base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n\n    pass\nimport base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n    # Encrypt the message using Fernet encryption\n    f = Fernet(encryption_key)\n    encrypted_message = f.encrypt(message.encode())\n\n    # Base64 encode the encrypted message\n    base64_encoded_message = base64.b64encode(encrypted_message)\n\n    return base64_encoded_message.decode()", "problem": "Encrypts a message with a symmetric encryption key using Fernet encryption, and then encode the encrypted message using base64.\nThe function should output with:\n    str: The base64 encoded encrypted message. The message is first encrypted using Fernet encryption,\n    then the result is base64 encoded.\nYou should write self-contained code starting with:\n```\nimport base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n```", "solution": "import base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n    fernet = Fernet(base64.urlsafe_b64encode(encryption_key.encode()))\n    encrypted_message = fernet.encrypt(message.encode())\n    return base64.b64encode(encrypted_message).decode()", "pass": false}
{"task_id": "27", "program": "import json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n\n    pass\nimport json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n    \"\"\"\n    Takes a Python dictionary, adds a current timestamp to it, serializes the modified dictionary to a JSON-formatted string, and then encodes this string using base64 encoding with ASCII character encoding.\n    The function should output with:\n        str: A base64 encoded string that represents the input dictionary with an added timestamp,\n        encoded in ASCII. The timestamp is added with the key 'timestamp'.\n        DATE_FORMAT: The timestamp format. Default to 'YYYY-MM-DD HH:MM:SS'.\n    \"\"\"\n    data['timestamp'] = datetime.now().strftime(DATE_FORMAT)\n    json_str = json.dumps(data)\n    return base64.b64encode(json_str.encode('ascii')).decode('ascii')\ndata = {'name': 'John', 'age': 30}", "problem": "Takes a Python dictionary, adds a current timestamp to it, serializes the modified dictionary to a JSON-formatted string, and then encodes this string using base64 encoding with ASCII character encoding.\nThe function should output with:\n    str: A base64 encoded string that represents the input dictionary with an added timestamp,\n    encoded in ASCII. The timestamp is added with the key 'timestamp'.\n    DATE_FORMAT: The timestamp format. Default to 'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n```", "solution": "import json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n    # Adding current timestamp to the dictionary\n    data['timestamp'] = datetime.now().strftime(DATE_FORMAT)\n    \n    # Encoding the dictionary to a JSON-formatted string and then encoding it in ASCII using base64 encoding\n    json_data = json.dumps(data)\n    encoded_data = base64.b64encode(json_data.encode('ascii')).decode('ascii')\n    \n    return encoded_data", "pass": true}
{"task_id": "28", "program": "import requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n\n    pass\nimport requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n    # Convert the Python dictionary to a JSON-formatted string\n    json_data = json.dumps(data)\n\n    # Encode the JSON-formatted string in base64 format\n    base64_data = base64.b64encode(json_data.encode(\"utf-8\"))\n\n    # Send the base64-encoded data as a POST request to the API endpoint\n    response = requests.post(url, data=base64_data)\n\n    return response", "problem": "Convert a Python dictionary into a JSON-formatted string, encode this string in base64 format, and send it as a 'payload' in a POST request to an API endpoint.\nThe function should output with:\n    requests.Response: The response object received from the API endpoint after the POST request.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n```", "solution": "import requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n    json_data = json.dumps(data)\n    encoded_data = base64.b64encode(json_data.encode('ascii')).decode('ascii')\n    response = requests.post(url, json={\"payload\": encoded_data})\n    \n    return response", "pass": false}
{"task_id": "29", "program": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n\n    pass\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n    # Standardize the data using StandardScaler\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n\n    # Encode the standardized data in base64 format\n    encoded_data = base64.b64encode(standardized_data.tostring())\n\n    # Return the base64-encoded ASCII string representation of the standardized data\n    return encoded_data.decode('ascii')\ndata = np.array([[1, 2, 3], [4, 5, 6]])", "problem": "Standardize a numeric array using sklearn's StandardScaler and encode the standardized data in base64 format as an ASCII string.\nThe function should output with:\n    str: The base64-encoded ASCII string representation of the standardized data.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n```", "solution": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n    standardized_data_str = np.array2string(standardized_data)\n    encoded_data = base64.b64encode(standardized_data_str.encode('ascii')).decode('ascii')\n    \n    return encoded_data", "pass": false}
{"task_id": "30", "program": "import json\nimport os\nimport re\ndef task_func(\n    file_path,\n    attribute,\n    INPUT_JSON={\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": str},  \n            \"age\": {\"type\": int},   \n            \"email\": {\"type\": str}  \n        },\n        \"required\": [\"name\", \"age\", \"email\"]\n    },\n    EMAIL_REGEX=r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"):\n\n    pass\nimport json\nimport os\nimport re\ndef task_func(file_path, attribute, INPUT_JSON={\"type\": \"object\", \"properties\": {\"name\": {\"type\": str}, \"age\": {\"type\": int}, \"email\": {\"type\": str}}, \"required\": [\"name\", \"age\", \"email\"]}, EMAIL_REGEX=r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"):\n    \"\"\"\n    Validate the structure and contents of a JSON file against predefined schema rules and retrieve a specified attribute from the JSON object.\n    Ensures that all required fields exist, match their defined types, and checks the validity of the email format using a regular expression.\n    Errors:\n    - Raises ValueError if the file does not exist, required attributes are missing, types do not match, or the email format is invalid.\n    The function should output with:\n        Any: The value of the specified attribute, consistent with the type defined in the JSON schema.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(file_path):\n        raise ValueError(\"File does not exist\")\n\n    # Load the JSON file\n    with open(file_path, \"r\") as f:\n        data = json.load(f)\n\n    # Validate the JSON structure\n    if not isinstance(data, dict):\n        raise ValueError(\"Invalid JSON structure\")\n\n    # Validate the required attributes\n    for attr in INPUT_JSON[\"required\"]:\n        if attr not in data:\n            raise ValueError(f\"Required attribute '{attr}' is missing\")\n\n    # Validate the attribute types\n    for attr, type_ in INPUT_JSON[\"properties\"].items():\n        if attr not in data:\n            continue\n        if not isinstance(data[attr], type_):\n            raise ValueError(f\"Attribute '{attr}' has invalid type\")\n\n    # Validate the email format\n    if \"email\" in data and not re.match(EMAIL_REGEX, data[\"email\"]):\n        raise ValueError(\"Invalid email format\")\n\n    # Return the specified attribute\n    return data[attribute]\nfile_path = \"input.json\"\nattribute = \"name\"", "problem": "Validate the structure and contents of a JSON file against predefined schema rules and retrieve a specified attribute from the JSON object. Ensures that all required fields exist, match their defined types, and checks the validity of the email format using a regular expression. Errors: - Raises ValueError if the file does not exist, required attributes are missing, types do not match, or the email format is invalid.\nThe function should output with:\n    Any: The value of the specified attribute, consistent with the type defined in the JSON schema.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\nimport re\ndef task_func(\n    file_path,\n    attribute,\n    INPUT_JSON={\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": str},  \n            \"age\": {\"type\": int},   \n            \"email\": {\"type\": str}  \n        },\n        \"required\": [\"name\", \"age\", \"email\"]\n    },\n    EMAIL_REGEX=r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"):\n```", "solution": "import json\nimport os\nimport re\ndef task_func(\n    file_path,\n    attribute,\n    INPUT_JSON={\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": str},  \n            \"age\": {\"type\": int},   \n            \"email\": {\"type\": str}  \n        },\n        \"required\": [\"name\", \"age\", \"email\"]\n    },\n    EMAIL_REGEX=r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"):\n    if not os.path.isfile(file_path):\n        raise ValueError(f'{file_path} does not exist.')\n\n    with open(file_path, 'r') as f:\n        data = json.load(f)\n\n    for key in INPUT_JSON['required']:\n        if key not in data:\n            raise ValueError(f'{key} is missing from the JSON object.')\n        if not isinstance(data[key], INPUT_JSON['properties'][key]['type']):\n            raise ValueError(f'{key} is not of type {INPUT_JSON[\"properties\"][key][\"type\"]}.')\n\n    if 'email' in data and not re.fullmatch(EMAIL_REGEX, data['email']):\n        raise ValueError('Email is not valid.')\n\n    return data[attribute]", "pass": false}
{"task_id": "31", "program": "import nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n\n    pass\nimport nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n    \"\"\"\n    Draw a bar chart of the frequency of words in a text beginning with the \"$\" character.\n    Words that start with the '$' character but consist only of punctuation (e.g., '$!$' and '$.$') are not included in the frequency count.\n    If there is no word respecting the above conditions, the plot should be None.\n    The barplot x words on the x-axis and frequencies on the y-axis.\n    \"\"\"\n    # Tokenize the text into individual words\n    words = nltk.word_tokenize(text)\n\n    # Filter out words that start with '$' but consist only of punctuation\n    filtered_words = [word for word in words if word[0] == '$' and word not in PUNCTUATION]\n\n    # Count the frequency of each word\n    word_counts = nltk.FreqDist(filtered_words)\n\n    # Create a bar plot of the word counts\n    ax = sns.barplot(x=word_counts.keys(), y=word_counts.values())\n\n    # Set the x-axis label\n    ax.set_xlabel(\"Words\")\n\n    # Set the y-axis label\n    ax.set_ylabel(\"Frequency\")\n\n    # Set the title\n    ax.set_title(\"Frequency of Words Beginning with '$'\")\n\n    # Return the plot\n    return ax\ntext = \"This is a text with $some words that start with $ and $!$ and $$. $!$\"", "problem": "Draw a bar chart of the frequency of words in a text beginning with the \"$\" character. Words that start with the '$' character but consist only of punctuation (e.g., '$!$' and '$.$') are not included in the frequency count. - If there is no word respecting the above conditions, the plot should be None. - The barplot x words on the x-axis and frequencies on the y-axis.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The plot showing the frequency of words beginning with the '$' character.\nYou should write self-contained code starting with:\n```\nimport nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n```", "solution": "import nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n    words = text.split()\n    dollar_words = [\n        word\n        for word in words\n        if word.startswith(\"$\")\n        and not all(c in PUNCTUATION for c in word)\n        and len(word) > 1\n    ]\n    freq = nltk.FreqDist(dollar_words)\n    if not freq:  # If frequency distribution is empty, return None\n        return None\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=freq.keys(), y=freq.values())\n    return plt.gca()", "pass": false}
{"task_id": "32", "program": "import requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n\n    pass\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n    \"\"\"\n    Scrape a web page for the first occurrence of a specified HTML tag and return its text content.\n    The function should output with:\n        str: The text content of the specified HTML tag if found, otherwise returns None.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    tag_element = soup.find(tag)\n    if tag_element:\n        return tag_element.text\n    else:\n        return None\nurl = \"https://www.example.com\"\ntag = \"h1\"", "problem": "Scrape a web page for the first occurrence of a specified HTML tag and return its text content.\nThe function should output with:\n    str: The text content of the specified HTML tag if found, otherwise returns None.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n```", "solution": "import requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    tag_content = soup.find(tag)\n    \n    return tag_content.string if tag_content else None", "pass": false}
{"task_id": "33", "program": "import numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n\n    pass\nimport numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n    return np.array([reduce(lambda x, y: x * y, [pair[1] for pair in list_of_pairs])])\nlist_of_pairs = [(1, 2), (3, 4), (5, 6)]", "problem": "Calculate the product of the second values in each tuple in a list of tuples and return the product as a single-element numeric array.\nThe function should output with:\n    numpy.ndarray: A 1D numpy array containing a single element that is the product of the second values in the list of tuples.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n```", "solution": "import numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n    second_values = [pair[1] for pair in list_of_pairs]\n    product = reduce(np.multiply, second_values)\n    product_array = np.array([product])\n\n    return product_array", "pass": true}
{"task_id": "34", "program": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n\n    pass\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    \"\"\"\n    Create a word cloud from text after removing URLs and plot it.\n    The function should raise the exception for: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there are no words available to generate a word cloud after removing URLs.\n    The function should output with:\n        WordCloud object: The generated word cloud.\n    \"\"\"\n    # Remove URLs from the text\n    text = re.sub(r\"http\\S+\", \"\", text)\n\n    # Remove punctuation and convert to lowercase\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation)).lower()\n\n    # Split the text into individual words\n    words = text.split()\n\n    # Create a WordCloud object\n    wordcloud = WordCloud(width=800, height=400, random_state=21).generate_from_frequencies(words)\n\n    # Plot the word cloud\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()\n\n    return wordcloud\ntext = \"This is a sample text with URLs like https://www.example.com and https://www.example.org\"", "problem": "Create a word cloud from text after removing URLs and plot it.\nThe function should raise the exception for: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there are no words available to generate a word cloud after removing URLs.\nThe function should output with:\n    WordCloud object: The generated word cloud.\nYou should write self-contained code starting with:\n```\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs\n    text = re.sub(r\"http[s]?://\\S+\", \"\", text)\n    if not text.strip():  # Check if text is not empty after URL removal\n        raise ValueError(\n            \"No words available to generate a word cloud after removing URLs.\"\n        )\n    # Generate word cloud\n    wordcloud = WordCloud().generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")  # Do not show axis to make it visually appealing\n    return wordcloud", "pass": false}
{"task_id": "35", "program": "import seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n    # Replace all elements in DataFrame columns that do not exist in the target_values array with zeros\n    df = df.replace(to_replace=target_values, value=0)\n\n    # Output the distribution of each column after replacing\n    fig, axs = plt.subplots(nrows=len(df.columns), figsize=(10, 10))\n    for i, col in enumerate(df.columns):\n        sns.distplot(df[col], ax=axs[i], label=col)\n        axs[i].set_title(col)\n\n    return axs\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [1, 3, 4, 5, 6], 'C': [1, 2, 3, 4, 5]})", "problem": "Replace all elements in DataFrame columns that do not exist in the target_values array with zeros, and then output the distribution of each column after replacing. - label each plot as the name of the column it corresponds to.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n```", "solution": "import seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n    df = df.applymap(lambda x: x if x in target_values else 0)\n    plt.figure(figsize=(10, 5))\n    for column in df.columns:\n        sns.kdeplot(df[column], label=column, warn_singular=False)\n    plt.legend()\n    return df, plt.gca()", "pass": false}
{"task_id": "36", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n    # Replace all elements in DataFrame columns that do not exist in the TARGET_VALUES array with zeros\n    df = df.replace(to_replace=TARGET_VALUES, value=0)\n\n    # Perform a Box-Cox transformation on each column (if data is not constant, add 1 to account for zeros)\n    df = df.apply(lambda x: stats.boxcox(x + 1))\n\n    # Display the resulting KDE plots\n    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))\n    for i, col in enumerate(df.columns):\n        axs[i // 2, i % 2].plot(df[col])\n        axs[i // 2, i % 2].set_title(col)\n    plt.show()\n\n    return df\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [1, 2, 3, 4, 5], 'C': [1, 2, 3, 4, 5]})", "problem": "Replace all elements in DataFrame columns that do not exist in the TARGET_VALUES array with zeros, then perform a Box-Cox transformation on each column (if data is not constant, add 1 to account for zeros) and display the resulting KDE plots.\nThe function should output with:\n    pandas.DataFrame: The transformed DataFrame after Box-Cox transformation.\n    matplotlib.figure.Figure: Figure containing KDE plots of the transformed columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n    # Ensure the DataFrame contains only positive values\n    if (df <= 0).any().any():\n        raise ValueError(\"Input DataFrame should contain only positive values.\")\n\n    df = df.applymap(lambda x: x if x in TARGET_VALUES else 0)\n\n    transformed_df = pd.DataFrame()\n\n    fig, ax = plt.subplots()\n\n    for column in df.columns:\n        # Check if data is constant\n        if df[column].nunique() == 1:\n            transformed_df[column] = df[column]\n        else:\n            transformed_data, _ = stats.boxcox(\n                df[column] + 1\n            )  # Add 1 since the are some null values\n            transformed_df[column] = transformed_data\n\n            # Using matplotlib's kde method to plot the KDE\n            kde = stats.gaussian_kde(transformed_df[column])\n            x_vals = np.linspace(\n                min(transformed_df[column]), max(transformed_df[column]), 1000\n            )\n            ax.plot(x_vals, kde(x_vals), label=column)\n\n    ax.legend()\n    plt.show()\n    return transformed_df, fig", "pass": false}
{"task_id": "37", "program": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n\n    pass\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n    # Train a random forest classifier on the input data\n    clf = RandomForestClassifier(random_state=42)\n    clf.fit(df.drop(target_column, axis=1), df[target_column])\n\n    # Extract the feature importances\n    feature_importances = clf.feature_importances_\n\n    # Sort the feature importances in descending order\n    sorted_feature_importances = sorted(feature_importances, key=lambda x: x[1], reverse=True)\n\n    # Create a bar plot of the feature importances\n    ax = sns.barplot(x=sorted_feature_importances, y=df.columns, orient='h')\n\n    # Set the xlabel, ylabel, and title of the plot\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n\n    # Return the random forest classifier and the Axes object of the plot\n    return clf, ax", "problem": "Train a random forest classifier to perform the classification of the rows in a dataframe with respect to the column of interest plot the bar plot of feature importance of each column in the dataframe. - The xlabel of the bar plot should be 'Feature Importance Score', the ylabel 'Features' and the title 'Visualizing Important Features'. - Sort the feature importances in a descending order. - Use the feature importances on the x-axis and the feature names on the y-axis.\nThe function should output with:\n    sklearn.model.RandomForestClassifier : The random forest classifier trained on the input data.\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n```", "solution": "from sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    model = RandomForestClassifier(random_state=42).fit(X, y)\n    feature_imp = pd.Series(model.feature_importances_, index=X.columns).sort_values(\n        ascending=False\n    )\n    plt.figure(figsize=(10, 5))\n    ax = sns.barplot(x=feature_imp, y=feature_imp.index)\n    ax.set_xlabel(\"Feature Importance Score\")\n    ax.set_ylabel(\"Features\")\n    ax.set_title(\"Visualizing Important Features\")\n    return model, ax", "pass": false}
{"task_id": "38", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n    # Standardize the data\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_matrix)\n\n    # Calculate the mean of each row\n    means = standardized_data.mean(axis=1)\n\n    # Create a DataFrame with the standardized data and the mean of each row\n    df = pd.DataFrame(standardized_data, columns=FEATURE_NAMES)\n    df['Mean'] = means\n\n    # Plot the histogram of the mean values\n    fig, ax = plt.subplots()\n    ax.hist(means, bins=50, alpha=0.5, label='Mean')\n    ax.set_xlabel('Mean')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Means')\n    ax.legend()\n\n    return df, ax\ndata_matrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]", "problem": "Standardize a 2D data matrix, calculate the mean value of each row and then visualize the distribution of the mean values with an histogram. - Each row of the matrix represent a data point, its length is the same as that of FEATURE_NAMES. - The plot title should be 'Distribution of Means'.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: A DataFrame containing the standardized data and the mean of each row.\n    Its column names should be FEATURE_NAMES and 'Mean'.\n    matplotlib.axes.Axes: The histogram plot of the distribution of means.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_matrix)\n    df = pd.DataFrame(standardized_data, columns=FEATURE_NAMES)\n    df[\"Mean\"] = df.mean(axis=1)\n    plt.figure(figsize=(10, 5))\n    ax = df[\"Mean\"].plot(kind=\"hist\", title=\"Distribution of Means\")\n    return df, ax", "pass": true}
{"task_id": "39", "program": "import numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\n# Constants\nALPHA = 0.05\ndef task_func(data_matrix):\n\n    pass\nimport numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\nALPHA = 0.05\ndef task_func(data_matrix):\n    \"\"\"\n    Calculate the mean value of each row in a 2D data matrix, run a t-test from a sample against the population value, and record the mean values that differ significantly.\n    :param data_matrix: A 2D numpy array\n    :return: A tuple containing:\n        list: A list of indices of the means that are significantly different from the population mean.\n        Axes: The plot showing the means and significant means.\n    \"\"\"\n    # Calculate the mean value of each row in the data matrix\n    means = np.mean(data_matrix, axis=1)\n\n    # Run a t-test from a sample against the population value for each mean\n    t_values, p_values = ttest_1samp(means, popmean=None, axis=0)\n\n    # Identify the indices of the means that are significantly different from the population mean\n    significant_indices = np.where(p_values < ALPHA)[0]\n\n    # Create a line plot with the mean of rows in red\n    fig, ax = plt.subplots()\n    ax.plot(means, color='red', label='Means')\n\n    # Create a line plot with the significant_indices on the x-axis and the corresponding means on the y-axis\n    ax.plot(significant_indices, means[significant_indices], color='blue', label='Significant Means')\n\n    # Create an horizontal line which represent the mean computed on the whole 2D matrix\n    ax.axhline(y=np.mean(data_matrix), color='green', label='Population Mean')\n\n    # Add labels and title to the plot\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Mean')\n    ax.set_title('Means and Significant Means')\n\n    # Show the plot\n    plt.show()\n\n    return significant_indices, ax", "problem": "Calculate the mean value of each row in a 2D data matrix, run a t-test from a sample against the population value, and record the mean values that differ significantly. - Create a lineplot with the mean of rows in red. Its label is 'Means'. - Create a line plot with the significant_indices (those with a pvalue less than ALPHA) on the x-axis and the corresponding means on the y-axis. This plot should be blue. Its label is 'Significant Means'. - Create an horizontal line which represent the mean computed on the whole 2D matrix. It should be in green. Its label is 'Population Mean'. Example 2: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> indices, ax = task_func(data) >>> print(indices) []\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list of indices of the means that are significantly different from the population mean.\n    Axes: The plot showing the means and significant means.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\n# Constants\nALPHA = 0.05\ndef task_func(data_matrix):\n```", "solution": "import numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\n# Constants\nALPHA = 0.05\ndef task_func(data_matrix):\n    means = np.mean(data_matrix, axis=1)\n    population_mean = np.mean(data_matrix)\n\n    _, p_value = ttest_1samp(means, population_mean)\n    significant_indices = np.where(p_value < ALPHA)[0]\n\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(means, \"ro\", label=\"Means\")\n    ax.plot(\n        significant_indices, means[significant_indices], \"bo\", label=\"Significant Means\"\n    )\n    ax.axhline(y=population_mean, color=\"g\", linestyle=\"-\", label=\"Population Mean\")\n    ax.legend()\n    return significant_indices.tolist(), ax", "pass": false}
{"task_id": "40", "program": "import pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(data_matrix):\n    # Calculate the Z-values of the data matrix\n    z_values = zscore(data_matrix, axis=0)\n\n    # Calculate the mean value of each row\n    mean_values = z_values.mean(axis=1)\n\n    # Create a DataFrame with the Z-values and mean values\n    df = pd.DataFrame(z_values, columns=data_matrix.columns)\n    df['Mean'] = mean_values\n\n    # Visualize the correlation matrix of the Z-values with a heatmap\n    ax = sns.heatmap(df.corr(), annot=True, cmap='coolwarm')\n\n    return df, ax\ndata_matrix = pd.DataFrame({'Feature 1': [1, 2, 3, 4, 5],\n                           'Feature 2': [2, 4, 6, 8, 10],\n                           'Feature 3': [3, 6, 9, 12, 15]})", "problem": "Calculate the Z-values of a 2D data matrix, calculate the mean value of each row and then visualize the correlation matrix of the Z-values with a heatmap.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: A DataFrame with columns 'Feature 1', 'Feature 2', ..., 'Feature n' containing the Z-scores (per matrix row).\n    There is also an additional column 'Mean' the mean of z-score per row.\n    matplotlib.axes.Axes: The Axes object of the plotted heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n    z_scores = zscore(data_matrix, axis=1)\n    feature_columns = [\"Feature \" + str(i + 1) for i in range(data_matrix.shape[1])]\n    df = pd.DataFrame(z_scores, columns=feature_columns)\n    df[\"Mean\"] = df.mean(axis=1)\n    correlation_matrix = df.corr()\n    ax = sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\")\n    return df, ax", "pass": false}
{"task_id": "41", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n    # Calculate the skewness of each row in the data matrix\n    skewness = data_matrix.apply(lambda x: skew(x), axis=1)\n\n    # Create a new DataFrame with the skewness values\n    skewness_df = pd.DataFrame(skewness, columns=['Skewness'])\n\n    # Plot the distribution of the skewness values\n    ax = skewness_df['Skewness'].plot(kind='hist', bins=50)\n\n    return skewness_df, ax\ndata_matrix = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 4, 6, 8, 10], 'C': [3, 6, 9, 12, 15]})", "problem": "Calculate the skew of each row in a 2D data matrix and plot the distribution.\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the skewness of each row. The skweness is stored in a new column which name is 'Skewness'.\n    matplotlib.axes.Axes: The Axes object of the plotted distribution.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n    skewness = skew(data_matrix, axis=1)\n    df = pd.DataFrame(skewness, columns=[\"Skewness\"])\n    plt.figure(figsize=(10, 5))\n    df[\"Skewness\"].plot(kind=\"hist\", title=\"Distribution of Skewness\")\n    return df, plt.gca()", "pass": false}
{"task_id": "42", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n    # Apply PCA with n_components components to a 2D data matrix\n    pca = PCA(n_components=n_components)\n    pca_data = pca.fit_transform(data_matrix)\n\n    # Calculate the mean value of each component\n    mean_values = pca.explained_variance_ratio_\n\n    # Create a dataframe with columns 'Component 1', 'Component 2', ... etc.\n    # Each row of the dataframe correspond to a row of the original matrix mapped in the PCA space\n    df = pd.DataFrame(pca_data, columns=['Component ' + str(i) for i in range(1, n_components + 1)])\n\n    # Add a column 'Mean' which is the average value of each component value per row\n    df['Mean'] = mean_values\n\n    # Create a plot of the cumulative explained variance of the components\n    plt.plot(range(1, n_components + 1), mean_values.cumsum())\n    plt.xlabel('Number of Components')\n    plt.ylabel('Cumulative Explained Variance')\n    plt.title('Cumulative Explained Variance of Components')\n\n    return df, plt.gca()\ndata_matrix = [[1, 2], [3, 4], [5, 6], [7, 8]]", "problem": "Apply PCA with n_components components to a 2D data matrix, calculate the mean value of each component, and then return the cumulative explained variance of the components in a plot. - The function returns a dataframe with columns 'Component 1', 'Component 2', ... etc. - Each row of the dataframe correspond to a row of the original matrix mapped in the PCA space. - The dataframe should also include a column 'Mean' which is the average value of each component value per row - Create a plot of the cumulative explained variance. - the xlabel should be 'Number of Components' and the ylabel 'Cumulative Explained Variance'\nThe function should output with:\n    tuple:\n    pandas.DataFrame: A DataFrame containing the PCA transformed data and the mean of each component.\n    matplotlib.axes._axes.Axes: A plot showing the cumulative explained variance of the components.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_matrix)\n\n    df = pd.DataFrame(\n        transformed_data,\n        columns=[f\"Component {i+1}\" for i in range(transformed_data.shape[1])],\n    )\n    df[\"Mean\"] = df.mean(axis=1)\n\n    fig, ax = plt.subplots()\n    ax.plot(np.cumsum(pca.explained_variance_ratio_))\n    ax.set_xlabel(\"Number of Components\")\n    ax.set_ylabel(\"Cumulative Explained Variance\")\n    return df, ax", "pass": false}
{"task_id": "43", "program": "import numpy as np\nimport seaborn as sns\ndef task_func(df):\n\n    pass\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Replace NaN values with the average of the column\n    df = df.fillna(df.mean())\n\n    # Create a list to store the Axes objects\n    axes = []\n\n    # Iterate over each numeric column\n    for col in df.select_dtypes(include=np.number).columns:\n        # Create a distribution plot for the column\n        ax = sns.distplot(df[col], bins=10)\n\n        # Add the Axes object to the list\n        axes.append(ax)\n\n    # Return the DataFrame with statistics and the list of Axes objects\n    return df, axes", "problem": "Describe a dataframe and draw a distribution chart for each numeric column after replacing the NaN values with the average of the column.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with statistics. This includes count, mean, standard deviation (std), min, 25%, 50%, 75%, and max values for each numeric column.\n    List[Axes]: A list of matplotlib Axes objects representing the distribution plots for each numeric column.\n    Each plot visualizes the distribution of data in the respective column with 10 bins.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(df):\n```", "solution": "import numpy as np\nimport seaborn as sns\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    description = df.describe()\n    plots = []\n    for col in df.select_dtypes(include=[np.number]).columns:\n        plot = sns.displot(df[col], bins=10)\n        plots.append(plot.ax)\n    return description, plots", "pass": false}
{"task_id": "44", "program": "from sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df):\n    # Normalize numeric columns in the DataFrame\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    scaler = MinMaxScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    # Replace missing values with column's average\n    for col in numeric_cols:\n        df[col].fillna(df[col].mean(), inplace=True)\n\n    # Draw a box plot for each column\n    fig, ax = plt.subplots(figsize=(10, 6))\n    for col in numeric_cols:\n        ax.boxplot(df[col], vert=False, labels=[col])\n\n    return df, ax\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50], 'C': [100, 200, 300, 400, 500]})", "problem": "Normalize numeric columns in a DataFrame and draw a box plot for each column. Missing values are replaced by column's average.\nThe function should output with:\n    DataFrame: A pandas DataFrame after normalization.\n    Axes: A matplotlib Axes displaying a box plot for each column.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "from sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    scaler = MinMaxScaler()\n    df[df.columns] = scaler.fit_transform(df[df.columns])\n    plt.figure(figsize=(10, 5))\n    df.boxplot(grid=False, vert=False, fontsize=15)\n    return df, plt.gca()", "pass": true}
{"task_id": "45", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n    # Drop non-numeric columns\n    df = df.drop(columns=df.select_dtypes(exclude=np.number).columns)\n\n    # Replace missing values with column means\n    df = df.fillna(df.mean())\n\n    # Perform PCA\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(df)\n\n    # Create a new DataFrame with the principal components\n    principal_components_df = pd.DataFrame(principal_components, columns=['Component 1', 'Component 2'])\n\n    # Draw a scatter plot of the first two principal components\n    fig, ax = plt.subplots()\n    sns.scatterplot(x='Component 1', y='Component 2', data=principal_components_df, ax=ax)\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n\n    return principal_components_df, ax\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50], 'C': ['a', 'b', 'c', 'd', 'e']})", "problem": "Perform PCA on a DataFrame (excluding non-numeric columns) and draw a scatter plot of the first two main components. The principal columns should be name 'Component 1' and 'Component 2'. Missing values are replaced by column's average.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the first two principal components. The columns should be 'principal component 1' and 'principal component 2'.\n    Axes: A matplotlib Axes object representing the scatter plot. The xlabel should be 'principal component' and the ylabel 'principal component 2'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n    # Select only numeric columns\n    df_numeric = df.select_dtypes(include=[np.number])\n    # Replace missing values\n    df_numeric = df_numeric.fillna(df_numeric.mean(axis=0))\n    # Perform PCA\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(df_numeric)\n    principalDf = pd.DataFrame(\n        data=principalComponents,\n        columns=[\"Component 1\", \"Component 2\"],\n    )\n\n    # Plot scatter plot\n    ax = sns.scatterplot(data=principalDf, x=\"Component 1\", y=\"Component 2\")\n    plt.show()\n    return principalDf, ax", "pass": false}
{"task_id": "46", "program": "from scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df):\n    # Calculate z-scores for numeric columns\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    z_scores = df[numeric_cols].apply(zscore)\n\n    # Replace missing values with column means\n    z_scores = z_scores.fillna(z_scores.mean())\n\n    # Draw histograms for each numeric column\n    fig, axs = plt.subplots(ncols=len(numeric_cols), figsize=(15, 5))\n    for i, col in enumerate(numeric_cols):\n        z_scores[col].hist(bins=10, ax=axs[i])\n        axs[i].set_title(f'Histogram of {col}')\n\n    return z_scores, axs\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50], 'C': [100, 200, 300, 400, 500]})", "problem": "Calculate Z-scores for numeric columns in a DataFrame and draw a histogram for each column. - Missing values are replaced by the column's average. - The histograms are plotted with 10 bins.\nThe function should output with:\n    tuple:\n    1. pandas.DataFrame: A DataFrame with computed z-scores.\n    2. list: A list of Axes objects representing the histograms of the numeric columns.\nYou should write self-contained code starting with:\n```\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "from scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Fill missing values with column's average\n    df = df.fillna(df.mean(axis=0))\n    # Compute Z-scores\n    df = df.apply(zscore)\n    # Plot histograms for each numeric column\n    axes = df.hist(grid=False, bins=10, layout=(1, df.shape[1]))\n    plt.tight_layout()\n    return df, axes", "pass": false}
{"task_id": "47", "program": "from sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Standardize numeric columns\n    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns\n    scaler = StandardScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    # Replace missing values with column means\n    for col in numeric_cols:\n        df[col].fillna(df[col].mean(), inplace=True)\n\n    # Create heatmap of correlation matrix\n    corr_matrix = df.corr()\n    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n    plt.show()\n\n    return df, corr_matrix", "problem": "Standardize numeric columns in a DataFrame and return the heatmap of the correlation matrix. Missing values are replaced by the column's average.\nThe function should output with:\n    DataFrame: The pandas DataFrame after standardization.\n    Axes: A heatmap of the correlation matrix.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "from sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    scaler = StandardScaler()\n    df[df.columns] = scaler.fit_transform(df[df.columns])\n    plt.figure(figsize=(10, 5))\n    heatmap = sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\")\n    return df, heatmap", "pass": false}
{"task_id": "48", "program": "import time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n\n    pass\nimport time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n    \"\"\"\n    Generate n random Unix timestamps and convert them to strings formatted as UTC DATE_FORMAT.\n    Plot a histogram of the distribution of the generated timestamps.\n    If an output path is provided, save the histogram to the specified path.\n    Otherwise, display the plot.\n    The function should output with:\n        list: The list of n formatted timestamps.\n    \"\"\"\n    # Generate n random Unix timestamps\n    timestamps = [random.randint(0, int(time.time())) for _ in range(n)]\n\n    # Convert timestamps to strings formatted as UTC DATE_FORMAT\n    formatted_timestamps = [datetime.utcfromtimestamp(ts).strftime(DATE_FORMAT) for ts in timestamps]\n\n    # Plot a histogram of the distribution of the generated timestamps\n    plt.hist(timestamps, bins=50)\n    plt.xlabel(\"Unix Timestamp\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Generated Timestamps\")\n\n    # If an output path is provided, save the histogram to the specified path\n    if output_path is not None:\n        plt.savefig(output_path)\n    else:\n        plt.show()\n\n    return formatted_timestamps\nn = 1000\noutput_path = \"histogram.png\"", "problem": "Generate n random Unix timestamps and convert them to strings formatted as UTC DATE_FORMAT. Plot a histogram of the distribution of the generated timestamps. If an output path is provided, save the histogram to the specified path. Otherwise, display the plot.\nThe function should output with:\n    list: The list of n formatted timestamps.\nYou should write self-contained code starting with:\n```\nimport time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n```", "solution": "import time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n    timestamps = []\n    for _ in range(n):\n        timestamp = random.randint(0, int(time.time()))\n        formatted_time = datetime.utcfromtimestamp(timestamp).strftime(DATE_FORMAT)\n        timestamps.append(formatted_time)\n\n    plt.hist([datetime.strptime(t, DATE_FORMAT) for t in timestamps])\n\n    if output_path:\n        plt.savefig(output_path)\n    else:\n        plt.show()\n    return timestamps", "pass": true}
{"task_id": "49", "program": "from datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(timestamps):\n    \"\"\"\n    Convert a list of Unix timestamps to date objects, create a Pandas DataFrame, and draw a histogram.\n\n    Parameters\n    ----------\n    timestamps : list\n        A list of Unix timestamps.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A pandas DataFrame containing the original Unix timestamps and the converted datetime objects.\n    Axes\n        The Axes object of the histogram plot. The histogram will have 10 bins by default, representing the distribution of the datetime objects.\n\n    Raises\n    ------\n    ValueError\n        If the list of timestamps is empty.\n    \"\"\"\n    if not timestamps:\n        raise ValueError(\"Input list of timestamps is empty.\")\n\n    # Convert timestamps to datetime objects\n    datetimes = [datetime.fromtimestamp(timestamp) for timestamp in timestamps]\n\n    # Create a Pandas DataFrame\n    df = pd.DataFrame({\"Timestamp\": timestamps, \"Datetime\": datetimes})\n\n    # Draw a histogram\n    ax = df[\"Datetime\"].hist(bins=10)\n\n    return df, ax\ntimestamps = [1643230400, 1643230460, 1643230520, 1643230580, 1643230640]", "problem": "Convert a list of Unix timestamps to date objects, create a Pandas DataFrame, and draw a histogram. - The date format should be as DATE_FORMAT. - The DataFrame should have 'Timestamp' and 'Datetime' as column names. - If the list of timestamps is empty, raise a ValueError with the message \"Input list of timestamps is empty\".\nThe function should raise the exception for: ValueError(\"Input list of timestamps is empty.\"): If the list of timestamps is empty.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame containing the original Unix timestamps and the converted datetime objects.\n    Axes: The Axes object of the histogram plot. The histogram will have 10 bins by default, representing the distribution of the datetime objects.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n```", "solution": "from datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n    if not timestamps:\n        raise ValueError(\"Input list of timestamps is empty.\")\n    datetimes = [datetime.fromtimestamp(t).strftime(DATE_FORMAT) for t in timestamps]\n    df = pd.DataFrame({\"Timestamp\": timestamps, \"Datetime\": datetimes})\n    ax = plt.hist(pd.to_datetime(df[\"Datetime\"]))\n    plt.close()\n    return df, ax", "pass": false}
{"task_id": "50", "program": "from datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n    # Convert timestamp to datetime objects in different time zones\n    datetimes = [\n        datetime.fromtimestamp(timestamp, tz=pytz.timezone(tz))\n        for tz in TIMEZONES\n    ]\n\n    # Create a Pandas DataFrame with the datetime objects\n    df = pd.DataFrame(datetimes, columns=[\"Datetime\"])\n    df[\"Timezone\"] = TIMEZONES\n\n    # Draw a bar chart with the DataFrame\n    fig, ax = plt.subplots()\n    ax.bar(df[\"Timezone\"], df[\"Datetime\"])\n    ax.set_xlabel(\"Timezone\")\n    ax.set_ylabel(\"Datetime\")\n    ax.set_title(\"Datetime = f(Timezone)\")\n\n    return df, ax\ntimestamp = 1643230400", "problem": "Convert a Unix timestamp to date objects in different time zones, create a Pandas DataFrame, and draw a bar chart. - You should use the time zones mentionned in the constant TIMEZONES. - The date format should be as DATE_FORMAT. - The DataFrame should have 'Timezone' and 'Datetime' as column names. - The x-label of the bar plot should be set to 'Timezone' while the y-label should be set to 'Datetime'. - The plot title should be \"Datetime = f(Timezone)\"\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame containing the datetime in different timezones.\n    Axes: A matplotlib Axes object for the generated bar chart.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n```", "solution": "from datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n    datetimes = [\n        datetime.fromtimestamp(timestamp, pytz.timezone(tz)).strftime(DATE_FORMAT)\n        for tz in TIMEZONES\n    ]\n    df = pd.DataFrame({\"Timezone\": TIMEZONES, \"Datetime\": datetimes})\n    df[\"Datetime\"] = pd.to_datetime(df[\"Datetime\"])\n    ax = df.plot.bar(x=\"Timezone\", y=\"Datetime\", legend=False)\n    plt.ylabel(\"Timezone\")\n    plt.ylabel(\"Datetime\")\n    plt.title(\"Datetime = f(Timezone)\")\n    plt.close()\n    return df, ax", "pass": false}
{"task_id": "51", "program": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n\n    pass\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n    # Filter the dataframe based on the specified age and height conditions\n    filtered_df = df[(df['Age'] >= age) & (df['Height'] >= height)]\n\n    # If the filtered dataframe has less than 3 columns, add a column 'Cluster' with 0 for each row\n    if len(filtered_df.columns) < 3:\n        filtered_df['Cluster'] = 0\n    else:\n        # Otherwise, do a KMeans clustering (by Age and Height) with 3 clusters and add a column 'Cluster' to the dataframe which corresponds to the cluster index of the cluster to which each row belongs to\n        kmeans = KMeans(n_clusters=3, random_state=0).fit(filtered_df[['Age', 'Height']])\n        filtered_df['Cluster'] = kmeans.labels_\n\n    # Plot a scatter plot of the 'Age' and 'height' and colored by the cluster indices\n    fig, ax = plt.subplots()\n    ax.scatter(filtered_df['Age'], filtered_df['Height'], c=filtered_df['Cluster'])\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Height')\n    ax.set_title('KMeans Clustering based on Age and Height')\n\n    return filtered_df, ax", "problem": "Filters the input DataFrame based on specified 'Age' and 'Height' conditions and applies KMeans clustering. - If the filtered dataframe has less than 3  columns, add to it a column 'Cluster' with 0 for each row. - Otherwise, do a KMeans clustering (by Age and Height) with 3 clusters and add a column 'Cluster' to the dataframe which corresponds to the cluster index of the cluster to which each row belongs to. - Plot a scatter plot of the 'Age' and 'height' and colored by the cluster indices. - the xlabel should be 'Age', the ylabel 'Height' and the title 'KMeans Clustering based on Age and Height'.\nThe function should output with:\n    DataFrame: The filtered dataframe with the new column.\n    matplotlib.axes.Axes: The Axes object of the plotted data. If no KMeans was done, returns None.\nYou should write self-contained code starting with:\n```\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n```", "solution": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n    # Filter the DataFrame based on given conditions\n    selected_df = df[(df[\"Age\"] > age) & (df[\"Height\"] < height)].copy()\n\n    # Apply KMeans clustering only if there are at least 3 rows in the filtered data\n    if len(selected_df) >= 3:\n        kmeans = KMeans(n_clusters=3)\n        selected_df[\"Cluster\"] = kmeans.fit_predict(selected_df[[\"Age\", \"Height\"]])\n\n        # Visualize the clusters\n        plt.figure(figsize=(10, 5))\n        plt.scatter(selected_df[\"Age\"], selected_df[\"Height\"], c=selected_df[\"Cluster\"])\n        plt.xlabel(\"Age\")\n        plt.ylabel(\"Height\")\n        plt.title(\"KMeans Clustering based on Age and Height\")\n        ax = plt.gca()\n        return selected_df, ax\n    else:\n        selected_df[\"Cluster\"] = 0\n        return selected_df, None", "pass": false}
{"task_id": "52", "program": "import pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n\n    pass\nimport pandas as pd\nimport regex as re\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n    # Remove stopwords\n    text = re.sub(r'\\b(' + '|'.join(STOPWORDS) + r')\\b\\s*', '', text)\n\n    # Count word frequencies\n    word_freq = pd.Series(text.split()).value_counts()\n\n    return word_freq\ntext = \"The quick brown fox jumps over the lazy dog.\"", "problem": "Count the frequency of each word in a text after removing specific stopwords.\nThe function should output with:\n    Series: A pandas Series with word frequencies excluding the words in STOPWORDS list.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n```", "solution": "import pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n    words = re.findall(r\"\\b\\w+\\b\", text.lower())\n    words = [word for word in words if word not in STOPWORDS]\n    word_counts = pd.Series(words).value_counts().rename(None)\n    return word_counts", "pass": false}
{"task_id": "53", "program": "import pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n\n    pass\nimport pandas as pd\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n    # Extract data from text using regular expression\n    pattern = r\"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\"\n    matches = re.findall(pattern, text)\n\n    # Create a pandas DataFrame with extracted data\n    df = pd.DataFrame(matches, columns=COLUMN_NAMES)\n\n    # Plot age distribution using seaborn\n    sns.displot(df, x=\"Age\", kind=\"kde\")\n    plt.show()\n\n    return df\ntext = \"Name: John Doe, Email: john.doe@example.com, Age: 30, Country: USA\\nName: Jane Doe, Email: jane.doe@example.com, Age: 25, Country: Canada\\nName: Bob Smith, Email: bob.smith@example.com, Age: 40, Country: USA\"", "problem": "Extract data from a text and create a Pandas DataFrame. The text contains several lines, each formatted as 'Name: John Doe, Email: john.doe@example.com, Age: 30, Country: USA'. Plot the age distribution using seaborn. The data is extracted using the regular expression pattern: \"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\" and the resulting DataFrame has columns: ['Name', 'Email', 'Age', 'Country']\nThe function should output with:\n    DataFrame: A pandas DataFrame with extracted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n```", "solution": "import pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n    pattern = r\"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\"\n    matches = re.findall(pattern, text)\n    data = []\n    for match in matches:\n        data.append(match[:-1])\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df[\"Age\"] = df[\"Age\"].astype(int)\n    sns.histplot(data=df, x=\"Age\")\n    plt.show()\n    return df", "pass": false}
{"task_id": "54", "program": "import pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n\n    pass\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n    # Split the text into sentences\n    sentences = re.split(r'[.!?]', text)\n\n    # Remove empty sentences\n    sentences = [sentence for sentence in sentences if sentence.strip()]\n\n    # Create a document-term matrix\n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(sentences)\n\n    # Get the feature names\n    feature_names = vectorizer.get_feature_names()\n\n    # Create a pandas DataFrame with the document-term matrix\n    df = pd.DataFrame(dtm.toarray(), columns=feature_names)\n\n    return df\ntext = \"This is a sample text. It contains several sentences. Each sentence is separated by a period.\"", "problem": "Analyze a text by creating a document term matrix with CountVectorizer. The text contains several sentences, each separated by a period. Ignore empty sentences.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the document-term matrix. Its column names should be adapted from the vectorizer feature names.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n```", "solution": "import pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n    sentences = re.split(r\"\\.\\s*\", text)\n    sentences = [sentence for sentence in sentences if len(sentence.strip()) != 0]\n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(sentences)\n    df = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names_out())\n    return df", "pass": false}
{"task_id": "55", "program": "import re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n\n    pass\nimport re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n    # Split the text into sentences\n    sentences = re.split(r'[.!?]', text)\n\n    # Create a dictionary to store the sentence and its word count\n    sentence_dict = {}\n\n    # Iterate over the sentences and count the number of words\n    for i, sentence in enumerate(sentences):\n        # Remove any leading or trailing whitespace\n        sentence = sentence.strip()\n\n        # Remove any stopwords\n        sentence = ' '.join([word for word in sentence.split() if word.lower() not in STOPWORDS])\n\n        # Count the number of words in the sentence\n        word_count = len(sentence.split())\n\n        # Add the sentence and its word count to the dictionary\n        sentence_dict[f\"Sentence {i+1}\"] = word_count\n\n    # Create a pandas Series from the dictionary\n    series = pd.Series(sentence_dict)\n\n    return series\ntext = \"This is a sample text. It has multiple sentences. Each sentence should be counted separately.\"", "problem": "Given a text as input, the function should split it into multiple sentences and build a dictionary where each key is associated with a sentence and the corresponding value is the number of words in the sentence. The function returns a pandas Series built from the dictionary. - The keys of the dictionary (which correspond to the Index of the pandas Series) should be named \"Sentence 1\", \"Sentence 2\" etc. - When counting the words in a sentence, do not consider those included in the constant STOPWORDS. - Do not consider empty sentences.\nThe function should output with:\n    pandas.core.series.Series: A pandas Series each sentence and its number of words that are not in STOPWORDS.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n```", "solution": "import re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n    sentences = re.split(r\"\\.\\s*\", text)\n    sentence_counts = {}\n\n    for i, sentence in enumerate(sentences):\n        if sentence.strip() == \"\":\n            continue\n        words = re.split(r\"\\s+\", sentence.lower())\n        words = [word for word in words if word not in STOPWORDS]\n        sentence_counts[f\"Sentence {i+1}\"] = len(words)\n\n    sentence_counts = pd.Series(sentence_counts)\n    return sentence_counts", "pass": false}
{"task_id": "56", "program": "import pandas as pd\nimport regex as re\ndef task_func(text):\n\n    pass\nimport pandas as pd\nimport re\ndef task_func(text):\n    # Use regular expressions to extract the score and category from each line\n    pattern = r\"Score: (\\d+), Category: (\\w+)\"\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples from the matches\n    data = [(score, category) for score, category in matches]\n\n    # Create a Pandas DataFrame from the list of tuples\n    df = pd.DataFrame(data, columns=[\"Score\", \"Category\"])\n\n    # Convert the scores to integers\n    df[\"Score\"] = df[\"Score\"].astype(int)\n\n    return df\ntext = \"Score: 85, Category: Math\\nScore: 90, Category: Science\\nScore: 75, Category: English\"", "problem": "Extract data from a text and create a Pandas DataFrame. The text contains several lines, each formatted as 'Score: 85, Category: Math'. Make sure to convert the scores in integer.\nThe function should output with:\n    DataFrame: A pandas DataFrame with extracted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\ndef task_func(text):\n```", "solution": "import pandas as pd\nimport regex as re\ndef task_func(text):\n    pattern = r\"Score: (.*?), Category: (.*?)(\\n|$)\"\n    matches = re.findall(pattern, text)\n    data = [\n        match[:2] for match in matches\n    ]  # Extracting only the score and category from each match\n    df = pd.DataFrame(data, columns=[\"Score\", \"Category\"])\n    df[\"Score\"] = df[\"Score\"].astype(int)\n    return df", "pass": false}
{"task_id": "57", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n    # Read the CSV file into a pandas DataFrame\n    df = pd.read_csv(csv_file_path)\n\n    # Compute the correlation matrix\n    corr_matrix = df.corr()\n\n    # Round each correlation to 2 decimals\n    corr_matrix = corr_matrix.round(2)\n\n    # Create a heatmap of the correlation matrix\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    # Set the title of the plot\n    ax.set_title(title)\n\n    # Return the correlation dataframe and the Axes object\n    return corr_matrix, ax\ncsv_file_path = \"data.csv\"\ntitle = \"Correlation Matrix\"", "problem": "Create a heatmap of the correlation matrix of a DataFrame built from a CSV file. Round each correlation to 2 decimals.\nThe function should output with:\n    DataFrame: correlation dataframe where each row and each column correspond to a specific column.\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n    data = pd.read_csv(csv_file_path)\n    corr = data.corr().round(2)\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(corr, annot=True, cmap='coolwarm', cbar=True)\n    plt.title(title)\n    return corr, plt.gca()", "pass": true}
{"task_id": "58", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n    # Generate random samples from the normal distribution\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a histogram of the samples\n    hist, bins = np.histogram(samples, bins=50, density=True)\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the histogram\n    ax.bar(bins[:-1], hist, width=0.8*(bins[1]-bins[0]), align='center', alpha=0.5)\n\n    # Plot the normal distribution\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, y, label='Normal Distribution')\n\n    # Set the title and labels\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n\n    # Show the plot\n    plt.show()\n\n    return fig\nmu = 0\nsigma = 1\nnum_samples = 1000", "problem": "Display a plot showing a normal distribution with a given mean and standard deviation and overlay a histogram of randomly generated samples from this distribution. The plot title should be 'Normal Distribution'.\nThe function should output with:\n    fig (matplotlib.figure.Figure): The generated figure. Useful for testing purposes.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2)\n\n    ax.set_title('Normal Distribution')\n    plt.show()\n    return fig", "pass": true}
{"task_id": "59", "program": "import wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n\n    pass\nimport wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n    # Get the text of the Wikipedia page\n    page = wikipedia.page(page_title)\n    text = page.content\n\n    # Create a WordCloud object\n    wordcloud = WordCloud(width=800, height=400, random_state=21, max_font_size=110).generate(text)\n\n    # Plot the WordCloud\n    fig, ax = plt.subplots(figsize=(8, 4), subplot_kw={'aspect': 'equal'})\n    ax.imshow(wordcloud, interpolation='bilinear')\n    ax.axis(\"off\")\n\n    return ax", "problem": "Create a word cloud from the text of a Wikipedia page.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted data. Is None if there is no wikipedia page with the title given as input.\nYou should write self-contained code starting with:\n```\nimport wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n```", "solution": "import wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n    try:\n        text = wikipedia.page(page_title).content\n    except Exception as e:\n        print(f\"An error occured: {e}\")\n        return None\n    wordcloud = WordCloud().generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    ax = plt.gca()\n    return ax", "pass": false}
{"task_id": "60", "program": "import json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n\n    pass\nimport json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n    # Convert the list of dictionaries to a Pandas DataFrame\n    df = pd.DataFrame(result)\n\n    # Save the DataFrame to a CSV file\n    df.to_csv(csv_file_path, index=False)\n\n    # Save the DataFrame to a JSON file\n    df.to_json(json_file_path, orient=\"records\")\n\n    # Return None\n    return None", "problem": "Save the list of dictionaries provided in the 'result' parameter to a CSV file (without index) and a JSON file.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n```", "solution": "import json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n    # Save to CSV\n    df = pd.DataFrame(result)\n    df.to_csv(csv_file_path, index=False)\n\n    # Save to JSON\n    with open(json_file_path, 'w') as f:\n        json.dump(result, f, indent=4)\n\n    return None", "pass": true}
{"task_id": "61", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    # Extract the 'from_user' key from the input list of dictionaries\n    from_user = [d['from_user'] for d in result]\n\n    # Round each square root value to 2 decimals\n    from_user = [round(np.sqrt(x), 2) for x in from_user]\n\n    # Create a plot of the square root values\n    fig, ax = plt.subplots()\n    ax.plot(from_user)\n\n    # Annotate the plot with the current date and time\n    ax.set_title(PLOT_TITLE)\n    ax.set_xlabel(X_LABEL)\n    ax.set_ylabel(Y_LABEL)\n    ax.set_title(datetime.now().strftime(TIME_FORMAT))\n\n    # Return the plot\n    return from_user, ax\nresult = [{'from_user': 1}, {'from_user': 4}, {'from_user': 9}, {'from_user': 16}]", "problem": "Plots the square root function for values associated with the key 'from_user' from the input list of dictionaries. Annotates the graph with the current date and time. - Round each square root value to 2 decimals. Constants: - PLOT_TITLE: Title of the plot (default is 'Square root plot'). - X_LABEL: Label for the x-axis (default is 'x'). - Y_LABEL: Label for the y-axis (default is 'sqrt(x)'). - TIME_FORMAT: Format for displaying the current date and time (default is '%Y-%m-%d %H:%M:%S').\nThe function should output with:\n    numpy.ndarray: list of square values associated with the key 'from_user' from the input list of dictionaries.\n    matplotlib.axes.Axes: plot of square root values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    # Extract the 'from_user' values\n    from_user_values = [d['from_user'] for d in result if 'from_user' in d]\n\n    # Calculate the square roots\n    square_roots = np.round(np.sqrt(from_user_values), 2)\n\n    # Plot the square root function\n    plt.figure()\n    plt.plot(from_user_values, square_roots)\n    plt.title(PLOT_TITLE)\n    plt.xlabel(X_LABEL)\n    plt.ylabel(Y_LABEL)\n\n    # Annotate the plot with the current date and time\n    now = datetime.now()\n    now_str = now.strftime(TIME_FORMAT)\n    plt.annotate(now_str, (0.05, 0.95), xycoords='axes fraction')\n    ax = plt.gca()\n    return square_roots, ax", "pass": false}
{"task_id": "62", "program": "import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n\n    pass\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n    \"\"\"\n    Draws a histogram of the \"from_user\" values in the provided result. The color of the histogram bars is selected at random from the provided colors list.\n    The function should output with:\n        None: The function displays the histogram and does not return any value.\n    \"\"\"\n    # Extract the \"from_user\" values from the result\n    from_users = [row[\"from_user\"] for row in result]\n\n    # Select a random color from the provided colors list\n    color = random.choice(colors)\n\n    # Create a histogram of the \"from_user\" values\n    sns.histplot(from_users, color=color)\n\n    # Display the histogram\n    plt.show()\n\n    # Return None\n    return None", "problem": "Draws a histogram of the \"from_user\" values in the provided result. The color of the histogram bars is selected at random from the provided colors list.\nThe function should output with:\n    None: The function displays the histogram and does not return any value.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n```", "solution": "import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n    from_user_values = [d['from_user'] for d in result if 'from_user' in d]\n    color = random.choice(colors)\n    plt.figure()\n    sns.histplot(from_user_values, color=color)\n    plt.show()", "pass": false}
{"task_id": "63", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n    # Create a DataFrame with 'Car' and 'Color' columns\n    df = pd.DataFrame(car_dict.items(), columns=['Car', 'Color'])\n\n    # Visualize the distribution of vehicle colors in a bar chart\n    ax = df.plot.bar(x='Car', y='Color', title='Distribution of Vehicle Colors')\n\n    # Return the DataFrame and Axes object\n    return df, ax\ncar_dict = {'Toyota': 'Red', 'Ford': 'Blue', 'Honda': 'Yellow', 'Tesla': 'Black', 'BMW': 'White'}", "problem": "With a dictionary of cars as keys and their colors as values, create a DataFrame and visualize the distribution of vehicle colors in a bar chart. - The columns of the dataframe should be 'Car' and 'Color'. - The plot title should be 'Distribution of Vehicle Colors'.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with car brands and their colors.\n    Axes: The Axes object of the bar chart visualizing the distribution of vehicle colors.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n    car_data = list(car_dict.items())\n    df = pd.DataFrame(car_data, columns=['Car', 'Color'])\n    # Create the bar chart visualization\n    color_counts = df[\"Color\"].value_counts()\n\n    figure = plt.figure()\n    # creating the bar plot\n    plt.bar(color_counts.keys(), color_counts.values, color=\"maroon\", width=0.4)\n\n    plt.xlabel(\"Color\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of Vehicle Colors\")\n    plt.show()\n    ax = plt.gca()\n\n    return df, ax", "pass": false}
{"task_id": "64", "program": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    # Convert the list of lists to a pandas DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Group the data by col1 and col2, and count the number of occurrences of each value in col3\n    df_grouped = df.groupby(['col1', 'col2'])['col3'].value_counts().unstack()\n\n    # Create a heatmap of the data\n    ax = sns.heatmap(df_grouped, annot=True, cmap='Blues')\n\n    # Return the DataFrame and the heatmap\n    return df, ax\ndata = [\n    ['A', 'a', 1],\n    ['A', 'a', 2],\n    ['A', 'b', 3],\n    ['B', 'a', 4],\n    ['B', 'b', 5],\n    ['B', 'b', 6],\n]", "problem": "You are given a list of elements. Each element is a list with the same length as COLUMNS, representing one row a dataframe df to create. Visualize the distribution of different values in a column \"col3\" of a pandas DataFrame df, grouped by \"col1\" and \"col2,\" using a heatmap.\nThe function should output with:\n    tuple:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The heatmap visualization.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n    analyzed_df = analyzed_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n    ax = sns.heatmap(analyzed_df, annot=True)\n    plt.show()\n    return analyzed_df, ax", "pass": false}
{"task_id": "65", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    x_label = '-'.join(COLUMNS[:-1])\n    y_label = COLUMNS[-1]\n    ax = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].plot(kind='line', x=x_label, y=y_label)\n    return df, ax\ndata = [\n    ['A', 1, 2],\n    ['B', 3, 4],\n    ['C', 5, 6],\n    ['A', 7, 8],\n    ['B', 9, 10],\n    ['C', 11, 12]\n]", "problem": "You are given a list of elements. Each element is a list with the same length as COLUMNS, representing one row a dataframe df to create. Draw a line chart with unique values in the COLUMNS[-1] of the pandas DataFrame \"df\", grouped by the rest of the columns. - The x-label should be set to the string obtained by joining all the column names (except the last one) by the character \"-\". - The y-label should be set to the last column name.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The Axes object of the plotted line chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n\n    # Adjusting the plotting logic\n    fig, ax = plt.subplots()\n    ax.plot(analyzed_df[COLUMNS[:-1]].astype(str).agg('-'.join, axis=1), analyzed_df[COLUMNS[-1]])\n    ax.set_xlabel('-'.join(COLUMNS[:-1]))\n    ax.set_ylabel(COLUMNS[-1])\n\n    return analyzed_df, ax", "pass": false}
{"task_id": "66", "program": "import pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    # Build a pandas DataFrame by using list of elements.\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Create a new dataframe by grouping the values in the column 'col3' by ['col1', 'col2'].\n    df_grouped = df.groupby(['col1', 'col2'])['col3'].agg('mean')\n\n    # Reset the index of the newly created dataframe.\n    df_grouped.reset_index(inplace=True)\n\n    # Create a distribution plot of the 'col3' column of the previous dataframe using seaborn.\n    ax = sns.displot(df_grouped, x='col3', kind='kde')\n\n    # Set the xlabel (label for the x-axis) to the 'col3'.\n    ax.set_xlabel('col3')\n\n    return df_grouped, ax\ndata = [\n    ['A', 'B', 1],\n    ['A', 'B', 2],\n    ['A', 'C', 3],\n    ['B', 'C', 4],\n    ['B', 'C', 5],\n    ['B', 'D', 6],\n    ['C', 'D', 7],\n    ['C', 'D', 8],\n    ['C', 'D', 9],\n]", "problem": "You are given a list of elements. Each element of the list is a list of 3 values. Use this list of elements to build a dataframe with 3 columns 'col1', 'col2' and 'col3' and create a distribution of chart of the different values of \"col3\" grouped by \"col1\" and \"col2\" using seaborn. The function's logic is as follows: 1. Build a pandas DataFrame by using list of elements. Make sure to name the columns as 'col1', 'col2' and 'col3', the constant COLUMNS is provided for this purpose. 2. Create a new dataframe by grouping the values in the column 'col3' by ['col1', 'col2']. 3. Reset the index of the newly created dataframe. This dataframe is the first element of the output tuple. 4. Create a distribution plot of the 'col3' column of the previous dataframe using seaborn. This plot is the second and last element of the output tuple. - The xlabel (label for the x-axis) is set to the 'col3'.\nThe function should output with:\n    tuple:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The seaborn plot object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n    ax = sns.distplot(analyzed_df[COLUMNS[-1]])\n\n    return analyzed_df, ax", "pass": false}
{"task_id": "67", "program": "import pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n\n    pass\nimport pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n    \"\"\"\n    Look for all ascendingly sorted files in a directory that start with a given pattern, and return the number of files against their size.\n    You should return a pandas DataFrame with 2 columns 'File' and 'Size' with correspond to the file name and the size respectively.\n\n    Args:\n        dir_path (str): The path to the directory to search in.\n        pattern (str, optional): The pattern to match the file names against. Defaults to '^EMP'.\n\n    Returns:\n        pandas.DataFrame: A pandas DataFrame with file names and their sizes.\n    \"\"\"\n    # Get a list of all files in the directory\n    files = os.listdir(dir_path)\n\n    # Filter the files to only include those that match the pattern\n    files = [f for f in files if re.match(pattern, f)]\n\n    # Create a dictionary to store the file names and sizes\n    file_sizes = {}\n\n    # Iterate over the files and calculate their sizes\n    for file in files:\n        file_path = os.path.join(dir_path, file)\n        file_size = os.path.getsize(file_path)\n        file_sizes[file] = file_size\n\n    # Create a pandas DataFrame with the file names and sizes\n    df = pd.DataFrame(file_sizes.items(), columns=['File', 'Size'])\n\n    return df", "problem": "Look for all ascendingly sorted files in a directory that start with a given pattern, and return the number of files against their size. You should return a pandas DataFrame with 2 columns 'File' and 'Size' with correspond to the file name and the size respectively.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame with file names and their sizes.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n```", "solution": "import pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n    file_sizes = []\n    for file in sorted(os.listdir(dir_path)):\n        if re.match(pattern, file):\n            file_sizes.append((file, os.path.getsize(os.path.join(dir_path, file))))\n\n    df = pd.DataFrame(file_sizes, columns=['File', 'Size'])\n    return df", "pass": true}
{"task_id": "68", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(data)\n\n    # Filter the lines in which the employee ID begins with the prefix\n    df = df[df['Employee ID'].str.startswith(emp_prefix)]\n\n    # Draw a histogram of the 'Age' column of the filtered data\n    ax = sns.histplot(df['Age'])\n\n    return df, ax", "problem": "Load a CSV file into a DataFrame, filter the lines in which the employee ID begins with a prefix, and draw a histogram of its age.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the filtered data, containing the columns 'Employee ID' and 'Age'.\n    Axes: A histogram plot of the 'Age' column of the filtered data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n    # Load data and filter\n    df = pd.read_csv(data)\n    df = df[df['Employee ID'].str.startswith(emp_prefix)]\n\n    # Plot histogram\n    ax = sns.histplot(data=df, x='Age', kde=True)\n\n    return df, ax", "pass": true}
{"task_id": "69", "program": "import random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n\n    pass\nimport random\nimport matplotlib.pyplot as plt\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n    # Extract the number of employees and department code from the dictionary\n    num_employees = dict1['num_employees']\n    department_code = dict1['department_code']\n\n    # Generate random salaries for each employee\n    salaries = [random.randint(SALARY_RANGE[0], SALARY_RANGE[1]) for _ in range(num_employees)]\n\n    # Create a histogram of the salaries\n    fig, ax = plt.subplots()\n    ax.hist(salaries, bins=10, range=SALARY_RANGE)\n    ax.set_title(f'Salary Distribution in {department_code} Department')\n    ax.set_xlabel('Salary')\n    ax.set_ylabel('Number of Employees')\n\n    return ax\ndict1 = {'num_employees': 10, 'department_code': 'EMPXX'}", "problem": "Analyze the salary distribution within the department with code 'EMPXX'. Generate random salaries for each employee and create a histogram. - For the department of interest, randomly generate as many salaries as its number of employees. - Make sure that the salary is within SALARY_RANGE. - The histogram title should be 'Salary Distribution in EMPXX Department' - The x-label should be set to 'Salary' - The y-label should be set to 'Number of Employees'\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object representing the histogram.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n```", "solution": "import random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n    emp_salaries = []\n\n    for prefix, num_employees in dict1.items():\n        if not prefix.startswith('EMPXX'):\n            continue\n\n        for _ in range(num_employees):\n            salary = random.randint(*SALARY_RANGE)\n            emp_salaries.append(salary)\n\n    plt.hist(emp_salaries, bins=10, alpha=0.5)\n    plt.title('Salary Distribution in EMPXX Department')\n    plt.xlabel('Salary')\n    plt.ylabel('Number of Employees')\n    return plt.gca()", "pass": false}
{"task_id": "70", "program": "import pandas as pd\nimport json\nimport numpy as np\n# Constants\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n\n    pass\nimport pandas as pd\nimport json\nimport numpy as np\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n    \"\"\"\n    Load e-mail data from a JSON file, convert it into a Pandas DataFrame, calculate the sum and mean of the list associated with each e-mail, and then record those values. Additionally, it plots the sum and mean values for each email. If there is no e-mail data, return an empty dataframe with the right columns (['email', 'list', 'sum', 'mean']), and None as the plot.\n\n    Args:\n        json_file (str): The path to the JSON file containing the e-mail data.\n\n    Returns:\n        tuple: A tuple containing:\n            DataFrame: A pandas DataFrame with columns ['email', 'list', 'sum', 'mean'].\n            Axes: The Axes object for the plot. None if the dataframe is empty.\n    \"\"\"\n    # Load the JSON file\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    # Convert the data to a Pandas DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Calculate the sum and mean of the list associated with each e-mail\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n\n    # Plot the sum and mean values for each email\n    fig, ax = plt.subplots()\n    ax.plot(df['sum'], label='Sum')\n    ax.plot(df['mean'], label='Mean')\n    ax.legend()\n\n    return df, ax", "problem": "Load e-mail data from a JSON file, convert it into a Pandas DataFrame, calculate the sum and mean of the list associated with each e-mail, and then record those values. Additionally, it plots the sum and mean values for each email. If there is no e-mail data, return an empty dataframe with the right columns (['email', 'list', 'sum', 'mean']), and None as the plot.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with columns ['email', 'list', 'sum', 'mean'].\n    Axes: The Axes object for the plot. None if the dataframe is empty.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\nimport numpy as np\n# Constants\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n```", "solution": "import pandas as pd\nimport json\nimport numpy as np\n# Constants\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n    with open(json_file, 'r') as file:\n        email_data = json.load(file)\n    if not email_data :\n        return pd.DataFrame([], columns = COLUMNS + [\"sum\", \"mean\"]), None\n\n    df = pd.DataFrame(email_data, columns=COLUMNS)\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n\n    ax = df[['sum', 'mean']].plot(kind='bar')\n\n    return df, ax", "pass": false}
{"task_id": "71", "program": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n    # Load the CSV file into a Pandas DataFrame\n    df = pd.read_csv(csv_file)\n\n    # Convert the list column to a list of integers\n    df['list'] = df['list'].apply(ast.literal_eval)\n\n    # Calculate the sum, mean, and standard deviation of the list column\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['std'] = df['list'].apply(np.std)\n\n    # Draw a histogram of the mean values\n    ax = sns.histplot(df['mean'], x='mean', y='count')\n\n    # Return the DataFrame and the histogram plot\n    return df, ax", "problem": "Load e-mail data from a CSV file, convert it into a Pandas DataFrame, and calculate the sum, mean, and standard deviation of the list associated with each e-mail. Additionally, this function will draw a histogram of the mean values and return both the DataFrame and the histogram plot.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    DataFrame: A pandas DataFrame with columns 'email', 'list', 'sum', 'mean', and 'std'.\n    Axes: A histogram plot of the mean values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    df['list'] = df['list'].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['std'] = df['list'].apply(np.std)\n    plot = sns.histplot(df['mean'], kde=True)\n    return df, plot", "pass": false}
{"task_id": "72", "program": "import pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n\n    pass\nimport pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n    # Get the file with the longest filename\n    csv_files = [f for f in os.listdir(directory) if f.endswith('.csv')]\n    if not csv_files:\n        return None, None\n    csv_file = max(csv_files, key=len)\n\n    # Load the data from the CSV file\n    data = pd.read_csv(os.path.join(directory, csv_file))\n\n    # Convert the list column to a list of integers\n    data['list'] = data['list'].apply(ast.literal_eval)\n\n    # Calculate the sum, mean, and median of the list column\n    data['sum'] = data['list'].apply(sum)\n    data['mean'] = data['list'].apply(np.mean)\n    data['median'] = data['list'].apply(np.median)\n\n    # Draw a histogram of the median\n    ax = data['median'].hist()\n\n    return data, ax", "problem": "Traverse a directory for CSV files a get the file with the longest filename. From that CSV file, load e-mail data, convert it into a Pandas DataFrame, calculate the sum, mean and median of the list associated with each e-mail, and then draw a histogram of the median. - The column names of each CSV files are 'email' and 'list'. - The column 'list' contains a string representation of a list. It should be converted before usage. - If there is not csv file in the directory, return an empty dataframe with the columns expected. - If there is not csv file in the directory, return None instead of an empty plot.\nThe function should output with:\n    pandas.DataFrame : DataFrame containing the data from the CSV file with the longest filename augmented with the columns 'sum', 'mean' and 'median'.\n    matplotlib.axes._axes.Axes : Histogram of the median. None if there is no data to plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n```", "solution": "import pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n    name = None\n    for filename in os.listdir(directory):\n        if filename.endswith('.csv'):\n            if name is None :\n                name = filename\n            else :\n                name = filename if len(filename) > len(name) else name\n    if name is None :\n        return pd.DataFrame({}, columns = ['email', 'list'] + ['sum', 'mean', 'median']), None\n\n    df = pd.read_csv(os.path.join(directory, name))\n    df[\"list\"] = df[\"list\"].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['median'] = df['list'].apply(np.median)\n\n    return df, df[\"median\"].hist()", "pass": false}
{"task_id": "73", "program": "import pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n\n    pass\nimport pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_file)\n    c = conn.cursor()\n\n    # Load the email data into a Pandas DataFrame\n    df = pd.read_sql_query(\"SELECT * FROM EmailData\", conn)\n\n    # Convert the list column to a list\n    df[\"list\"] = df[\"list\"].apply(ast.literal_eval)\n\n    # Calculate the sum, mean, and variance of the list for each email\n    df[\"sum\"] = df[\"list\"].apply(sum)\n    df[\"mean\"] = df[\"list\"].apply(np.mean)\n    df[\"var\"] = df[\"list\"].apply(np.var)\n\n    # Create a bar chart of the sum, mean, and variance\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df[\"sum\"], label=\"Sum\")\n    ax.bar(df.index, df[\"mean\"], label=\"Mean\")\n    ax.bar(df.index, df[\"var\"], label=\"Variance\")\n    ax.set_xlabel(\"Email\")\n    ax.set_ylabel(\"Value\")\n    ax.legend()\n\n    # Return the DataFrame and the Axes object\n    return df, ax", "problem": "Load e-mail data from an SQLite database and convert it into a Pandas DataFrame. Calculate the sum, mean, and variance of the list associated with each e-mail and then record these values. - The function expects the SQLite database to have a table named \"EmailData\" with columns 'email' and 'list'. - The column 'list' contains a string representation of the list. It should be converted before usage. - The function will return a DataFrame with additional columns 'sum', 'mean', and 'var' representing the calculated sum, mean, and variance respectively for each e-mail.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with email data including the calculated sum, mean, and variance.\n    Axes: A matplotlib Axes object representing the plotted bar chart of sum, mean, and variance.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n```", "solution": "import pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(\"SELECT * FROM EmailData\", conn)\n    df[\"list\"] = df[\"list\"].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['var'] = df['list'].apply(np.var)\n\n    ax = df[['sum', 'mean', 'var']].plot(kind='bar')\n    plt.show()\n\n    return df, ax", "pass": true}
{"task_id": "74", "program": "import socket\nimport requests\ndef task_func(host):\n\n    pass\nimport socket\nimport requests\ndef task_func(host):\n    if not host:\n        raise ValueError(\"Host is required\")\n\n    try:\n        ip_address = socket.gethostbyname(host)\n    except socket.gaierror:\n        raise ValueError(\"Invalid hostname\")\n\n    try:\n        response = requests.get(f\"http://ipinfo.io/{ip_address}\")\n        response.raise_for_status()\n    except requests.exceptions.ConnectionError:\n        raise ConnectionError(\"Error connecting to geolocation service\")\n\n    return response.json()", "problem": "This function resolves the IP address of the given host and then uses the IP address to fetch geolocation information from the ipinfo.io API. The function is robust against various common errors, such as invalid hostnames, network issues, or problems with the geolocation service.\nThe function should raise the exception for: ValueError: If 'host' is None or an empty string. ConnectionError: If there is a problem connecting to the geolocation service.\nThe function should output with:\n    dict: A dictionary containing the IP address and geolocation information if successful.\nYou should write self-contained code starting with:\n```\nimport socket\nimport requests\ndef task_func(host):\n```", "solution": "import socket\nimport requests\ndef task_func(host):\n    if not host:\n        raise ValueError(\"Host must be a non-empty string.\")\n\n    try:\n        # Fetch IP address\n        ip_address = socket.gethostbyname(host)\n\n        # Fetch geolocation\n        response = requests.get(f\"https://ipinfo.io/{ip_address}\")\n        response.raise_for_status()\n        geolocation = response.json()\n\n        return {\n            'ip_address': ip_address,\n            'geolocation': geolocation\n        }\n    except (socket.gaierror, requests.HTTPError) as e:\n        raise ConnectionError(f\"Failed to retrieve information for {host}: {e}\")", "pass": false}
{"task_id": "75", "program": "import pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n    \"\"\"\n    Appends randomly generated sales data for specified fruits over a given range of days to a DataFrame, and returns a seaborn boxplot of the sales.\n\n    Args:\n        df (pd.DataFrame): The DataFrame to append sales data to.\n        fruits (list[str]): The list of fruits to generate sales data for.\n        days (int): The number of days to generate sales data for.\n        seed (int): The random seed to use for generating sales data.\n        sales_lower_bound (int): The lower bound of the sales data.\n        sales_upper_bound (int): The upper bound of the sales data.\n\n    Returns:\n        Tuple[pd.DataFrame, sns.axisgrid.FacetGrid]: Updated DataFrame with sales data and a seaborn boxplot of the sales.\n\n    Raises:\n        TypeError: If 'df' is not a pandas DataFrame.\n        ValueError: If 'df' is not empty or if 'sales_lower_bound' is not less than 'sales_upper_bound'.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"'df' must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"'df' must not be empty.\")\n    if sales_lower_bound >= sales_upper_bound:\n        raise ValueError(\"'sales_lower_bound' must be less than 'sales_upper_bound'.\")\n\n    # Generate random sales data\n    if fruits is None:\n        fruits = [\"apple\", \"banana\", \"orange\"]\n    if days is None:\n        days = 10\n    if seed is None:\n        seed = 42\n    np.random.seed(seed)\n    sales_data = np.random.randint(sales_lower_bound, sales_upper_bound, size=(days, len(fruits)))\n\n    # Append sales data to DataFrame\n    df_sales = pd.DataFrame(sales_data, columns=fruits, index=pd.date_range(start=\"2022-01-01\", periods=days, freq=\"D\"))\n    df = df.append(df_sales)\n\n    # Create seaborn boxplot of sales\n    g = sns.boxplot(data=df, x=\"fruit\", y=\"sales\", hue=\"date\")\n\n    return df, g\ndf = pd.DataFrame(columns=[\"fruit\", \"sales\", \"date\"])", "problem": "Appends randomly generated sales data for specified fruits over a given range of days to a DataFrame, and returns a seaborn boxplot of the sales.\nThe function should raise the exception for: TypeError: If 'df' is not a pandas DataFrame. ValueError: If 'df' is not empty or  If 'sales_lower_bound' is not less than 'sales_upper_bound'.\nThe function should output with:\n    Tuple[pd.DataFrame, sns.axisgrid.FacetGrid]: Updated DataFrame with sales data and a seaborn boxplot of the sales.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n    if not df.empty:\n        raise ValueError(\"Input DataFrame must be empty\")\n    if sales_lower_bound >= sales_upper_bound:\n        raise ValueError(\"sales_lower_bound must be less than sales_upper_bound\")\n\n    if fruits is None:\n        fruits = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry']\n    if days is None:\n        # Set days to range from January 1, 2024, to January 7, 2024\n        days = [datetime(2024, 1, 1) + timedelta(days=x) for x in range(7)]\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    data = list(itertools.product(fruits, days))\n    sales_data = pd.DataFrame(data, columns=['Fruit', 'Day'])\n    sales_data['Sales'] = np.random.randint(sales_lower_bound, sales_upper_bound, size=len(data))\n\n    result_df = pd.concat([df, sales_data])\n    plot = sns.boxplot(x='Fruit', y='Sales', data=result_df)\n\n    return result_df, plot", "pass": false}
{"task_id": "76", "program": "import random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n\n    pass\nimport random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n    \"\"\"\n    This function creates a random session key comprising letters and digits with a specific length of 20, then sets this key in a cookie on an HttpResponse object with the specified expiration time.\n    Note that: The function set the response content to \"Session key generated successfully.\" if the session key is valid.\n    The function should raise the exception for: ValueError: If the session key does not contain both letters and digits or the session key length is not equal to 20.\n    The function should output with:\n        django.http.HttpResponse: A Django HttpResponse with the session key set in a cookie.\n    \"\"\"\n    # Generate a random session key\n    session_key = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(20))\n\n    # Check if the session key contains both letters and digits\n    if not any(c.isalpha() for c in session_key) or not any(c.isdigit() for c in session_key):\n        raise ValueError(\"Session key must contain both letters and digits\")\n\n    # Set the session key in a cookie on an HttpResponse object\n    response = HttpResponse(\"Session key generated successfully.\")\n    response.set_cookie(\"session_key\", session_key, expires=session_expire_time)\n\n    return response", "problem": "This function creates a random session key comprising letters and digits with a specific length of 20, then sets this key in a cookie on an HttpResponse object with the specified expiration time.\nNote that: The function set the response content to \"Session key generated successfully.\" if the session key is valid.\nThe function should raise the exception for: ValueError: If the session key does not contain both letters and digits or the session key length is not equal to 20.\nThe function should output with:\n    django.http.HttpResponse: A Django HttpResponse with the session key set in a cookie.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n```", "solution": "import random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n    session_key = ''.join(random.choices(string.ascii_letters + string.digits, k=20))\n    \n    has_digit = any(char.isdigit() for char in session_key)\n    has_letter = any(char.isalpha() for char in session_key)\n    if not (has_digit and has_letter or len(session_key)!=20):\n        raise ValueError(\"Session key should contain both letters and digits\")\n\n    response = HttpResponse('Session key generated successfully.')\n    response.set_cookie('session_key', session_key, max_age=session_expire_time)\n    return response", "pass": false}
{"task_id": "77", "program": "import hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n\n    pass\nimport hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n    try:\n        username = data['username']\n        password = data['password']\n    except KeyError:\n        return HttpResponseBadRequest('Bad Request.')\n    try:\n        password_hash = base64.b64decode(password).decode()\n    except (binascii.Error, UnicodeDecodeError):\n        return HttpResponseBadRequest('Bad Request.')\n    try:\n        password_hash = hashlib.sha256(password_hash.encode()).hexdigest()\n    except ValueError:\n        return HttpResponseBadRequest('Bad Request.')\n    if username == 'admin' and password_hash == '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8':\n        return HttpResponse('Login successful.', status=400)\n    else:\n        return HttpResponse('Login failed.', status=401)", "problem": "This method is designed to handle the authentication process in a web application context. It expects input in the form of a dictionary with 'username' and 'password' keys. The password is expected to be a base64-encoded SHA-256 hash. The method decodes and authenticates these credentials against predefined values (for demonstration purposes, it checks if the username is 'admin' and the password hash matches the hash of 'password'). Based on the authentication result, it returns an appropriate HTTP response. >>> data = {'username': 'admin', 'password': base64.b64encode(hashlib.sha256('wrongpassword'.encode()).digest()).decode()} >>> response = task_func(data) >>> response.status_code == 401 and 'Login failed.' in response.content.decode() False\nNote that: Notes: If the authentication success, the returned HttpResponse should contain 'Login successful.' with status 400. If the authentication fails, the returned HttpResponse should contain 'Login failed.' with status 401. If the input data is invalid (i.e., password is a non-base64, missing keys), the function return HttpResponseBadRequest and it contains 'Bad Request.'\nThe function should raise the exception for: KeyError, UnicodeDecodeError, binascii.Error, ValueError if the input dictionary is invalid.\nThe function should output with:\n    django.http.HttpResponse: An HttpResponse indicating the login result.\n    HttpResponseBadRequest if the data is invalid.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n```", "solution": "import hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n    try:\n        username = data['username']\n        password = base64.b64decode(data['password']).decode()\n    except (KeyError, UnicodeDecodeError, binascii.Error, ValueError):\n        return HttpResponseBadRequest('Bad Request')\n\n    hashed_password = hashlib.sha256(password.encode()).digest()\n\n    # Dummy authentication logic\n    if username == 'admin' and hashed_password == hashlib.sha256('password'.encode()).digest():\n        return HttpResponse('Login successful.')\n    else:\n        return HttpResponse('Login failed.', status=401)", "pass": false}
{"task_id": "78", "program": "import csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n\n    pass\nimport csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n    # Create a StringIO object to store the CSV data\n    csv_buffer = io.StringIO()\n\n    # Create a CSV writer object\n    csv_writer = csv.writer(csv_buffer)\n\n    # Write the header row\n    csv_writer.writerow(header)\n\n    # Write the CSV data\n    for row in csv_data:\n        csv_writer.writerow(row)\n\n    # Seek to the beginning of the buffer\n    csv_buffer.seek(0)\n\n    # Create a Django FileResponse object\n    response = FileResponse(csv_buffer, as_attachment=True, filename='data.csv')\n\n    # Set the content type to CSV\n    response['Content-Type'] = 'text/csv'\n\n    # Return the response\n    return response", "problem": "This function generates a CSV file response from a Django HttpRequest. It constructs a CSV file using the provided header and CSV data, and sends it back as a Django FileResponse. This function is particularly useful in scenarios where you need to provide a downloadable CSV file in response to a user request on a Django web application.\nThe function should output with:\n    FileResponse: A Django FileResponse object containing the CSV data as an attachment.\nYou should write self-contained code starting with:\n```\nimport csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n```", "solution": "import csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n    csv_io = io.StringIO()\n    writer = csv.writer(csv_io)\n    writer.writerow(header)\n    writer.writerows(csv_data)\n    csv_io.seek(0)\n\n    response = FileResponse(csv_io, as_attachment=True, filename='data.csv')\n    response['Content-Type'] = 'text/csv'\n\n    return response", "pass": false}
{"task_id": "79", "program": "import zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n\n    pass\nimport zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n    \"\"\"\n    Generates a ZIP file response for a Django HttpRequest, zipping the specified files.\n    This function is useful for scenarios where multiple file downloads are required in response to a web request.\n    The actual HttpRequest is not utilized within the function but is required for compatibility with Django view structures.\n    The function should output with:\n        FileResponse: A Django FileResponse object containing the ZIP file as an attachment.\n    \"\"\"\n    # Create a ZIP file in memory\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, \"w\") as zip_file:\n        # Add files to the ZIP file\n        for file_path in file_paths:\n            zip_file.write(file_path)\n    # Set the ZIP file as the response content\n    response = FileResponse(zip_buffer.getvalue())\n    # Set the content type and file name of the response\n    response[\"Content-Type\"] = \"application/zip\"\n    response[\"Content-Disposition\"] = f\"attachment; filename=files.zip\"\n    return response", "problem": "Generates a ZIP file response for a Django HttpRequest, zipping the specified files. This function is useful for scenarios where multiple file downloads are required in response to a web request. The actual HttpRequest is not utilized within the function but is required for compatibility with Django view structures.\nThe function should output with:\n    FileResponse: A Django FileResponse object containing the ZIP file as an attachment.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n```", "solution": "import zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n    zip_io = io.BytesIO()\n\n    with zipfile.ZipFile(zip_io, 'w') as zip_file:\n        for file_path in file_paths:\n            zip_file.writestr(file_path, 'This is the content of {}.'.format(file_path))\n\n    zip_io.seek(0)  # Reset the file pointer to the start of the stream\n    response = FileResponse(zip_io, as_attachment=True, filename='files.zip')\n    response['Content-Type'] = 'application/zip'\n\n    return response", "pass": false}
{"task_id": "80", "program": "from flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n\n    pass\nfrom flask import Flask, render_template, request\nimport json\nimport logging\ndef task_func(template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n\n    @app.route('/', methods=['POST'])\n    def index():\n        data = request.get_json()\n        logging.info(json.dumps(data))\n        return render_template('index.html', data=data)\n\n    return app", "problem": "Creates a Flask application with a specified templates folder. It defines a route at the root ('/') which handles POST requests, logs the information request data as a JSON, and renders an 'index.html' template using the data provided in POST requests.\nThe function should output with:\n    flask.app.Flask: A Flask application instance configured with a root route that handles POST requests.\n    The route logs incoming request data as JSON and serves the 'index.html' template with the provided data.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n```", "solution": "from flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n\n    app = Flask(__name__, template_folder=template_folder)\n\n    @app.route('/', methods=['POST'])\n    def handle_post():\n        data = request.get_json()\n        logging.info(json.dumps(data))\n        return render_template('index.html', data=data)\n\n    return app", "pass": true}
{"task_id": "81", "program": "from flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n\n    pass\nfrom flask import Flask, render_template\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    api = Api(app)\n\n    class ExternalAPI(Resource):\n        def get(self):\n            response = requests.get(api_url)\n            return response.json()\n\n    api.add_resource(ExternalAPI, '/')\n\n    return app", "problem": "Creates a Flask application with a RESTful API endpoint. The endpoint, when accessed, fetches data from an external API and returns the response as JSON. It is configured to use a specified templates folder, which must be provided when calling this function. The URL for the external API must also be provided when initializing the app.\nThe function should output with:\n    app (Flask): A Flask application instance with a configured RESTful API endpoint.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n```", "solution": "from flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    api = Api(app)\n\n    class DataResource(Resource):\n        def get(self):\n            response = requests.get(api_url)\n            data = response.json()\n            return data\n\n    api.add_resource(DataResource, '/data')\n\n    return app", "pass": false}
{"task_id": "82", "program": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\ndef task_func(secret_key, template_folder):\n\n    pass\nfrom flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash", "problem": "Creates a Flask application with configured user authentication using Flask-Login. It defines routes for login, logout, and a protected page. The user authentication is managed with a simple User class and a login form using Flask-WTF. The application uses dynamic configuration for security and template rendering.\nThe function should output with:\n    Flask: A Flask application instance configured for user authentication.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\ndef task_func(secret_key, template_folder):\n```", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\nlogin_manager = LoginManager()\ndef task_func(secret_key, template_folder):\n\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n\n    login_manager.init_app(app)\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password_hash = generate_password_hash(password)\n\n        def check_password(self, password):\n            return check_password_hash(self.password_hash, password)\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = User(form.username.data, form.password.data)\n            login_user(user)\n            return redirect(url_for('protected'))\n\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return 'Logged in as: ' + current_user.id\n\n    # Mock user loader for testing\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User(user_id, 'password')\n\n    return app", "pass": false}
{"task_id": "83", "program": "from flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n\n    pass\nfrom flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n    app = Flask(__name__)\n    app.config['MAIL_SERVER'] = smtp_server\n    app.config['MAIL_PORT'] = smtp_port\n    app.config['MAIL_USERNAME'] = smtp_user\n    app.config['MAIL_PASSWORD'] = smtp_password\n    app.config['MAIL_DEFAULT_SENDER'] = smtp_user\n    app.config['MAIL_MAX_EMAILS'] = 10\n    app.config['MAIL_SUPPRESS_SEND'] = False\n    app.config['MAIL_USE_TLS'] = True\n    app.config['MAIL_USE_SSL'] = False\n    mail = Mail(app)\n\n    @app.route('/send_test_email', methods=['GET', 'POST'])\n    def send_test_email():\n        msg = Message('Test Email', sender=smtp_user, recipients=[smtp_user])\n        msg.body = 'This is a test email sent using Flask-Mail.'\n        mail.send(msg)\n        return 'Test email sent successfully!'\n\n    return app", "problem": "Creates a Flask application configured to send emails using Flask-Mail. It sets up the necessary SMTP configuration dynamically based on provided parameters and defines a route to send a test email.\nThe function should output with:\n    Flask: A Flask application instance configured for sending emails.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n```", "solution": "from flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['MAIL_SERVER'] = smtp_server\n    app.config['MAIL_PORT'] = smtp_port\n    app.config['MAIL_USERNAME'] = smtp_user\n    app.config['MAIL_PASSWORD'] = smtp_password\n    app.config['MAIL_USE_TLS'] = True\n    \n    mail = Mail()\n    mail.init_app(app)\n\n    @app.route('/send_mail')\n    def send_mail():\n        msg = Message('Hello', sender='from@example.com', recipients=['to@example.com'])\n        msg.body = 'Hello Flask message sent from Flask-Mail'\n        mail.send(msg)\n\n        return 'Mail sent!'\n\n    return app", "pass": false}
{"task_id": "84", "program": "import numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n    \"\"\"\n    Generate a sales report with randomly simulated sales and profit data for a given list of products.\n    The data is aggregated by product and sorted by total profit in descending order.\n\n    Args:\n        products (list): List of product names.\n        n_samples (int): Number of samples to generate for each product.\n        sales_lower (int): Lower bound for sales.\n        sales_upper (int): Upper bound for sales.\n        profit_margin_min (float): Minimum profit margin.\n        profit_margin_max (float): Maximum profit margin.\n        random_seed (int): Random seed for reproducibility.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing aggregated sales and profit data for each product, sorted by profit.\n\n    Raises:\n        ValueError: If n_samples is not a positive integer, or if sales_lower is greater than sales_upper.\n        TypeError: If products is not a list of strings, or if sales_lower, sales_upper, profit_margin_min, or profit_margin_max are not numeric.\n    \"\"\"\n    # Check input arguments\n    if not isinstance(products, list):\n        raise TypeError(\"products must be a list of strings\")\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer\")\n    if sales_lower > sales_upper:\n        raise ValueError(\"sales_lower must be less than or equal to sales_upper\")\n    if not isinstance(profit_margin_min, (int, float)) or not isinstance(profit_margin_max, (int, float)):\n        raise TypeError(\"profit_margin_min and profit_margin_max must be numeric\")\n\n    # Generate random sales and profit data\n    np.random.seed(random_seed)\n    sales = np.random.randint(sales_lower, sales_upper, size=(n_samples, len(products)))\n    profit_margin = np.random.uniform(profit_margin_min, profit_margin_max, size=(n_samples, len(products)))\n    profit = sales * profit_margin\n\n    # Aggregate and sort data by profit\n    df = pd.DataFrame({\"Product\": products, \"Sales\": sales, \"Profit\": profit})\n    df = df.groupby(\"Product\").agg({\"Sales\": \"sum\", \"Profit\": \"sum\"}).sort_values(\"Profit\", ascending=False)\n\n    return df\nproducts = [\"Product A\", \"Product B\", \"Product C\"]", "problem": "Generate a sales report with randomly simulated sales and profit data for a given list of products. The data is aggregated by product and sorted by total profit in descending order.\nThe function should raise the exception for: ValueError: If n_samples is not a positive integer, or if sales_lower is greater than sales_upper. TypeError: If products is not a list of strings, or if sales_lower, sales_upper, profit_margin_min, or profit_margin_max are not numeric.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing aggregated sales and profit data for each product, sorted by profit.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n    np.random.seed(random_seed)\n    \n    if not products:\n        return pd.DataFrame(columns=[\"Product\", \"Sales\", \"Profit\"])\n\n    if not isinstance(products, list) or not all(isinstance(product, str) for product in products):\n        raise TypeError(\"products must be a list of strings.\")\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer.\")\n    if not (isinstance(sales_lower, int) and isinstance(sales_upper, int)) or sales_lower >= sales_upper:\n        raise ValueError(\"sales_lower must be less than sales_upper and both must be integers.\")\n    if not all(isinstance(x, (int, float)) for x in [profit_margin_min, profit_margin_max]) or profit_margin_min >= profit_margin_max:\n        raise ValueError(\"profit_margin_min must be less than profit_margin_max and both must be numeric.\")\n\n    data = []\n    for _ in range(n_samples):\n        product = np.random.choice(products)\n        sales = np.random.randint(sales_lower, sales_upper + 1)\n        profit = sales * np.random.uniform(profit_margin_min, profit_margin_max)\n        data.append([product, sales, profit])\n\n    df = pd.DataFrame(data, columns=[\"Product\", \"Sales\", \"Profit\"])\n    df = df.groupby(\"Product\", as_index=False).sum()\n    df.sort_values(\"Profit\", ascending=False, inplace=True)\n\n    return df", "pass": false}
{"task_id": "85", "program": "import numpy as np\nimport pandas as pd\nfrom datetime import timedelta\ndef task_func(start_date, end_date, random_seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\ndef task_func(start_date, end_date, random_seed=42):\n    \"\"\"\n    Generate and plot weather data for a specified date range.\n\n    This function creates a DataFrame containing simulated daily weather data within the specified date range.\n    It generates random values for temperature, humidity, and wind speed for each day.\n    The function also plots these parameters over the date range and returns both the DataFrame and the plot object.\n\n    The generated weather data ranges are as follows:\n    - Temperature: Between -10\u00b0C and 40\u00b0C.\n    - Humidity: Between 20% and 100%.\n    - Wind Speed: Between 0 and 20 meters per second.\n\n    The function should raise the exception for:\n    ValueError: If 'end_date' is before 'start_date', indicating an invalid date range.\n\n    The function should output with:\n        DataFrame: A pandas DataFrame with columns ['Date', 'Temperature', 'Humidity', 'Wind Speed'], containing the generated weather data for each day within the specified range.\n        Axes: A matplotlib Axes object of the plot showing the generated weather data.\n\n    Args:\n        start_date (datetime.date): The start date of the weather data range.\n        end_date (datetime.date): The end date of the weather data range.\n        random_seed (int, optional): The random seed to use for generating the weather data. Defaults to 42.\n\n    Returns:\n        DataFrame: A pandas DataFrame with columns ['Date', 'Temperature', 'Humidity', 'Wind Speed'], containing the generated weather data for each day within the specified range.\n        Axes: A matplotlib Axes object of the plot showing the generated weather data.\n    \"\"\"\n    # Check if the end date is before the start date\n    if end_date < start_date:\n        raise ValueError(\"'end_date' must be after 'start_date'\")\n\n    # Generate a list of dates between the start and end dates\n    dates = pd.date_range(start_date, end_date, freq=\"D\")\n\n    # Generate random temperature, humidity, and wind speed values for each day\n    temperature = np.random.randint(-10, 40, len(dates))\n    humidity = np.random.randint(20, 100, len(dates))\n    wind_speed = np.random.randint(0, 20, len(dates))\n\n    # Create a DataFrame with the generated weather data\n    df = pd.DataFrame({\"Date\": dates, \"Temperature\": temperature, \"Humidity\": humidity, \"Wind Speed\": wind_speed})\n\n    # Plot the weather data\n    fig, ax = plt.subplots()\n    ax.plot(df[\"Date\"], df[\"Temperature\"], label=\"Temperature\")\n    ax.plot(df[\"Date\"], df[\"Humidity\"], label=\"Humidity\")\n    ax.plot(df[\"Date\"], df[\"Wind Speed\"], label=\"Wind Speed\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Weather Data\")\n    ax.legend()\n\n    return df, ax\nstart_date = pd.to_datetime(\"2022-01-01\")\nend_date = pd.to_datetime(\"2022-01-10\")", "problem": "Generate and plot weather data for a specified date range. This function creates a DataFrame containing simulated daily weather data within the specified date range. It generates random values for temperature, humidity, and wind speed for each day. The function also plots these parameters over the date range and returns both the DataFrame and the plot object. The generated weather data ranges are as follows: - Temperature: Between -10\u00b0C and 40\u00b0C. - Humidity: Between 20% and 100%. - Wind Speed: Between 0 and 20 meters per second.\nThe function should raise the exception for: ValueError: If 'end_date' is before 'start_date', indicating an invalid date range.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Date', 'Temperature', 'Humidity', 'Wind Speed'], containing the generated weather data for each day within the specified range.\n    Axes: A matplotlib Axes object of the plot showing the generated weather data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import timedelta\ndef task_func(start_date, end_date, random_seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import timedelta\ndef task_func(start_date, end_date, random_seed=42):\n    if end_date < start_date:\n        raise ValueError(\"End date must be after start date\")\n\n    np.random.seed(random_seed)\n\n    COLUMNS = [\"Date\", \"Temperature\", \"Humidity\", \"Wind Speed\"]\n    data = []\n    date = start_date\n\n    while date <= end_date:\n        temp = np.random.uniform(-10, 40)\n        humidity = np.random.uniform(20, 100)\n        wind_speed = np.random.uniform(0, 20)\n        data.append([date, temp, humidity, wind_speed])\n        date += timedelta(days=1)\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n    ax = df.plot(x='Date', y=['Temperature', 'Humidity', 'Wind Speed'], title=\"Generated Weather Data\")\n\n    return df, ax", "pass": false}
{"task_id": "86", "program": "import numpy as np\nimport pandas as pd\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n    np.random.seed(seed)\n    scores = np.random.randint(0, 100, size=len(students))\n    df = pd.DataFrame({\"Student\": students, \"Score\": scores})\n    df = df.sort_values(by=\"Score\")\n    fig, ax = plt.subplots()\n    ax.bar(df[\"Student\"], df[\"Score\"])\n    return df, ax", "problem": "Generate random scores for a given list of students, sort these scores in ascending order, and return both the scores and a bar plot of these scores. use np.random.randint(0, 100) to generate the scores of the students\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Student' and 'Score', sorted by 'Score'.\n    Axes: A matplotlib Axes object containing the bar plot of scores.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n    np.random.seed(seed)\n    scores_data = [(student, np.random.randint(0, 100)) for student in students]\n    df = pd.DataFrame(scores_data, columns=[\"Student\", \"Score\"])\n    df.sort_values(\"Score\", inplace=True)\n\n    ax = df.plot(x='Student', y='Score', kind='bar', legend=False)\n    ax.set_ylabel(\"Score\")\n\n    return df, ax", "pass": false}
{"task_id": "87", "program": "import pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n\n    pass\nimport pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n    \"\"\"\n    Generates a DataFrame containing ratings for a given list of products. Ratings are generated randomly based on the provided weights. The DataFrame is sorted by ratings in descending order.\n\n    Parameters\n    ----------\n    products : list\n        A list of product names.\n    ratings : list\n        A list of rating weights.\n    weights : list\n        A list of weights for each rating.\n    random_seed : int, optional\n        A random seed for the random number generator.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with two columns: 'Product' and 'Rating', sorted by 'Rating' in descending order.\n    \"\"\"\n    # Set the random seed\n    seed(random_seed)\n\n    # Create a dictionary with product names as keys and ratings as values\n    ratings_dict = {product: choices(ratings, weights, k=1)[0] for product in products}\n\n    # Create a DataFrame from the dictionary\n    df = pd.DataFrame.from_dict(ratings_dict, orient='index', columns=['Rating'])\n\n    # Add a 'Product' column to the DataFrame\n    df['Product'] = df.index\n\n    # Sort the DataFrame by 'Rating' in descending order\n    df = df.sort_values(by='Rating', ascending=False)\n\n    return df\nproducts = ['Product A', 'Product B', 'Product C']\nratings = [1, 2, 3, 4, 5]\nweights = [0.2, 0.3, 0.2, 0.1, 0.2]", "problem": "Generates a DataFrame containing ratings for a given list of products. Ratings are generated randomly based on the provided weights. The DataFrame is sorted by ratings in descending order.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Product' and 'Rating', sorted by 'Rating' in descending order.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n```", "solution": "import pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n\n    seed(random_seed)  # Setting the seed for reproducibility\n    product_ratings = []\n\n    for product in products:\n        rating = choices(ratings, weights, k=1)[0]\n        product_ratings.append([product, rating])\n\n    df = pd.DataFrame(product_ratings, columns=[\"Product\", \"Rating\"])\n    df.sort_values(\"Rating\", ascending=False, inplace=True)\n\n    return df", "pass": false}
{"task_id": "88", "program": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(start_date, end_date, seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\ndef task_func(start_date, end_date, seed=42):\n    np.random.seed(seed)\n    dates = pd.date_range(start_date, end_date, freq='D')\n    sales = np.random.randint(0, 500, size=len(dates))\n    df = pd.DataFrame({'Date': dates, 'Sales': sales})\n    ax = df.plot(x='Date', y='Sales', kind='line')\n    return df, ax\nstart_date = datetime(2022, 1, 1)\nend_date = datetime(2022, 1, 31)", "problem": "Generate random sales data for each day between a start and end date, inclusive. Returns the data and a plot of sales over time. sales ranges 0 to 500 and it is an integer\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Date' and 'Sales'.\n    Axes: A matplotlib Axes object of the plot showing the sales overtime.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(start_date, end_date, seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(start_date, end_date, seed=42):\n    np.random.seed(seed)\n    data = []\n    date = start_date\n\n    while date <= end_date:\n        sales = np.random.randint(0, 500)\n        data.append([date, sales])\n        date += timedelta(days=1)\n\n    df = pd.DataFrame(data, columns=[\"Date\", \"Sales\"])\n    ax = df.plot(x='Date', y='Sales')\n    ax.set_ylabel(\"Sales\")\n\n    return df, ax", "pass": true}
{"task_id": "89", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from a specified column of a dataset based on the Z-score.\n    It standardizes the column, calculates Z-scores, and removes data points where the Z-score exceeds a threshold.\n    The function also visualizes the data before and after outlier removal.\n\n    Parameters\n    ----------\n    data : array-like\n        The dataset to remove outliers from.\n    column : int\n        The column of the dataset to remove outliers from.\n    outlier_z_score : float\n        The Z-score threshold to use for identifying outliers.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the original data, the data without outliers, and the indices of the outliers.\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data[:, column] = scaler.fit_transform(data[:, column].reshape(-1, 1))\n\n    # Calculate Z-scores\n    z_scores = stats.zscore(data[:, column])\n\n    # Identify outliers\n    outlier_indices = np.where(np.abs(z_scores) > outlier_z_score)[0]\n\n    # Remove outliers\n    data_without_outliers = np.delete(data, outlier_indices, axis=0)\n\n    # Visualize data before and after outlier removal\n    plt.scatter(data[:, 0], data[:, 1], c='blue', label='Data with Outliers')\n    plt.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1], c='red', label='Data without Outliers')\n    plt.legend()\n    plt.show()\n\n    return data, data_without_outliers, outlier_indices\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\ncolumn = 0\noutlier_z_score = 2", "problem": "Identifies and removes outliers from a specified column of a dataset based on the Z-score. It standardizes the column, calculates Z-scores, and removes data points where the Z-score exceeds a threshold. The function also visualizes the data before and after outlier removal.\nNote that: Notes: The function plots two scatter plots: 'Data with Outliers' shows the original data including outliers, while 'Data without Outliers' displays the data after removing outliers based on the provided Z-score threshold. This visual comparison helps illustrate the impact of outlier removal on the dataset.\nThe function should output with:\n    tuple: A tuple containing the original data, the data without outliers, and the indices of the outliers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    # Copy the data to avoid modifying the original array\n    data_copy = np.copy(data)\n    column_data = data_copy[:, column]\n\n    # Standardize the data to have a mean of 0 and a standard deviation of 1\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(column_data.reshape(-1, 1))\n\n    # Calculate the Z-scores\n    z_scores = np.abs(stats.zscore(standardized_data))\n\n    # Identify the outliers\n    outliers = np.where(z_scores > outlier_z_score)\n    data_without_outliers = np.delete(data_copy, outliers, axis=0)\n\n    # Plot the data before and after the removal of outliers\n    plt.figure(figsize=(10, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.scatter(data_copy[:, 0], data_copy[:, 1])\n    plt.title('Data with Outliers')\n\n    plt.subplot(1, 2, 2)\n    plt.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1])\n    plt.title('Data without Outliers')\n\n    plt.show()\n\n    return data_copy, data_without_outliers, outliers", "pass": false}
{"task_id": "90", "program": "import numpy as np\nimport math\ndef task_func(data, target, k):\n\n    pass\nimport numpy as np\nimport math\ndef task_func(data, target, k):\n    \"\"\"\n    Calculate the 'k' nearest neighbors by geographic coordinates using a dataset and a target data point.\n    The function returns a list of the 'k' nearest neighbors, sorted in ascending order of their distances from the target.\n    Constants: radius of earth is 6371 km\n    The function should raise the exception for:\n        ValueError: If 'k' is a negative integer or not an integer.\n    The function should output with:\n        list: List of the 'k' nearest neighbors as [Latitude, Longitude].\n    \"\"\"\n    # Check if 'k' is a negative integer or not an integer\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a positive integer\")\n\n    # Calculate the distances between the target and each data point\n    distances = []\n    for point in data:\n        lat1, lon1 = target\n        lat2, lon2 = point\n        dlat = math.radians(lat2 - lat1)\n        dlon = math.radians(lon2 - lon1)\n        a = (math.sin(dlat / 2) ** 2 +\n             math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *\n             math.sin(dlon / 2) ** 2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        distance = 6371 * c\n        distances.append(distance)\n\n    # Sort the distances and return the 'k' nearest neighbors\n    sorted_distances = sorted(distances)\n    nearest_neighbors = []\n    for i in range(k):\n        nearest_neighbors.append(data[distances.index(sorted_distances[i])])\n\n    return nearest_neighbors\ndata = [(37.7749, -122.4194), (37.6153, -122.3892), (37.7906, -122.4018),\n        (37.7766, -122.4171), (37.7825, -122.4041), (37.7789, -122.4161)]\ntarget = (37.7790, -122.4196)\nk = 3", "problem": "Calculate the 'k' nearest neighbors by geographic coordinates using a dataset and a target data point. The function returns a list of the 'k' nearest neighbors, sorted in ascending order of their distances from the target. Constants: radius of earth is 6371 km\nThe function should raise the exception for: ValueError: If 'k' is a negative integer or not an integer.\nThe function should output with:\n    list: List of the 'k' nearest neighbors as [Latitude, Longitude].\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(data, target, k):\n```", "solution": "import numpy as np\nimport math\ndef task_func(data, target, k):\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer\")\n\n    RADIUS_EARTH_KM = 6371.0  # Radius of the Earth in kilometers\n\n    def calculate_distance(coord1, coord2):\n        # Convert coordinates from degrees to radians\n        lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])\n        lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])\n\n        # Haversine formula\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n        return RADIUS_EARTH_KM * c\n\n    distances = np.array([calculate_distance(target, coord) for coord in data.to_numpy()])\n    nearest_indices = distances.argsort()[:k]\n    nearest_neighbors = data.iloc[nearest_indices].values.tolist()\n\n    return nearest_neighbors", "pass": false}
{"task_id": "91", "program": "from scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n\n    pass\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n    \"\"\"\n    Perform a linear regression on two columns of a dataset and record the result.\n    Additionally, generates a plot representing the original data and the fitted line.\n\n    Args:\n        data (pandas.DataFrame): The dataset to perform the regression on.\n        column1 (str): The name of the first column to use for the regression.\n        column2 (str): The name of the second column to use for the regression.\n\n    Returns:\n        tuple: The slope, intercept, r-value, p-value, and standard error of the regression.\n        Axes: The matplotlib Axes object containing the plot.\n\n    Raises:\n        ValueError: If the specified columns do not exist in the DataFrame.\n    \"\"\"\n    # Check if the columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"The specified columns do not exist in the DataFrame.\")\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(data[column1], data[column2])\n\n    # Generate the plot\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2])\n    ax.plot(data[column1], slope * data[column1] + intercept, color=\"red\")\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title(\"Linear Regression\")\n\n    return slope, intercept, r_value, p_value, std_err, ax", "problem": "Perform a linear regression on two columns of a dataset and record the result. Additionally, generates a plot representing the original data and the fitted line.\nThe function should raise the exception for: ValueError: If the specified columns do not exist in the DataFrame.\nThe function should output with:\n    tuple: The slope, intercept, r-value, p-value, and standard error of the regression.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n```", "solution": "from scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Specified columns must exist in the DataFrame\")\n\n    x = data[column1].values\n    y = data[column2].values\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'o', label='original data')\n    ax.plot(x, intercept + slope*x, 'r', label='fitted line')\n    ax.legend()\n\n    return (slope, intercept, r_value, p_value, std_err), ax", "pass": false}
{"task_id": "92", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-means clustering on a dataset and generate a scatter plot visualizing the clusters and their centroids.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        The dataset to perform clustering on.\n    n_clusters : int, optional\n        The number of clusters to form. Default is 3.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n\n        np.ndarray\n            An array of cluster labels assigned to each sample.\n        plt.Axes\n            An Axes object with the scatter plot showing the clusters and centroids.\n\n    Raises\n    ------\n    ValueError\n        If 'data' is not a pd.DataFrame.\n    ValueError\n        If 'n_clusters' is not an integer greater than 1.\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # Create a scatter plot of the clusters and centroids\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap=\"viridis\")\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], c=\"black\", marker=\"x\", s=200, linewidths=5)\n    ax.set_title(\"K-means Clustering\")\n    ax.set_xlabel(\"Feature 1\")\n    ax.set_ylabel(\"Feature 2\")\n\n    return labels, ax", "problem": "Perform K-means clustering on a dataset and generate a scatter plot visualizing the clusters and their centroids.\nThe function should raise the exception for: ValueError: If 'data' is not a pd.DataFrame. ValueError: If 'n_clusters' is not an integer greater than 1.\nThe function should output with:\n    tuple:\n    np.ndarray: An array of cluster labels assigned to each sample.\n    plt.Axes: An Axes object with the scatter plot showing the clusters and centroids.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    labels = kmeans.fit_predict(data)\n    centroids = kmeans.cluster_centers_\n\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis', alpha=0.6, label='Data points')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='red', label='Centroids')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    ax.set_title('K-Means Clustering')\n    ax.legend()\n\n    return labels, ax", "pass": false}
{"task_id": "93", "program": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a dataset and record the result.\n    Also, generates a scatter plot of the transformed data.\n\n    Parameters\n    ----------\n    data : array-like, shape (n_samples, n_features)\n        The input data.\n    n_components : int, optional (default=2)\n        The number of principal components to keep.\n\n    Returns\n    -------\n    DataFrame\n        The transformed data with principal components.\n    Axes\n        The matplotlib Axes object containing the scatter plot.\n\n    Raises\n    ------\n    ValueError\n        If n_components is not a positive integer.\n    \"\"\"\n    if not isinstance(n_components, int) or n_components < 1:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    pca.fit(data)\n    transformed_data = pca.transform(data)\n\n    # Create a DataFrame with the transformed data\n    transformed_df = pd.DataFrame(transformed_data, columns=[\"PC{}\".format(i+1) for i in range(n_components)])\n\n    # Create a scatter plot of the transformed data\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_df.iloc[:, 0], transformed_df.iloc[:, 1], c=data.iloc[:, 2])\n    ax.set_xlabel(\"PC1\")\n    ax.set_ylabel(\"PC2\")\n    ax.set_title(\"Scatter plot of transformed data\")\n\n    return transformed_df, ax\ndata = pd.DataFrame({\"feature1\": [1, 2, 3, 4, 5], \"feature2\": [6, 7, 8, 9, 10], \"feature3\": [11, 12, 13, 14, 15]})", "problem": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    np.random.seed(42)\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n\n    return pd.DataFrame(transformed_data, columns=[f'PC{i+1}' for i in range(n_components)]), ax", "pass": false}
{"task_id": "94", "program": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n\n    pass\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n    # Generate samples from the normal distribution\n    samples = np.random.normal(mean, std_dev, num_samples)\n\n    # Create a histogram of the samples\n    plt.hist(samples, bins=30, density=True, alpha=0.5, label='Samples')\n\n    # Add the PDF of the normal distribution to the histogram\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    pdf = norm.pdf(x, mean, std_dev)\n    plt.plot(x, pdf, label='PDF')\n\n    # Set the title of the plot\n    plt.title(f'Fit results: mean = {mean:.2f}, std = {std_dev:.2f}')\n\n    # Add a legend to the plot\n    plt.legend()\n\n    # Show the plot\n    plt.show()\n\n    return samples", "problem": "Generates a histogram of samples drawn from a normal distribution and overlays the probability density function (PDF) of the normal distribution. The plot is titled with the fit results, showing the mean and standard deviation used in the generation. The function returns both the plot and the samples generated.\nNote that: Notes: The plot title is \"Fit results: mean = %.2f, std = %.2f\". This title format on the plot displays the mean and standard deviation of the normal distribution used to generate the histogram. The values are presented in a format where %.2f is replaced by the floating-point numbers corresponding to `mean` and `std_dev` respectively, rounded to two decimal places. The number of bins is set to 30 The actual values in the array depend on the random seed and will vary each time the function is called.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.figure.Figure: The figure object for the plot.\n    numpy.ndarray: An array of samples drawn from the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n```", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n    samples = np.random.normal(mean, std_dev, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mean, std_dev)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Fit results: mean = %.2f,  std = %.2f\" % (mean, std_dev)\n    ax.set_title(title)\n\n    return samples, fig", "pass": false}
{"task_id": "95", "program": "import pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n\n    pass\nimport pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n    \"\"\"\n    Generates a DataFrame with simulated monthly sales data for various product categories, ensuring reproducibility through the use of a random seed.\n\n    Parameters\n    ----------\n    categories : list\n        A list of product categories.\n    months : list\n        A list of months.\n    random_seed : int\n        A random seed to ensure reproducibility.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with three columns: 'Month', 'Category', and 'Sales'. The 'Sales' values are floating-point numbers in the range [100, 501), generated by the formula: randint(100, 500) + uniform(0, 1), ensuring sales values are diverse yet consistent upon repeated executions with the same seed.\n\n    Raises\n    ------\n    ValueError\n        If either 'categories' or 'months' is not provided as a list or if either is an empty list.\n    \"\"\"\n    if not isinstance(categories, list) or not isinstance(months, list):\n        raise ValueError(\"'categories' and 'months' must be lists.\")\n    if not categories or not months:\n        raise ValueError(\"'categories' and 'months' must not be empty lists.\")\n\n    seed(random_seed)\n    sales_data = []\n    for category in categories:\n        for month in months:\n            sales = randint(100, 500) + uniform(0, 1)\n            sales_data.append([month, category, sales])\n\n    return pd.DataFrame(sales_data, columns=[\"Month\", \"Category\", \"Sales\"])", "problem": "Generates a DataFrame with simulated monthly sales data for various product categories, ensuring reproducibility through the use of a random seed.\nNote that: Notes: The function sets the random seed at the beginning of execution to ensure that the generated sales data is the same for any given seed value. The sales data for each category is generated for each month, creating a comprehensive report that spans all specified categories and months.\nThe function should raise the exception for: ValueError: If either 'categories' or 'months' is not provided as a list or if either is an empty list.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with three columns: 'Month', 'Category', and 'Sales'. The 'Sales' values are floating-point numbers in the range [100, 501), generated by the formula: randint(100, 500) + uniform(0, 1), ensuring sales values are diverse yet consistent upon repeated executions with the same seed.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n```", "solution": "import pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n\n    if categories is None:\n        categories = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Beauty & Personal Care']\n    if months is None:\n        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    if not isinstance(categories, list) or not categories:\n        raise ValueError(\"Invalid 'categories': must be a non-empty list.\")\n    if not isinstance(months, list) or not months:\n        raise ValueError(\"Invalid 'months': must be a non-empty list.\")\n\n    seed(random_seed)  # Setting the seed for reproducibility\n    sales_data = []\n\n    for month in months:\n        for category in categories:\n            sales = randint(100, 500) + uniform(0, 1)\n            sales_data.append([month, category, sales])\n\n    sales_df = pd.DataFrame(sales_data, columns=['Month', 'Category', 'Sales'])\n    return sales_df", "pass": false}
{"task_id": "96", "program": "import csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n\n    pass\nimport csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n    \"\"\"\n    Reads a CSV file and counts the most common words in the file.\n    This function opens the specified CSV file using the provided delimiter, reads its contents, and counts the frequency of each word.\n    It returns a list of tuples, each containing a word and its frequency, sorted by frequency in descending order.\n    :param csv_file: The path to the CSV file to read.\n    :param csv_delimiter: The delimiter to use when reading the CSV file.\n    :return: A list of tuples where each tuple contains a word and its count, sorted by count in descending order.\n    \"\"\"\n    with open(csv_file, 'r') as f:\n        reader = csv.reader(f, delimiter=csv_delimiter)\n        words = [word for row in reader for word in row]\n        word_counts = Counter(words)\n        return sorted(word_counts.items(), key=operator.itemgetter(1), reverse=True)\ncsv_file = 'example.csv'\ncsv_delimiter = ','", "problem": "Reads a CSV file and counts the most common words in the file. This function opens the specified CSV file using the provided delimiter, reads its contents, and counts the frequency of each word. It returns a list of tuples, each containing a word and its frequency, sorted by frequency in descending order.\nNote that: The function assumes that each cell in the CSV contains a single word.\nThe function should output with:\n    list of tuple: A list of tuples where each tuple contains a word and its count,\n    sorted by count in descending order.\nYou should write self-contained code starting with:\n```\nimport csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n```", "solution": "import csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n    words = []\n\n    with open(csv_file, 'r') as f:\n        reader = csv.reader(f, delimiter=csv_delimiter)\n        for row in reader:\n            words.extend(row)\n\n    word_counter = Counter(words)\n    most_common_words = sorted(word_counter.items(), key=operator.itemgetter(1), reverse=True)\n\n    return most_common_words", "pass": true}
{"task_id": "97", "program": "import math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n\n    pass\nimport math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n    # Generate all possible combinations of numbers for each possible length\n    combinations = [list(itertools.combinations(numbers, r)) for r in range(1, len(numbers)+1)]\n\n    # Compute the product of each number in each combination\n    products = [[reduce(lambda x, y: x*y, combination) for combination in combinations[r-1]] for r in range(1, len(numbers)+1)]\n\n    # Compute the logarithm of each product\n    log_products = [[math.log(product) for product in products[r-1]] for r in range(1, len(numbers)+1)]\n\n    # Sum the logarithms of each product\n    sum_log_products = [sum(log_product) for log_product in log_products]\n\n    # Return the sum of the logarithms of the products of all combinations of numbers\n    return sum(sum_log_products)\nnumbers = [1, 2, 3, 4, 5]", "problem": "Generates all possible combinations of the provided numbers in a given list for each possible length. For each combination, it computes the product of the numbers in the combination. It then computes the logarithm of each product and sums these logarithms to produce the final result.\nThe function should output with:\n    float: The sum of the logarithms of the products of all combinations of numbers.\nYou should write self-contained code starting with:\n```\nimport math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n```", "solution": "import math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n    sum_log_products = 0\n\n    for r in range(1, len(numbers) + 1):\n        combinations = itertools.combinations(numbers, r)\n        for combination in combinations:\n            product = reduce(lambda x, y: x * y, combination)\n            sum_log_products += math.log(product)\n\n    return sum_log_products", "pass": true}
{"task_id": "98", "program": "import random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n\n    pass\nimport random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n    # Create a list of random strings\n    random_strings = [\n        ''.join(random.choice(string.ascii_lowercase) for _ in range(string_length))\n        for _ in range(num_strings)\n    ]\n\n    # Count the frequency of each character across all strings\n    char_counts = Counter()\n    for s in random_strings:\n        char_counts.update(s)\n\n    # Sort the characters and their frequencies by frequency in descending order\n    sorted_chars = sorted(char_counts.items(), key=lambda x: x[1], reverse=True)\n\n    return sorted_chars", "problem": "Creates a list of random strings, each of a specified length, and counts the frequency of each character across all strings. The function then returns the characters and their frequencies sorted by frequency in descending order. The random strings are composed of ASCII lowercase characters.\nThe function should output with:\n    list of tuple: A list of tuples where each tuple contains a character and its count,\n    sorted by count in descending order.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n```", "solution": "import random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n    strings = [''.join(random.choices(string.ascii_lowercase, k=string_length)) for _ in range(num_strings)]\n    characters = ''.join(strings)\n    character_counter = Counter(characters)\n    most_common_characters = character_counter.most_common()\n\n    return most_common_characters", "pass": true}
{"task_id": "99", "program": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n\n    pass\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n    # Load the iris dataset\n    iris = load_iris()\n    # Convert the dataset to a pandas DataFrame\n    iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)\n    # Set the global font to Arial\n    sns.set(font='Arial')\n    # Generate a pair plot from the iris dataset\n    g = sns.pairplot(iris_df, hue='species')\n    # Set the title and labels for each subplot\n    g.set_titles('{col_name}')\n    g.set(xlabel='{col_name}')\n    g.set(ylabel='{col_name}')\n    # Return the plot\n    return g.fig", "problem": "Draws a seaborn pair plot of the iris dataset using Arial font. This function sets the global font to Arial for better readability and visual appeal. It then generates a pair plot from the iris dataset, where each subplot represents the relationship between two features, colored by species. The plot includes the title 'Iris Dataset Pair Plot' and labels for each feature on the axes.\nThe function should output with:\n    plt.Figure: A matplotlib Figure object containing the seaborn pair plot of the iris dataset. The plot has 'Iris Dataset Pair Plot' as its title. Each subplot's axes are labeled with the corresponding feature names, such as 'sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', and 'petal width (cm)'.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n```", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n\n    plt.rc('font', family='Arial')  # Set the global font to Arial.\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = iris.target\n\n    # Create a pair plot with the hue set to species.\n    pair_plot = sns.pairplot(iris_df, hue='species', vars=iris.feature_names)\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16)  # Title for the figure\n    return pair_plot.fig", "pass": false}
{"task_id": "100", "program": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n\n    pass\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n    \"\"\"\n    Generates a plot of random time series data for the past 30 days with reproducibility controlled by an optional seed parameter.\n    The plot is styled with Arial font for better readability.\n    The function should raise the exception for: ValueError: If there is an issue generating the data or plot.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object containing a line plot of the time series data.\n        The plot will have 'Date' as the x-axis label, 'Value' as the y-axis label,\n        and 'Random Time Series Data' as the title.\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Generate random data for the past 30 days\n    today = datetime.today()\n    dates = pd.date_range(today - pd.Timedelta(days=30), today)\n    values = [random.randint(0, 100) for _ in range(len(dates))]\n\n    # Create a DataFrame with the data\n    df = pd.DataFrame({\"Date\": dates, \"Value\": values})\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df[\"Date\"], df[\"Value\"])\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Value\")\n    ax.set_title(\"Random Time Series Data\")\n    ax.set_font_family(\"Arial\")\n\n    # Return the Axes object\n    return ax", "problem": "Generates a plot of random time series data for the past 30 days with reproducibility controlled by an optional seed parameter. The plot is styled with Arial font for better readability.\nThe function should raise the exception for: ValueError: If there is an issue generating the data or plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing a line plot of the time series data.\n    The plot will have 'Date' as the x-axis label, 'Value' as the y-axis label,\n    and 'Random Time Series Data' as the title.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n```", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n    try:\n        plt.rc('font', family='Arial')\n\n        random.seed(seed)\n        dates = pd.date_range(end=datetime.now(), periods=30)\n        values = [random.randint(0, 100) for _ in range(30)]\n        \n        fig, ax = plt.subplots()\n        ax.plot(dates, values, label='Value over Time')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Value')\n        ax.set_title('Random Time Series Data')\n        ax.legend()\n\n        return ax\n    except Exception as e:\n        raise ValueError(f\"Error generating the plot: {e}\")", "pass": false}
{"task_id": "101", "program": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n\n    pass\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\n    The function should raise the exception for: ValueError: If an error occurs in generating or saving the plot.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object containing the heatmap plot.\n    \"\"\"\n    # Load the Boston Housing dataset\n    data = pd.read_csv(data_url, header=None)\n\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Create a correlation matrix\n    corr_matrix = data.corr()\n\n    # Generate a heatmap of the correlation matrix\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    # Add a title to the plot\n    ax.set_title(\"Correlation Heatmap of Boston Housing Dataset\")\n\n    # Save the plot to a file\n    plt.savefig(\"boston_housing_heatmap.png\")\n\n    return ax", "problem": "Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\nThe function should raise the exception for: ValueError: If an error occurs in generating or saving the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the heatmap plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n```", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Set font to Arial\n        font = {'sans-serif': 'Arial', 'family': 'sans-serif'}\n        plt.rc('font', **font)\n\n        # boston = load_boston()\n        # boston_df = pd.DataFrame(data=boston.data, columns=boston.feature_names)\n        # corr = boston_df.corr()\n\n        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n        target = raw_df.values[1::2, 2]\n\n        # Step 1: Convert data and target into DataFrame\n        columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']\n        boston_df = pd.DataFrame(data=data, columns=columns)\n\n        # Step 2: Compute correlation matrix\n        corr = boston_df.corr()\n\n\n        sns.set_theme(style=\"white\")  # Optional: for better aesthetics\n        plt.figure(figsize=(10, 8))  # Optional: adjust the size of the heatmap\n        ax = sns.heatmap(corr, annot=True)  # 'annot=True' to display correlation values\n        # if file_path:\n        #     plt.savefig(file_path)\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")", "pass": false}
{"task_id": "102", "program": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n\n    pass\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n    # Load the diabetes dataset\n    diabetes = load_diabetes()\n\n    # Create a DataFrame from the dataset\n    df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n\n    # Set the font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create a pairplot using seaborn\n    g = sns.pairplot(df, kind='scatter', diag_kind='hist')\n\n    # Return the pairplot and the DataFrame\n    return g, df", "problem": "Draws a seaborn pairplot for the diabetes dataset obtained from sklearn.datasets. This function sets the font to Arial. It then loads the diabetes dataset into a DataFrame and creates a pairplot using seaborn, which is useful for visual exploration of relationships between different features in the dataset.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib Figure instance representing the created pairplot.\n    pd.DataFrame: a DataFrame representation of the diabetes dataset\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n```", "solution": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n    font = {'family': 'Arial'}\n    plt.rc('font', **font)  # Set the global font to Arial.\n    DIABETES = load_diabetes()\n    diabetes_df = pd.DataFrame(data=DIABETES.data, columns=DIABETES.feature_names)\n    pair_plot = sns.pairplot(diabetes_df)\n    return pair_plot.fig, diabetes_df", "pass": false}
{"task_id": "103", "program": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n\n    pass\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n    \"\"\"\n    Calculate and plot the daytime temperatures for New York over a given period.\n    The plot uses Arial font for display.\n    For the returned plot, set the xlabel as 'Date', ylabel as 'Temperature (\u00b0C)' and title as Daily Temperatures in New York\n    The function should raise the exception for: ValueError: If the input DataFrame is not in the expected format or empty.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object containing the temperature plot.\n    \"\"\"\n    # Check if the input DataFrame is not empty and in the expected format\n    if temperatures.empty or not isinstance(temperatures, pd.DataFrame):\n        raise ValueError(\"Invalid input DataFrame\")\n\n    # Extract the daytime temperatures from the DataFrame\n    daytime_temperatures = temperatures[\"daytime_temperature\"]\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the daytime temperatures\n    ax.plot(daytime_temperatures)\n\n    # Set the xlabel, ylabel, and title\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.set_title(\"Daily Temperatures in New York\")\n\n    # Set the font to Arial\n    plt.rcParams[\"font.family\"] = \"Arial\"\n\n    # Return the Axes object\n    return ax\ntemperatures = pd.DataFrame({\"daytime_temperature\": [20, 22, 25, 28, 30, 32, 35, 38, 40, 42]})", "problem": "Calculate and plot the daytime temperatures for New York over a given period. The plot uses Arial font for display. for the returned plot,  set the xlabel as 'Date', ylabel as 'Temperature (\u00b0C)' and title as Daily Temperatures in New York\nThe function should raise the exception for: ValueError: If the input DataFrame is not in the expected format or empty.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the temperature plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n```", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n    try:\n        if temperatures.empty or not isinstance(temperatures, pd.DataFrame):\n            raise ValueError(\"Input temperatures must be a non-empty pandas DataFrame.\")\n\n        # Setting the font to Arial\n        font = {'sans-serif': 'Arial', 'family': 'sans-serif'}\n        plt.rc('font', **font)\n        \n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.plot(temperatures.index, temperatures['temperature'])\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Temperature (\u00b0C)')\n        ax.set_title('Daily Temperatures in New York')\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")", "pass": false}
{"task_id": "104", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n    \"\"\"\n    Analyzes the groups in a DataFrame by plotting a scatter plot of the ordinals against the values for each group.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to analyze.\n    groups : list of str, optional\n        The groups to plot. Defaults to ['A', 'B', 'C', 'D', 'E'].\n\n    Returns\n    -------\n    matplotlib.axes.Axes\n        The Axes object with the scatter plot.\n\n    Raises\n    ------\n    ValueError\n        If 'df' is not a DataFrame or lacks required columns.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not set(groups).issubset(df.columns):\n        raise ValueError(\"'groups' must be a subset of the columns in 'df'\")\n\n    fig, ax = plt.subplots()\n    ax.set_title(\"Scatterplot of Values for Each Group Over Time\")\n    ax.set_xlabel(\"Date (ordinal)\")\n    ax.set_ylabel(\"Value\")\n\n    for group in groups:\n        ax.scatter(df.index, df[group], label=group)\n\n    ax.legend()\n    return ax", "problem": "Analyzes the groups in a DataFrame by plotting a scatter plot of the ordinals against the values for each group.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks required columns.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the scatter plot.\n    The Axes object will have a title 'Scatterplot of Values for Each Group Over Time',\n    x-axis labeled as 'Date (ordinal)', and y-axis labeled as 'Value'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'group', 'date', and 'value' columns.\")\n\n    color_cycle = cycle('bgrcmk')\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    for group in groups:\n        group_df = df[df['group'] == group].copy()\n        group_df['date'] = group_df['date'].apply(lambda x: x.toordinal())\n        ax.scatter(group_df['date'], group_df['value'], color=next(color_cycle))\n\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.set_title('Scatterplot of Values for Each Group Over Time')\n\n    return ax", "pass": false}
{"task_id": "105", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n    \"\"\"\n    Perform exploratory data analysis on a dataframe.\n    This function converts the 'date' column to an ordinal format, creates a correlation matrix, and generates a pair plot of the dataframe.\n    The title of the plot is 'Correlation Matrix'.\n    The function should raise the exception for:\n        ValueError: If the dataframe is empty, if required columns are missing, or if 'date' column is not in datetime format.\n    The function should output with:\n        matplotlib.figure.Figure: The figure object for the correlation matrix heatmap.\n        seaborn.axisgrid.PairGrid: The PairGrid object for the pair plot.\n    \"\"\"\n    # Check if the dataframe is empty\n    if df.empty:\n        raise ValueError(\"The dataframe is empty.\")\n\n    # Check if required columns are missing\n    required_columns = [\"date\", \"value\"]\n    if not all(col in df.columns for col in required_columns):\n        raise ValueError(\"Required columns are missing.\")\n\n    # Check if 'date' column is in datetime format\n    if not pd.api.types.is_datetime64_any_dtype(df[\"date\"]):\n        raise ValueError(\"'date' column is not in datetime format.\")\n\n    # Convert 'date' column to ordinal format\n    df[\"date\"] = pd.to_datetime(df[\"date\"]).dt.to_period(\"D\")\n\n    # Create correlation matrix\n    corr_matrix = df.corr()\n\n    # Generate pair plot\n    pair_plot = sns.PairGrid(df, diag_kind=\"hist\")\n    pair_plot.map_upper(plt.scatter)\n    pair_plot.map_lower(sns.kdeplot)\n    pair_plot.add_legend()\n\n    # Set title for pair plot\n    pair_plot.set_title(\"Correlation Matrix\")\n\n    return corr_matrix, pair_plot", "problem": "Perform exploratory data analysis on a dataframe. This function converts the 'date' column to an ordinal format, creates a correlation matrix, and generates a pair plot of the dataframe. The title of the plot is 'Correlation Matrix'.\nThe function should raise the exception for: ValueError: If the dataframe is empty, if required columns are missing, or if 'date' column is not in datetime format.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object for the correlation matrix heatmap.\n    seaborn.axisgrid.PairGrid: The PairGrid object for the pair plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n    if df.empty or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"DataFrame must be non-empty and contain 'group', 'date', and 'value' columns.\")\n    \n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column must be in datetime format.\")\n\n    try:\n        df['date'] = df['date'].apply(lambda x: x.toordinal())\n        df_numeric = df.drop(columns=['group'])\n        correlation_matrix = df_numeric.corr()\n\n        heatmap_fig = plt.figure(figsize=(8, 6))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n        plt.title('Correlation Matrix')\n\n        pairplot_grid = sns.pairplot(df)\n\n        return heatmap_fig, pairplot_grid\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")", "pass": false}
{"task_id": "106", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Performs linear regression on a DataFrame using 'date' (converted to ordinal) as the predictor for 'value'. It plots both the original and predicted values, showcasing the linear relationship.\n    The function should raise the exception for: ValueError: If 'df' is not a valid DataFrame, lacks the required columns, or if 'date' column is not in datetime format.\n    The function should output with:\n        tuple: Consists of the LinearRegression model, the predictions array, and the matplotlib Axes object of the plot.\n        The Axes object will have a title 'Value vs Date (Linear Regression Prediction)',\n        x-axis labeled as 'Date (ordinal)', and y-axis labeled as 'Value'.\n    \"\"\"\n    # Check if df is a valid DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a valid DataFrame\")\n    \n    # Check if df has the required columns\n    required_columns = [\"date\", \"value\"]\n    if not all(col in df.columns for col in required_columns):\n        raise ValueError(\"df must have the required columns: 'date' and 'value'\")\n    \n    # Check if 'date' column is in datetime format\n    if not pd.api.types.is_datetime64_any_dtype(df[\"date\"]):\n        raise ValueError(\"'date' column must be in datetime format\")\n    \n    # Convert 'date' column to ordinal\n    df[\"date\"] = pd.to_datetime(df[\"date\"]).dt.to_period(\"D\")\n    \n    # Perform linear regression\n    X = df[[\"date\"]]\n    y = df[\"value\"]\n    model = LinearRegression().fit(X, y)\n    \n    # Predict values\n    predictions = model.predict(X)\n    \n    # Plot original and predicted values\n    fig, ax = plt.subplots()\n    ax.plot(df[\"date\"], df[\"value\"], label=\"Original\")\n    ax.plot(df[\"date\"], predictions, label=\"Predicted\")\n    ax.set_title(\"Value vs Date (Linear Regression Prediction)\")\n    ax.set_xlabel(\"Date (ordinal)\")\n    ax.set_ylabel(\"Value\")\n    ax.legend()\n    \n    return model, predictions, ax", "problem": "Performs linear regression on a DataFrame using 'date' (converted to ordinal) as the predictor for 'value'. It plots both the original and predicted values, showcasing the linear relationship.\nThe function should raise the exception for: ValueError: If 'df' is not a valid DataFrame, lacks the required columns, or if 'date' column is not in datetime format.\nThe function should output with:\n    tuple: Consists of the LinearRegression model, the predictions array, and the matplotlib Axes object of the plot.\n    The Axes object will have a title 'Value vs Date (Linear Regression Prediction)',\n    x-axis labeled as 'Date (ordinal)', and y-axis labeled as 'Value'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'group', 'date', and 'value' columns.\")\n\n    df['date'] = df['date'].apply(lambda x: x.toordinal())\n    X = df[['date']]\n    y = df['value']\n\n    model = LinearRegression()\n    model.fit(X, y)\n    y_pred = model.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, y, color='red')\n    ax.plot(X, y_pred, color='blue')\n    ax.set_title('Value vs Date (Linear Regression Prediction)')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n\n    return model, y_pred, ax", "pass": false}
{"task_id": "107", "program": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n    \"\"\"\n    Convert the 'date' column of a DataFrame to ordinal, perform KMeans clustering on 'date' and 'value' columns, and plot the clusters.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        n_clusters (int, optional): The number of clusters. Defaults to 3.\n        random_state (int, optional): The random state. Defaults to 0.\n\n    Returns:\n        matplotlib.axes.Axes: The Axes object containing the scatter plot of the clusters.\n\n    Raises:\n        ValueError: If the DataFrame is empty or lacks required columns.\n    \"\"\"\n    # Check if the DataFrame is empty or lacks required columns\n    if df.empty or not all(col in df.columns for col in ['date', 'value']):\n        raise ValueError(\"The DataFrame is empty or lacks required columns.\")\n\n    # Convert the 'date' column to ordinal\n    df['date'] = pd.to_datetime(df['date']).dt.to_period('D')\n\n    # Perform KMeans clustering on 'date' and 'value' columns\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(df[['date', 'value']])\n\n    # Plot the clusters\n    fig, ax = plt.subplots()\n    ax.scatter(df['date'], df['value'], c=kmeans.labels_)\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.set_title('KMeans Clustering of Value vs Date')\n    return ax\ndf = pd.DataFrame({'date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'],\n                   'value': [10, 20, 30, 40, 50]})", "problem": "Convert the 'date' column of a DataFrame to ordinal, perform KMeans clustering on 'date' and 'value' columns, and plot the clusters. Required names: x: 'Date (ordinal)' ylabel: 'Value' title: 'KMeans Clustering of Value vs Date'\nThe function should raise the exception for: ValueError: If the DataFrame is empty or lacks required columns.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the scatter plot of the clusters.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n    if df.empty or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"DataFrame must be non-empty and contain 'group', 'date', and 'value' columns.\")\n\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column must be in datetime format.\")\n\n    df['date'] = df['date'].apply(lambda x: x.toordinal())\n    X = df[['date', 'value']]\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(X)\n    y_kmeans = kmeans.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X['date'], X['value'], c=y_kmeans, cmap='viridis')\n    ax.set_title('KMeans Clustering of Value vs Date')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n\n    return ax", "pass": false}
{"task_id": "108", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes a time series in the 'value' column of a DataFrame into trend, seasonality, and residuals.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame containing the time series data.\n    freq : str, optional\n        The frequency of the time series data. The default is 'D'.\n    decomposition_model : str, optional\n        The decomposition model to use. The default is 'multiplicative'.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the decomposition result (DecomposeResult object) and the matplotlib Axes object.\n\n    Raises\n    ------\n    ValueError\n        If 'df' is not a DataFrame, lacks required columns, or contains invalid data types.\n    ValueError\n        If 'freq' is not a valid frequency string.\n    ValueError\n        If 'decomposition_model' is not 'additive' or 'multiplicative'.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if 'value' not in df.columns:\n        raise ValueError(\"'df' must contain a 'value' column\")\n    if not isinstance(freq, str):\n        raise ValueError(\"'freq' must be a string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' must be 'additive' or 'multiplicative'\")\n\n    result = seasonal_decompose(df['value'], freq=freq, model=decomposition_model)\n    fig, ax = plt.subplots()\n    ax.plot(result.trend, label='Trend')\n    ax.plot(result.seasonal, label='Seasonality')\n    ax.plot(result.resid, label='Residuals')\n    ax.legend()\n    return result, ax\ndf = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})", "problem": "Decomposes a time series in the 'value' column of a DataFrame into trend, seasonality, and residuals.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, lacks required columns, or contains invalid data types. ValueError: If 'freq' is not a valid frequency string. ValueError: If 'decomposition_model' is not 'additive' or 'multiplicative'.\nThe function should output with:\n    tuple: A tuple containing the decomposition result (DecomposeResult object) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Validation\n    required_columns = ['group', 'date', 'value']\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in required_columns):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'group', 'date', and 'value' columns.\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid 'decomposition_model': must be 'additive' or 'multiplicative'.\")\n    if not isinstance(freq, str):\n        raise ValueError(\"Invalid 'freq': must be a string representing frequency.\")\n\n    # Setting up DataFrame\n    df = df.set_index('date')\n    df = df.asfreq(freq, method='pad')\n    df['value'] = pd.to_numeric(df['value'], errors='coerce')\n\n    # Handling missing or non-numeric values in 'value' column\n    if df['value'].isnull().any():\n        raise ValueError(\"Non-numeric or missing values found in 'value' column.\")\n\n    # Decomposition\n    result = seasonal_decompose(df['value'], model=decomposition_model)\n\n    ax = df.plot(y='value')\n    plt.ylabel('Value')\n    plt.title('Time Series Decomposition')\n\n    return (result, ax)", "pass": false}
{"task_id": "109", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n    \"\"\"\n    Generates a bar chart representing the distribution of specified items across given locations.\n    The function takes a DataFrame with 'Item' and 'Location' columns and plots the count of each item per location.\n    If lists of items and locations are provided, the chart will only include those specified, otherwise it defaults to a predefined list.\n\n    Args:\n        df (DataFrame): A DataFrame with 'Item' and 'Location' columns.\n        items (list, optional): A list of items to include in the chart. Defaults to None.\n        locations (list, optional): A list of locations to include in the chart. Defaults to None.\n\n    Raises:\n        ValueError: If 'df' is not a DataFrame, or if 'Item' or 'Location' columns are missing.\n\n    Returns:\n        matplotlib.axes.Axes: Axes object with the plotted bar chart.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if \"Item\" not in df.columns or \"Location\" not in df.columns:\n        raise ValueError(\"'Item' and 'Location' columns must be present in 'df'\")\n\n    # If items and locations are not specified, use all items and locations in the DataFrame\n    if items is None:\n        items = df[\"Item\"].unique()\n    if locations is None:\n        locations = df[\"Location\"].unique()\n\n    # Create a new DataFrame with the specified items and locations\n    df_filtered = df[df[\"Item\"].isin(items) & df[\"Location\"].isin(locations)]\n\n    # Plot the bar chart\n    ax = df_filtered.groupby([\"Item\", \"Location\"]).size().unstack().plot(kind=\"bar\", stacked=True)\n\n    return ax\ndf = pd.DataFrame({\"Item\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"], \"Location\": [\"NY\", \"NY\", \"NY\", \"CA\", \"CA\", \"CA\"]})", "problem": "Generates a bar chart representing the distribution of specified items across given locations. The function takes a DataFrame with 'Item' and 'Location' columns and plots the count of each item per location. If lists of items and locations are provided, the chart will only include those specified, otherwise it defaults to a predefined list.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, or if 'Item' or 'Location' columns are missing.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the plotted bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Item', 'Location']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'Item' and 'Location' columns.\")\n\n    items = items or ['apple', 'banana', 'grape', 'orange', 'pineapple']\n    locations = locations or ['store1', 'store2', 'store3', 'store4', 'store5']\n\n    item_count_df = df.groupby(['Location', 'Item']).size().unstack().fillna(0)\n    ax = item_count_df.plot(kind='bar', stacked=True)\n    ax.set_title('Item Distribution by Location')\n    ax.set_ylabel('Count')\n    plt.show()\n    return ax", "pass": false}
{"task_id": "110", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Draw and return the daily turnover line chart from a pandas DataFrame.\n    The function should raise the exception for:\n        ValueError: If 'df' is not a DataFrame or lacks 'Date' or 'Sales' columns, or has no data to plot.\n    The function should output with:\n        Axes: Matplotlib Axes object with the line chart.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame\")\n    if \"Date\" not in df.columns or \"Sales\" not in df.columns:\n        raise ValueError(\"'df' must have 'Date' and 'Sales' columns\")\n    if df.empty:\n        raise ValueError(\"'df' must have data to plot\")\n\n    fig, ax = plt.subplots()\n    ax.plot(df[\"Date\"], df[\"Sales\"])\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Sales\")\n    ax.set_title(\"Daily Turnover\")\n    return ax\ndf = pd.DataFrame({\"Date\": [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\"], \"Sales\": [100, 200, 300]})", "problem": "Draw and return the daily turnover line chart from a pandas DataFrame.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks 'Date' or 'Sales' columns, or has no data to plot.\nThe function should output with:\n    Axes: Matplotlib Axes object with the line chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Date', 'Sales']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'Date' and 'Sales' columns.\")\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = df.set_index('Date')\n    resampled_df = df.resample('D').sum()\n\n    if resampled_df.empty or resampled_df['Sales'].sum() == 0:\n        raise ValueError(\"No data available to plot after resampling.\")\n\n    ax = resampled_df.plot(y='Sales')\n    ax.set_title('Daily Turnover')\n    ax.set_ylabel('Sales')\n    plt.show()\n    return ax", "pass": true}
{"task_id": "111", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df):\n    \"\"\"\n    Draw and return a heat map with temperature data from a pandas DataFrame.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame containing the temperature data.\n\n    Returns:\n        seaborn.heatmap: The heat map object.\n\n    Raises:\n        ValueError: If 'df' is not a DataFrame or lacks 'Date', 'Time', or 'Temperature' columns.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n    if \"Date\" not in df.columns or \"Time\" not in df.columns or \"Temperature\" not in df.columns:\n        raise ValueError(\"'df' must contain 'Date', 'Time', and 'Temperature' columns.\")\n\n    # Convert the 'Date' and 'Time' columns to datetime format\n    df[\"DateTime\"] = pd.to_datetime(df[\"Date\"] + \" \" + df[\"Time\"])\n\n    # Set the index to the 'DateTime' column\n    df = df.set_index(\"DateTime\")\n\n    # Draw the heat map\n    heatmap = sns.heatmap(df[\"Temperature\"], annot=True, cmap=\"YlGnBu\")\n\n    return heatmap", "problem": "Draw and return a heat map with temperature data from a pandas DataFrame.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks 'Date', 'Time', or 'Temperature' columns.\nThe function should output with:\n    Axes: Seaborn heatmap object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Date', 'Time', 'Temperature']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'Date', 'Time', and 'Temperature' columns.\")\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['Month'] = df['Date'].dt.month\n    df['Day'] = df['Date'].dt.day\n\n    df_pivot = df.pivot(index=\"Month\", columns=\"Day\", values=\"Temperature\")\n    ax = sns.heatmap(df_pivot)\n    ax.set_title('Temperature Heatmap')\n    return ax", "pass": false}
{"task_id": "112", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Draws a pie chart of the status distribution from a pandas DataFrame with a 'Status' column and returns the plot object.\n    The 'Status' column in the DataFrame is expected to contain categorical data with possible values like 'Pending', 'In Progress', 'Completed', 'Cancelled'.\n    The function should raise the exception for: ValueError: If 'df' is not a pandas DataFrame or does not contain the 'Status' column.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object with the pie chart.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(\"'df' must be a pandas DataFrame with a 'Status' column\")\n\n    # Create a pie chart of the status distribution\n    ax = df['Status'].value_counts().plot.pie(figsize=(8, 6), autopct='%1.1f%%')\n\n    # Add a title to the plot\n    ax.set_title('Status Distribution')\n\n    # Return the plot object\n    return ax\ndf = pd.DataFrame({'Status': ['Pending', 'In Progress', 'Completed', 'Cancelled', 'Pending', 'In Progress', 'Completed', 'Cancelled']})", "problem": "Draws a pie chart of the status distribution from a pandas DataFrame with a 'Status' column and returns the plot object. The 'Status' column in the DataFrame is expected to contain categorical data with possible values like 'Pending', 'In Progress', 'Completed', 'Cancelled'.\nThe function should raise the exception for: ValueError: If 'df' is not a pandas DataFrame or does not contain the 'Status' column.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(\"Input must be a pandas DataFrame with a 'Status' column.\")\n\n    status_counts = df['Status'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%')\n    ax.set_title('Status Distribution')\n\n    return ax", "pass": true}
{"task_id": "113", "program": "import json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n\n    pass\nimport json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n    if len(keys) != 10:\n        raise ValueError(\"'keys' must contain exactly 10 unique elements\")\n\n    for key in keys:\n        if key in my_dict:\n            my_dict[key] += 1\n        else:\n            my_dict[key] = 1\n\n    with open(\"updated_dictionary.json\", \"w\") as f:\n        json.dump(my_dict, f)\n\n    with open(\"key_frequencies.txt\", \"w\") as f:\n        for key, value in my_dict.items():\n            f.write(f\"{key}: {value}\\n\")\n\n    return my_dict, \"updated_dictionary.json\", \"key_frequencies.txt\"\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\nkeys = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]", "problem": "Updates a given dictionary by adding 10 random elements based on the 'keys' parameter, with values as random integers from 1 to 100. It saves the JSON representation of the updated dictionary to a file and the counts of each key to a separate text file.\nNote that: This function modifies the input dictionary in place. The filename of the json is 'updated_dictionary.json' The filename of the txt file is 'key_frequencies.txt'\nThe function should raise the exception for: ValueError: If 'keys' does not contain exactly 10 unique elements.\nThe function should output with:\n    tuple: The dictionary, path to the JSON file, and path to the text file.\nYou should write self-contained code starting with:\n```\nimport json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n```", "solution": "import json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n    if len(set(keys)) != 10:\n        raise ValueError(\"keys parameter must contain exactly 10 unique elements\")\n\n    for key in keys:\n        my_dict[key] = random.randint(1, 100)\n\n    json_filename = \"updated_dictionary.json\"\n    txt_filename = \"key_frequencies.txt\"\n\n    with open(json_filename, 'w') as json_file:\n        json.dump(my_dict, json_file, indent=4)\n\n    key_counts = Counter(my_dict.keys())\n    with open(txt_filename, 'w') as txt_file:\n        for key, count in key_counts.items():\n            txt_file.write(f\"{key}: {count}\\n\")\n\n    return my_dict, json_filename, txt_filename", "pass": false}
{"task_id": "114", "program": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(my_dict):\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n    The function modifies the dictionary in-place and does not create a new dictionary.\n    The function assumes that 'array' key exists and its value is a numpy array.\n    The function should raise the exception for:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n    The function should output with:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict must be a numpy array.\")\n\n    scaler = MinMaxScaler()\n    normalized_array = scaler.fit_transform(my_dict['array'])\n    my_dict['normalized_array'] = normalized_array\n    return my_dict\nmy_dict = {'array': np.array([1, 2, 3, 4, 5])}", "problem": "Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key. The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\nNote that: Notes: The function modifies the dictionary in-place and does not create a new dictionary. The function assumes that 'array' key exists and its value is a numpy array.\nThe function should raise the exception for: TypeError if the value of the 'array' key in my_dict is not a numpy array\nThe function should output with:\n    dict: The dictionary after adding a key 'normalized_array' with the normalized values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(my_dict):\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(my_dict):\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n\n    my_dict['normalized_array'] = normalized_array\n\n    return my_dict", "pass": false}
{"task_id": "115", "program": "import numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n\n    pass\nimport numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n    arr = np.array(numbers)\n    mode_val = mode(arr)[0][0]\n    entropy_val = entropy(arr, base=2)\n    return {\"mode\": mode_val, \"entropy\": entropy_val}\nnumbers = [1, 2, 3, 4, 5]", "problem": "Creates and returns a dictionary with the mode and entropy of a numpy array constructed from a given list. The function first converts the list into a numpy array, then calculates the mode and the entropy (base 2) of this array, and finally adds them to the initial dictionary with the keys 'mode' and 'entropy'.\nThe function should raise the exception for: ValueError if the input list `numbers` is empty\nThe function should output with:\n    dict: A dictionary containing the 'mode' and 'entropy' of the array with their respective calculated values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n```", "solution": "import numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n    if len(numbers) == 0:\n        raise ValueError\n    my_dict = {'array': np.array(numbers)}\n    mode_value = mode(my_dict['array']).mode[0]\n    ent = entropy(my_dict['array'], base=2)\n    my_dict['mode'] = mode_value\n    my_dict['entropy'] = ent\n    return my_dict", "pass": true}
{"task_id": "116", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n    \"\"\"\n    Generates a numpy array of random samples drawn from a normal distribution and plots the histogram of these samples.\n\n    Parameters\n    ----------\n    mu : float\n        Mean of the normal distribution.\n    sigma : float\n        Standard deviation of the normal distribution.\n    sample_size : int\n        Number of samples to generate.\n\n    Returns\n    -------\n    ndarray\n        A numpy array of shape (sample_size,) containing samples drawn from the specified normal distribution.\n    \"\"\"\n    # Generate random samples from a normal distribution\n    samples = np.random.normal(mu, sigma, sample_size)\n\n    # Plot the histogram of the samples\n    plt.hist(samples, bins=30, alpha=0.75, color='blue')\n    plt.xlabel('Sample values')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Generated Samples')\n    plt.show()\n\n    return samples\nmu = 0\nsigma = 1\nsample_size = 1000", "problem": "Generates a numpy array of random samples drawn from a normal distribution and plots the histogram of these samples. This function specifies the mean (mu), standard deviation (sigma), and sample size (sample_size), making it useful for simulating data, conducting statistical experiments, or initializing algorithms that require normally distributed data with visualization.\nNote that: Notes: Plots a histogram of the generated samples to show the distribution. The histogram features: X-axis labeled \"Sample values\", representing the value of the samples. Y-axis labeled \"Frequency\", showing how often each value occurs. Title \"Histogram of Generated Samples\", describing the content of the graph. Number of bins set to 30, to discretize the sample data into 30 intervals. Alpha value of 0.75 for bin transparency, making the histogram semi-transparent. Color 'blue', giving the histogram a blue color.\nThe function should output with:\n    ndarray: A numpy array of shape (sample_size,) containing samples drawn from the\n    specified normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n    samples = np.random.normal(mu, sigma, sample_size)\n    \n    # Plotting the histogram of the samples\n    plt.hist(samples, bins=30, alpha=0.75, color='blue')\n    plt.title('Histogram of Generated Samples')\n    plt.xlabel('Sample values')\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()\n    \n    return samples", "pass": true}
{"task_id": "117", "program": "import pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n    \"\"\"\n    Generate a Pandas DataFrame with randomized student data.\n\n    Parameters\n    ----------\n    num_of_students : int\n        The number of students to generate data for.\n    seed : int, optional\n        The random seed to use for reproducible outcomes.\n    name_list : list, optional\n        A list of names to use for the 'Name' column.\n    gender_list : list, optional\n        A list of genders to use for the 'Gender' column.\n    age_range : tuple, optional\n        A tuple of integers representing the minimum and maximum ages to use for the 'Age' column.\n    score_range : tuple, optional\n        A tuple of integers representing the minimum and maximum scores to use for the 'Score' column.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame object with columns ['Name', 'Age', 'Gender', 'Score'], containing\n        randomly generated data for the specified number of students. Names and genders are randomly selected\n        from the provided lists (or defaults). Ages and scores are randomly generated within the specified ranges.\n\n    Raises\n    ------\n    ValueError\n        If num_of_students is non-positive.\n    \"\"\"\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be positive\")\n\n    # Set the random seed\n    set_seed(seed)\n\n    # Define the default name and gender lists\n    if name_list is None:\n        name_list = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n    if gender_list is None:\n        gender_list = [\"Male\", \"Female\"]\n\n    # Generate the data\n    data = []\n    for _ in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(*age_range)\n        gender = choice(gender_list)\n        score = np.random.randint(*score_range)\n        data.append([name, age, gender, score])\n\n    # Create the DataFrame\n    df = pd.DataFrame(data, columns=[\"Name\", \"Age\", \"Gender\", \"Score\"])\n\n    return df", "problem": "Generate a Pandas DataFrame with randomized student data. This function allows for specifying the total number of students and the randomness seed for reproducible outcomes. Data attributes include student names, ages, genders, and scores, each derived from provided parameters or defaults.\nNote that: Notes: The 'Name' column values are selected randomly from the 'name_list'. The 'Age' column values are integers randomly generated within the 'age_range', inclusive. The 'Gender' column values are selected randomly from the 'gender_list'. The 'Score' column values are integers randomly generated within the 'score_range', inclusive. Setting the same seed value ensures the reproducibility of the dataset across different function calls.\nThe function should raise the exception for: ValueError: If num_of_students is non-positive.\nThe function should output with:\n    pandas.DataFrame: A DataFrame object with columns ['Name', 'Age', 'Gender', 'Score'], containing\n    randomly generated data for the specified number of students. Names and genders are randomly selected\n    from the provided lists (or defaults). Ages and scores are randomly generated within the specified ranges.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be positive.\")\n\n    set_seed(seed)\n    np.random.seed(seed)\n\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    data = []\n    for _ in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(age_range[0], age_range[1] + 1)\n        gender = choice(gender_list)\n        score = np.random.randint(score_range[0], score_range[1] + 1)\n        data.append([name, age, gender, score])\n\n    columns = ['Name', 'Age', 'Gender', 'Score']\n    df = pd.DataFrame(data, columns=columns)\n    return df", "pass": false}
{"task_id": "118", "program": "import os\nimport shutil\ndef task_func(directory, backup_directory):\n\n    pass\nimport os\nimport shutil\ndef task_func(directory, backup_directory):\n    \"\"\"\n    Scans a specified directory for JSON files and copies them to a backup directory.\n    If the backup directory does not exist, it is created.\n    The function returns a list of paths to the copied files in the backup directory.\n    \"\"\"\n    # Check if the backup directory exists, if not create it\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Get a list of all JSON files in the source directory\n    json_files = [f for f in os.listdir(directory) if f.endswith('.json')]\n\n    # Copy each JSON file to the backup directory\n    copied_files = []\n    for json_file in json_files:\n        src_path = os.path.join(directory, json_file)\n        dst_path = os.path.join(backup_directory, json_file)\n        shutil.copy(src_path, dst_path)\n        copied_files.append(dst_path)\n\n    return copied_files", "problem": "Scans a specified directory for JSON files and copies them to a backup directory. If the backup directory does not exist, it is created. The function returns a list of paths to the copied files in the backup directory.\nNote that: The function assumes that the source directory exists and contains JSON files.\nThe function should output with:\n    list: Paths to the copied JSON files in the backup directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(directory, backup_directory):\n```", "solution": "import os\nimport shutil\ndef task_func(directory, backup_directory):\n    copied_files = []\n\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            src = os.path.join(directory, filename)\n            dst = os.path.join(backup_directory, filename)\n            shutil.copy(src, dst)\n            copied_files.append(dst)\n\n    return copied_files", "pass": true}
{"task_id": "119", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "problem": "Creates and displays a diagram of a parabola represented by the equation y = x^2. The function plots the parabola using matplotlib, sets the title as 'y = x^2', labels the axes as 'x' and 'y', and enables the grid. It uses a fixed range for x values from -10 to 10 with 400 points. This function is used for demonstrating basic plotting capabilities and visualizing quadratic functions. The function does not take any parameters and does not return any value.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    X = np.linspace(-10, 10, 400)\n    Y = X**2\n\n    plt.figure()\n    plt.plot(X, Y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "pass": true}
{"task_id": "120", "program": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate a pandas Series of random dates within a specified date range, including both start_date and end_date, with an optional seed for reproducibility.\n    The function creates a series of dates randomly selected between the specified start and end dates, inclusive.\n    It allows specifying a seed for the random number generator to ensure reproducible results, making it suitable for simulations or tests requiring consistency.\n    Note that:\n        - The start_date and end_date are inclusive, meaning both dates are considered as potential values in the generated series.\n        - The default seed value is 42, ensuring that results are reproducible by default unless a different seed is specified by the user.\n    The function should raise the exception for:\n        - ValueError: If 'start_date' or 'end_date' is not a datetime.datetime instance, or if 'start_date' is later than 'end_date'.\n    The function should output with:\n        - pandas.Series: A Series object containing random dates within the specified range, with each\n        date being a datetime.datetime object. The series length matches the number of days in the\n        specified range.\n    \"\"\"\n    # Check if start_date and end_date are datetime.datetime instances\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime.datetime instances\")\n    # Check if start_date is later than end_date\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than or equal to end_date\")\n    # Set the random seed\n    random_seed(seed)\n    # Calculate the number of days between start_date and end_date\n    num_days = (end_date - start_date).days + 1\n    # Generate a list of random dates\n    dates = [start_date + timedelta(days=randint(0, num_days - 1)) for _ in range(num_days)]\n    # Create a pandas Series from the list of random dates\n    series = pd.Series(dates)\n    return series\nstart_date = datetime(2020, 1, 1)\nend_date = datetime(2020, 12, 31)\nseed = 42", "problem": "Generate a pandas Series of random dates within a specified date range, including both start_date and end_date, with an optional seed for reproducibility. The function creates a series of dates randomly selected between the specified start and end dates, inclusive. It allows specifying a seed for the random number generator to ensure reproducible results, making it suitable for simulations or tests requiring consistency.\nNote that: The start_date and end_date are inclusive, meaning both dates are considered as potential values in the generated series. The default seed value is 42, ensuring that results are reproducible by default unless a different seed is specified by the user.\nThe function should raise the exception for: ValueError: If 'start_date' or 'end_date' is not a datetime.datetime instance, or if 'start_date' is later than 'end_date'.\nThe function should output with:\n    pandas.Series: A Series object containing random dates within the specified range, with each\n    date being a datetime.datetime object. The series length matches the number of days in the\n    specified range.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n```", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \n    if not all(isinstance(date, datetime) for date in [start_date, end_date]):\n        raise ValueError(\"start_date and end_date must be datetime.datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be later than end_date.\")\n\n    random_seed(seed)\n\n    num_days = (end_date - start_date).days\n    dates = pd.Series([start_date + timedelta(days=randint(0, num_days)) for _ in range(num_days)])\n    return dates", "pass": false}
{"task_id": "121", "program": "import pandas as pd\nimport numpy as np\ndef task_func(my_list, seed=42):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(my_list, seed=42):\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n\n    # Simulate sales data for different categories\n    sales_data = pd.DataFrame({\n        \"Electronics\": np.random.randint(100, 1000, size=100),\n        \"Fashion\": np.random.randint(100, 1000, size=100),\n        \"Home & Kitchen\": np.random.randint(100, 1000, size=100),\n        \"Automotive\": np.random.randint(100, 1000, size=100),\n        \"Sports\": np.random.randint(100, 1000, size=100)\n    }, index=pd.date_range(start=\"2022-01-01\", end=\"2022-12-31\", freq=\"D\"))\n\n    # Add item \"12\" to the list\n    my_list.append(\"12\")\n\n    # Plot the sales data\n    fig, ax = plt.subplots()\n    sales_data.plot(ax=ax)\n    ax.set_title(\"Sales Data\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Sales\")\n\n    return sales_data, ax\nmy_list = [\"1\", \"2\", \"3\", \"4\", \"5\"]", "problem": "Adds an item \"12\" to a list 'my_list', simulates sales data for different categories with an optional seed for reproducibility, and returns the data along with a bar plot. The sales data is a DataFrame with random sales figures for predefined categories. The categories are 'Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list.\nThe function should output with:\n    tuple: A tuple containing a pandas DataFrame of simulated sales data and the corresponding matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(my_list, seed=42):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(my_list, seed=42):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    my_list.append(12)\n    categories = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n    sales_data = []\n    for category in categories:\n        sales = my_list[np.random.randint(0, len(my_list))] * np.random.randint(100, 1000)\n        sales_data.append([category, sales])\n\n    sales_df = pd.DataFrame(sales_data, columns=['Category', 'Sales'])\n\n    ax = sales_df.plot(kind='bar', x='Category', y='Sales', legend=False)\n    ax.set_title('Category-wise Sales Data')\n    ax.set_ylabel('Sales')\n\n    return sales_df, ax", "pass": false}
{"task_id": "122", "program": "import numpy as np\nimport random\ndef task_func(my_list):\n\n    pass\nimport numpy as np\nimport random\ndef task_func(my_list):\n    # Append a randomly selected integer between 0 and 100 to the list\n    my_list.append(random.randint(0, 100))\n\n    # Create a numpy array of random floating-point numbers\n    arr = np.random.rand(sum(my_list))\n\n    return arr\nmy_list = [1, 2, 3]", "problem": "Appends a randomly selected integer between 0 and 100 to the given list 'my_list' and returns a numpy array of random floating-point numbers. The size of the returned array is equal to the sum of the numbers in the modified list.\nThe function should output with:\n    numpy.ndarray: An array of random floating-point numbers. The length of the array\n    is equal to the sum of the integers in 'my_list' after a random\n    number has been appended.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(my_list):\n```", "solution": "import numpy as np\nimport random\ndef task_func(my_list):\n    random_number = random.randint(0, 100)\n    my_list.append(random_number)\n\n    size = sum(my_list)\n    random_array = np.random.rand(size)\n\n    return random_array", "pass": true}
{"task_id": "123", "program": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n\n    pass\nimport pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify a list by adding the element '12', then concatenate a number of CSV files from a directory into a single DataFrame.\n    The number of files concatenated is determined by the sum of the numbers in the list.\n    The function should raise the exception for:\n        TypeError: If 'my_list' is not a list.\n        FileNotFoundError: If no files are found in the specified directory.\n    The function should output with:\n        DataFrame: A pandas DataFrame concatenating data from the selected CSV files.\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n\n    my_list.append(12)\n    file_paths = glob.glob(os.path.join(file_dir, f\"*{file_ext}\"))\n    if not file_paths:\n        raise FileNotFoundError(\"No files found in the specified directory\")\n\n    dataframes = []\n    for file_path in file_paths:\n        dataframes.append(pd.read_csv(file_path))\n\n    return pd.concat(dataframes)", "problem": "Modify a list by adding the element '12', then concatenate a number of CSV files from a directory into a single DataFrame. The number of files concatenated is determined by the sum of the numbers in the list.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list. FileNotFoundError: If no files are found in the specified directory.\nThe function should output with:\n    DataFrame: A pandas DataFrame concatenating data from the selected CSV files.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n```", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list.\")\n\n    my_list.append(12)\n    num_files = sum(my_list)\n\n    files = glob.glob(os.path.join(file_dir, '*' + file_ext))[:num_files]\n    if not files:\n        raise FileNotFoundError(f\"No files with extension '{file_ext}' found in directory '{file_dir}'.\")\n\n    data_frames = [pd.read_csv(file) for file in files]\n    concatenated_df = pd.concat(data_frames, ignore_index=True)\n\n    return concatenated_df", "pass": true}
{"task_id": "124", "program": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n\n    pass\nfrom random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' by appending the number 12, then generates a list of random integers based on the sum of elements in 'my_list', limited by 'size'. It measures the time taken for this process and plots a histogram of the generated random numbers. The size of the random numbers list is determined by the sum of the numbers in 'my_list', with an upper limit set by 'size'. The random integers are within the range 1 to 100, inclusive. The histogram plots the distribution of the random numbers generated, with the number range (1-100) on the x-axis and the count (frequency) of each number on the y-axis.\n    The function should raise the exception for: TypeError: If 'my_list' is not a list. ValueError: If 'my_list' contains elements that are not numeric (int or float).\n    The function should output with:\n        tuple: A tuple containing the time taken to generate the list (in seconds, as a float) and\n        the matplotlib Axes object for the histogram. The histogram's x-axis is labeled 'Number',\n        representing the range of random integers, and the y-axis is labeled 'Frequency', representing\n        the frequency of each integer in the generated list.\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n    if not all(isinstance(x, (int, float)) for x in my_list):\n        raise ValueError(\"'my_list' must contain only numeric elements\")\n\n    # Enhance 'my_list' by appending the number 12\n    my_list.append(12)\n\n    # Generate a list of random integers based on the sum of elements in 'my_list'\n    random_seed(seed)\n    random_list = [randint(1, 100) for _ in range(sum(my_list))]\n\n    # Measure the time taken for this process\n    start_time = time.time()\n    random_list = [randint(1, 100) for _ in range(sum(my_list))]\n    end_time = time.time()\n    time_taken = end_time - start_time\n\n    # Plot a histogram of the generated random numbers\n    plt.hist(random_list, bins=100, range=(1, 100))\n    plt.xlabel(\"Number\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Random Numbers\")\n\n    return time_taken, plt.gca()\nmy_list = [1, 2, 3, 4, 5]\nsize = 100\nseed = 100", "problem": "Enhances 'my_list' by appending the number 12, then generates a list of random integers based on the sum of elements in 'my_list', limited by 'size'. It measures the time taken for this process and plots a histogram of the generated random numbers. The size of the random numbers list is determined by the sum of the numbers in 'my_list', with an upper limit set by 'size'. The random integers are within the range 1 to 100, inclusive. The histogram plots the distribution of the random numbers generated, with the number range (1-100) on the x-axis and the count (frequency) of each number on the y-axis.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list. ValueError: If 'my_list' contains elements that are not numeric (int or float).\nThe function should output with:\n    tuple: A tuple containing the time taken to generate the list (in seconds, as a float) and\n    the matplotlib Axes object for the histogram. The histogram's x-axis is labeled 'Number',\n    representing the range of random integers, and the y-axis is labeled 'Frequency', representing\n    the frequency of each integer in the generated list.\nYou should write self-contained code starting with:\n```\nfrom random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n```", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, (int, float)) for item in my_list):\n        raise ValueError(\"All elements in 'my_list' must be numbers.\")\n    random_seed(seed)\n    my_list.append(12)\n\n    total_size = min(sum(my_list), size)\n\n    start_time = time.time()\n    random_list = [randint(1, 100) for _ in range(total_size)]\n    end_time = time.time()\n\n    fig, ax = plt.subplots()\n    ax.hist(random_list, bins=20)\n    ax.set_title('Histogram of Random Numbers')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n\n    return end_time - start_time, ax", "pass": false}
{"task_id": "125", "program": "from collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n\n    pass\nfrom collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n    # Generate all possible combinations of letters of length 'n'\n    combinations = [''.join(combo) for combo in itertools.combinations(LETTERS, n)]\n\n    # Count the occurrences of each letter in the combinations\n    letter_counts = defaultdict(int)\n    for combo in combinations:\n        for letter in combo:\n            letter_counts[letter] += 1\n\n    # Save the letter counts to a JSON file\n    filename = f\"prefix_{random.randint(0, 100)}.json\"\n    with open(filename, \"w\") as f:\n        json.dump(letter_counts, f)\n\n    return filename", "problem": "Generates all possible combinations of a given set of letters of length 'n'. Counts the occurrences of each letter in these combinations and saves the results in a JSON file. The name of the file is prefix_<random-number-here>.json. The value of <random-number-here> is between 0 and 100.\nThe function should output with:\n    str: The name of the generated JSON file containing letter counts.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n```", "solution": "from collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n    combinations = list(itertools.combinations(LETTERS, n))\n    letter_counts = defaultdict(int)\n\n    for combination in combinations:\n        for letter in combination:\n            letter_counts[letter] += 1\n\n    filename = f'letter_combinations_{random.randint(1, 100)}.json'\n    with open(filename, 'w') as f:\n        json.dump(letter_counts, f)\n\n    return filename", "pass": false}
{"task_id": "126", "program": "import pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n\n    pass\nimport pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n    \"\"\"\n    Create a report on the number of animals in a zoo. For each animal, generate a random count within a specified range, calculate the mean, median, and standard deviation of these counts, and return a DataFrame with these statistics. Additionally, generate a bar chart of the counts.\n    Note that: The mode is not included in the returned DataFrame due to the possibility of no repeating values in the randomly generated counts.\n    The function should output with:\n        DataFrame: A pandas DataFrame with columns ['Animal', 'Mean', 'Median', 'Standard Deviation'].\n        Each animal's count is randomly generated 10 times within the range 1 to 100, inclusive.\n    \"\"\"\n    # Set the random seed\n    random_seed(seed)\n\n    # Define the animals and their counts\n    animals = ['Lion', 'Tiger', 'Bear', 'Monkey', 'Giraffe', 'Elephant']\n    counts = [randint(1, 100) for _ in range(10)]\n\n    # Create a DataFrame with the animal names and counts\n    df = pd.DataFrame({'Animal': animals, 'Count': counts})\n\n    # Calculate the mean, median, and standard deviation of the counts\n    df['Mean'] = df['Count'].mean()\n    df['Median'] = df['Count'].median()\n    df['Standard Deviation'] = df['Count'].std()\n\n    # Generate a bar chart of the counts\n    df.plot(kind='bar', x='Animal', y='Count')\n\n    return df", "problem": "Create a report on the number of animals in a zoo. For each animal, generate a random count within a specified range, calculate the mean, median, and standard deviation of these counts, and return a DataFrame with these statistics. Additionally, generate a bar chart of the counts.\nNote that: The mode is not included in the returned DataFrame due to the possibility of no repeating values in the randomly generated counts.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Animal', 'Mean', 'Median', 'Standard Deviation'].\n    Each animal's count is randomly generated 10 times within the range 1 to 100, inclusive.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n```", "solution": "import pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n    random_seed(seed)\n    animals = animals or ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda']\n    report_data = []\n\n    for animal in animals:\n        counts = [randint(1, 100) for _ in range(10)]\n        mean = statistics.mean(counts)\n        median = statistics.median(counts)\n        mode = statistics.mode(counts)\n        std_dev = np.std(counts)\n        report_data.append([animal, mean, median, mode, std_dev])\n    \n    report_df = pd.DataFrame(report_data, columns=['Animal', 'Mean', 'Median', 'Mode', 'Standard Deviation'])\n\n    return report_df", "pass": false}
{"task_id": "127", "program": "import os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n\n    pass\nimport os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n    \"\"\"\n    Moves all files from a specified root directory (ROOT_DIR) to a target directory (DEST_DIR) if they match a specific hash value (SPECIFIC_HASH).\n    The function calculates the MD5 hash of each file in ROOT_DIR and moves it if the hash matches SPECIFIC_HASH.\n    Note that: The function assumes the existence of the root directory. The existence of DEST_DIR is ensured by the function.\n    The function should output with:\n        int: The number of files moved to the target directory.\n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n\n    # Get a list of all files in the root directory\n    files = glob.glob(os.path.join(ROOT_DIR, '*'))\n\n    # Iterate over the files and move them to the destination directory if their hash matches the specific hash\n    num_moved = 0\n    for file in files:\n        if os.path.isfile(file):\n            with open(file, 'rb') as f:\n                file_hash = hashlib.md5(f.read()).hexdigest()\n                if file_hash == SPECIFIC_HASH:\n                    shutil.move(file, DEST_DIR)\n                    num_moved += 1\n\n    return num_moved", "problem": "Moves all files from a specified root directory (ROOT_DIR) to a target directory (DEST_DIR) if they match a specific hash value (SPECIFIC_HASH). The function calculates the MD5 hash of each file in ROOT_DIR and moves it if the hash matches SPECIFIC_HASH.\nNote that: The function assumes the existence of the root directory. The existence of DEST_DIR is ensured by the function.\nThe function should output with:\n    int: The number of files moved to the target directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n```", "solution": "import os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n    files_moved = 0\n\n    os.makedirs(DEST_DIR, exist_ok=True)\n    for filename in glob.glob(os.path.join(ROOT_DIR, '*')):\n        if not os.path.exists(filename) or os.path.isdir(filename):\n            continue\n        with open(filename, 'rb') as f:\n            file_hash = hashlib.md5(f.read()).hexdigest()\n        if file_hash == SPECIFIC_HASH:\n            shutil.move(filename, DEST_DIR)\n            files_moved += 1\n    return files_moved", "pass": true}
{"task_id": "128", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\nimport math\ndef task_func(POINTS=100):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\nimport math\ndef task_func(POINTS=100):\n    # Initialize the x and y coordinates of the walk\n    x = 0\n    y = 0\n    # Create a list to store the x and y coordinates of each step\n    x_coords = [x]\n    y_coords = [y]\n\n    # Loop for the number of points specified\n    for i in range(POINTS):\n        # Choose a random direction (0 for left, 1 for right, 2 for up, 3 for down)\n        direction = randint(0, 3)\n\n        # Update the x and y coordinates based on the chosen direction\n        if direction == 0:\n            x -= 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        else:\n            y += 1\n\n        # Add the new x and y coordinates to the lists\n        x_coords.append(x)\n        y_coords.append(y)\n\n    # Plot the x and y coordinates using matplotlib\n    plt.plot(x_coords, y_coords)\n    plt.xlabel('X Coordinate')\n    plt.ylabel('Y Coordinate')\n    plt.title('Random Walk')\n    plt.show()\n\n    # Return the matplotlib figure object\n    return plt.gcf()", "problem": "Simulates a random walk in a two-dimensional space and draws the path using matplotlib. The walk is determined by randomly choosing directions at each step. The function generates two numpy arrays representing the x and y coordinates of each step and plots these points to visualize the path of the walk.\nThe function should output with:\n    A matplotlib figure object representing the plot of the random walk.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\nimport math\ndef task_func(POINTS=100):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\nimport math\ndef task_func(POINTS=100):\n    x = np.zeros(POINTS)\n    y = np.zeros(POINTS)\n\n    for i in range(1, POINTS):\n        val = randint(0, 1)\n        if val == 1:\n            x[i] = x[i - 1] + math.cos(2 * math.pi * val)\n            y[i] = y[i - 1] + math.sin(2 * math.pi * val)\n        else:\n            x[i] = x[i - 1] - math.cos(2 * math.pi * val)\n            y[i] = y[i - 1] - math.sin(2 * math.pi * val)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    plt.show()\n    return fig", "pass": false}
{"task_id": "129", "program": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n\n    pass\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape the first table from a web page and extract data into a Pandas DataFrame.\n    This function scrapes the first table found on the specified web page URL and extracts the data into a DataFrame, where each row in the DataFrame corresponds to a table row (<tr>) from the web page, and each column represents the data contained within table data elements (<td>) of that row. The DataFrame's columns are named after the table's header row (<th> elements), if present. If the table lacks headers, the DataFrame's columns remain unnamed.\n    Note that: Assumes the webpage contains at least one table and attempts to parse the first table encountered.\n    The function should raise the exception for:\n        ConnectionError: If there is an issue connecting to the URL.\n        requests.HTTPError: If the HTTP request to the URL fails.\n        ValueError: If no table data is found on the page or if the page content cannot be parsed.\n    The function should output with:\n        pd.DataFrame: A DataFrame containing the scraped table data, with rows corresponding to table rows and\n        columns named after the table headers, if available.\n    \"\"\"\n    # Make an HTTP GET request to the specified URL\n    response = requests.get(url)\n\n    # Check for HTTP errors\n    response.raise_for_status()\n\n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Find the first table on the page\n    table = soup.find('table')\n\n    # Check if the table exists\n    if not table:\n        raise ValueError(\"No table data found on the page\")\n\n    # Create a list to store the table data\n    table_data = []\n\n    # Iterate over the table rows\n    for row in table.find_all('tr'):\n        # Create a list to store the cells in the current row\n        row_data = []\n\n        # Iterate over the cells in the current row\n        for cell in row.find_all(['th', 'td']):\n            # Append the cell data to the row data list\n            row_data.append(cell.text.strip())\n\n        # Append the row data list to the table data list\n        table_data.append(row_data)\n\n    # Create a Pandas DataFrame from the table data\n    df = pd.DataFrame(table_data)\n\n    # Set the column names of the DataFrame\n    if table.find('thead'):\n        # If the table has a header row, use the header row to set the column names\n        df.columns = [th.text.strip() for th in table.find('thead').find_all('th')]\n    else:\n        # If the table lacks a header row, use the first row of data to set the column names\n        df.columns = df.iloc[0]\n\n    # Return the DataFrame\n    return df\nurl = 'https://www.w3schools.com/html/html_tables.asp'", "problem": "Scrape the first table from a web page and extract data into a Pandas DataFrame. This function scrapes the first table found on the specified web page URL and extracts the data into a DataFrame, where each row in the DataFrame corresponds to a table row (<tr>) from the web page, and each column represents the data contained within table data elements (<td>) of that row. The DataFrame's columns are named after the table's header row (<th> elements), if present. If the table lacks headers, the DataFrame's columns remain unnamed.\nNote that: Assumes the webpage contains at least one table and attempts to parse the first table encountered.\nThe function should raise the exception for: ConnectionError: If there is an issue connecting to the URL. requests.HTTPError: If the HTTP request to the URL fails. ValueError: If no table data is found on the page or if the page content cannot be parsed.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the scraped table data, with rows corresponding to table rows and\n    columns named after the table headers, if available.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n```", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Could not connect to URL: {e}\")\n    except requests.HTTPError as e:\n        raise requests.HTTPError(f\"HTTP error occurred: {e}\")\n\n    try:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        table = soup.find('table')  # Assuming only the first table is of interest\n        if table is None:\n            raise ValueError(\"No table found on the page.\")\n\n        # Extracting headers if present\n        headers = [th.text.strip() for th in table.find_all('th')]\n        \n        # Extracting data rows\n        data = []\n        for row in table.find_all('tr'):\n            cols = row.find_all('td')\n            if not cols:  # This skips rows without <td> (like header rows)\n                continue\n            cols = [ele.text.strip() for ele in cols]\n            data.append(cols)\n\n        if not data:\n            raise ValueError(\"No data found in the table.\")\n\n        df = pd.DataFrame(data, columns=headers if headers else None)\n    except Exception as e:\n        raise ValueError(f\"Error parsing the page content: {e}\")\n    return df", "pass": false}
{"task_id": "130", "program": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n\n    pass\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    # Convert hex string to bytes\n    hex_bytes = binascii.unhexlify(hex_str)\n\n    # Generate random salt of specified size\n    salt = os.urandom(salt_size)\n\n    # Append salt to hex bytes\n    salted_data = salt + hex_bytes\n\n    # Compute SHA256 hash of salted data\n    hash = hashlib.sha256(salted_data).hexdigest()\n\n    # Return base64-encoded salt and SHA256 hash\n    return (base64.b64encode(salt), hash)", "problem": "Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash. The function generates a random salt of the specified size, appends it to the byte representation of the hex string, and then computes the SHA256 hash of the salted data. The salt and hash are returned as a tuple.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded salt and the SHA256 hash.\nYou should write self-contained code starting with:\n```\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n```", "solution": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    salt = os.urandom(salt_size)\n    data = binascii.unhexlify(hex_str.replace('\\\\x', ''))\n    salted_data = salt + data\n    hash_value = hashlib.sha256(salted_data).hexdigest()\n\n    return (base64.b64encode(salt).decode('utf-8'), hash_value)", "pass": false}
{"task_id": "131", "program": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n\n    pass\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    # Convert hex string to bytes\n    hex_bytes = binascii.unhexlify(hex_str)\n\n    # Generate random salt of specified size\n    salt = os.urandom(salt_size)\n\n    # Append salt to hex bytes\n    salted_data = salt + hex_bytes\n\n    # Compute SHA256 hash of salted data\n    hash_obj = hashlib.sha256()\n    hash_obj.update(salted_data)\n    hash_digest = hash_obj.digest()\n\n    # Base64 encode salt and hash\n    salt_b64 = base64.b64encode(salt).decode()\n    hash_b64 = base64.b64encode(hash_digest).decode()\n\n    # Return tuple of base64-encoded salt and hash\n    return (salt_b64, hash_b64)\nhex_str = \"68656c6c6f20776f726c64\"\nsalt_size = 16", "problem": "Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash. The function generates a random salt of the given size, appends it to the byte representation of the hex string, and then computes the SHA256 hash of the salted data. The salt and hash are returned as a tuple.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded salt and the SHA256 hash.\nYou should write self-contained code starting with:\n```\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n```", "solution": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    salt = os.urandom(salt_size)\n    data = binascii.unhexlify(hex_str.replace('\\\\x', ''))\n    salted_data = salt + data\n    hash_value = hashlib.sha256(salted_data).hexdigest()\n\n    return (base64.b64encode(salt).decode('utf-8'), hash_value)", "pass": false}
{"task_id": "132", "program": "import binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n\n    pass\nimport binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n    # Check if the input is a valid hex string\n    if not hex_str.startswith('\\\\x'):\n        hex_str = '\\\\x' + hex_str\n    try:\n        byte_array = binascii.unhexlify(hex_str)\n    except binascii.Error:\n        raise ValueError('Invalid hex string')\n\n    # Convert the byte array to a pandas DataFrame\n    df = pd.DataFrame(byte_array, columns=['Byte Value'])\n    df['Frequency'] = df['Byte Value'].value_counts()\n\n    # Plot the byte frequencies\n    ax = df.plot.bar(x='Byte Value', y='Frequency', rot=0)\n    ax.set_xlabel('Byte Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Byte Frequencies')\n\n    return df, ax\nhex_str = '\\\\x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\\\\x06\\\\x07\\\\x08\\\\x09\\\\x0a\\\\x0b\\\\x0c\\\\x0d\\\\x0e\\\\x0f'", "problem": "Converts a hex string representation into actual bytes and records the frequency of each byte value. The function supports hex strings with or without '\\\\x' prefix.\nThe function should raise the exception for: ValueError: If 'hex_str' is not a valid hex string.\nThe function should output with:\n    tuple: A tuple containing a pandas DataFrame of byte frequencies with columns ['Byte Value', 'Frequency']\n    and a matplotlib Axes object for the plot with 'Byte Value' as the X-axis and 'Frequency' as the Y-axis.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n```", "solution": "import binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n    hex_str_cleaned = hex_str.replace('\\\\x', '')\n    try:\n        bytes_data = binascii.unhexlify(hex_str_cleaned)\n    except binascii.Error:\n        raise ValueError(\"Invalid hex string\")\n\n    byte_values, byte_counts = np.unique(np.frombuffer(bytes_data, dtype=np.uint8), return_counts=True)\n    df = pd.DataFrame({'Byte Value': byte_values, 'Frequency': byte_counts})\n\n    fig, ax = plt.subplots()\n    ax.bar(df['Byte Value'], df['Frequency'])\n    ax.set_xlabel('Byte Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Bytes in Hex String')\n\n    return df, ax", "pass": false}
{"task_id": "133", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n    \"\"\"\n    Normalize the last column of the DataFrame using MinMaxScaler from sklearn and plot the normalized data.\n    The function should raise the exception for: ValueError: If the input is not a DataFrame or if the DataFrame is empty.\n    The function should output with:\n        DataFrame: A pandas DataFrame where the last column has been normalized.\n        Axes: A Matplotlib Axes object representing the plot of the normalized last column. The plot includes:\n            Title: 'Normalized Data of <column_name>'\n            X-axis label: 'Index'\n            Y-axis label: 'Normalized Value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Normalize the last column using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(df.iloc[:, -1].values.reshape(-1, 1))\n\n    # Create a new DataFrame with the normalized data\n    normalized_df = pd.DataFrame(normalized_data, columns=[\"Normalized_Data\"])\n\n    # Plot the normalized data\n    fig, ax = plt.subplots()\n    ax.plot(normalized_df.index, normalized_df[\"Normalized_Data\"])\n    ax.set_title(f\"Normalized Data of {df.columns[-1]}\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Normalized Value\")\n\n    return normalized_df, ax\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})", "problem": "Normalize the last column of the DataFrame using MinMaxScaler from sklearn and plot the normalized data.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or if the DataFrame is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame where the last column has been normalized.\n    Axes: A Matplotlib Axes object representing the plot of the normalized last column. The plot includes:\n    Title: 'Normalized Data of <column_name>'\n    X-axis label: 'Index'\n    Y-axis label: 'Normalized Value'\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    last_col_name = df.columns[-1]\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(df[[last_col_name]])\n    normalized_df = df.copy()\n    normalized_df[last_col_name] = normalized_values.flatten()\n    \n    fig, ax = plt.subplots()\n    ax.plot(normalized_df.index, normalized_df[last_col_name])\n    ax.set_title(f'Normalized Data of {last_col_name}')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Normalized Value\")\n\n    return normalized_df, ax", "pass": false}
{"task_id": "134", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n    \"\"\"\n    Draw a histogram of the last column of the DataFrame and return the plot.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n        bins (int, optional): The number of bins in the histogram. Defaults to 20.\n\n    Returns:\n        Axes: A Matplotlib Axes object representing the histogram of the last column.\n\n    Raises:\n        ValueError: If the input is not a DataFrame, or if the DataFrame is empty.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    last_column = df.iloc[:, -1]\n    ax = last_column.plot.hist(bins=bins, title=f\"Histogram of {last_column.name}\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    return ax", "problem": "Draw a histogram of the last column of the DataFrame and return the plot.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame, or if the DataFrame is empty.\nThe function should output with:\n    Axes: A Matplotlib Axes object representing the histogram of the last column. The histogram includes:\n    Title: 'Histogram of ' followed by the name of the last column.\n    X-axis label: 'Value'\n    Y-axis label: 'Frequency'\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"The input must be a non-empty pandas DataFrame.\")\n\n    last_col_name = df.columns[-1]\n    fig, ax = plt.subplots()\n    ax.hist(df[last_col_name], bins=bins)\n    ax.set_title(f'Histogram of {last_col_name}')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    plt.show()\n    return ax", "pass": true}
{"task_id": "135", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Impute missing values in the last column of the dataframe using mean imputation, then create a box plot to visualize the distribution of data in the last column.\n    The function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\n    The function should output with:\n        DataFrame: A pandas DataFrame with the imputed last column.\n        Axes: A matplotlib Axes object with the boxplot of the last column of the dataframe.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input is not a DataFrame or has no columns.\")\n\n    # Impute missing values in the last column using mean imputation\n    imputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n    imputed_df = imputer.fit_transform(df.iloc[:, -1])\n\n    # Create a box plot to visualize the distribution of data in the last column\n    ax = sns.boxplot(x=imputed_df)\n\n    return imputed_df, ax\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [1, 2, np.nan, 4, 5], \"C\": [1, 2, 3, 4, np.nan]})", "problem": "Impute missing values in the last column of the dataframe using mean imputation, then create a box plot to visualize the distribution of data in the last column.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the imputed last column.\n    Axes: A matplotlib Axes object with the boxplot of the last column of the dataframe.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame.\")\n\n    last_col = df.columns[-1]\n    imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n    df[last_col] = imp_mean.fit_transform(df[last_col].values.reshape(-1, 1))\n\n    fig, ax = plt.subplots()\n    sns.boxplot(x=df[last_col], ax=ax)\n    ax.set_title('Boxplot of Last Column')\n    ax.set_xlabel(last_col)\n    return df, ax", "pass": false}
{"task_id": "136", "program": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(df)\n\n    principal_components_df = pd.DataFrame(principal_components, columns=[\"Principal Component 1\", \"Principal Component 2\"])\n\n    fig, ax = plt.subplots()\n    ax.scatter(principal_components_df[\"Principal Component 1\"], principal_components_df[\"Principal Component 2\"])\n    ax.set_xlabel(\"Principal Component 1\")\n    ax.set_ylabel(\"Principal Component 2\")\n    ax.set_title(\"2 Component PCA\")\n\n    return principal_components_df, ax", "problem": "Perform Principal Component Analysis (PCA) on the dataframe and visualize the two main components.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame, or if the DataFrame is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the principal components named 'Principal Component 1' and 'Principal Component 2'.\n    Axes: A Matplotlib Axes object representing the scatter plot of the two principal components. The plot includes:\n    Title: '2 Component PCA'\n    X-axis label: 'Principal Component 1'\n    Y-axis label: 'Principal Component 2'\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(df)\n\n    pca_df = pd.DataFrame(data=principal_components, columns=['Principal Component 1', 'Principal Component 2'])\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_df['Principal Component 1'], pca_df['Principal Component 2'])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('2 Component PCA')\n\n    return pca_df, ax", "pass": true}
{"task_id": "137", "program": "import pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n    \"\"\"\n    Calculate the skewness of the last column of the dataframe.\n    The function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\n    The function should output with:\n        float: The skewness of the last column of the dataframe.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame has no columns\")\n    return skew(df.iloc[:, -1])\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [2, 4, 6, 8, 10]})", "problem": "Calculate the skewness of the last column of the dataframe.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\nThe function should output with:\n    float: The skewness of the last column of the dataframe.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame.\")\n\n    last_col = df.columns[-1]\n    skewness = skew(df[last_col].dropna())  # dropna() to handle NaN values\n\n    return skewness", "pass": true}
{"task_id": "138", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n    \"\"\"\n    Create and return a bar chart of the frequency of letters in a DataFrame where the column 'Letters' contains English uppercase letters.\n    The function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks the 'Letters' column.\n    The function should output with:\n        Axes: A Matplotlib Axes object representing the bar graph of letter frequency, with the x-axis labeled 'Letters', the y-axis labeled 'Frequency', and the title 'Letter Frequency'.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or 'Letters' not in df.columns:\n        raise ValueError(\"'df' must be a DataFrame with a 'Letters' column.\")\n\n    # Count the frequency of each letter in the 'Letters' column\n    letter_counts = df['Letters'].value_counts()\n\n    # Create a bar chart of the letter frequencies\n    ax = letter_counts.plot(kind='bar', x='Letters', y='Frequency', title='Letter Frequency')\n\n    # Set the x-axis label\n    ax.set_xlabel('Letters')\n\n    # Set the y-axis label\n    ax.set_ylabel('Frequency')\n\n    # Set the title\n    ax.set_title('Letter Frequency')\n\n    return ax\ndf = pd.DataFrame({'Letters': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']})", "problem": "Create and return a bar chart of the frequency of letters in a DataFrame where the column 'Letters' contains English uppercase letters.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks the 'Letters' column.\nThe function should output with:\n    Axes: A Matplotlib Axes object representing the bar graph of letter frequency, with the x-axis labeled 'Letters', the y-axis labeled 'Frequency', and the title 'Letter Frequency'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n    if not isinstance(df, pd.DataFrame) or 'Letters' not in df.columns:\n        raise ValueError(\"The input must be a pandas DataFrame with a 'Letters' column.\")\n\n    letter_frequency = df['Letters'].value_counts().reindex(letters, fill_value=0)\n    ax = letter_frequency.plot(kind='bar')\n    ax.set_title('Letter Frequency')\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    plt.show()\n    return ax", "pass": false}
{"task_id": "139", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Draw histograms of numeric columns in a DataFrame and return the plots.\n    Each histogram represents the distribution of values in one numeric column,\n    with the column name as the plot title, 'Value' as the x-axis label,\n    and 'Frequency' as the y-axis label.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n\n    Returns:\n        list: A list of Matplotlib Axes objects, each representing a histogram for a numeric column.\n\n    Raises:\n        ValueError: If the input is not a non-empty DataFrame or if there are no numeric columns in the DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n\n    numeric_cols = df.select_dtypes(include=np.number).columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"Input DataFrame must have at least one numeric column.\")\n\n    fig, axs = plt.subplots(len(numeric_cols), 1, figsize=(10, 10))\n    for i, col in enumerate(numeric_cols):\n        df[col].hist(ax=axs[i])\n        axs[i].set_title(col)\n        axs[i].set_xlabel(\"Value\")\n        axs[i].set_ylabel(\"Frequency\")\n\n    return axs\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [1.5, 2.5, 3.5, 4.5, 5.5], \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})", "problem": "Draw histograms of numeric columns in a DataFrame and return the plots. Each histogram represents the distribution of values in one numeric column, with the column name as the plot title, 'Value' as the x-axis label, and 'Frequency' as the y-axis label.\nThe function should raise the exception for: ValueError: If the input is not a non-empty DataFrame or if there are no numeric columns in the DataFrame.\nThe function should output with:\n    list: A list of Matplotlib Axes objects, each representing a histogram for a numeric column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"The input must be a non-empty pandas DataFrame.\")\n\n    numeric_cols = df.select_dtypes(include=np.number).columns\n    if not numeric_cols.size:\n        raise ValueError(\"DataFrame contains no numeric columns.\")\n\n    axes = []\n    for col in numeric_cols:\n        fig, ax = plt.subplots()\n        df[col].plot(kind='hist', title=col, ax=ax)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n\n    return axes", "pass": true}
{"task_id": "140", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n    \"\"\"\n    Standardize specified numeric columns in a dataframe.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The dataframe to standardize.\n    cols : list\n        The columns to standardize.\n\n    Returns\n    -------\n    pandas.DataFrame\n        The dataframe with standardized columns.\n\n    Raises\n    ------\n    ValueError\n        If 'df' is not a DataFrame, 'cols' is not a list, or columns in 'cols' don't exist in 'df'.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas.DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"Some columns in 'cols' do not exist in 'df'\")\n\n    scaler = StandardScaler()\n    df_scaled = scaler.fit_transform(df[cols])\n    df[cols] = pd.DataFrame(df_scaled, index=df.index, columns=cols)\n    return df\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})", "problem": "Standardize specified numeric columns in a dataframe.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, 'cols' is not a list, or columns in 'cols' don't exist in 'df'.\nThe function should output with:\n    DataFrame: The dataframe with standardized columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a pandas DataFrame.\")\n    if not isinstance(cols, list) or not all(isinstance(col, str) for col in cols):\n        raise ValueError(\"cols must be a list of column names.\")\n    if not all(col in df.columns for col in cols):\n        raise ValueError(\"All columns in cols must exist in the dataframe.\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df", "pass": true}
{"task_id": "141", "program": "import numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    np.random.seed(seed)\n    data = np.random.randint(1, 100, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    means = {}\n    medians = {}\n    for col in columns:\n        means[col] = df[col].mean()\n        medians[col] = df[col].median()\n\n    return df, {\"mean\": means, \"median\": medians}", "problem": "Create a Pandas DataFrame with a specified number of rows and six columns (default A-F), each filled with random numbers between 1 and 100, using a specified seed for reproducibility. Additionally, calculate the mean and median for each column.\nThe function should raise the exception for: ValueError: If 'rows' is not a positive integer greater than 0.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated data.\n    dict: A dictionary containing the calculated mean and median for each column.\n    The dictionary format is:\n    {\n    'ColumnName': {\n    'mean': MeanValue,\n    'median': MedianValue\n    }, ...\n    }\n    where 'ColumnName' is each of the specified column names, 'MeanValue' is the calculated mean,\n    and 'MedianValue' is the calculated median for that column.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"rows must be a positive integer greater than 0.\")\n\n    np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    \n    stats_dict = {}\n    for col in columns:\n        stats_dict[col] = {\n            'mean': statistics.mean(df[col]),\n            'median': statistics.median(df[col])\n        }\n    \n    return df, stats_dict", "pass": false}
{"task_id": "142", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate the x and y values for the sine and cosine functions\n    x = np.linspace(0, 2*np.pi, 1000)\n    y_sin = np.sin(x)\n    y_cos = np.cos(x)\n\n    # Create a figure and two subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot the sine function on the first subplot\n    ax1.plot(x, y_sin, label='Sine function')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('sin(x)')\n    ax1.set_title('Sine function')\n\n    # Plot the cosine function on the second subplot\n    ax2.plot(x, y_cos, label='Cosine function')\n    ax2.set_xlabel('x')\n    ax2.set_ylabel('cos(x)')\n    ax2.set_title('Cosine function')\n\n    # Return the figure and the subplots\n    return fig, (ax1, ax2)", "problem": "Generate diagrams for the sine and cosine functions over the interval [0, 2\u03c0]. This function plots the sine and cosine functions, setting appropriate titles and axis labels. The sine function plot is labeled 'Sine function', with x-axis labeled 'x' and y-axis labeled 'sin(x)'. The cosine function plot is labeled 'Cosine function', with x-axis labeled 'x' and y-axis labeled 'cos(x)'.\nThe function should output with:\n    Figure: A Matplotlib Figure object containing the plots.\n    ndarray: An array of Matplotlib Axes objects for the subplots, where:\n    The first Axes object contains the sine function plot.\n    The second Axes object contains the cosine function plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x_values = np.linspace(0, 2 * np.pi, 400)\n    fig, axs = plt.subplots(2)\n    \n    axs[0].plot(x_values, np.sin(x_values))\n    axs[0].set_title('Sine function')\n    axs[0].set_xlabel('x')\n    axs[0].set_ylabel('sin(x)')\n    \n    axs[1].plot(x_values, np.cos(x_values))\n    axs[1].set_title('Cosine function')\n    axs[1].set_xlabel('x')\n    axs[1].set_ylabel('cos(x)')\n    \n    plt.tight_layout()\n    \n    return fig, axs", "pass": true}
{"task_id": "143", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Define the equation and the solution point\n    equation = lambda x: 2*x + 1\n    solution_point = (2, 5)\n\n    # Define the x and y ranges\n    x_range = np.linspace(-10, 10, 100)\n    y_range = np.linspace(-10, 10, 100)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.plot(x_range, equation(x_range), label='y=2x+1')\n    ax.scatter(solution_point[0], solution_point[1], marker='o', color='green', label='Solution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Solution of the equation y=2x+1 at x=2')\n    ax.legend()\n\n    return ax", "problem": "Draws the linear equation y = 2x + 1 on a 2D plot for x values ranging from -10 to 10, and marks the solution for x = 2 with a green 'o' (circle) marker. The plot includes: - A red line representing the equation y = 2x + 1, labeled as 'y=2x+1', for x in [-10, 10]. - A green circle marker indicating the solution at x = 2, y = 5. - Title: 'Solution of the equation y=2x+1 at x=2' - X-axis labeled as 'x', with a range from -10 to 10. - Y-axis labeled as 'y', with a range automatically adjusted based on the equation. - A legend indicating labels for the equation and the solution point.\nThe function should output with:\n    matplotlib.axes.Axes: An object representing the plot with specified features and ranges.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    X = np.linspace(-10, 10, 400)  # X range specified\n    y = 2 * X + 1\n\n    fig, ax = plt.subplots()\n    ax.plot(X, y, '-r', label='y=2x+1')\n    \n    solution_y = 2 * 2 + 1  # y value at x = 2\n    ax.plot(2, solution_y, 'go', label='Solution at x=2')\n    \n    ax.set_title('Solution of the equation y=2x+1 at x=2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_xlim([-10, 10])  # Explicitly setting the x-axis range\n    # ax.set_ylim is optional and can be set if a specific y-range is desired\n    ax.legend(loc='best')\n    ax.grid()\n\n    return ax", "pass": false}
{"task_id": "144", "program": "import ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n\n    pass\nimport ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n    \"\"\"\n    Scans a specified IP address range and sends an HTTP GET request to each IP to verify if it is an active web server.\n    The function requires an IP range in CIDR format (e.g., '192.168.0.0/16') and a timeout value in seconds.\n    It returns a list of IPs where the request returned a status code of 200.\n    If the request is not successful, then ignore and continue to the next IP address.\n    The function should raise the exception for: ValueError: If an invalid IP range is provided.\n    The function should output with:\n        list: A list of IP addresses that responded with a status code of 200.\n    \"\"\"\n    # Check if the IP range is valid\n    try:\n        ipaddress.ip_network(ip_range)\n    except ValueError:\n        raise ValueError(\"Invalid IP range provided\")\n\n    # Create a list of IP addresses in the range\n    ip_list = list(ipaddress.ip_network(ip_range).hosts())\n\n    # Send HTTP GET requests to each IP address and check the status code\n    active_ips = []\n    for ip in ip_list:\n        try:\n            response = requests.get(f\"http://{ip}\", timeout=timeout)\n            if response.status_code == 200:\n                active_ips.append(ip)\n        except requests.exceptions.RequestException:\n            pass\n\n    return active_ips", "problem": "Scans a specified IP address range and sends an HTTP GET request to each IP to verify if it is an active web server. The function requires an IP range in CIDR format (e.g., '192.168.0.0/16') and a timeout value in seconds. It returns a list of IPs where the request returned a status code of 200. If the request is not success, then ignore and continue to the next IP address.\nThe function should raise the exception for: ValueError: If an invalid IP range is provided.\nThe function should output with:\n    list: A list of IP addresses that responded with a status code of 200.\nYou should write self-contained code starting with:\n```\nimport ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n```", "solution": "import ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n    results = []\n    try:\n        network = ipaddress.IPv4Network(ip_range, strict=False)  # Note the `strict=False`\n    except ValueError as e:\n        raise ValueError(f\"Invalid IP range: {e}\")\n\n    for ip in network:\n        try:\n            response = requests.get(f\"http://{ip}\", timeout=timeout)\n            if response.status_code == 200:\n                results.append(str(ip))\n        except requests.exceptions.ConnectionError as e:\n            pass\n    return results", "pass": false}
{"task_id": "145", "program": "import csv\nfrom ipaddress import IPv4Network\ndef task_func(ip_range, csv_path):\n\n    pass\nimport csv\nfrom ipaddress import IPv4Network\ndef task_func(ip_range, csv_path):\n    \"\"\"\n    Generates a CSV file listing all IP addresses in the specified IP range.\n    Each IP address is written as a row in the CSV file.\n    The function should output with:\n        str: The path to the generated CSV file.\n    \"\"\"\n    # Create a list of IP addresses in the range\n    ip_list = list(IPv4Network(ip_range))\n\n    # Write the list of IP addresses to a CSV file\n    with open(csv_path, \"w\", newline=\"\") as csvfile:\n        writer = csv.writer(csvfile)\n        for ip in ip_list:\n            writer.writerow([ip])\n\n    return csv_path", "problem": "Generates a CSV file listing all IP addresses in the specified IP range. Each IP address is written as a row in the CSV file.\nThe function should output with:\n    str: The path to the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nfrom ipaddress import IPv4Network\ndef task_func(ip_range, csv_path):\n```", "solution": "import csv\nfrom ipaddress import IPv4Network\ndef task_func(ip_range, csv_path):\n    with open(csv_path, 'w', newline='') as csvfile:\n        fieldnames = ['IP Address']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n\n        for ip in IPv4Network(ip_range):\n            writer.writerow({'IP Address': str(ip)})\n\n    return csv_path", "pass": false}
{"task_id": "146", "program": "import subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n\n    pass\nimport subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating their active status (True if the ping is successful, False otherwise).\n    The function should raise the exception for: subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n    The function should output with:\n        dict: A dictionary mapping IP addresses to their active status.\n    \"\"\"\n    ip_range = IPv4Network(ip_range)\n    active_ips = {}\n    for ip in ip_range:\n        try:\n            subprocess.check_output([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips\nip_range = \"192.168.1.0/24\"", "problem": "Scans the specified IP address range and pings each IP to check if it is active. The function returns a dictionary with IP addresses as keys and a boolean value indicating their active status (True if the ping is successful, False otherwise).\nThe function should raise the exception for: subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their active status.\nYou should write self-contained code starting with:\n```\nimport subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n```", "solution": "import subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n    active_ips = {}\n\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n\n    return active_ips", "pass": true}
{"task_id": "147", "program": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n\n    pass\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP address range and checks if a specified port is open on each IP.\n    The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\n\n    Parameters:\n    ip_range (str): The IP address range to scan, in CIDR notation (e.g. \"192.168.1.0/24\").\n    port (int): The port number to check.\n\n    Returns:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\n    \"\"\"\n    # Create a dictionary to store the results\n    results = {}\n\n    # Parse the IP address range\n    ip_network = IPv4Network(ip_range)\n\n    # Create a list of all IP addresses in the range\n    ip_addresses = list(ip_network.hosts())\n\n    # Create a list of threads to run the port scan in parallel\n    threads = []\n\n    # Iterate over the IP addresses and create a thread for each one\n    for ip_address in ip_addresses:\n        # Create a new thread for the port scan\n        thread = Thread(target=port_scan, args=(ip_address, port))\n\n        # Add the thread to the list of threads\n        threads.append(thread)\n\n    # Start all the threads\n    for thread in threads:\n        thread.start()\n\n    # Wait for all the threads to finish\n    for thread in threads:\n        thread.join()\n\n    # Add the results to the dictionary\n    for thread in threads:\n        ip_address, port_status = thread.result\n        results[ip_address] = port_status\n\n    return results\ndef port_scan(ip_address, port):\n    \"\"\"\n    Checks if a specified port is open on a given IP address.\n\n    Parameters:\n    ip_address (str): The IP address to check.\n    port (int): The port number to check.\n\n    Returns:\n    tuple: A tuple containing the IP address and the port status (True if open, False otherwise).\n    \"\"\"\n    # Create a socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Set a timeout to avoid hanging\n    sock.settimeout(1)\n\n    # Try to connect to the port\n    try:\n        sock.connect((ip_address, port))\n        sock.close()\n        return ip_address, True\n    except socket.timeout:\n        return ip_address, False", "problem": "Scans a specified IP address range and checks if a specified port is open on each IP. The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\nYou should write self-contained code starting with:\n```\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n```", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    open_ports = {}\n\n    def check_port(ip):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        try:\n            sock.connect((str(ip), port))\n            open_ports[str(ip)] = True\n        except socket.error:\n            open_ports[str(ip)] = False\n        finally:\n            sock.close()\n\n    threads = []\n\n    for ip in IPv4Network(ip_range):\n        thread = Thread(target=check_port, args=(ip,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    return open_ports", "pass": false}
{"task_id": "148", "program": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Encrypt the categorical data in a specific column of a DataFrame using LabelEncoder.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The DataFrame to be encoded.\n    column_name : str\n        The name of the column to be encoded.\n\n    Returns\n    -------\n    pd.DataFrame\n        The DataFrame with the encoded column.\n    \"\"\"\n    # Create a LabelEncoder object\n    le = LabelEncoder()\n\n    # Fit the LabelEncoder to the column of interest\n    le.fit(df[column_name])\n\n    # Transform the column using the LabelEncoder\n    df[column_name] = le.transform(df[column_name])\n\n    return df\ndf = pd.DataFrame({'A': ['a', 'b', 'c', 'a', 'b', 'c'],\n                   'B': [1, 2, 3, 4, 5, 6]})", "problem": "Encrypt the categorical data in a specific column of a DataFrame using LabelEncoder.\nThe function should output with:\n    pd.DataFrame: The DataFrame with the encoded column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    return df", "pass": true}
{"task_id": "149", "program": "import pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(elements, include_index=False):\n    \"\"\"\n    Constructs a DataFrame that enumerates the character counts of each string in a provided list of elements.\n    This function can optionally include an index column for each row in the DataFrame.\n\n    Parameters\n    ----------\n    elements : list\n        A list of strings to be counted.\n    include_index : bool, optional\n        Whether to include an index column in the returned DataFrame.\n\n    Returns\n    -------\n    DataFrame\n        A pandas DataFrame with columns for elements and their respective character counts.\n        Includes an 'Index' column if requested.\n    \"\"\"\n    # Create a DataFrame with the element counts\n    df = pd.DataFrame({'Element': elements, 'Count': [len(element) for element in elements]})\n\n    # Add an index column if requested\n    if include_index:\n        df['Index'] = np.arange(len(elements))\n\n    # Reorder the columns if necessary\n    if include_index:\n        df = df[['Index', 'Element', 'Count']]\n    else:\n        df = df[['Element', 'Count']]\n\n    return df\nelements = ['hello', 'world', 'python']", "problem": "Constructs a DataFrame that enumerates the character counts of each string in a provided list of elements. This function can optionally include an index column for each row in the DataFrame.\nNote that: The order of columns in the returned DataFrame will be ['Index', 'Element', 'Count'] if the index is included.\nThe function should output with:\n    DataFrame: Returns a pandas DataFrame with columns for elements and their respective character counts.\n    Includes an 'Index' column if requested.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n```", "solution": "import pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n    elements_series = pd.Series(elements)\n    count_series = elements_series.apply(lambda x: len(x))\n    data_dict = {'Element': elements_series, 'Count': count_series}\n    if include_index:\n        data_dict['Index'] = np.arange(len(elements))\n    count_df = pd.DataFrame(data_dict)\n    if include_index:\n        count_df = count_df[['Index', 'Element', 'Count']]  # Reordering columns to put 'Index' first\n    return count_df", "pass": true}
{"task_id": "150", "program": "import pandas as pd\nimport numpy as np\ndef task_func(product_dict, product_keys):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(product_dict, product_keys):\n    # Create a DataFrame from the product dictionary\n    df = pd.DataFrame.from_dict(product_dict, orient='index', columns=['Quantity', 'Price', 'Profit'])\n\n    # Calculate the average price and profit for all products\n    avg_price = df['Price'].mean()\n    avg_profit = df['Profit'].mean()\n\n    # Add the average price and profit to the DataFrame\n    df['Average Price'] = avg_price\n    df['Average Profit'] = avg_profit\n\n    # Plot a bar chart of the profit for each product\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', x='Product', y='Profit', ax=ax)\n\n    # Return the DataFrame and Axes object\n    return df, ax\nproduct_dict = {'Product 1': {'Quantity': 10, 'Price': 10, 'Profit': 5},\n                'Product 2': {'Quantity': 20, 'Price': 20, 'Profit': 10},\n                'Product 3': {'Quantity': 30, 'Price': 30, 'Profit': 15}}\nproduct_keys = ['Product 1', 'Product 2', 'Product 3']", "problem": "Create a profit report for a list of products based on a specific product dictionary that includes the quantity, price, and profit of each product. Additionally, calculate the average price and profit for all considered products, and plot a bar chart of the profit for each product.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with columns\n    ['Product', 'Quantity', 'Price', 'Profit', 'Average Price', 'Average Profit'].\n    Axes: A matplotlib Axes object representing the plotted bar chart of profit for each product\n    (None if no products).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(product_dict, product_keys):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(product_dict, product_keys):\n    columns = ['Product', 'Quantity', 'Price', 'Profit']\n    data = []\n\n    for key in product_keys:\n        quantity, price = product_dict[key]\n        profit = quantity * price\n        data.append([key, quantity, price, profit])\n\n    df = pd.DataFrame(data, columns=columns)\n\n    if not df.empty:\n        # Calculate average price and average profit using numpy\n        avg_price = np.mean(df['Price'])\n        avg_profit = np.mean(df['Profit'])\n\n        # Add average price and average profit as new columns to the dataframe\n        df['Average Price'] = avg_price\n        df['Average Profit'] = avg_profit\n\n        ax = df.plot(x='Product', y='Profit', kind='bar', legend=False, title=\"Profit for each product\")\n        ax.set_ylabel(\"Profit\")\n    else:\n        ax = None\n\n    return df, ax", "pass": false}
{"task_id": "151", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_dict, data_keys):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n    \"\"\"\n    Normalize data specified by keys in a dictionary using MinMax scaling and plot the results.\n    This function is useful for preprocessing data for machine learning models where data scaling can impact performance.\n\n    Args:\n        data_dict (dict): A dictionary containing the data to be normalized.\n        data_keys (list): A list of keys in `data_dict` that correspond to the data to be normalized.\n\n    Returns:\n        tuple: A tuple containing a DataFrame of normalized values and a matplotlib Axes object representing a plot of the\n        normalized data.\n\n    Raises:\n        ValueError: If no keys in `data_keys` are found in `data_dict`.\n    \"\"\"\n    # Check if all keys in data_keys are in data_dict\n    if not all(key in data_dict for key in data_keys):\n        raise ValueError(\"Not all keys in data_keys are found in data_dict\")\n\n    # Create a DataFrame with the data to be normalized\n    data = pd.DataFrame(data_dict)\n\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data[data_keys])\n\n    # Create a DataFrame with the normalized data\n    normalized_data_df = pd.DataFrame(normalized_data, columns=data_keys)\n\n    # Plot the normalized data\n    fig, ax = plt.subplots()\n    ax.plot(normalized_data_df)\n    ax.set_title(\"Normalized Data\")\n    ax.set_xlabel(\"Data Points\")\n    ax.set_ylabel(\"Normalized Values\")\n\n    return normalized_data_df, ax\ndata_dict = {\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]}\ndata_keys = [\"a\", \"b\"]", "problem": "Normalize data specified by keys in a dictionary using MinMax scaling and plot the results. This function is useful for preprocessing data for machine learning models where data scaling can impact performance.\nThe function should raise the exception for: ValueError: If no keys in `data_keys` are found in `data_dict`.\nThe function should output with:\n    tuple: A tuple containing a DataFrame of normalized values and a matplotlib Axes object representing a plot of the\n    normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_dict, data_keys):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_dict, data_keys):\n    # Extract and transform the data for the specified keys\n    data_for_keys = {key: data_dict[key] for key in data_keys if key in data_dict}\n    df = pd.DataFrame(data_for_keys)\n\n    # Check if DataFrame is empty (i.e., no keys matched)\n    if df.empty:\n        raise ValueError(\"No matching keys found in data dictionary, or keys list is empty.\")\n\n    # Apply MinMax normalization\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(df)\n    normalized_df = pd.DataFrame(normalized_data, columns=data_keys)\n\n    # Plot the normalized data\n    ax = normalized_df.plot(kind='line')\n    ax.set_title('Normalized Data')\n    ax.set_ylabel('Normalized Value')\n    ax.set_xlabel('Index')\n\n    return normalized_df, ax", "pass": true}
{"task_id": "152", "program": "import pandas as pd\nimport numpy as np\nfrom random import randint\n# Constants\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom random import randint\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n    # Generate random grades for each student and course\n    grades = np.random.uniform(0, 100, size=(len(STUDENTS), len(COURSES)))\n\n    # Create a DataFrame with columns for each student's name, their grades for each course, and their average grade across all courses\n    df = pd.DataFrame(grades, columns=COURSES, index=STUDENTS)\n    df['Average'] = df.mean(axis=1)\n\n    return df", "problem": "Generates a DataFrame containing random grades for a predefined list of students across a set of courses. Each student will have one grade per course and an average grade calculated across all courses.\nNote that: The grades are randomly generated for each course using a uniform distribution between 0 and 100.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns for each student's name, their grades for each course,\n    and their average grade across all courses.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom random import randint\n# Constants\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom random import randint\n# Constants\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n    students_data = []\n\n    for student in STUDENTS:\n        grades = [randint(0, 100) for _ in COURSES]\n        average_grade = np.mean(grades)\n        students_data.append([student] + grades + [average_grade])\n\n    columns = ['Name'] + COURSES + ['Average Grade']\n    grades_df = pd.DataFrame(students_data, columns=columns)\n\n    return grades_df", "pass": false}
{"task_id": "153", "program": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n    \"\"\"\n    Transforms categorical data into a numerical format suitable for machine learning algorithms using sklearn's LabelEncoder.\n    This function generates a DataFrame that pairs original categorical values with their numerical encodings.\n\n    Parameters\n    ----------\n    data : pandas.DataFrame\n        A DataFrame with categorical data.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with columns 'Category' and 'Encoded', where 'Category' is the original data and 'Encoded'\n        is the numerical representation.\n    \"\"\"\n    # Create a LabelEncoder object\n    le = LabelEncoder()\n\n    # Fit the LabelEncoder to the data\n    le.fit(data)\n\n    # Generate the numerical encodings\n    encoded_data = le.transform(data)\n\n    # Create a DataFrame with the original data and the numerical encodings\n    encoded_df = pd.DataFrame({'Category': data, 'Encoded': encoded_data})\n\n    return encoded_df\ndata = pd.DataFrame({'Category': ['A', 'B', 'C', 'A', 'B', 'C']})", "problem": "Transforms categorical data into a numerical format suitable for machine learning algorithms using sklearn's LabelEncoder. This function generates a DataFrame that pairs original categorical values with their numerical encodings.\nThe function should output with:\n    DataFrame: A DataFrame with columns 'Category' and 'Encoded', where 'Category' is the original data and 'Encoded'\n    is the numerical representation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n    le = LabelEncoder()\n    encoded = le.fit_transform(data)\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded})\n\n    return df", "pass": true}
{"task_id": "154", "program": "import re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n\n    pass\nimport re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n    \"\"\"\n    Scans a specified directory for files matching a given pattern and with a certain suffix, then determines their file types.\n    The function returns a dictionary with file names as keys and their corresponding MIME types as values.\n\n    Args:\n        directory (str): The directory to search for files in.\n        file_pattern (str): The pattern to match file names against.\n        suffix (str): The suffix to match file names against.\n\n    Returns:\n        dict: A dictionary mapping file names to their MIME types.\n    \"\"\"\n    # Create a regular expression to match file names\n    regex = re.compile(file_pattern + r'\\.' + suffix + r'$')\n\n    # Get a list of all files in the directory that match the pattern and suffix\n    files = glob.glob(os.path.join(directory, regex))\n\n    # Create an empty dictionary to store the file names and MIME types\n    file_types = {}\n\n    # Iterate over the files and determine their MIME types\n    for file in files:\n        # Get the MIME type of the file\n        mime_type = mimetypes.guess_type(file)[0]\n\n        # Add the file name and MIME type to the dictionary\n        file_types[file] = mime_type\n\n    return file_types\ndirectory = '.'\nfile_pattern = 'file'\nsuffix = 'txt'", "problem": "Scans a specified directory for files matching a given pattern and with a certain suffix, then determines their file types. The function returns a dictionary with file names as keys and their corresponding MIME types as values.\nThe function should output with:\n    dict: A dictionary mapping file names to their MIME types.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n```", "solution": "import re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n    os.chdir(directory)\n    files = glob.glob(file_pattern)\n    file_types = {}\n\n    for file in files:\n        if re.search(suffix, file):\n            file_type = mimetypes.guess_type(file)[0]\n            file_types[file] = file_type\n\n    return file_types", "pass": false}
{"task_id": "155", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    # Compute the average of each row\n    averages = data.mean(axis=1)\n\n    # Append the averages as a new column\n    data['Average'] = averages\n\n    # Plot the averages against their respective row indices\n    fig, ax = plt.subplots()\n    ax.plot(data.index, data['Average'])\n\n    return data, ax\ndata = pd.DataFrame(\n    [[1, 2, 3, 4, 5, 6, 7, 8],\n     [9, 10, 11, 12, 13, 14, 15, 16],\n     [17, 18, 19, 20, 21, 22, 23, 24]],\n    columns=COLUMN_NAMES)", "problem": "Computes the average of each row in a provided 2D array and appends these averages as a new column. Additionally, it plots the averages against their respective row indices.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame which includes the original data and an additional 'Average' column.\n    Axes: A matplotlib Axes object with the plot of row averages.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    # Creating a new figure and axis for plotting\n    fig, ax = plt.subplots()\n    df['Average'].plot(ax=ax)\n    ax.set_ylabel('Average')  # Setting the Y-axis label to 'Average'\n\n    return df, ax", "pass": false}
{"task_id": "156", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n\n    # Calculate the average of each row\n    averages = normalized_data.mean(axis=1)\n\n    # Add the average as a new column to the DataFrame\n    normalized_data['Average'] = averages\n\n    # Visualize the averages in a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(normalized_data.index, normalized_data['Average'])\n    ax.set_xlabel('Data')\n    ax.set_ylabel('Average')\n    ax.set_title('Average of Each Row')\n\n    return normalized_data, ax\ndata = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [6, 7, 8, 9, 10]})", "problem": "Normalizes a given dataset using MinMax scaling and calculates the average of each row. This average is then added as a new column 'Average' to the resulting DataFrame. The function also visualizes these averages in a plot.\nThe function should output with:\n    DataFrame: A pandas DataFrame where data is normalized, with an additional column 'Average' representing the\n    mean of each row.\n    Axes: A matplotlib Axes object showing a bar subplot of the average values across the dataset.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    COLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n\n    df = pd.DataFrame(normalized_data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    fig, ax = plt.subplots()\n    df['Average'].plot(ax=ax)\n\n    return df, ax", "pass": false}
{"task_id": "157", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data):\n    \"\"\"\n    Analyze a dataset by calculating the average of values across each row and visualizing the correlation matrix as a heatmap.\n\n    Parameters\n    ----------\n    data : 2D array or pandas DataFrame\n        The input data.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n\n        DataFrame\n            A pandas DataFrame enhanced with an 'Average' column that represents the mean across each row.\n        Axes\n            The matplotlib Axes object showing the heatmap of the correlations.\n\n    Raises\n    ------\n    ValueError\n        If the input data is not a 2D array or if it contains non-numeric data.\n    \"\"\"\n    # Check if the input data is a 2D array or pandas DataFrame\n    if not isinstance(data, (np.ndarray, pd.DataFrame)):\n        raise ValueError(\"Input data must be a 2D array or pandas DataFrame.\")\n\n    # Convert the input data to a pandas DataFrame if necessary\n    if isinstance(data, np.ndarray):\n        data = pd.DataFrame(data)\n\n    # Check if the input data contains non-numeric data\n    if not np.issubdtype(data.dtypes, np.number):\n        raise ValueError(\"Input data must contain only numeric data.\")\n\n    # Calculate the average of values across each row\n    average = data.mean(axis=1)\n\n    # Create a new column in the DataFrame with the average values\n    data[\"Average\"] = average\n\n    # Calculate the correlation matrix\n    correlation = data.corr()\n\n    # Create a heatmap of the correlation matrix\n    ax = sns.heatmap(correlation, annot=True, cmap=\"coolwarm\")\n\n    return data, ax", "problem": "Analyze a dataset by calculating the average of values across each row and visualizing the correlation matrix as a heatmap.\nThe function should raise the exception for: ValueError: If the input data is not a 2D array or if it contains non-numeric data.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame enhanced with an 'Average' column that represents the mean across each row.\n    Axes: The matplotlib Axes object showing the heatmap of the correlations.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D numpy array.\")\n\n    df = pd.DataFrame(data)\n\n    # Calculate correlation matrix\n    correlation = df.corr()\n    # Plot the heatmap\n    ax = sns.heatmap(correlation, annot=True, cmap='coolwarm')\n\n    # Compute the average for each row and add it as a new column\n    df['Average'] = df.mean(axis=1)\n\n    return df, ax", "pass": false}
{"task_id": "158", "program": "import json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n\n    pass\nimport json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n    \"\"\"\n    Fetches JSON data from a given URL, decodes the json-formatted data, and compresses it into a gzip file.\n    The function should output with:\n        str: The path to the compressed gzip file containing the JSON data.\n    \"\"\"\n    # Fetch the JSON data from the given URL\n    with urllib.request.urlopen(url_str) as response:\n        data = response.read()\n\n    # Decode the JSON data\n    json_data = json.loads(data)\n\n    # Compress the JSON data into a gzip file\n    with gzip.open(file_path, 'wb') as f:\n        f.write(json.dumps(json_data).encode('utf-8'))\n\n    return file_path", "problem": "Fetches JSON data from a given URL, decodes the json-formatted data, and compresses it into a gzip file.\nThe function should output with:\n    str: The path to the compressed gzip file containing the JSON data.\nYou should write self-contained code starting with:\n```\nimport json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n```", "solution": "import json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n    response = urllib.request.urlopen(url_str)\n    data = response.read().decode()\n    json_data = json.loads(data)\n\n    with gzip.open(file_path, 'wb') as f_out:\n        f_out.write(json.dumps(json_data).encode())\n\n    return file_path", "pass": false}
{"task_id": "159", "program": "import struct\nimport io\nimport gzip\ndef task_func(newArray):\n\n    pass\nimport struct\nimport io\nimport gzip\ndef task_func(newArray):\n    # Convert the NumPy array to a bytes object\n    bytes_array = newArray.tobytes()\n\n    # Use the struct module to pack the array elements into bytes\n    packed_bytes = struct.pack('%sd' % len(bytes_array), *bytes_array)\n\n    # Compress the packed bytes using gzip\n    compressed_bytes = gzip.compress(packed_bytes)\n\n    # Return the compressed data as bytes\n    return compressed_bytes", "problem": "Compresses a given NumPy array using gzip compression and returns the compressed data. This method takes a NumPy array as input, compresses it using gzip, and returns the compressed data as bytes. It is useful for efficiently handling large datasets, especially when saving space is a concern. The function utilizes the struct module to pack the array elements into bytes before compressing them. The compressed data can then be used for storage or transmission purposes where space efficiency is crucial.\nThe function should output with:\n    bytes: The gzipped data of the NumPy array.\nYou should write self-contained code starting with:\n```\nimport struct\nimport io\nimport gzip\ndef task_func(newArray):\n```", "solution": "import struct\nimport io\nimport gzip\ndef task_func(newArray):\n    buffer = io.BytesIO()\n\n    with gzip.GzipFile(fileobj=buffer, mode='w') as f:\n        f.write(struct.pack('d'*newArray.size, *newArray))\n\n    return buffer.getvalue()", "pass": true}
{"task_id": "160", "program": "import pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    \"\"\"\n    Processes a given dataset to compute the average of each row, plots the distribution of these averages, and evaluates their normality.\n    The function returns these averages as an additional column in a DataFrame, the plot of the distribution, and the p-value from the normality test if applicable.\n    Note that: The function uses seaborn's distplot for visualization and scipy's normaltest for statistical analysis. It requires at least 20 data points to perform the normality test.\n    The function should raise the exception for: ValueError: If the input data does not have exactly eight columns.\n    The function should output with:\n        tuple: Contains three elements:\n        DataFrame: A pandas DataFrame with the original data and an added 'Average' column.\n        Axes object: The Axes object from the seaborn distribution plot of the averages.\n        float or None: The p-value from the normality test on the averages, or None\n        if the test could not be conducted.\n    \"\"\"\n    # Check if the input data has exactly eight columns\n    if len(data.columns) != 8:\n        raise ValueError(\"Input data must have exactly eight columns\")\n\n    # Compute the average of each row\n    averages = data.mean(axis=1)\n\n    # Add the averages as a new column to the DataFrame\n    data[\"Average\"] = averages\n\n    # Plot the distribution of the averages\n    ax = sns.distplot(data[\"Average\"])\n\n    # Perform the normality test on the averages\n    if len(data) >= 20:\n        _, p_value = stats.normaltest(data[\"Average\"])\n    else:\n        p_value = None\n\n    return data, ax, p_value\ndata = pd.DataFrame(np.random.rand(100, 8), columns=COLUMN_NAMES)", "problem": "Processes a given dataset to compute the average of each row, plots the distribution of these averages, and evaluates their normality. The function returns these averages as an additional column in a DataFrame, the plot of the distribution, and the p-value from the normality test if applicable.\nNote that: The function uses seaborn's distplot for visualization and scipy's normaltest for statistical analysis. It requires at least 20 data points to perform the normality test.\nThe function should raise the exception for: ValueError: If the input data does not have exactly eight columns.\nThe function should output with:\n    tuple: Contains three elements:\n    DataFrame: A pandas DataFrame with the original data and an added 'Average' column.\n    Axes object: The Axes object from the seaborn distribution plot of the averages.\n    float or None: The p-value from the normality test on the averages, or None\n    if the test could not be conducted.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    if data.shape[1] != 8:\n        raise ValueError(\"Data must contain exactly eight columns.\")\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    ax = sns.kdeplot(df['Average'], linewidth=3)\n\n    # Check if there are enough samples for normaltest\n    if len(df['Average']) >= 20:\n        k2, p = stats.normaltest(df['Average'])\n    else:\n        p = None\n\n    return df, ax, p", "pass": false}
{"task_id": "161", "program": "import re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n\n    pass\nimport re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information such as message type, timestamp, and the message itself from a log file and stores the data in a CSV format.\n    This utility is ideal for converting plain text logs into a more structured format that can be easily analyzed.\n    The log is the format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'.\n    The function should raise the exception for: ValueError: If the timestamp in any log entry is invalid or if no valid log entries are found.\n    The function should output with:\n        str: The file path to the newly created CSV file which contains the structured log data.\n    \"\"\"\n    # Define a regular expression to match the log format\n    log_regex = r\"^(?P<type>\\w+): \\[(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (?P<message>.*)$\"\n\n    # Create a pandas dataframe to store the log data\n    log_df = pd.DataFrame(columns=[\"type\", \"timestamp\", \"message\"])\n\n    # Open the log file and read each line\n    with open(log_file, \"r\") as f:\n        for line in f:\n            # Use the regular expression to extract the log information\n            match = re.match(log_regex, line)\n            if match:\n                # Add the log information to the dataframe\n                log_df = log_df.append({\"type\": match.group(\"type\"), \"timestamp\": match.group(\"timestamp\"), \"message\": match.group(\"message\")}, ignore_index=True)\n            else:\n                # Raise an exception if the timestamp is invalid\n                raise ValueError(\"Invalid timestamp in log entry: {}\".format(line))\n\n    # Convert the dataframe to a CSV file\n    csv_file = \"structured_log.csv\"\n    log_df.to_csv(csv_file, index=False)\n\n    # Return the file path to the newly created CSV file\n    return csv_file", "problem": "Extracts logging information such as message type, timestamp, and the message itself from a log file and stores the data in a CSV format. This utility is ideal for converting plain text logs into a more s tructured format that can be easily analyzed. The log is the format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'.\nThe function should raise the exception for: ValueError: If the timestamp in any log entry is invalid or if no valid log entries are found.\nThe function should output with:\n    str: The file path to the newly created CSV file which contains the structured log data.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n```", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n    log_pattern = r'(ERROR|INFO): \\[\\s*(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\s*\\] - (.*)'\n    parsed_data = []\n\n    with open(log_file, 'r') as file:\n        for line in file:\n            line = line.strip()\n            match = re.match(log_pattern, line)\n            if match:\n                log_type, timestamp, message = match.groups()\n                # Validate timestamp\n                try:\n                    datetime.strptime(timestamp, \"%Y-%m-%d %H:%M:%S\")\n                except ValueError:\n                    raise ValueError(f\"Invalid timestamp format: {timestamp}\")\n                parsed_data.append([log_type, timestamp, message.strip()])\n\n    if not parsed_data:\n        raise ValueError(\"No valid log entries found.\")\n\n    df = pd.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message'])\n    output_csv_path = 'log_data.csv'\n    df.to_csv(output_csv_path, index=False)\n    return output_csv_path", "pass": false}
{"task_id": "162", "program": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n\n    pass\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes and visualizes the distribution of word lengths in a text.\n\n    Parameters\n    ----------\n    text : str\n        The input text.\n    rwidth : float, optional\n        The relative width of the histogram bars. The default is 0.8.\n\n    Returns\n    -------\n    matplotlib.axes.Axes\n        An Axes object containing the histogram of word lengths.\n    \"\"\"\n    # Remove punctuation and convert text to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text.lower())\n\n    # Split text into individual words\n    words = text.split()\n\n    # Create a list of word lengths\n    word_lengths = [len(word) for word in words]\n\n    # Create a histogram of word lengths\n    fig, ax = plt.subplots()\n    ax.hist(word_lengths, rwidth=rwidth)\n\n    # Set the x-axis label\n    ax.set_xlabel('Word Length')\n\n    # Set the y-axis label\n    ax.set_ylabel('Frequency')\n\n    # Set the title\n    ax.set_title('Distribution of Word Lengths')\n\n    # Show the plot\n    plt.show()\n\n    return ax\ntext = \"The quick brown fox jumps over the lazy dog.\"", "problem": "Analyzes and visualizes the distribution of word lengths in a text. The function generates a histogram subplot, which facilitates the understanding of how word lengths vary within the provided text.\nNote that: If there are no words in the input text, or all words are filtered out, the histogram will be empty as no bins will be created.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object containing the histogram of word lengths.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n```", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Splitting the words and computing their lengths\n    words = re.split(r'\\W+', text)\n    word_lengths = [len(word) for word in words if word != '']\n\n    # Plotting the histogram\n    fig, ax = plt.subplots()\n    if word_lengths:  # Check if the list is not empty\n        bins = np.arange(max(word_lengths) + 2) - 0.5\n    else:\n        bins = []  # Set bins to an empty list if no words are found\n    ax.hist(word_lengths, bins=bins, rwidth=rwidth)\n    ax.set_title(\"Distribution of Word Lengths\")\n    ax.set_xlabel(\"Word Length\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax", "pass": true}
{"task_id": "163", "program": "import numpy as np\nimport pandas as pd\ndef task_func(rows=5, cols=5):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for specified categories.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the DataFrame, by default 5\n    cols : int, optional\n        Number of columns in the DataFrame, by default 5\n\n    Returns\n    -------\n    matplotlib.axes._axes.Axes\n        The Axes object displaying the stacked bar chart.\n\n    Raises\n    ------\n    ValueError\n        If the number of columns exceeds the number of available categories.\n    \"\"\"\n    # Generate random numerical data\n    data = np.random.rand(rows, cols)\n\n    # Create a DataFrame with the data\n    df = pd.DataFrame(data, columns=[\"Category {}\".format(i) for i in range(1, cols+1)])\n\n    # Create a stacked bar chart\n    fig, ax = plt.subplots()\n    ax.stackplot(df.index, df.values.T)\n\n    # Add a title and labels\n    ax.set_title(\"Stacked Bar Chart\")\n    ax.set_xlabel(\"Categories\")\n    ax.set_ylabel(\"Values\")\n\n    # Return the Axes object\n    return ax", "problem": "Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for specified categories.\nThe function should raise the exception for: ValueError: If the number of columns exceeds the number of available categories.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows=5, cols=5):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows=5, cols=5):\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n\n    return ax", "pass": false}
{"task_id": "164", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n    \"\"\"\n    Generate random numeric data across a specified range for a given number of categories and visualize it with a stacked bar chart.\n\n    Parameters:\n    num_labels (int): The number of categories to generate data for.\n    data_range (tuple): The range of values to generate data for.\n\n    Returns:\n    matplotlib.figure.Figure: A Figure object containing the stacked bar chart of the generated data.\n    \"\"\"\n    # Generate random data for each category\n    data = np.random.randint(data_range[0], data_range[1], size=(num_labels, 1))\n\n    # Create a DataFrame with the data\n    df = pd.DataFrame(data, columns=[\"Data\"])\n\n    # Create a stacked bar chart\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df[\"Data\"], color=\"blue\")\n\n    # Add labels to the x-axis\n    ax.set_xticks(df.index)\n    ax.set_xticklabels(df.index)\n\n    # Add a title and labels to the y-axis\n    ax.set_title(\"Stacked Bar Chart\")\n    ax.set_ylabel(\"Data\")\n\n    return fig", "problem": "Generate random numeric data across a specified range for a given number of categories and visualize it with a stacked bar chart. >>> fig = task_func(num_labels=3, data_range=(1, 10)) >>> fig.show()  # This will display the figure with three labels and data range from 1 to 10\nThe function should output with:\n    matplotlib.figure.Figure: A Figure object containing the stacked bar chart of the generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n    np.random.seed(0)\n    columns = [f'Label{i + 1}' for i in range(num_labels)]\n    data = pd.DataFrame(np.random.uniform(data_range[0], data_range[1], size=(num_labels, num_labels)), columns=columns)\n\n    fig, ax = plt.subplots()\n\n    data.plot(kind='bar', stacked=True, ax=ax)\n\n    return fig", "pass": false}
{"task_id": "165", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_rows=5, rand_range=(0, 100)):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_rows=5, rand_range=(0, 100)):\n    \"\"\"\n    Create a DataFrame containing random integer values within a specified range for categories 'A' through 'E', and visualize this data with a stacked bar chart.\n\n    Parameters\n    ----------\n    num_rows : int, optional\n        The number of rows in the DataFrame. The default is 5.\n    rand_range : tuple, optional\n        The range of random integers to generate. The default is (0, 100).\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        The matplotlib Figure object containing the plotted data.\n    \"\"\"\n    # Create a DataFrame with random integer values within the specified range\n    df = pd.DataFrame(randint(rand_range[0], rand_range[1], size=(num_rows, 5)), columns=list('ABCDE'))\n\n    # Visualize the data with a stacked bar chart\n    fig, ax = plt.subplots()\n    ax.stackplot(df.index, df.values.T, labels=df.columns)\n    ax.set_xlabel('Categories')\n    ax.set_ylabel('Random Values')\n    ax.set_title('Stacked Bar Chart')\n\n    return fig", "problem": "Create a DataFrame containing random integer values within a specified range for categories 'A' through 'E', and visualize this data with a stacked bar chart.\nThe function should output with:\n    matplotlib.figure.Figure: The matplotlib Figure object containing the plotted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_rows=5, rand_range=(0, 100)):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_rows=5, rand_range=(0, 100)):\n    labels = ['A', 'B', 'C', 'D', 'E']\n    data = pd.DataFrame({label: [randint(rand_range[0], rand_range[1]) for _ in range(num_rows)] for label in labels})\n\n    fig, ax = plt.subplots()\n\n    data.plot(kind='bar', stacked=True, ax=ax)\n\n    return fig", "pass": false}
{"task_id": "166", "program": "import pandas as pd\nfrom datetime import datetime\nimport holidays\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime\nimport holidays\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n    \"\"\"\n    Create a list of business days between two dates, excluding weekends and specified country's public holidays.\n    The function depends on the 'holidays' package for fetching public holidays. Ensure 'pandas' and 'holidays' packages are installed.\n    The function should raise the exception for:\n        ValueError: If start_date is not a datetime object or is after end_date.\n        ValueError: If end_date is not a datetime object or is before start_date.\n    The function should output with:\n        list[datetime]: A list of business days (as datetime objects). The start date and end date is included to process.\n    \"\"\"\n    # Check if start_date and end_date are datetime objects\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects\")\n    # Check if start_date is before end_date\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    # Create a list of all dates between start_date and end_date\n    date_range = pd.date_range(start_date, end_date)\n\n    # Create a list of public holidays for the specified country\n    holidays_list = holidays.CountryHoliday(country)\n\n    # Create a list of business days (excluding weekends and public holidays)\n    business_days = []\n    for date in date_range:\n        if date.weekday() < 5 and date not in holidays_list:\n            business_days.append(date)\n\n    return business_days\nstart_date = datetime(2023, 1, 1)\nend_date = datetime(2023, 12, 31)\ncountry = 'US'", "problem": "Create a list of business days between two dates, excluding weekends and specified country's public holidays.\nNote that: The function depends on the 'holidays' package for fetching public holidays. Ensure 'pandas' and 'holidays' packages are installed.\nThe function should raise the exception for: ValueError: If start_date is not a datetime object or is after end_date. ValueError: If end_date is not a datetime object or is before start_date.\nThe function should output with:\n    list[datetime]: A list of business days (as datetime objects). The start date and end date is included to process.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\nimport holidays\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n```", "solution": "import pandas as pd\nfrom datetime import datetime\nimport holidays\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be after end_date.\")\n\n    country_holidays = holidays.CountryHoliday(country)\n    dates = pd.date_range(start_date, end_date)\n    business_days = [date for date in dates if date.weekday() < 5 and date not in country_holidays]\n\n    return business_days", "pass": true}
{"task_id": "167", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n    \"\"\"\n    Generate a DataFrame containing random integer values across a specified number of categories, and visualize these data as a horizontal stacked bar chart.\n\n    Parameters:\n    num_types (int): The number of categories to generate data for.\n    integer_range (tuple): The range of integers to generate data for.\n\n    Returns:\n    tuple: A tuple containing a matplotlib Figure and Axes objects for the generated plot.\n    \"\"\"\n    # Generate random data\n    data = {}\n    for i in range(num_types):\n        data[f\"Category {i+1}\"] = [randint(*integer_range) for _ in range(num_types)]\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data)\n\n    # Create a horizontal stacked bar chart\n    fig, ax = plt.subplots()\n    ax.barh(df.index, df.values, color=\"steelblue\")\n\n    # Add axis labels and title\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Category\")\n    ax.set_title(\"Horizontal Stacked Bar Chart\")\n\n    # Return the figure and axes objects\n    return fig, ax", "problem": "Generate a DataFrame containing random integer values across a specified number of categories, and visualize these data as a horizontal stacked bar chart.\nNote that: The plot displays categories on the y-axis and their corresponding values on the x-axis, with data segmented by category.\nThe function should output with:\n    tuple: A tuple containing a matplotlib Figure and Axes objects for the generated plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n    LABELS = [f'Type{i + 1}' for i in range(num_types)]\n    data = pd.DataFrame({label: [randint(*integer_range) for _ in range(num_types)] for label in LABELS})\n\n    fig, ax = plt.subplots()\n    data.plot(kind='barh', stacked=True, ax=ax)\n\n    return fig, ax", "pass": false}
{"task_id": "168", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Args:\n        num_groups (int): The number of groups to generate data for. Defaults to 5.\n        data_size (int): The number of data points to generate for each group. Defaults to 5.\n        labels (list): A list of labels for the groups. Defaults to None.\n\n    Returns:\n        tuple: A tuple containing:\n            matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n            pandas.DataFrame: The DataFrame with randomly generated data.\n            str: The filename where the plot is saved ('test_plot.png').\n    \"\"\"\n    # Generate random data\n    data = np.random.randint(0, 100, size=(num_groups, data_size))\n\n    # Create a DataFrame with the data\n    df = pd.DataFrame(data, columns=labels) if labels else pd.DataFrame(data)\n\n    # Create a stacked bar chart\n    fig, ax = plt.subplots()\n    ax.stackplot(df.index, df.values.T)\n\n    # Save the plot to a file\n    fig.savefig(\"test_plot.png\")\n\n    return fig, df, \"test_plot.png\"", "problem": "Generate random data and visualize it with a stacked bar chart, saving the chart to a file. This function facilitates the exploration and sharing of data distribution across multiple categories.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n    pandas.DataFrame: The DataFrame with randomly generated data.\n    str: The filename where the plot is saved ('test_plot.png').\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n\n    return fig, data, plot_filename", "pass": false}
{"task_id": "169", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n    \"\"\"\n    Apply a Gaussian filter to a given image and draw the original and filtered images side by side.\n\n    Parameters\n    ----------\n    image : numpy.ndarray\n        The input image.\n    sigma : float, optional\n        The standard deviation of the Gaussian kernel. The default is 2.\n\n    Returns\n    -------\n    ax : matplotlib.axes.Axes\n        Axes object containing the plot. Two plots with titles 'Original' and 'Filtered'.\n    filtered_image : numpy.ndarray\n        The numpy array of pixel values for the filtered image.\n\n    Raises\n    ------\n    ValueError\n        If sigma is non-positive.\n    TypeError\n        If the input is not a numpy array.\n    \"\"\"\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array.\")\n    if sigma <= 0:\n        raise ValueError(\"Sigma must be positive.\")\n\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n    ax[0].imshow(image, cmap=\"gray\")\n    ax[0].set_title(\"Original\")\n    ax[1].imshow(filtered_image, cmap=\"gray\")\n    ax[1].set_title(\"Filtered\")\n\n    return ax, filtered_image\nimage = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Apply a Gaussian filter to a given image and draw the original and filtered images side by side.\nThe function should raise the exception for: ValueError: If sigma is non-positive. TypeError: If the input is not a numpy array.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object containing the plot. Two plots with titles 'Original' and 'Filtered'.\n    filtered_image (numpy.ndarray): The numpy array of pixel values for the filtered image.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"The image must be a numpy array.\")\n    if sigma <= 0:\n        raise ValueError(\"Sigma must be positive.\")\n\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n    ax[0].imshow(image, cmap=plt.cm.gray)\n    ax[0].set_title('Original')\n\n    ax[1].imshow(filtered_image, cmap=plt.cm.gray)\n    ax[1].set_title('Filtered')\n\n    return ax, filtered_image", "pass": true}
{"task_id": "170", "program": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n\n    pass\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n    \"\"\"\n    Fetches data from a given CSV URL and returns a pandas DataFrame sorted based on the specified column.\n\n    Args:\n        csv_url (str): The URL of the CSV file to fetch.\n        sort_by_column (str): The column to sort the DataFrame by. Defaults to \"title\".\n\n    Returns:\n        pandas.DataFrame: The sorted DataFrame.\n\n    Raises:\n        Exception: If the response status code is not 200.\n    \"\"\"\n    response = requests.get(csv_url)\n    if response.status_code != 200:\n        raise Exception(\"Invalid response status code: {}\".format(response.status_code))\n    csv_data = StringIO(response.text)\n    df = pd.read_csv(csv_data)\n    return df.sort_values(by=sort_by_column)", "problem": "Fetches data from a given CSV URL and returns a pandas DataFrame sorted based on the specified column. >>> task_func(\"http://example.com/data.csv\", sort_by_column=\"price\") id   title  price 2   3  Cherry    0.2 0   1   Apple    0.3 1   2  Banana    0.5\nThe function should raise the exception for: Exception: If the response status code is not 200.\nThe function should output with:\n    DataFrame: The pandas DataFrame that sorted based on the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n```", "solution": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n    response = requests.get(csv_url)\n    response.raise_for_status()  # Raise an exception for invalid responses\n    csv_data = response.text\n    df = pd.read_csv(StringIO(csv_data))\n    sorted_df = df.sort_values(by=sort_by_column)\n    return sorted_df", "pass": true}
{"task_id": "171", "program": "import random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n\n    pass\nimport random\nimport pandas as pd\nimport collections\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n    # Reverse the dictionary to map vegetables to people\n    vegetable_dict = {value: key for key, value in vegetable_dict.items()}\n\n    # Assign random counts to each vegetable\n    random.seed(seed)\n    counts = {vegetable: random.randint(1, 10) for vegetable in VEGETABLES}\n\n    # Calculate the occurrences of each vegetable as a percentage of the total counts\n    total_counts = sum(counts.values())\n    occurrences = {vegetable: count / total_counts for vegetable, count in counts.items()}\n\n    # Create a dictionary to map each vegetable to a person from the input\n    vegetable_person = {vegetable: vegetable_dict[vegetable] for vegetable in VEGETABLES}\n\n    # Create a DataFrame with columns for vegetable names, their random counts, and their percentage occurrence within the total counts\n    df = pd.DataFrame({'Vegetable': VEGETABLES, 'Count': counts, 'Occurrence': occurrences})\n\n    return df\nvegetable_dict = {'Alice': 'Carrot', 'Bob': 'Potato', 'Charlie': 'Tomato', 'David': 'Cabbage', 'Eve': 'Spinach'}", "problem": "Calculate statistics for the vegetables preferred by people listed in the input dictionary. The function reverses the dictionary to map vegetables to people and assigns random counts to these vegetables. It then calculates the occurrences of each vegetable as a percentage of the total counts. A dictionary is created to map each vegetable to a person from the input where vegetables are values. Random counts between 1 and 10 are assigned to simulate varying popularity or availability of each vegetable.\nThe function should output with:\n    DataFrame: Returns a DataFrame with columns for vegetable names, their random counts,\n    and their percentage occurrence within the total counts.\nYou should write self-contained code starting with:\n```\nimport random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n```", "solution": "import random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n    random.seed(seed)\n    # Create a counter for vegetables based on reversed dictionary\n    reversed_dict = {v: k for k, v in vegetable_dict.items()}\n    vegetable_counter = collections.Counter({vegetable: random.randint(1, 10) for vegetable in reversed_dict.keys()})\n\n    statistics_df = pd.DataFrame.from_dict(vegetable_counter, orient='index', columns=['Count'])\n    statistics_df['Percentage'] = statistics_df['Count'] / statistics_df['Count'].sum() * 100\n\n    return statistics_df", "pass": false}
{"task_id": "172", "program": "import json\nfrom datetime import datetime\ndef task_func(json_data):\n\n    pass\nimport json\nfrom datetime import datetime\ndef task_func(json_data):\n    utc_datetime = json_data['utc_datetime']\n    date = datetime.strptime(utc_datetime, '%Y-%m-%dT%H:%M:%S.%fZ')\n    return date.weekday() >= 5", "problem": "Determine if the given datetime is a weekend.\nNote that: The datetime to be extracted is located in the 'utc_datetime' key in the JSON data.\nThe function should output with:\n    bool: True if the date is a weekend (Saturday or Sunday), False otherwise.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\ndef task_func(json_data):\n```", "solution": "import json\nfrom datetime import datetime\ndef task_func(json_data):\n    try:\n        # Convert JSON string to Python dictionary\n        data = json.loads(json_data)\n\n        # Extract datetime string from dictionary\n        datetime_str = data['utc_datetime']\n\n        # Convert datetime string to datetime object\n        utc_datetime = datetime.strptime(datetime_str, '%Y-%m-%dT%H:%M:%S')\n\n        # Check if the day of the week is Saturday (5) or Sunday (6)\n        return utc_datetime.weekday() >= 5\n    except Exception as e:\n        raise e", "pass": false}
{"task_id": "173", "program": "import numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n    # Generate a list of random GDP values\n    gdp_values = np.random.randint(1000000000, 10000000000, size=len(country_dict))\n\n    # Create a DataFrame with the country names as the index and the GDP values as the column\n    df = pd.DataFrame(gdp_values, index=country_dict.keys(), columns=['GDP'])\n\n    return df\ncountry_dict = {'USA': 'United States', 'CHN': 'China', 'JPN': 'Japan', 'KOR': 'South Korea', 'DEU': 'Germany'}", "problem": "Generates a DataFrame representing the GDP for a predefined set of countries based on their presence in the p rovided dictionary. The GDP values are simulated with random integers to model economic data.\nThe function should output with:\n    DataFrame: A pandas DataFrame with each country's name from the input as the index and a randomly generated GDP\n    value as the column. GDP values range between 1,000,000,000 and 100,000,000,000.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n    COUNTRIES = ['USA', 'UK', 'China', 'Japan', 'Australia']\n    country_gdp = {country: np.random.randint(1000000000, 100000000000, dtype=np.int64) for country in COUNTRIES if\n                   country in country_dict.values()}\n\n    gdp_df = pd.DataFrame.from_dict(country_gdp, orient='index', columns=['GDP'])\n\n    return gdp_df", "pass": false}
{"task_id": "174", "program": "import pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n    \"\"\"\n    Add a new column with random values to the \"data\" DataFrame.\n    The function should raise the exception for:\n        - The function will raise an error if the input data is not pandas DataFrame\n    The function should output with:\n        - DataFrame: Updated DataFrame with the new column added.\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Input data must be a pandas DataFrame\")\n\n    data[key] = np.random.uniform(min_value, max_value, size=len(data))\n    return data\ndata = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})", "problem": "Add a new column with random values to the \"data\" DataFrame.\nThe function should raise the exception for: The function will raise an error if the input data is not pandas DataFrame\nThe function should output with:\n    DataFrame: Updated DataFrame with the new column added.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    \n    random_generated = np.random.randint(min_value, max_value + 1, size=len(data))\n    data[key] = random_generated\n    return data", "pass": false}
{"task_id": "175", "program": "import re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport re\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df):\n    \"\"\"\n    Analyzes a DataFrame to find videos with titles containing \"how\" or \"what\" and visualizes their like ratios.\n    The like ratio for each video is calculated by dividing the number of likes by the number of views.\n    This function generates a bar plot of the like ratios for these specific videos.\n    If the DataFrame is empty, lacks the required columns, or contains no titles matching the criteria, an empty subplot is returned.\n    :param df: A pandas DataFrame containing the data to be analyzed.\n    :return: A matplotlib.axes.Axes object of the bar plot. The plot will be empty if the DataFrame is insufficient or no video titles match the search criteria.\n    \"\"\"\n    # Check if the DataFrame is empty or lacks the required columns\n    if df.empty or not all(col in df.columns for col in ['Title', 'Views', 'Likes']):\n        return plt.subplot()\n\n    # Filter the DataFrame to include only videos with titles containing \"how\" or \"what\"\n    df = df[df['Title'].str.contains('how|what', case=False)]\n\n    # Calculate the like ratio for each video\n    df['Like Ratio'] = df['Likes'] / df['Views']\n\n    # Create a bar plot of the like ratios for the filtered videos\n    ax = df.plot.bar(x='Title', y='Like Ratio', rot=0)\n\n    # Set the x-axis label\n    ax.set_xlabel('Video Title')\n\n    # Set the y-axis label\n    ax.set_ylabel('Like Ratio')\n\n    # Return the bar plot\n    return ax\ndf = pd.DataFrame({'Title': ['How to make a pie', 'What is the meaning of life', 'How to cook a steak', 'What is the capital of France'],\n                   'Views': [1000, 500, 2000, 1500],\n                   'Likes': [500, 200, 1000, 500]})", "problem": "Analyzes a DataFrame to find videos with titles containing \"how\" or \"what\" and visualizes their like ratios. The like ratio for each video is calculated by dividing the number of likes by the number of views. This function generates a bar plot of the like ratios for these specific videos. If the DataFrame is empty, lacks the required columns, or contains no titles matching the criteria, an empty subplot is returned.\nNote that: The function checks for the presence of the necessary data columns ('Title', 'Views', 'Likes') and whether there are any entries matching the search criteria. If these conditions are not met, it returns an empty plot.\nThe function should output with:\n    Axes: A matplotlib.axes.Axes object of the bar plot. The plot will be empty if the DataFrame is insufficient\n    or no video titles match the search criteria.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    if df.empty or 'Likes' not in df.columns or 'Views' not in df.columns or 'Title' not in df.columns:\n        fig, ax = plt.subplots()\n        return ax\n\n    pattern = re.compile(r'(how|what)', re.IGNORECASE)\n    interesting_videos = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n\n    if interesting_videos.empty:\n        fig, ax = plt.subplots()\n        return ax\n\n    interesting_videos = interesting_videos.copy()  # Create a copy to avoid modifying the input df\n    interesting_videos['Like Ratio'] = interesting_videos['Likes'] / interesting_videos['Views']\n\n    ax = interesting_videos.plot(kind='bar', x='Title', y='Like Ratio', legend=False)\n    ax.set_ylabel('Like Ratio')\n    ax.set_xticklabels(interesting_videos['Title'], rotation='vertical')\n\n    return ax", "pass": false}
{"task_id": "176", "program": "import re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n\n    pass\nimport re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n    \"\"\"\n    Given a list of IP addresses, this function returns a dictionary mapping each valid IP address to its respective hostname. If the hostname cannot be determined, the value will be None.\n\n    Args:\n        ip_addresses (list): A list of IP addresses.\n\n    Returns:\n        dict: A dictionary with IP addresses as keys and their hostnames as values. If the hostname cannot be determined, the value will be None.\n    \"\"\"\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over the list of IP addresses\n    for ip_address in ip_addresses:\n        # Check if the IP address is valid\n        if re.match(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\", ip_address):\n            # Try to resolve the hostname\n            try:\n                hostname = socket.gethostbyaddr(ip_address)[0]\n            except socket.herror:\n                hostname = None\n            # Add the IP address and hostname to the results dictionary\n            results[ip_address] = hostname\n\n    return results\nip_addresses = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\", \"192.168.1.5\"]", "problem": "Given a list of IP addresses, this function returns a dictionary mapping each valid IP address to its respective hostname. If the hostname cannot be determined, the value will be None.\nThe function should output with:\n    dict: A dictionary with IP addresses as keys and their hostnames as values. If the hostname cannot be determined,\n    the value will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n```", "solution": "import re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n\n    \n    IP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\n    hostnames = {}\n    for ip in ip_addresses:\n        if re.match(IP_REGEX, ip):\n            try:\n                hostname = socket.gethostbyaddr(ip)[0]\n                hostnames[ip] = hostname\n            except (socket.herror, socket.gaierror):\n                hostnames[ip] = None\n    return hostnames", "pass": false}
{"task_id": "177", "program": "import re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n\n    pass\nimport re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n    \"\"\"\n    Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from a DataFrame and analyzes the frequency of each word in the content of these articles, excluding punctuation.\n    The function should raise the exception for: ValueError: If the DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\n    The function should output with:\n        dict: A dictionary with keys as words and values as their corresponding frequency, excluding any punctuation marks.\n    \"\"\"\n    # Check if the DataFrame is empty or does not contain the necessary columns\n    if df.empty or 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError(\"The DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\")\n\n    # Extract articles whose titles contain specific case-insensitive keywords\n    keywords = ['like', 'what']\n    df_filtered = df[df['Title'].str.lower().str.contains('|'.join(keywords))]\n\n    # Tokenize the content of the filtered articles\n    tokenized_content = df_filtered['Content'].str.lower().str.split()\n\n    # Remove punctuation from the tokenized content\n    tokenized_content = [word for word in tokenized_content if word.isalpha()]\n\n    # Create a dictionary with keys as words and values as their corresponding frequency\n    word_freq = {}\n    for word in tokenized_content:\n        if word not in word_freq:\n            word_freq[word] = 1\n        else:\n            word_freq[word] += 1\n\n    return word_freq", "problem": "Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from a DataFrame and analyzes the frequency of each word in the content of these articles, excluding punctuation.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\nThe function should output with:\n    dict: A dictionary with keys as words and values as their corresponding frequency, excluding any punctuation marks.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n```", "solution": "import re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n    # Ensure the DataFrame contains the required columns\n    if \"Title\" not in df.columns or \"Content\" not in df.columns:\n        raise ValueError(\"DataFrame must include 'Title' and 'Content' columns.\")\n    pattern = re.compile(r'(like|what)', re.IGNORECASE)\n    interesting_articles = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n\n    word_freq = {}\n    if interesting_articles.empty:\n        return word_freq\n\n    for content in interesting_articles['Content']:\n        tokens = nltk.word_tokenize(content)\n        for token in tokens:\n            if token not in punctuation:\n                if token not in word_freq:\n                    word_freq[token] = 1\n                else:\n                    word_freq[token] += 1\n\n    return word_freq", "pass": false}
{"task_id": "178", "program": "import re\nfrom urllib import request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n\n    pass\nimport re\nfrom urllib import request\nimport json\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n    \"\"\"\n    Get the public IP address from a JSON response containing the IP address.\n    Note that: The function needs to check whether the provided IP address is valid. If the IP address is not valid, the function will return 'Invalid IP address received'.\n    The function should output with:\n        str: The public IP address.\n    \"\"\"\n    if not re.match(IP_REGEX, ip_address):\n        return 'Invalid IP address received'\n\n    url = f'https://api.ipify.org?format=json&ipAddress={ip_address}'\n    response = request.urlopen(url)\n    data = json.loads(response.read())\n    return data['ip']", "problem": "Get the public IP address from a JSON response containing the IP address.\nNote that: The function needs to check whether the provided IP address is valid. If the IP address is not valid, the function will return 'Invalid IP address received'.\nThe function should output with:\n    str: The public IP address.\nYou should write self-contained code starting with:\n```\nimport re\nfrom urllib import request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n```", "solution": "import re\nfrom urllib import request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n\n    try:\n        response = ip_address\n        data = json.loads(response)\n        ip = data['ip']\n        if re.match(IP_REGEX, ip):\n            return ip\n        else:\n            return 'Invalid IP address received'\n    except Exception as e:\n        return str(e)", "pass": false}
{"task_id": "179", "program": "import re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\ndef task_func(df):\n\n    pass\nimport re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\ndef task_func(df):\n    # Check if the DataFrame contains the required columns\n    if 'Title' not in df.columns or 'Content' not in df.columns:\n        return plt.figure()\n\n    # Extract the titles and content of the articles\n    titles = df['Title'].str.lower()\n    content = df['Content'].str.lower()\n\n    # Identify articles with titles containing \"how\" or \"what\"\n    how_what_articles = titles.str.contains('how|what')\n\n    # Create a TfidfVectorizer object\n    vectorizer = TfidfVectorizer()\n\n    # Fit the vectorizer to the content of the articles\n    vectorizer.fit(content[how_what_articles])\n\n    # Transform the content of the articles into a TF-IDF matrix\n    tfidf = vectorizer.transform(content[how_what_articles])\n\n    # Calculate the TF-IDF scores for each feature\n    scores = np.array(tfidf.mean(axis=0)).ravel()\n\n    # Create a bar plot of the TF-IDF scores\n    fig, ax = plt.subplots()\n    ax.bar(vectorizer.get_feature_names(), scores)\n    ax.set_ylabel('TF-IDF Score')\n    ax.set_xticks(range(len(vectorizer.get_feature_names())))\n    ax.set_xticklabels(vectorizer.get_feature_names(), rotation=90)\n\n    return fig", "problem": "Analyzes a given DataFrame containing article titles and content to identify articles with titles that include the words \"how\" or \"what\". It calculates the TF-IDF scores for the words in the content of these articles and visualizes these scores in a bar plot.\nNote that: If the DataFrame does not contain 'Title' and 'Content' columns, the function returns an empty plot. If no articles have titles containing \"how\" or \"what,\" the function also returns an empty plot. Set the name of the y-axis to 'TF-IDF Score'. Set xticks to display the feature names vertically.\nThe function should output with:\n    Axes: A matplotlib Axes object displaying a bar plot of the TF-IDF scores.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\ndef task_func(df):\n```", "solution": "import re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\ndef task_func(df):\n    pattern = re.compile(r'(how|what)', re.IGNORECASE)\n\n    # Check if the DataFrame has the required columns\n    if not set(['Title', 'Content']).issubset(df.columns):\n        fig, ax = plt.subplots()\n        return ax\n\n    interesting_articles = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n\n    fig, ax = plt.subplots()\n\n    # If there are no interesting articles, return an empty plot\n    if interesting_articles.empty:\n        return ax\n\n    vectorizer = TfidfVectorizer()\n    X = vectorizer.fit_transform(interesting_articles['Content'])\n    tfidf_scores = np.array(X.sum(axis=0))[0]\n\n    ax.bar(vectorizer.get_feature_names_out(), tfidf_scores)\n    ax.set_ylabel('TF-IDF Score')\n    plt.xticks(rotation='vertical')\n\n    return ax", "pass": false}
{"task_id": "180", "program": "from PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n\n    pass\nfrom PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n    \"\"\"\n    Open an image file and scale it by different scaling factors. Display each scaled image using matplotlib and return the scaled images with their Axes.\n    The function should raise the exception for: FileNotFoundError: If the image file cannot be found.\n    The function should output with:\n        list of tuples: Each tuple contains (matplotlib.axes.Axes, numpy.ndarray) representing the Axes and the pixel values of the scaled image.\n    \"\"\"\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"Image file {img_path} not found.\")\n\n    img = Image.open(img_path)\n    img_array = np.array(img)\n\n    fig, axs = plt.subplots(len(scale_factors), 1, figsize=(10, 10))\n    axs = axs.flatten()\n\n    scaled_images = []\n    for i, scale_factor in enumerate(scale_factors):\n        scaled_img = resize(img_array, (int(img_array.shape[0] * scale_factor), int(img_array.shape[1] * scale_factor)))\n        scaled_images.append((axs[i], scaled_img))\n        axs[i].imshow(scaled_img)\n        axs[i].set_title(f\"Scaled by {scale_factor}\")\n\n    return scaled_images\nimg_path = \"image.jpg\"", "problem": "Open an image file and scale it by different scaling factors. Display each scaled image using matplotlib and return the scaled images with their Axes.\nThe function should raise the exception for: FileNotFoundError: If the image file cannot be found.\nThe function should output with:\n    list of tuples: Each tuple contains (matplotlib.axes.Axes, numpy.ndarray) representing the Axes and the pixel values of the scaled image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n```", "solution": "from PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n\n    im = Image.open(img_path)\n    img_arr = np.array(im)\n    results = []\n\n    for scale_factor in scale_factors:\n        scaled_img_arr = resize(img_arr, (int(im.height * scale_factor), int(im.width * scale_factor)),\n                                mode='reflect', anti_aliasing=True)\n        fig, ax = plt.subplots()\n        ax.imshow(scaled_img_arr)\n        ax.set_title(f'Scale factor: {scale_factor}')\n        results.append((ax, scaled_img_arr))\n    # plt.show()\n    return results", "pass": true}
{"task_id": "181", "program": "from django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n\n    pass\nfrom django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n    # Generate a random delay between min_delay and max_delay\n    delay = random.randint(min_delay, max_delay)\n\n    # Sleep for the generated delay\n    time.sleep(delay)\n\n    # Create a Django HttpResponse with JSON data\n    response = HttpResponse(content_type='application/json')\n    response.write(data)\n\n    return response", "problem": "After a random delay, generate a Django HttpResponse with JSON data to simulate the latency of the network.\nThe function should output with:\n    HttpResponse: A Django HttpResponse with JSON data.\nYou should write self-contained code starting with:\n```\nfrom django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n```", "solution": "from django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n\n    # Generate a random delay\n    delay = random.uniform(min_delay, max_delay)\n\n    # Wait for the delay\n    time.sleep(delay)\n\n    response = HttpResponse(data, content_type='application/json')\n\n    return response", "pass": true}
{"task_id": "182", "program": "import re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n\n    pass\nimport re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n    # Filter articles by title\n    df = df[df['title'].str.lower().str.contains('how|what')]\n\n    # Vectorize the content\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(df['content'])\n\n    # Cluster the articles\n    kmeans = KMeans(n_clusters=5)\n    kmeans.fit(X)\n\n    # Get the cluster labels\n    labels = kmeans.labels_\n\n    return labels", "problem": "Analyzes articles by their titles for specific case-insensitive keywords (\"how\" or \"what\"), vectorizes the content using CountVectorizer, and groups them into clusters using KMeans clustering. This function is intended for basic content analysis and clustering to understand common themes or topics among articles asking questions starting with \"how\" or \"what\".\nThe function should output with:\n    list: List of cluster labels for the filtered articles, indicating the cluster to which each article belongs.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n```", "solution": "import re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n    pattern = re.compile(r'(how|what)', re.IGNORECASE)\n    interesting_articles = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n    if interesting_articles.empty:\n        return []\n\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(interesting_articles['Content'])\n\n    kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)\n    kmeans.fit(X)\n\n    return list(kmeans.labels_)", "pass": false}
{"task_id": "183", "program": "from django.http import HttpResponse\nimport uuid\ndef task_func(data):\n\n    pass\nfrom django.http import HttpResponse\nimport uuid\ndef task_func(data):\n    # Generate a UUID\n    uuid_str = str(uuid.uuid4())\n\n    # Create a Django HttpResponse with JSON data\n    response = HttpResponse(content_type='application/json')\n    response.write(data)\n\n    # Add the UUID to the HTTP headers\n    response['X-Request-ID'] = uuid_str\n\n    return response", "problem": "Create a Django HttpResponse with JSON data, and include a UUID in the HTTP headers to track requests.\nThe function should output with:\n    HttpResponse: A Django HttpResponse with JSON data and UUID.\nYou should write self-contained code starting with:\n```\nfrom django.http import HttpResponse\nimport uuid\ndef task_func(data):\n```", "solution": "from django.http import HttpResponse\nimport uuid\ndef task_func(data):\n\n    response = HttpResponse(data, content_type='application/json')\n\n    # Generate a UUID\n    request_uuid = uuid.uuid4()\n\n    # Add the UUID to the response headers\n    response['UUID'] = str(request_uuid)\n\n    return response", "pass": false}
{"task_id": "184", "program": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n\n    pass\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares and transforms text data from a specified column in a DataFrame by removing stopwords, numbers, and punctuation, and subsequently applying a vectorization process to convert text into a numeric format suitable for analysis.\n    :param dataframe: The DataFrame containing the text data.\n    :param text_column: The name of the column containing the text data.\n    :return: A DataFrame with each word (after preprocessing) as a column and their count as rows.\n    \"\"\"\n    # Remove stopwords, numbers, and punctuation\n    dataframe[text_column] = dataframe[text_column].str.replace('[^\\w\\s]', '')\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in (STOPWORDS)]))\n\n    # Apply vectorization\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe[text_column])\n\n    # Convert vectorized data to a DataFrame\n    vectorized_df = pd.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names())\n\n    return vectorized_df\ndf = pd.DataFrame({'text': ['This is a sample text.', 'This is another sample text.']})", "problem": "Prepares and transforms text data from a specified column in a DataFrame by removing stopwords, numbers, and punctuation, and subsequently applying a vectorization process to convert text into a numeric format suitable for analysis.\nThe function should output with:\n    DataFrame: Returns a DataFrame with each word (after preprocessing) as a column and their count as rows.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n```", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef task_func(dataframe, text_column):\n\n    def preprocess_text(text):\n        text = text.lower()\n        text = re.sub(r'\\d+', '', text)\n        text = re.sub(r'\\W+', ' ', text)\n        text = ' '.join(word for word in text.split() if word not in STOPWORDS)\n        return text\n\n    dataframe[text_column] = dataframe[text_column].apply(preprocess_text)\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe[text_column])\n\n    return pd.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())", "pass": false}
{"task_id": "185", "program": "import pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 180)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create a map with markers for a list of cities, where the coordinates are randomly generated within given ranges.\n    The function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\n    The function should output with:\n        tuple: A tuple containing (folium.Map, pandas.DataFrame).\n        The DataFrame contains 'City', 'Longitude', and 'Latitude' columns.\n    \"\"\"\n    # Check if 'Lon' and 'Lat' keys are present in the dictionary and if their values are tuples\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"'Lon' and 'Lat' keys are required in the dictionary\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"'Lon' and 'Lat' values must be tuples\")\n\n    # Generate random coordinates for each city\n    coordinates = []\n    for city in cities:\n        lon = np.random.uniform(dic['Lon'][0], dic['Lon'][1])\n        lat = np.random.uniform(dic['Lat'][0], dic['Lat'][1])\n        coordinates.append((city, lon, lat))\n\n    # Create a DataFrame with the coordinates and city names\n    df = pd.DataFrame(coordinates, columns=['City', 'Longitude', 'Latitude'])\n\n    # Create a folium map with markers for each city\n    m = folium.Map(location=[df['Latitude'].mean(), df['Longitude'].mean()], zoom_start=10)\n    for i, row in df.iterrows():\n        folium.Marker(location=[row['Latitude'], row['Longitude']], popup=row['City']).add_to(m)\n\n    return m, df\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']", "problem": "Create a map with markers for a list of cities, where the coordinates are randomly generated within given ranges.\nThe function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\nThe function should output with:\n    tuple: A tuple containing (folium.Map, pandas.DataFrame).\n    The DataFrame contains 'City', 'Longitude', and 'Latitude' columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys with tuple values.\")\n\n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n\n    data = {'City': [], 'Longitude': [], 'Latitude': []}\n    for city in cities:\n        data['City'].append(city)\n        data['Longitude'].append(np.random.uniform(lon_min, lon_max))\n        data['Latitude'].append(np.random.uniform(lat_min, lat_max))\n\n    df = pd.DataFrame(data)\n\n    m = folium.Map(location=[0, 0], zoom_start=2)\n    for _, row in df.iterrows():\n        folium.Marker([row['Latitude'], row['Longitude']], popup=row['City']).add_to(m)\n\n    return m, df", "pass": false}
{"task_id": "186", "program": "from geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n\n    pass\nfrom geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n    if not dic:\n        raise ValueError(\"Input dictionary is empty\")\n\n    # Create a Folium map object\n    m = folium.Map(location=[0, 0], zoom_start=1)\n\n    # Add markers to the map for each location\n    for name, coords in dic.items():\n        folium.Marker(coords, popup=name).add_to(m)\n\n    # Calculate the geodesic distances between each pair of locations\n    distances = {}\n    for i, (name1, coords1) in enumerate(dic.items()):\n        for name2, coords2 in dic.items()[i+1:]:\n            distance = geodesic(coords1, coords2).km\n            distances[name1, name2] = distance\n\n    return m, distances", "problem": "Generates a Folium map with markers for specified locations and calculates the geodesic distances between each pair of locations.\nThe function should raise the exception for: ValueError: If the input dictionary is empty.\nThe function should output with:\n    tuple: A tuple containing a Folium map object and a dictionary with pairs of location\n    names as keys and their distances in kilometers as values.\nYou should write self-contained code starting with:\n```\nfrom geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n```", "solution": "from geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n    if not dic:\n        raise ValueError(\"Input dictionary is empty.\")\n    locations = [(k, v['Lat'], v['Lon']) for k, v in dic.items()]\n    distances = {}\n\n    folium_map = folium.Map(location=[locations[0][1], locations[0][2]], zoom_start=4)\n\n    for i in range(len(locations)):\n        folium.Marker([locations[i][1], locations[i][2]], popup=locations[i][0]).add_to(folium_map)\n\n        for j in range(i + 1, len(locations)):\n            distance = geodesic((locations[i][1], locations[i][2]), (locations[j][1], locations[j][2])).kilometers\n            distances[(locations[i][0], locations[j][0])] = distance\n\n    return folium_map, distances", "pass": false}
{"task_id": "187", "program": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n\n    pass\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create a GeoPandas DataFrame for a list of cities with randomly generated coordinates based on specified ranges.\n    The function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\n    The function should output with:\n        GeoDataFrame: A GeoPandas DataFrame containing 'City' and 'Coordinates' (Point objects).\n    \"\"\"\n    # Check if 'Lon' and 'Lat' keys are present in the dictionary and if their values are tuples\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"'Lon' and 'Lat' keys must be present in the dictionary and their values must be tuples.\")\n\n    # Generate random coordinates for each city\n    coordinates = []\n    for city in cities:\n        lon = np.random.uniform(dic['Lon'][0], dic['Lon'][1])\n        lat = np.random.uniform(dic['Lat'][0], dic['Lat'][1])\n        coordinates.append((city, Point(lon, lat)))\n\n    # Create a GeoDataFrame with the generated coordinates\n    gdf = gpd.GeoDataFrame(coordinates, columns=['City', 'Coordinates'])\n\n    return gdf", "problem": "Create a GeoPandas DataFrame for a list of cities with randomly generated coordinates based on specified ranges.\nThe function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\nThe function should output with:\n    GeoDataFrame: A GeoPandas DataFrame containing 'City' and 'Coordinates' (Point objects).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n```", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys with tuple values.\")\n\n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n\n    data = {'City': [], 'Coordinates': []}\n    for city in cities:\n        data['City'].append(city)\n        data['Coordinates'].append(Point(np.random.uniform(lon_min, lon_max), np.random.uniform(lat_min, lat_max)))\n\n    gdf = gpd.GeoDataFrame(data, geometry='Coordinates')\n\n    return gdf", "pass": false}
{"task_id": "188", "program": "import pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n\n    pass\nimport pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n    \"\"\"\n    Generates a Folium map with markers for specified locations.\n    It preprocesses the input to handle both direct geographical coordinates and address strings.\n    For address strings, it dynamically resolves their latitude and longitude using the Photon geolocation service.\n    This flexible input handling allows for easy mapping of various location types.\n\n    Parameters\n    ----------\n    dic : dict\n        A dictionary with keys as location names and values as either\n        (latitude, longitude) tuples or address strings.\n\n    Returns\n    -------\n    folium.Map\n        A Folium map object with markers for each specified location.\n    \"\"\"\n    # Initialize the geolocator\n    geolocator = Photon(user_agent=\"geoapiExercises\")\n\n    # Create a list to store the markers\n    markers = []\n\n    # Iterate over the dictionary\n    for name, location in dic.items():\n        # If the location is a tuple, use it as is\n        if isinstance(location, tuple):\n            lat, lon = location\n        # If the location is a string, use the geolocator to resolve it\n        else:\n            location = geolocator.geocode(location)\n            lat, lon = location.latitude, location.longitude\n\n        # Create a marker for the location\n        marker = folium.Marker(location=[lat, lon], popup=name)\n        markers.append(marker)\n\n    # Create a map and add the markers\n    m = folium.Map(location=[lat, lon], zoom_start=10)\n    m.add_child(folium.FeatureGroup(markers))\n\n    return m", "problem": "Generates a Folium map with markers for specified locations. It preprocesses the input to handle both direct geographical coordinates and address strings. For address strings, it dynamically resolves their latitude and longitude using the Photon geolocation service. This flexible input handling allows for easy mapping of various location types.\nNote that: Notes: The geolocator, instantiated as Photon(user_agent=\"geoapiExercises\"), plays a crucial role in enabling the function to handle string addresses by converting them into latitude and longitude, thus broadening the scope of input data that can be mapped.\nThe function should output with:\n    folium.Map: A Folium map object with markers for each specified location.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n```", "solution": "import pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n    geolocator = Photon(user_agent=\"geoapiExercises\")\n\n    # Preprocess to handle both coordinates and string addresses\n    preprocessed_locations = []\n    for location, value in dic.items():\n        if isinstance(value, dict) and 'Lat' in value and 'Lon' in value:\n            preprocessed_locations.append({'Location': location, 'Lat': value['Lat'], 'Lon': value['Lon']})\n        elif isinstance(value, str):\n            geocoded_location = geolocator.geocode(value)\n            preprocessed_locations.append({'Location': location, 'Lat': geocoded_location.latitude, 'Lon': geocoded_location.longitude})\n        else:\n            raise ValueError(\"Location value must be either a dict with 'Lat' and 'Lon' keys or a string.\")\n\n    locations_df = pd.DataFrame(preprocessed_locations)\n\n    # Assuming the first row has valid coordinates\n    first_row = locations_df.iloc[0]\n    folium_map = folium.Map(location=[first_row['Lat'], first_row['Lon']], zoom_start=4)\n\n    # Add markers for all locations\n    for _, row in locations_df.iterrows():\n        folium.Marker([row['Lat'], row['Lon']], popup=row['Location']).add_to(folium_map)\n\n    return folium_map", "pass": false}
{"task_id": "189", "program": "import re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n\n    pass\nimport re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n    \"\"\"\n    Fetch data from a specific URL and extract all names from the JSON-formatted data that are not enclosed by square brackets.\n    No specific status code should be raised.\n    Note that: The function uses regular expressions to search for names in the fetched data.\n    Names that are inside square brackets are ignored.\n    The function will return \"Invalid url input\" if any exception is raised during the request.\n    The function should output with:\n        list[str]: A list of extracted names.\n    \"\"\"\n    try:\n        response = requests.get(data_url)\n        data = response.json()\n        names = re.findall(r'(?<!\\[)[a-zA-Z]+(?!\\])', json.dumps(data))\n        return names\n    except Exception as e:\n        return \"Invalid url input\"", "problem": "Fetch data from a specific URL and extract all names from the JSON-formatted data that are not enclosed by square brackets. No specific status code should be raised.\nNote that: The function uses regular expressions to search for names in the fetched data. Names that are inside square brackets are ignored. The function will return \"Invalid url input\" if any exception is raised during the request.\nThe function should output with:\n    list[str]: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n```", "solution": "import re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n\n    try:\n        response = requests.get(data_url)\n        data = response.json()\n        data_string = json.dumps(data['names'])\n        names = re.findall(r'(?<!\\[)(\\w+)(?![\\w]*\\])', data_string)\n        return names\n    except Exception as e:\n        return \"Invalid url input\"", "pass": false}
{"task_id": "190", "program": "import sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n\n    pass\nimport sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n    # Create a new database connection\n    conn = sqlite3.connect(DATABASE_NAME)\n    c = conn.cursor()\n\n    # Create a new table or replace an existing one\n    c.execute(\"DROP TABLE IF EXISTS \" + TABLE_NAME)\n    c.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n    # Insert data into the table\n    with open(csv_input, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            c.execute(\"INSERT INTO \" + TABLE_NAME + \" (name, age) VALUES (?, ?)\", row)\n\n    # Query the table to return the data as a DataFrame\n    df = pd.read_sql_query(\"SELECT * FROM \" + TABLE_NAME, conn)\n\n    # Close the database connection\n    conn.close()\n\n    return df", "problem": "Imports data from a specified CSV input into an SQLite database and retrieves it as a pandas DataFrame. The function reads the CSV input (file path or `StringIO`), creates a new database table or replaces an existing one, inserts data into the table, and finally queries the table to return the data as a DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the data from the newly populated SQLite database table. The DataFrame\n    provides a convenient and familiar data structure for further data manipulation and analysis in Python.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n```", "solution": "import sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n    # Check if the input is a StringIO object or a file path\n    if isinstance(csv_input, StringIO):\n        dr = csv.DictReader(csv_input)  # Read from StringIO\n    else:\n        with open(csv_input, 'r') as f:\n            dr = csv.DictReader(f)  # Read from a file\n\n    conn = sqlite3.connect(DATABASE_NAME)\n    cursor = conn.cursor()\n\n    # Create table and insert data\n    cols = dr.fieldnames\n    cursor.execute(f'DROP TABLE IF EXISTS {TABLE_NAME}')\n    cursor.execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join([f\"{col} TEXT\" for col in cols])})')\n    for row in dr:\n        cursor.execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\" for _ in cols])})', list(row.values()))\n\n    conn.commit()\n    dataframe = pd.read_sql_query(f'SELECT * from {TABLE_NAME}', conn)\n\n    conn.close()\n\n    return dataframe", "pass": false}
{"task_id": "191", "program": "import random\nfrom scipy import stats\ndef task_func(animals, mean):\n\n    pass\nimport random\nfrom scipy import stats\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers follows a Poisson distribution with the specified mean (mu).\n    The function should output with:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n    \"\"\"\n    # Generate a random number of customers following a Poisson distribution\n    num_customers = stats.poisson.rvs(mean)\n\n    # Initialize a dictionary to store the number of sales for each animal type\n    sales = {animal: 0 for animal in animals}\n\n    # Simulate the sales for each customer\n    for _ in range(num_customers):\n        # Randomly select an animal from the list of animals\n        animal = random.choice(animals)\n\n        # Increment the number of sales for the selected animal\n        sales[animal] += 1\n\n    # Print and return the summary of sales\n    print(f\"Number of customers: {num_customers}\")\n    print(f\"Sales: {sales}\")\n    return sales\nanimals = [\"dog\", \"cat\", \"fish\"]\nmean = 10", "problem": "Simulates sales in a pet shop based on a randomly determined number of customers. Each customer randomly buys one type of animal from the specified list of animals. The function displays and returns a summary of the sales, where the number of customers follows a Poisson distribution with the specified mean (mu).\nThe function should output with:\n    dict: A dictionary with animal types as keys and the number of sales as values.\nYou should write self-contained code starting with:\n```\nimport random\nfrom scipy import stats\ndef task_func(animals, mean):\n```", "solution": "import random\nfrom scipy import stats\ndef task_func(animals, mean):\n    if not animals:\n        return {}\n\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "pass": false}
{"task_id": "192", "program": "import re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n\n    pass\nimport re\nimport smtplib\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n    # Extract names from the text\n    names = re.findall(r\"[A-Z][a-z]+ [A-Z][a-z]+\", text)\n\n    # Create an email message\n    message = f\"Subject: Extracted Names\\n\\n{names}\"\n\n    # Send the email\n    if smtp is None:\n        smtp = smtplib.SMTP(smtp_server, smtp_port)\n        smtp.ehlo()\n        smtp.starttls()\n        smtp.login(email_address, email_password)\n    smtp.sendmail(email_address, recepient_address, message)\n\n    return names", "problem": "Extract all names from a string that is not enclosed by square brackets and send the names in an email.\nNote that: The message in the email is formatted in \"Subject: Extracted Names\\n\\n\" with the extracted name \"\\nJosie Smith\\nMugsy Dog Smith\".\nThe function should output with:\n    list: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n```", "solution": "import re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n\n    names = re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', text)\n    # Remove trailing spaces from each name and filter out empty strings\n    names = [name.strip() for name in names if name != \"\"]\n    \n    message = 'Subject: Extracted Names\\n\\n' + '\\n'.join(names)\n    if smtp:\n        server = smtp(smtp_server, smtp_port)\n    else:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        \n    server.starttls()\n    server.login(email_address, email_password)\n    server.sendmail(email_address, recepient_address, message)\n    server.quit()\n    return names", "pass": false}
{"task_id": "193", "program": "import pandas as pd\nimport numpy as np\nfrom random import choice\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom random import choice\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n    \"\"\"\n    Generates a DataFrame with a specified number of rows and columns, populated with randomly generated data.\n    Each column's data type is randomly selected from a set of Python data types, including primitive and complex structures.\n    DataFrame: A DataFrame in which each column's data type could be one of the following, with random content generated accordingly:\n        - str: Random strings of 5 lowercase alphabetic characters.\n        - int: Random integers from 0 to 9.\n        - float: Random floats derived by converting integers from 0 to 9 into float.\n        - list: Lists of random length (1 to 5) containing integers from 0 to 9.\n        - tuple: Tuples of random length (1 to 5) containing integers from 0 to 9.\n        - dict: Dictionaries with a random number (1 to 5) of key-value pairs, keys and values are integers from 0 to 9.\n        - set: Sets of random size (1 to 5) containing unique integers from 0 to 9.\n    The function should output with:\n        pd.DataFrame: A DataFrame with the specified number of rows and columns named 'col0', 'col1', etc., containing randomly generated data.\n    \"\"\"\n    data = {}\n    for i in range(columns):\n        data[f'col{i}'] = [choice(DATA_TYPES) for _ in range(rows)]\n    return pd.DataFrame(data)", "problem": "Generates a DataFrame with a specified number of rows and columns, populated with randomly generated data. Each column's data type is randomly selected from a set of Python data types, including primitive and complex structures. DataFrame: A DataFrame in which each column's data type could be one of the following, with random content generated accordingly: - str: Random strings of 5 lowercase alphabetic characters. - int: Random integers from 0 to 9. - float: Random floats derived by converting integers from 0 to 9 into float. - list: Lists of random length (1 to 5) containing integers from 0 to 9. - tuple: Tuples of random length (1 to 5) containing integers from 0 to 9. - dict: Dictionaries with a random number (1 to 5) of key-value pairs, keys and values are integers from 0 to 9. - set: Sets of random size (1 to 5) containing unique integers from 0 to 9.\nThe function should output with:\n    pd.DataFrame: A DataFrame with the specified number of rows and columns named 'col0', 'col1', etc., containing randomly generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom random import choice\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom random import choice\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n    data = {}\n    for col in range(columns):\n        data_type = choice(DATA_TYPES)\n        if data_type == str:\n            data['col' + str(col)] = [''.join(np.random.choice(list('abcdefghijklmnopqrstuvwxyz'), size=5)) for _ in\n                                      range(rows)]\n        elif data_type in [int, float]:\n            data['col' + str(col)] = np.random.choice([data_type(i) for i in range(10)], size=rows)\n        elif data_type == list:\n            data['col' + str(col)] = [list(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n        elif data_type == tuple:\n            data['col' + str(col)] = [tuple(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n        elif data_type == dict:\n            data['col' + str(col)] = [dict(zip(np.random.choice(range(10), size=np.random.randint(1, 6)),\n                                               np.random.choice(range(10), size=np.random.randint(1, 6)))) for _ in\n                                      range(rows)]\n        elif data_type == set:\n            data['col' + str(col)] = [set(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n\n    df = pd.DataFrame(data)\n    return df", "pass": true}
{"task_id": "194", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n    # Generate random numeric data\n    data = np.random.rand(data_size)\n\n    # Select a random color from the predefined list\n    color = np.random.choice(BAR_COLOR)\n\n    # Create a histogram of the data\n    plt.hist(data, color=color)\n\n    # Show the histogram\n    plt.show()\n\n    return data, color", "problem": "Generates random numeric data and creates a histogram of the data. The color of the histogram bars is randomly selected from a predefined list.\nThe function should output with:\n    tuple:\n    ndarray: The array of randomly generated data.\n    str: The color used for the histogram bars.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n    np.random.seed(0)\n    data = np.random.randn(data_size)\n    color = np.random.choice(BAR_COLOR)\n    plt.hist(data, bins=np.arange(-3, 4, 0.5), color=color, edgecolor='black')\n    return data, color", "pass": true}
{"task_id": "195", "program": "import subprocess\nimport platform\nimport time\ndef task_func(url):\n\n    pass\nimport subprocess\nimport platform\nimport time\ndef task_func(url):\n    \"\"\"\n    Open a web page in the default web browser in a background process.\n    The function should output with:\n        int: The return code of the subprocess.\n    \"\"\"\n    if platform.system() == \"Windows\":\n        command = \"start\"\n    else:\n        command = \"open\"\n    process = subprocess.Popen([command, url], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    return process.wait()", "problem": "Open a web page in the default web browser in a background process.\nThe function should output with:\n    int: The return code of the subprocess.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport platform\nimport time\ndef task_func(url):\n```", "solution": "import subprocess\nimport platform\nimport time\ndef task_func(url):\n    if platform.system() == 'Darwin':\n        cmd = 'open'\n    elif platform.system() == 'Windows':\n        cmd = 'start'\n    else:\n        cmd = 'xdg-open'\n\n    # Open webpage in a background process\n    process = subprocess.Popen([cmd, url], shell=True)\n\n    # Wait for the process to complete\n    while process.poll() is None:\n        time.sleep(1)\n\n    return process.returncode", "pass": false}
{"task_id": "196", "program": "import random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n\n    pass\nimport random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n    \"\"\"\n    Create a list of random numbers, sort them and record the distribution of the numbers in a histogram using default settings in a deterministic seaborn plot. Return the axes object and the list of random numbers.\n\n    The function should raise the exception for: ValueError: If range_limit is less than or equal to 1.\n\n    The function should output with:\n        Tuple[matplotlib.axes._axes.Axes, List[int]]: The axes object with the plot and the list of random numbers.\n    \"\"\"\n    if range_limit <= 1:\n        raise ValueError(\"range_limit must be greater than 1\")\n\n    random.seed(seed)\n    numbers = [random.randint(0, range_limit - 1) for _ in range(length)]\n    numbers.sort()\n\n    fig, ax = plt.subplots()\n    sns.histplot(numbers, ax=ax)\n\n    return ax, numbers", "problem": "Create a list of random numbers, sort them and record the distribution of the numbers in a histogram using default settings in a deterministic seaborn plot. Return the axes object and the list of random numbers.\nThe function should raise the exception for: ValueError: If range_limit is less than or equal to 1.\nThe function should output with:\n    Tuple[matplotlib.axes._axes.Axes, List[int]]: The axes object with the plot and the list of random numbers.\nYou should write self-contained code starting with:\n```\nimport random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n```", "solution": "import random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n    if range_limit <= 1:\n        raise ValueError(\"range_limit must be greater than 1\")\n\n    random.seed(seed)\n    np.random.seed(seed)\n\n    random_numbers = [random.randint(1, range_limit) for _ in range(length)]\n    random_numbers.sort()\n\n    # Initialize a fresh plot\n    plt.figure()\n    plot = sns.histplot(random_numbers, kde=False)\n\n    return plot.axes, random_numbers", "pass": false}
{"task_id": "197", "program": "import heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n\n    pass\nimport heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n    \"\"\"\n    Find the N biggest differences between the respective elements of the list 'l1' and list 'l2', square the differences, take the square root and return the plotted values as a matplotlib Axes object.\n    The function should output with:\n        matplotlib.axes._axes.Axes: A matplotlib Axes object with the plotted differences.\n    \"\"\"\n    # Calculate the differences between the elements of l1 and l2\n    diffs = [abs(a - b) for a, b in zip(l1, l2)]\n\n    # Find the N biggest differences\n    biggest_diffs = heapq.nlargest(N, diffs)\n\n    # Square the differences\n    squared_diffs = [diff ** 2 for diff in biggest_diffs]\n\n    # Take the square root of the squared differences\n    root_diffs = [math.sqrt(diff) for diff in squared_diffs]\n\n    # Plot the differences\n    fig, ax = plt.subplots()\n    ax.plot(root_diffs)\n\n    return ax\nl1 = [1, 2, 3, 4, 5]\nl2 = [2, 4, 6, 8, 10]", "problem": "Find the N biggest differences between the respective elements of the list 'l1' and list 'l2', square the differences, take the square root and return the plotted values as a matplotlib Axes object.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A matplotlib Axes object with the plotted differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n```", "solution": "import heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n    largest_diffs = [math.sqrt((l1[i] - l2[i])**2) for i in largest_diff_indices]\n\n    fig, ax = plt.subplots()\n    ax.plot(largest_diffs)\n\n    return ax", "pass": true}
{"task_id": "198", "program": "import numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n\n    pass\nimport numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n    \"\"\"\n    Analyzes a list of numerical data, identifies values greater than the average, and counts how many values are greater than a specified value. Additionally, plots the histogram of the sorted numbers.\n    Note that: If the data list is empty, the function returns an empty numpy.ndarray and a count of 0. This ensures the function's output remains consistent and predictable even with no input data.\n    The function should output with:\n        numpy.ndarray: An array of values from the data that are greater than the average.\n        int: The number of values in the data that are greater than the given value.\n    \"\"\"\n    if not data:\n        return np.array([]), 0\n\n    # Calculate the average and standard deviation of the data\n    average = statistics.mean(data)\n    std_dev = statistics.stdev(data)\n\n    # Identify values greater than the average\n    greater_than_average = np.array([x for x in data if x > average])\n\n    # Count the number of values greater than the given value\n    count = np.count_nonzero(greater_than_average > value)\n\n    # Plot the histogram of the sorted data\n    plt.hist(sorted(data), bins=10)\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Data\")\n    plt.show()\n\n    return greater_than_average, count\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = 5", "problem": "Analyzes a list of numerical data, identifies values greater than the average, and counts how many values are greater than a specified value. Additionally, plots the histogram of the sorted numbers.\nNote that: If the data list is empty, the function returns an empty numpy.ndarray and a count of 0. This ensures the function's output remains consistent and predictable even with no input data.\nThe function should output with:\n    numpy.ndarray: An array of values from the data that are greater than the average.\n    int: The number of values in the data that are greater than the given value.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n```", "solution": "import numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n    if not data:  # Handle empty data list\n        return np.array([]), 0\n\n    data = np.array(data)\n    avg = statistics.mean(data)\n    greater_avg = data[data > avg]\n\n    data.sort()\n    bpoint = bisect.bisect_right(data, value)\n    num_greater_value = len(data) - bpoint\n\n    plt.hist(data, bins=10)\n    plt.show()\n\n    return greater_avg, num_greater_value", "pass": true}
{"task_id": "199", "program": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n\n    pass\nimport pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    # Check if utc_datetime is a datetime object\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n\n    # Check if cities is a list of strings\n    if not isinstance(cities, list) or not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings\")\n\n    # Check if weather_conditions is a list of strings\n    if not isinstance(weather_conditions, list) or not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list of strings\")\n\n    # Check if timezones is a dict with string keys and string values\n    if not isinstance(timezones, dict) or not all(isinstance(key, str) and isinstance(value, str) for key, value in timezones.items()):\n        raise ValueError(\"timezones must be a dict with string keys and string values\")\n\n    # Check if seed is an integer\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer\")\n\n    # Set the random seed\n    set_seed(seed)\n\n    # Create a DataFrame with the specified columns\n    df = pd.DataFrame(columns=['City', 'Local Time', 'Weather Condition'])\n\n    # Loop over the cities and add a row to the DataFrame for each city\n    for city in cities:\n        # Get the local time for the city\n        local_time = utc_datetime.astimezone(pytz.timezone(timezones[city]))\n\n        # Get a random weather condition for the city\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n\n        # Add a row to the DataFrame\n        df = df.append({'City': city, 'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'), 'Weather Condition': weather_condition}, ignore_index=True)\n\n    return df\nutc_datetime = datetime(2023, 2, 28, 12, 0, 0)\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']\nweather_conditions = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\ntimezones = {\n    'New York': 'America/New_York',\n    'London': 'Europe/London',\n    'Beijing': 'Asia/Shanghai',\n    'Tokyo': 'Asia/Tokyo',\n    'Sydney': 'Australia/Sydney'\n}\nseed = 42", "problem": "Generate a weather report for specified cities at a given UTC datetime.\nThe function should raise the exception for: ValueError: If utc_datetime is not a datetime object or if any of the other parameters are not in the expected format.\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the weather report. Columns include:\n    'City': The name of the city.\n    'Local Time': The local time of the weather report for the city, formatted as 'YYYY-MM-DD HH:MM:SS ZZZ' (ZZZ is the timezone abbreviation).\n    'Weather Condition': The weather condition in the city at the given local time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n```", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    set_seed(seed)\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object with tzinfo set to UTC.\")\n\n    report_data = []\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"Timezone for {city} not provided in timezones parameter.\")\n        \n        city_tz = pytz.timezone(timezones[city])\n        city_time = utc_datetime.astimezone(city_tz)\n        weather = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])\n\n    report_df = pd.DataFrame(report_data, columns=['City', 'Local Time', 'Weather Condition'])\n\n    return report_df", "pass": false}
{"task_id": "200", "program": "import random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n\n    pass\nimport random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n    # Generate 'n' random numbers between 0 and 1\n    numbers = [random.random() for _ in range(n)]\n\n    # Find the average of all generated numbers\n    average = statistics.mean(numbers)\n\n    # Find the numbers greater than the average\n    greater_than_average = [num for num in numbers if num > average]\n\n    # Count the numbers greater than or equal to the specified value\n    count = sum(1 for num in greater_than_average if num >= value)\n\n    # Plot the sorted numbers\n    plt.plot(sorted(numbers))\n    plt.show()\n\n    return greater_than_average, count\nn = 10\nvalue = 0.5", "problem": "Generates 'n' random numbers between 0 and 1, finds those greater than their average, and counts how many are greater than or equal to a specified value, then plots the sorted numbers.\nThe function should output with:\n    list: Numbers greater than the average of all generated numbers.\n    int: The count of numbers greater than or equal to the specified value.\nYou should write self-contained code starting with:\n```\nimport random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n```", "solution": "import random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n    if n < 1:  # Handle case where n is 0 or less\n        return [], 0\n\n    numbers = [random.random() for _ in range(n)]\n    avg = statistics.mean(numbers)\n    greater_avg = [x for x in numbers if x > avg]\n\n    numbers.sort()\n    bpoint = bisect.bisect_right(numbers, value)\n    num_greater_value = len(numbers) - bpoint\n\n    plt.plot(numbers)\n    plt.show()\n\n    return greater_avg, num_greater_value", "pass": false}
{"task_id": "201", "program": "import bisect\nimport statistics\ndef task_func(df, column, value):\n\n    pass\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(df, column, value):\n    \"\"\"\n    Analyze a column of a pandas DataFrame, find the values that are larger than the average, and count the number of values that are larger than a given value.\n    The function should raise the exception for: ValueError: If the column does not exist in the DataFrame or value is not a number.\n    The function should output with:\n        tuple: A tuple containing (numpy.ndarray, int, matplotlib.axes.Axes).\n        The numpy array contains values greater than the average.\n        The int is the number of values greater than the given value.\n        The Axes object is for the generated histogram plot.\n    \"\"\"\n    if column not in df.columns:\n        raise ValueError(\"Column does not exist in the DataFrame\")\n    if not isinstance(value, (int, float)):\n        raise ValueError(\"Value is not a number\")\n\n    # Calculate the average of the column\n    average = df[column].mean()\n\n    # Find the values that are larger than the average\n    larger_than_average = df[column][df[column] > average]\n\n    # Count the number of values that are larger than the given value\n    num_larger_than_value = np.count_nonzero(larger_than_average > value)\n\n    # Generate a histogram plot of the values\n    fig, ax = plt.subplots()\n    ax.hist(larger_than_average, bins=20)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Count\")\n    ax.set_title(\"Histogram of Values Greater Than Average\")\n\n    return larger_than_average, num_larger_than_value, ax", "problem": "Analyze a column of a pandas DataFrame, find the values that are larger than the average, and count the number of values that are larger than a given value.\nThe function should raise the exception for: ValueError: If the column does not exist in the DataFrame or value is not a number.\nThe function should output with:\n    tuple: A tuple containing (numpy.ndarray, int, matplotlib.axes.Axes).\n    The numpy array contains values greater than the average.\n    The int is the number of values greater than the given value.\n    The Axes object is for the generated histogram plot.\nYou should write self-contained code starting with:\n```\nimport bisect\nimport statistics\ndef task_func(df, column, value):\n```", "solution": "import bisect\nimport statistics\ndef task_func(df, column, value):\n    if column not in df.columns:\n        raise ValueError(f\"Column '{column}' does not exist in DataFrame\")\n    if not isinstance(value, (int, float)):\n        raise ValueError(\"Value must be a number\")\n\n    data = df[column].values\n    avg = statistics.mean(data)\n    greater_avg = data[data > avg]\n    \n    data.sort()\n    bpoint = bisect.bisect_right(data, value)\n    num_greater_value = len(data) - bpoint\n    \n    ax = df.hist(column=column, bins=10)[0][0]\n    # plt.show()\n    \n    return greater_avg, num_greater_value, ax", "pass": true}
{"task_id": "202", "program": "import re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n\n    pass\nimport re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n    \"\"\"\n    Extract all URLs from a string-serialized JSON dict using a specific URL pattern and return a dict with the URLs as keys and the number of times they appear as values.\n\n    Args:\n        json_str (str): A string-serialized JSON dict.\n        top_n (int, optional): The number of top URLs to return. Defaults to 10.\n\n    Returns:\n        dict: A dict with URLs as keys and the number of times they appear as values.\n    \"\"\"\n    # Deserialize the JSON string\n    data = json.loads(json_str)\n\n    # Extract all URLs from the JSON dict\n    urls = re.findall(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", json_str)\n\n    # Create a Counter object to count the number of times each URL appears\n    url_counts = Counter(urls)\n\n    # Return the top N URLs and their counts\n    return {url: count for url, count in url_counts.most_common(top_n)}\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"links\": [\"https://www.example1.com\", \"https://www.example2.com\", \"https://www.example3.com\"]}'", "problem": "Extract all URLs from a string-serialized JSON dict using a specific URL pattern and return a dict with the URLs as keys and the number of times they appear as values.\nThe function should output with:\n    dict: A dict with URLs as keys and the number of times they appear as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n```", "solution": "import re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n    pattern = r'(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})'\n    data = json.loads(json_str)\n    urls = []\n\n    def extract(dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                extract(value)\n            elif isinstance(value, str) and re.match(pattern, value):\n                urls.append(value)\n\n    extract(data)\n    if not urls:\n        return {}\n    elif len(urls) <= top_n:\n        return dict(Counter(urls))\n\n    return dict(Counter(urls).most_common(top_n))", "pass": false}
{"task_id": "203", "program": "import json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n\n    pass\nimport json\nimport smtplib\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n    # Extract recipient email address and names from JSON-formatted string\n    data = json.loads(input_data)\n    recipient_email = data[\"recipient_email\"]\n    names = [name[\"name\"] for name in data[\"names\"]]\n\n    # Send the names in an email\n    if smtp is None:\n        smtp = smtplib.SMTP(smtp_server, smtp_port)\n        smtp.ehlo()\n        smtp.starttls()\n        smtp.login(email_address, email_password)\n\n    subject = \"Extracted Names\"\n    body = \"\\n\".join(names)\n    msg = f\"Subject: {subject}\\n\\n{body}\"\n    smtp.sendmail(email_address, recipient_email, msg)\n\n    # Return the list of extracted names\n    return names\ninput_data = '{\"recipient_email\": \"recipient@example.com\", \"names\": [{\"name\": \"John Doe\"}, {\"name\": \"Jane Doe\"}]}'", "problem": "Extract recepient email address and names from JSON-formatted string and send the names in an email. The sent message should be in the format 'Subject: Extracted Names\\n\\nName1\\nName2\\n...'.\nThe function should output with:\n    list: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n```", "solution": "import json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n     \n    if input_data is None:\n        return []\n\n    # Parse input JSON data\n    try:\n        data = json.loads(input_data)\n        recipient_email = data.get('recipient')\n        names = data.get('names', [])\n    except (json.JSONDecodeError, ValueError):\n        return []\n\n    if not recipient_email or not names:\n        return []\n\n    message = 'Subject: Extracted Names\\n\\n' + '\\n'.join(names)\n    \n    if smtp:\n        server = smtp(smtp_server, smtp_port)\n    else:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(email_address, email_password)\n    server.sendmail(email_address, recipient_email, message)\n    server.quit()\n    return names", "pass": false}
{"task_id": "204", "program": "import numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n\n    pass\nimport numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    # Calculate the mean, median, mode, and standard deviation of L\n    mean = np.mean(L)\n    median = np.median(L)\n    mode = Counter(L).most_common(1)[0][0]\n    std_dev = np.std(L)\n\n    # Create a histogram plot of L\n    plt.hist(L, bins=50, edgecolor='black', linewidth=1)\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of L')\n    plt.show()\n\n    # Return a dictionary with the results\n    return {'mean': mean, 'median': median, 'mode': mode, 'std_dev': std_dev, 'plot': plt.gca()}\nL = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "problem": "Analyze an \"L\" list by calculating the mean, median, mode, and standard deviation. Visualize the data by returning a histogram plot.\nThe function should output with:\n    dict: A dictionary with the 'mean', 'median', 'mode', 'std_dev' of 'L, and the 'plot' Axes object.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n```", "solution": "import numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    mean = np.mean(L)\n    median = np.median(L)\n    mode = Counter(L).most_common(1)[0][0]\n    std_dev = np.std(L)\n    \n    plt.hist(L, bins='auto')\n    plt.title('Histogram of Data')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    return {'mean': mean, 'median': median, 'mode': mode, 'std_dev': std_dev, 'plot': plt.gca()}", "pass": true}
{"task_id": "205", "program": "import subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n\n    pass\nimport subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n    if not commands:\n        return []\n    with Pool(len(commands)) as pool:\n        results = pool.map(execute_command, commands)\n    return results\ncommands = [\"echo 'Hello, World!'\", \"echo 'Goodbye, World!'\"]", "problem": "Executes a list of shell commands in parallel using multiprocessing, and collects their outputs.\nNote that: Notes: If `commands` is an empty list, the function returns an empty list without attempting to execute any commands.\nThe function should output with:\n    list: A list of byte strings, each representing the output of a command. Returns an empty list if `commands` is empty.\nYou should write self-contained code starting with:\n```\nimport subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n```", "solution": "import subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n\n    if not commands:  # Handle case where commands list is empty\n        return []\n\n    with Pool(processes=len(commands)) as pool:\n        outputs = pool.map(execute_command, commands)\n\n    return outputs", "pass": false}
{"task_id": "206", "program": "import csv\nimport json\nimport os\ndef task_func(file_name):\n\n    pass\nimport csv\nimport json\nimport os\ndef task_func(file_name):\n    \"\"\"\n    Convert a csv file to a json file.\n    The function should raise the exception for: FileNotFoundError: If the file does not exist.\n    The function should output with:\n        str: The file name of the created json file.\n    \"\"\"\n    if not os.path.exists(file_name):\n        raise FileNotFoundError(f\"File {file_name} does not exist.\")\n\n    with open(file_name, \"r\") as csv_file:\n        reader = csv.reader(csv_file)\n        json_data = [row for row in reader]\n\n    json_file_name = file_name.replace(\".csv\", \".json\")\n    with open(json_file_name, \"w\") as json_file:\n        json.dump(json_data, json_file)\n\n    return json_file_name", "problem": "Convert a csv file to a json file.\nThe function should raise the exception for: FileNotFoundError: If the file does not exist.\nThe function should output with:\n    str: The file name of the created json file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport json\nimport os\ndef task_func(file_name):\n```", "solution": "import csv\nimport json\nimport os\ndef task_func(file_name):\n    if not os.path.exists(file_name):\n        raise FileNotFoundError(\"File does not exist.\")\n\n    data = []\n\n    with open(file_name, 'r') as f:\n        csv_reader = csv.DictReader(f)\n        for row in csv_reader:\n            data.append(row)\n\n    json_file_name = file_name.split('.')[0] + '.json'\n\n    with open(json_file_name, 'w') as f:\n        json.dump(data, f)\n\n    return json_file_name", "pass": false}
{"task_id": "207", "program": "import re\nimport requests\ndef task_func(input):\n\n    pass\nimport re\nimport requests\ndef task_func(input):\n    # Extract the API endpoint from the input string\n    endpoint = re.search(r\"https?://\\S+\", input).group()\n\n    # Send a GET request to the endpoint\n    response = requests.get(endpoint)\n\n    # Return the response data in JSON format\n    return response.json()", "problem": "Extract an API endpoint from the input string, send a GET request to the endpoint, and return the response data in JSON format.\nThe function should output with:\n    dict: The response data.\nYou should write self-contained code starting with:\n```\nimport re\nimport requests\ndef task_func(input):\n```", "solution": "import re\nimport requests\ndef task_func(input):\n\n    endpoint = re.search(r'https?:\\/\\/[^ ]+', input).group()\n\n    response = requests.get(endpoint)\n\n    return response.json()", "pass": true}
{"task_id": "208", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate and draw a random sequence of \"elements\" number of steps. The steps are either -1 or 1, and the sequence is plotted as a random walk. Returns the descriptive statistics of the random walk and the plot of the random walk. The descriptive statistics include count, mean, standard deviation, minimum, 5th percentile, 25th percentile, median, 75th percentile, 95th percentile and maximum.\n    The function should raise the exception for: ValueError: If elements is not a positive integer.\n    The function should output with:\n        dict: A dictionary containing the descriptive statistics of the random walk.\n        matplotlib.axes.Axes: The Axes object with the plotted random walk.\n    \"\"\"\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    random_walk = np.cumsum(np.random.choice([-1, 1], size=elements))\n\n    stats = {\n        \"count\": len(random_walk),\n        \"mean\": random_walk.mean(),\n        \"std\": random_walk.std(),\n        \"min\": random_walk.min(),\n        \"5th percentile\": np.percentile(random_walk, 5),\n        \"25th percentile\": np.percentile(random_walk, 25),\n        \"median\": np.median(random_walk),\n        \"75th percentile\": np.percentile(random_walk, 75),\n        \"95th percentile\": np.percentile(random_walk, 95),\n        \"max\": random_walk.max(),\n    }\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title(\"Random Walk\")\n    ax.set_xlabel(\"Step\")\n    ax.set_ylabel(\"Value\")\n\n    return stats, ax", "problem": "Generate and draw a random sequence of \"elements\" number of steps. The steps are either -1 or 1, and the sequence is plotted as a random walk. Returns the descriptive statistics of the random walk and the plot of the random walk. The descriptive statistics include count, mean, standard deviation, minimum, 5th percentile, 25th percentile, median, 75th percentile, 95th percentile and maximum.\nThe function should raise the exception for: ValueError: If elements is not a positive integer.\nThe function should output with:\n    dict: A dictionary containing the descriptive statistics of the random walk.\n    matplotlib.axes.Axes: The Axes object with the plotted random walk.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    np.random.seed(seed)\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"Element must be a positive integer.\")\n        \n    steps = np.random.choice([-1, 1], size=elements)\n    walk = np.cumsum(steps)\n    descriptive_stats = pd.Series(walk).describe(percentiles=[.05, .25, .5, .75, .95]).to_dict()\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(walk)\n    plt.title('Random Walk')\n    return descriptive_stats, plt.gca()", "pass": false}
{"task_id": "209", "program": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Plot a scatter graph of tuples and highlight the tuple with the maximum value at index 1.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the plot for further manipulation and testing, with the title 'Max Tuple Highlighted', x-axis labeled 'x', y-axis labeled 'y', and a legend.\n    \"\"\"\n    # Convert the data to a numpy array\n    data = np.array(data)\n\n    # Get the maximum value at index 1\n    max_value = np.max(data[:, 1])\n\n    # Create a scatter plot of the data\n    fig, ax = plt.subplots()\n    ax.scatter(data[:, 0], data[:, 1], c=data[:, 2])\n\n    # Highlight the tuple with the maximum value at index 1\n    ax.scatter(data[np.argmax(data[:, 1]), 0], data[np.argmax(data[:, 1]), 1], c='red', s=100)\n\n    # Add a title, x-axis label, and y-axis label\n    ax.set_title('Max Tuple Highlighted')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n    # Add a legend\n    ax.legend()\n\n    return ax\ndata = [(1, 2, 'red'), (3, 4, 'blue'), (5, 6, 'green')]", "problem": "Plot a scatter graph of tuples and highlight the tuple with the maximum value at index 1.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot for further manipulation and testing, with the title 'Max Tuple Highlighted', x-axis labeled 'x', y-axis labeled 'y', and a legend.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    max_tuple = max(data, key=itemgetter(1))\n    tuples = np.array(data)\n    x = tuples[:,0]\n    y = tuples[:,1]\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, label='Data')\n    ax.scatter(*max_tuple, color='red', label='Max Tuple')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Max Tuple Highlighted')\n    ax.legend()\n    return ax", "pass": false}
{"task_id": "210", "program": "import collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Generate a bar plot showing the frequency of letters in the given dataset, and highlight the letter associated with the maximum integer value.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the generated plot, with the x-axis labeled 'Letter', the y-axis labeled 'Count', the title 'Letter Counts with Max Value Letter Highlighted', and the labels 'Letter Counts' and 'Max Value Letter' in the legend.\n    \"\"\"\n    # Count the frequency of each letter in the dataset\n    letter_counts = collections.Counter(data)\n\n    # Find the letter with the maximum count\n    max_letter = max(letter_counts, key=letter_counts.get)\n\n    # Create a bar plot of the letter counts\n    ax = plt.bar(letter_counts.keys(), letter_counts.values())\n\n    # Highlight the letter with the maximum count\n    ax.bar_label(ax.containers[0], labels=letter_counts.values())\n\n    # Set the title, x-axis label, and y-axis label\n    ax.set_title(\"Letter Counts with Max Value Letter Highlighted\")\n    ax.set_xlabel(\"Letter\")\n    ax.set_ylabel(\"Count\")\n\n    # Add a legend with the labels 'Letter Counts' and 'Max Value Letter'\n    ax.legend([\"Letter Counts\", \"Max Value Letter\"])\n\n    return ax\ndata = \"hello world\"", "problem": "Generate a bar plot showing the frequency of letters in the given dataset, and highlight the letter associated with the maximum integer value.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the generated plot, with the x-axis labeled 'Letter', the y-axis labeled 'Count', the title 'Letter Counts with Max Value Letter Highlighted', and the labels 'Letter Counts' and 'Max Value Letter' in the legend.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    letter_counts = collections.Counter([item[0] for item in data])\n    max_value_letter = max(data, key=itemgetter(1))[0]\n\n    letters, counts = zip(*letter_counts.items())\n    # Initialize a fresh plot\n    plt.figure()\n    ax = plt.bar(letters, counts, label='Letter Counts')\n\n    if max_value_letter in letter_counts:\n        plt.bar(max_value_letter, letter_counts[max_value_letter], color='red', label='Max Value Letter')\n\n    plt.xlabel('Letter')\n    plt.ylabel('Count')\n    plt.title('Letter Counts with Max Value Letter Highlighted')\n    plt.legend()\n\n    return plt.gca()", "pass": false}
{"task_id": "211", "program": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n\n    pass\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\n\n    Args:\n        url (str): The URL of the zip file to download.\n        destination_directory (str): The directory to extract the zip file to.\n        headers (dict, optional): Optional headers to include with the request. Defaults to None.\n\n    Returns:\n        list: A list of filenames of the extracted files.\n    \"\"\"\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to download file: {response.status_code}\")\n\n    # Extract the zip file\n    with zipfile.ZipFile(io.BytesIO(response.content)) as zip_file:\n        zip_file.extractall(destination_directory)\n\n    # Return the list of extracted files\n    return [os.path.join(destination_directory, filename) for filename in zip_file.namelist()]", "problem": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```", "solution": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n        \n    if headers is None:\n        headers = {\n            'accept': 'application/octet-stream'\n        }\n\n    response = requests.get(url, headers=headers)\n    filename = os.path.basename(url)\n    zip_path = os.path.join(destination_directory, filename)\n\n    with open(zip_path, 'wb') as f:\n        f.write(response.content)\n\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    extracted_files = os.listdir(destination_directory)\n\n    return extracted_files", "pass": false}
{"task_id": "212", "program": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Create a scatter plot of the data\n    fig, ax = plt.subplots()\n    ax.scatter(data[:, 0], data[:, 1])\n\n    # Find the point with the maximum y-value\n    max_y_point = max(data, key=itemgetter(1))\n\n    # Mark the point with the maximum y-value\n    ax.plot(max_y_point[0], max_y_point[1], 'ro')\n\n    # Set the x-axis label\n    ax.set_xlabel('x')\n\n    # Set the y-axis label\n    ax.set_ylabel('y')\n\n    # Set the title\n    ax.set_title('Points with Max Y Point Highlighted')\n\n    return ax, max_y_point\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])", "problem": "Draw a scatter plot of dots and mark the point with the maximum y-value. Return the axes object as well as the maximum y-value point.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the scatter plot, with the x-axis labeled 'x', the y-axis labeled 'y', and the title 'Points with Max Y Point Highlighted'.\n    tuple: The point with the maximum y-value.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    max_y_point = max(data, key=itemgetter(1))\n    points = np.array(data)\n    x = points[:,0]\n    y = points[:,1]\n\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, label='Points')\n    ax.scatter(*max_y_point, color='red', label='Max Y Point')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Points with Max Y Point Highlighted')\n    ax.legend()\n    return ax, max_y_point", "pass": false}
{"task_id": "213", "program": "import time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n\n    pass\nimport time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n    \"\"\"\n    Generates a series of random numbers over a specified number of intervals with a delay of 1 second between each interval. It then plots these numbers as a function of elapsed time and returns the Axes object along with the kurtosis value of the generated numbers.\n\n    Args:\n        intervals (int): The number of intervals to generate random numbers for.\n        seed (int): The random seed to use for generating the numbers.\n\n    Returns:\n        matplotlib.axes.Axes: The Axes object representing the plot.\n        float: The kurtosis value of the generated numbers.\n    \"\"\"\n    random.seed(seed)\n    x = []\n    y = []\n    for i in range(intervals):\n        x.append(i)\n        y.append(random.random())\n        time.sleep(1)\n    ax = plt.plot(x, y)\n    kurtosis_value = kurtosis(y)\n    return ax, kurtosis_value", "problem": "Generates a series of random numbers over a specified number of intervals with a delay of 1 second between each interval. It then plots these numbers as a function of elapsed time and returns the Axes object along with the kurtosis value of the generated numbers.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object representing the plot.\n    float: The kurtosis value of the generated numbers.\nYou should write self-contained code starting with:\n```\nimport time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n```", "solution": "import time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n    random.seed(seed)\n    times = []\n    numbers = []\n\n    try:\n        for _ in range(intervals):\n            time.sleep(1)\n            times.append(time.time())\n            numbers.append(random.random())\n    except KeyboardInterrupt:\n        print('Interrupted by user')\n\n    kurtosis_value = kurtosis(numbers, nan_policy='omit')\n    # Initialize a fresh figure\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.plot(times, numbers)\n    return ax, kurtosis_value", "pass": false}
{"task_id": "214", "program": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n\n    pass\nimport random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate a random RGB image and view it.\n\n    Args:\n        seed (int): The seed for the random number generator.\n        image_size (tuple): The size of the image to generate.\n        range_low (int): The lower bound of the random values.\n        range_high (int): The upper bound of the random values.\n\n    Returns:\n        ax (matplotlib.axes.Axes): Axes object of the plot.\n        image (numpy.ndarray): The numpy array of the generated image.\n\n    Raises:\n        ValueError: If range_low is not less than range_high.\n    \"\"\"\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n\n    random.seed(seed)\n    image = np.random.randint(range_low, range_high, size=image_size, dtype=np.uint8)\n    ax = plt.imshow(image)\n    plt.show()\n    return ax, image", "problem": "Generate a random RGB image and view it.\nThe function should raise the exception for: ValueError: If range_low is not less than range_high.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object of the plot.\n    image (numpy.ndarray): The numpy array of the generated image.\nYou should write self-contained code starting with:\n```\nimport random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n```", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high.\")\n\n    random.seed(seed)\n    np.random.seed(seed)\n    image = np.zeros(image_size, dtype=np.uint8)\n\n    for i in range(image_size[0]):\n        for j in range(image_size[1]):\n            for k in range(image_size[2]):\n                image[i, j, k] = random.randint(range_low, range_high)\n\n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.set_title('Random RGB Image')\n    return ax, image", "pass": false}
{"task_id": "215", "program": "import requests\nimport json\nimport pandas as pd\nimport seaborn as sns\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n\n    pass\nimport requests\nimport json\nimport pandas as pd\nimport seaborn as sns\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n    \"\"\"\n    Retrieve data from a specific API endpoint with the provided parameters, convert the data into a pandas dataframe, and draw a heatmap to show the correlation between numerical characteristics. The heatmap is displayed and also returned for further use or testing.\n    The function should raise the exception for:\n        - Thif function will raise a general Expection if the url is invalid, empty data, invalid data, and url cannot be accessed.\n    The function should output with:\n        - tuple: A tuple containing:\n            - DataFrame: The pandas DataFrame containing the data.\n            - Axes: The matplotlib Axes object of the heatmap.\n    \"\"\"\n    # Check if the url is valid\n    if not url.startswith(\"http\"):\n        raise Exception(\"Invalid URL\")\n\n    # Send a GET request to the API endpoint\n    response = requests.get(url, headers=HEADERS, params=parameters)\n\n    # Check if the response is valid\n    if response.status_code != 200:\n        raise Exception(\"Invalid response\")\n\n    # Convert the response data into a pandas dataframe\n    data = pd.DataFrame(response.json())\n\n    # Check if the data is valid\n    if data.empty:\n        raise Exception(\"Empty data\")\n\n    # Draw a heatmap to show the correlation between numerical characteristics\n    fig, ax = plt.subplots()\n    sns.heatmap(data.corr(), annot=True, ax=ax)\n\n    # Return the dataframe and the heatmap\n    return data, ax\nurl = \"https://api.example.com/data\"\nparameters = {\"param1\": \"value1\", \"param2\": \"value2\"}", "problem": "Retrieve data from a specific API endpoint with the provided parameters, convert the data into a pandas dataframe, and draw a heatmap to show the correlation between numerical characteristics. The heatmap is displayed and also returned for further use or testing.\nThe function should raise the exception for: Thif function will raise a general Expection if the url is invalid, empty data, invalid data, and url cannot be accessed.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The pandas DataFrame containing the data.\n    Axes: The matplotlib Axes object of the heatmap.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nimport pandas as pd\nimport seaborn as sns\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n```", "solution": "import requests\nimport json\nimport pandas as pd\nimport seaborn as sns\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n    try:\n        response = requests.get(url, params=parameters, headers=HEADERS)\n        data = json.loads(response.text)\n\n        df = pd.DataFrame(data)\n        corr = df.corr()\n\n        ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n        return df, ax\n    except Exception as e:\n        raise(e)", "pass": false}
{"task_id": "216", "program": "import pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n\n    pass\nimport pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n    \"\"\"\n    Analyze text content in JSON files from a given directory and find the most common words.\n    This function reads all the JSON files in the specified directory, extracts the text content from each file, and determines the most frequent words.\n    It then returns a list of the specified number of the most common words and their respective counts.\n\n    Args:\n        json_dir_path (str): The path to the directory containing the JSON files.\n        word_count (int): The number of most common words to return.\n\n    Returns:\n        list: A list of tuples with the most common words and their counts.\n    \"\"\"\n    # Initialize an empty list to store the text content from all JSON files\n    text_list = []\n\n    # Loop through all JSON files in the directory\n    for filename in os.listdir(json_dir_path):\n        # Check if the file is a JSON file\n        if filename.endswith(\".json\"):\n            # Open the JSON file and read the text content\n            with open(os.path.join(json_dir_path, filename), \"r\") as f:\n                text = json.load(f)[\"text\"]\n            # Add the text content to the list\n            text_list.append(text)\n\n    # Combine all text content into a single string\n    text = \" \".join(text_list)\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(text.split())\n\n    # Return the most common words and their counts\n    return word_counts.most_common(word_count)", "problem": "Analyze text content in JSON files from a given directory and find the most common words. This function reads all the JSON files in the specified directory, extracts the text content from each file, and determines the most frequent words. It then returns a list of the specified number of the most common words and their respective counts.\nThe function should output with:\n    list: A list of tuples with the most common words and their counts.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n```", "solution": "import pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n    word_counter = Counter()\n    \n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(json_dir_path, filename), 'r') as f:\n                data = json.load(f)\n                text = data.get('text', '')\n                words = pd.Series(text.split())\n                word_counter += Counter(words)\n                \n    return word_counter.most_common(word_count)", "pass": true}
{"task_id": "217", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n    \"\"\"\n    Generate a sample from a normal distribution with a given mean and a standard deviation and plot the histogram together with the probability density function.\n    Returns the Axes object representing the plot and the empirical mean and standard deviation of the sample.\n    \"\"\"\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    ax = plt.hist(sample, bins=50, density=True, alpha=0.5, label='Histogram')\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n    plt.plot(x, y, label='Normal PDF')\n    plt.xlabel('Value')\n    plt.ylabel('Probability')\n    plt.title(f'Normal Distribution with $\\mu = {mu:0.2f}, \\sigma = {sigma:0.2f}$')\n    plt.legend()\n    plt.show()\n    return ax, sample.mean(), sample.std()\nmu = 10\nsigma = 2\nsample_size = 1000", "problem": "Generate a sample from a normal distribution with a given mean and a standard deviation and plot the histogram together with the probability density function. Returns the Axes object representing the plot and the empirical mean and standard deviation of the sample.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the plotted histogram and normal PDF, with the title format of 'Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$'.\n    float: The empirical mean of the sample.\n    float: The empirical standard deviation of the sample.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    \n    fig, ax = plt.subplots()\n    ax.hist(sample, bins=30, density=True, alpha=0.5, label='Sample Histogram')\n    \n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2, label='Normal PDF')\n    \n    ax.set_title(\"Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$\" % (mu, sigma))\n    ax.legend()    \n    return ax, np.mean(sample), np.std(sample)", "pass": false}
{"task_id": "218", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n    \"\"\"\n    Pre-processes a DataFrame by replacing values according to a dictionary mapping, standardizing specified features, and optionally drawing a histogram of the target variable.\n\n    Args:\n        df (DataFrame): The input DataFrame.\n        dict_mapping (dict): The dictionary mapping to replace values in the DataFrame.\n        plot_histogram (bool): Whether to draw a histogram of the target variable.\n\n    Returns:\n        DataFrame: The preprocessed DataFrame with standardized features and values replaced as per dict_mapping.\n        Axes: The histogram of the target variable if plot_histogram is True, otherwise None.\n\n    Raises:\n        ValueError: If the FEATURES and TARGET columns not in the input DataFrame.\n        ValueError: If the input df is not a DataFrame.\n    \"\"\"\n    # Check if the input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n\n    # Check if the FEATURES and TARGET columns are in the DataFrame\n    if not set(FEATURES).issubset(df.columns) or TARGET not in df.columns:\n        raise ValueError(\"FEATURES and TARGET columns not in the input DataFrame\")\n\n    # Replace values according to the dictionary mapping\n    df = df.replace(dict_mapping)\n\n    # Standardize the features\n    scaler = StandardScaler()\n    df[FEATURES] = scaler.fit_transform(df[FEATURES])\n\n    # Draw a histogram of the target variable if requested\n    if plot_histogram:\n        import matplotlib.pyplot as plt\n        plt.hist(df[TARGET], bins=50)\n        plt.xlabel(\"Target variable\")\n        plt.ylabel(\"Frequency\")\n        plt.title(\"Histogram of the target variable\")\n        plt.show()\n\n    return df", "problem": "Pre-processes a DataFrame by replacing values according to a dictionary mapping, standardizing specified features, and optionally drawing a histogram of the target variable.\nThe function should raise the exception for: The function will raise ValueError if the FEATURES and TARGET columns not in the input DataFrame. The function will raise ValueError if the input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The preprocessed DataFrame with standardized features and values replaced as per dict_mapping.\n    Axes: The histogram of the target variable if plot_histogram is True, otherwise None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    # Check if all required columns are present in the DataFrame\n    required_columns = FEATURES + [TARGET]\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        raise ValueError(f\"Missing columns in DataFrame: {missing_columns}\")\n\n    # Replace values using dictionary mapping\n    df = df.replace(dict_mapping)\n    \n    # Standardize the features\n    scaler = StandardScaler()\n    df[FEATURES] = scaler.fit_transform(df[FEATURES])\n    \n    # Plot histogram of the target variable if requested\n    if plot_histogram:\n        ax = df[TARGET].plot.hist(bins=50)\n        return df, ax\n    else:\n        return df, None", "pass": false}
{"task_id": "219", "program": "import math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n\n    pass\nimport math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n    # Sort the input list in ascending order based on the degree value of its elements\n    sorted_list = sorted(input_list, key=lambda x: x[1])\n\n    # Calculate the mean, median, and mode of the sorted list\n    mean = statistics.mean(sorted_list)\n    median = statistics.median(sorted_list)\n    mode = statistics.mode(sorted_list)\n\n    # Calculate the magnitude of the fast fourier transform of the degree values\n    fft = np.fft.fft(sorted_list)\n    fft_magnitude = np.abs(fft)\n\n    # Round the mean, median, and mode of the sorted list and the magnitude of the fast fourier transform to the nearest integer\n    rounded_mean = round(mean)\n    rounded_median = round(median)\n    rounded_mode = round(mode)\n    rounded_fft_magnitude = round(fft_magnitude)\n\n    # Return a tuple containing the rounded mean, median, mode, and magnitude of the fast fourier transform\n    return (rounded_mean, rounded_median, rounded_mode, rounded_fft_magnitude)\ninput_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]", "problem": "Sorts the input list in ascending order based on the degree value of its elements, and then calculates the mean, median, and mode of both the sorted list and the same for the magnitude of the fast fourier transform of the degree values upto the nearest integer.\nThe function should output with:\n    tuple: A tuple containing the rounded mean, median and mode of the sorted list along with those\n    for the magnitude of the fast fourier transform of the degree values.\nYou should write self-contained code starting with:\n```\nimport math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n```", "solution": "import math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n    fft = np.abs(np.fft.fft([math.degrees(x) for x in input_list]))\n    sorted_list = sorted(input_list, key=lambda x: (math.degrees(x), x))\n    mean = statistics.mean(sorted_list)\n    median = statistics.median(sorted_list)\n    mode = statistics.mode(sorted_list)\n    mean_fft = round(statistics.mean(fft))\n    median_fft = round(statistics.median(fft))\n    mode_fft = round(statistics.mode(fft))\n    return (mean, median, mode, mean_fft, median_fft, mode_fft)", "pass": false}
{"task_id": "220", "program": "from random import choice\nimport turtle\nimport time\ndef task_func(colors):\n\n    pass\nfrom random import choice\nimport turtle\nimport time\ndef task_func(colors):\n    # Set up the Turtle Graphics window\n    window = turtle.Screen()\n    window.title(\"Random Squares\")\n    window.bgcolor(\"lightgreen\")\n    window.setup(width=600, height=600)\n    window.tracer(0)\n\n    # Create a Turtle object\n    t = turtle.Turtle()\n    t.shape(\"turtle\")\n    t.speed(0)\n\n    # Draw the squares\n    for i in range(5):\n        # Choose a random color from the list\n        color = choice(colors)\n\n        # Draw the square\n        t.color(color)\n        t.begin_fill()\n        for _ in range(4):\n            t.forward(100)\n            t.left(90)\n        t.end_fill()\n\n        # Pause for 1 second\n        time.sleep(1)\n\n    # Keep the window open\n    window.mainloop()\ncolors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\"]", "problem": "Draws five squares of random colors using Turtle Graphics. Each square is drawn sequentially with a 1-second pause between squares. The function requires a list of colors as input and sets up a Turtle Graphics window, creates a Turtle object, and uses it to draw the squares with colors from the provided list. The window remains open after drawing.\nThe function should output with:\n    None.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport turtle\nimport time\ndef task_func(colors):\n```", "solution": "from random import choice\nimport turtle\nimport time\ndef task_func(colors):\n    window = turtle.Screen()\n    window.bgcolor('white')\n\n    t = turtle.Turtle()\n    t.speed(1)\n\n    for _ in range(5):\n        t.color(choice(colors))\n        for _ in range(4):\n            t.forward(100)\n            t.right(90)\n        time.sleep(1)\n\n    window.mainloop()", "pass": false}
{"task_id": "221", "program": "import numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n    # Check if the input is valid\n    if 'feature1' not in df.columns:\n        return \"Invalid input\"\n\n    # Replace certain values in the DataFrame based on the provided dictionary\n    for col in df.columns:\n        if col in dct:\n            df[col] = df[col].replace(dct[col])\n\n    # Calculate the statistics for each feature\n    stats = {}\n    for feature in FEATURES:\n        if feature in df.columns:\n            stats[feature] = {}\n            stats[feature]['mean'] = df[feature].mean()\n            stats[feature]['median'] = df[feature].median()\n            stats[feature]['mode'] = df[feature].mode()[0]\n            stats[feature]['variance'] = df[feature].var()\n        else:\n            stats[feature] = \"Invalid input\"\n\n    return stats\ndf = pd.DataFrame({'feature1': [1, 2, 3, 4, 5], 'feature2': [1, 2, 3, 4, 5], 'feature3': [1, 2, 3, 4, 5]})\ndct = {'feature1': {1: 0, 2: 0}, 'feature2': {1: 0, 2: 0}, 'feature3': {1: 0, 2: 0}}", "problem": "This function calculates and returns the mean, median, mode, and variance for specified features in a DataFrame. It replaces certain values in the DataFrame based on a provided dictionary mapping before performing the calculations.\nNote that: The function would return \"Invalid input\" string if the input is invalid (e.g., does not contain the required 'feature1' key) or if there is an error in the calculation.\nThe function should output with:\n    dict: A dictionary containing statistics (mean, median, mode, variance) for each feature defined in the 'FEATURES' constant.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n```", "solution": "import numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n\n    # Replace values using dictionary mapping\n    df = df.replace(dct)\n    \n    statistics = {}\n    try:\n        for feature in FEATURES:\n            # Calculate statistics\n            mean = np.mean(df[feature])\n            median = np.median(df[feature])\n            mode = stats.mode(df[feature])[0][0]\n            variance = np.var(df[feature])\n            \n            # Store statistics in dictionary\n            statistics[feature] = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance}\n    except Exception as e:\n        return \"Invalid input\"        \n    return statistics", "pass": false}
{"task_id": "222", "program": "import math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n\n    pass\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n    # Sort the list based on the degree value of its elements\n    sorted_list = sorted(list_input, key=lambda x: x[1])\n\n    # Calculate the cumulative sum of the sorted list\n    cumulative_sum = np.cumsum(sorted_list)\n\n    # Draw a line chart of the cumulative sum\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_sum)\n    ax.set_xlabel('Degree')\n    ax.set_ylabel('Cumulative Sum')\n    ax.set_title('Cumulative Sum of Sorted List')\n\n    return cumulative_sum, ax\nlist_input = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]", "problem": "Sort the given list in ascending order based on the degree value of its elements, calculate the cumulative sum of the sorted list, and draw a line chart of the cumulative sum.\nThe function should output with:\n    tuple: A tuple containing:\n    numpy array: The cumulative sum of the sorted list.\n    matplotlib.axes._axes.Axes: The Axes object of the plotted line chart.\nYou should write self-contained code starting with:\n```\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n```", "solution": "import math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n    sorted_list = sorted(list_input, key=lambda x: (math.degrees(x), x))\n    cumsum = np.cumsum(sorted_list)\n    \n    # Plotting the line chart\n    ax = plt.plot(cumsum)[0].axes\n    ax.set_title(\"Cumulative Sum Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    \n    return cumsum, ax", "pass": false}
{"task_id": "223", "program": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n    \"\"\"\n    This function preprocesses a pandas DataFrame by replacing specified values, encoding categorical attributes, and standardizing numerical attributes.\n    It's designed to be flexible for data preprocessing in machine learning tasks.\n    :param df: The pandas DataFrame to preprocess.\n    :param dct: A dictionary of values to replace.\n    :param columns: A list of column names to preprocess. If None, all columns are preprocessed.\n    :return: The preprocessed DataFrame with encoded categorical attributes and standardized numerical attributes.\n    \"\"\"\n    # Check if df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n\n    # Check if dct is a dictionary\n    if not isinstance(dct, dict):\n        raise ValueError(\"dct must be a dictionary\")\n\n    # Check if columns is a list\n    if columns is not None and not isinstance(columns, list):\n        raise ValueError(\"columns must be a list\")\n\n    # Replace specified values\n    for col, val in dct.items():\n        df[col] = df[col].replace(val)\n\n    # Encode categorical attributes\n    categorical_cols = df.select_dtypes(include=[\"object\"]).columns\n    for col in categorical_cols:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n\n    # Standardize numerical attributes\n    numerical_cols = df.select_dtypes(include=[\"number\"]).columns\n    for col in numerical_cols:\n        df[col] = (df[col] - df[col].mean()) / df[col].std()\n\n    return df\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\ndct = {\"A\": 0}", "problem": "This function preprocesses a pandas DataFrame by replacing specified values, encoding categorical attributes, and standardizing numerical attributes. It's designed to be flexible for data preprocessing in machine learning tasks.\nNote that: The function assumes that the DataFrame and the dictionary are well-formed and relevant to each other. The encoding of categorical columns is done using LabelEncoder, which encodes labels with value between 0 and n_classes-1. Numerical standardization is performed by subtracting the mean and dividing by the standard deviation of each column.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The preprocessed DataFrame with encoded categorical attributes and standardized numerical attributes.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n\n    # Replace values using the provided dictionary\n    df = df.replace(dct)\n    \n    # Determine columns to encode\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns.tolist()\n\n    # Encode categorical features\n    for column in columns:\n        if df[column].dtype == 'object':\n            le = LabelEncoder()\n            df[column] = le.fit_transform(df[column])\n            \n    # Standardize numerical features\n    df = (df - df.mean()) / df.std()\n    \n    return df", "pass": false}
{"task_id": "224", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n    x = np.arange(range_start, range_end, step)\n    sin_x = np.sin(x)\n    cos_x = np.cos(x)\n    abs_diff = np.abs(sin_x - cos_x)\n    fft_abs_diff = np.abs(fft(abs_diff))\n    mean_fft_abs_diff = np.mean(fft_abs_diff)\n    median_fft_abs_diff = np.median(fft_abs_diff)\n    ax = plt.plot(x, sin_x, label='sin(x)')\n    plt.plot(x, cos_x, label='cos(x)')\n    plt.plot(x, abs_diff, label='abs(sin(x) - cos(x))')\n    plt.legend()\n    plt.show()\n    return (x, sin_x, cos_x, abs_diff), ax, mean_fft_abs_diff, median_fft_abs_diff", "problem": "Create a generator object that generates a sequence of tuples. Each tuple contains x, sin(x), and cos(x) values. The function then plots the sine and cosine functions using these values along with the absolute difference between the two functions and returns the plot. Finally, it returns the magnitude of the mean and median of the 1D fft of the absolute difference between the two functions.\nThe function should output with:\n    tuple: A tuple containing two items:\n    generator: A generator object producing tuples in the format (x, sin(x), cos(x), abs(sin(x) - cos(x)).\n    ax: An Axes object representing the plot.\n    float: The abs of the mean of the 1D fft of the absolute difference between sin(x) and cos(x).\n    float: The abs of the median of the 1D fft of the absolute difference between sin(x) and cos(x).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n    if range_start>range_end:\n        raise ValueError(\"range_start cannot be smaller than range_end.\")\n\n    x_values = np.arange(range_start, range_end, step)\n    data = ((x, np.sin(x), np.cos(x), abs(np.sin(x) - np.cos(x))) for x in x_values)\n    fft_values = fft([abs(np.sin(x) - np.cos(x)) for x in x_values])\n    _, ax = plt.subplots()\n    for x, sin_x, cos_x, abs_x in data:\n        ax.scatter(x, sin_x, color='b')\n        ax.scatter(x, cos_x, color='r')\n        ax.scatter(x, abs_x, color='g')\n    \n    # We recreate the generator since it was exhausted in the for loop above\n    data = ((x, np.sin(x), np.cos(x), abs(np.sin(x) - np.cos(x))) for x in x_values)\n    return data, ax, abs(np.mean(fft_values)), abs(np.median(fft_values))", "pass": false}
{"task_id": "225", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n    \"\"\"\n    Replace values in a DataFrame with a dictionary mapping and optionally record histograms for specified columns.\n\n    Args:\n        df (DataFrame): The DataFrame to be modified.\n        dct (dict): The dictionary mapping to use for replacement.\n        columns (list, optional): The columns to record histograms for. Defaults to None.\n        plot_histograms (bool, optional): Whether to plot histograms for the specified columns. Defaults to False.\n\n    Returns:\n        DataFrame: The DataFrame with replaced values. The columns are in the format of 'col1', 'col2', etc.\n\n    Raises:\n        ValueError: If input df is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n\n    # Replace values in the DataFrame\n    df = df.replace(dct)\n\n    # Record histograms for specified columns\n    if columns is not None and plot_histograms:\n        for col in columns:\n            plt.hist(df[col], bins=50)\n            plt.title(f\"Histogram of {col}\")\n            plt.show()\n\n    return df\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [6, 7, 8, 9, 10]})\ndct = {1: \"one\", 2: \"two\", 3: \"three\"}\ncolumns = [\"A\", \"B\"]", "problem": "Replace values in a DataFrame with a dictionary mapping and optionally record histograms for specified columns.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The DataFrame with replaced values. The columns are in the format of 'col1', 'col2', etc.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n    \n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    # Replace values using dictionary mapping\n    df_replaced = df.replace(dct)\n    \n    # Plot a histogram for each specified column\n    if plot_histograms and columns:\n        for column in columns:\n            if column in df_replaced:\n                df_replaced[column].plot.hist(bins=50)\n                plt.title(column)\n\n    return df_replaced", "pass": false}
{"task_id": "226", "program": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n\n    pass\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples. Each tuple contains x and e^x values. Plot the exponential function using these values.\n    The function should output with:\n        tuple:\n        A generator object that yields tuples of (x, e^x).\n        The plotted Axes object of the exponential function.\n    \"\"\"\n    x_values = np.arange(range_start, range_end, step)\n    y_values = np.exp(x_values)\n    data = zip(x_values, y_values)\n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values)\n    ax.set_xlabel('x')\n    ax.set_ylabel('e^x')\n    ax.set_title('Exponential Function')\n    return data, ax", "problem": "Create a generator object that generates a sequence of tuples. Each tuple contains x and e^x values. Plot the exponential function using these values.\nThe function should output with:\n    tuple:\n    A generator object that yields tuples of (x, e^x).\n    The plotted Axes object of the exponential function.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n```", "solution": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n    x_values = np.arange(range_start, range_end, step)\n    data = ((x, math.exp(x)) for x in x_values)\n    _, ax = plt.subplots()\n    for x, exp_x in data:\n        ax.scatter(x, exp_x, color='b')\n    ax.set_title(\"Exponential Function Plot\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"e^x\")\n    data = ((x, math.exp(x)) for x in x_values)\n    return data, ax", "pass": false}
{"task_id": "227", "program": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n\n    pass\nimport numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates an MxN matrix from a list L, normalizes it based on the sound pressure level (SPL) of a specified audio file, and generates a spectrogram from the matrix. SPL = 20 * log10(sqrt(mean(data^2))) where 'data' is the audio data read from the file. The spectrogram is displayed with a logarithmic scale for frequency and a linear scale for time, with the SPL used to adjust the amplitude displayed in the spectrogram.\n\n    Parameters\n    ----------\n    L : list\n        A list of integers.\n    M : int\n        The number of rows in the matrix.\n    N : int\n        The number of columns in the matrix.\n    audio_file : str\n        The path to the audio file.\n\n    Returns\n    -------\n    numpy.ndarray\n        The normalized MxN matrix.\n    matplotlib.figure.Figure\n        The figure object for the generated spectrogram.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified audio file does not exist.\n    \"\"\"\n    # Check if the audio file exists\n    if not os.path.isfile(audio_file):\n        raise FileNotFoundError(f\"The audio file '{audio_file}' does not exist.\")\n\n    # Read the audio data from the file\n    data, sr = sf.read(audio_file)\n\n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(data**2)))\n\n    # Create the MxN matrix from the list L\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize the matrix based on the SPL\n    normalized_matrix = matrix / spl\n\n    # Generate the spectrogram\n    fig, ax = plt.subplots()\n    librosa.display.specshow(normalized_matrix, sr=sr, x_axis='time', y_axis='log')\n    ax.set_title('Spectrogram')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Frequency')\n\n    return normalized_matrix, fig", "problem": "Creates an MxN matrix from a list L, normalizes it based on the sound pressure level (SPL) of a specified audio file, and generates a spectrogram from the matrix. SPL = 20 * log10(sqrt(mean(data^2))) where 'data' is the audio data read from the file. The spectrogram is displayed with a logarithmic scale for frequency and a linear scale for time, with the SPL used to adjust the amplitude displayed in the spectrogram.\nNote that: Notes: The spectrogram is generated based on the amplitude of the normalized matrix, with the sound pressure level (SPL) calculated from the audio file. The SPL is calculated using the formula:\nThe function should raise the exception for: FileNotFoundError: If the specified audio file does not exist.\nThe function should output with:\n    numpy.ndarray: The normalized MxN matrix.\n    matplotlib.figure.Figure: The figure object for the generated spectrogram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n```", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    # Ensure the audio file exists\n    if not os.path.isfile(audio_file):\n        raise FileNotFoundError(f\"{audio_file} does not exist.\")\n\n    # Read the audio file\n    data, samplerate = sf.read(audio_file)\n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(data ** 2)))\n\n    # Generate the matrix\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize the matrix to match the SPL\n    matrix = matrix / np.max(matrix) * spl\n\n    # Generate the spectrogram\n    D = librosa.amplitude_to_db(np.abs(librosa.stft(matrix)), ref=np.max)\n    fig = librosa.display.specshow(D, sr=samplerate, x_axis='time', y_axis='log')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('Spectrogram')\n\n    return matrix, plt.gcf()  # Return both the matrix and the figure object for the plot", "pass": false}
{"task_id": "228", "program": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n\n    pass\nimport pandas as pd\nimport numpy as np\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n    \"\"\"\n    Replace certain values in a DataFrame with a dictionary mapping and calculate the Pearson correlation coefficient between each pair of columns.\n    Note that: This function operates on DataFrames containing numeric or categorical data that can be replaced with numeric values, as correlation calculations require numeric data. This function using pearson method to calculate the correlation matrix.\n    The function should raise the exception for: This function will raise a ValueError is input df is not a DataFrame.\n    The function should output with:\n        DataFrame: A DataFrame with the correlation coefficients between each pair of columns. The format of the DataFrame is a square matrix with column and index labels matching the columns of the input DataFrame.\n    \"\"\"\n    # Check if input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n\n    # Replace values in DataFrame with dictionary mapping\n    df = df.replace(dct)\n\n    # Calculate Pearson correlation coefficient between each pair of columns\n    corr_matrix = df.corr(method=\"pearson\")\n\n    # Return correlation matrix\n    return corr_matrix\ndf = pd.DataFrame(np.random.randint(0, 100, size=(10, 5)), columns=COLUMNS)\ndct = {\"column1\": 100, \"column2\": 200, \"column3\": 300}", "problem": "Replace certain values in a DataFrame with a dictionary mapping and calculate the Pearson correlation coefficient between each pair of columns.\nNote that: This function operates on DataFrames containing numeric or categorical data that can be replaced with numeric values, as correlation calculations require numeric data. This function using pearson method to calculate the correlation matrix.\nThe function should raise the exception for: This function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: A DataFrame with the correlation coefficients between each pair of columns. The format of the DataFrame is a square matrix with column and index labels matching the columns of the input DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n```", "solution": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    # Replace values using dictionary mapping\n    df = df.replace(dct)\n    \n    # Calculate the correlation matrix\n    correlation_matrix = np.corrcoef(df.values, rowvar=False)\n    \n    return pd.DataFrame(correlation_matrix, columns=df.columns, index=df.columns)", "pass": true}
{"task_id": "229", "program": "import json\nimport random\nfrom datetime import datetime, timedelta\n# Constants\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\ndef task_func(file_path, num_entries, seed=None):\n\n    pass\nimport json\nimport random\nfrom datetime import datetime, timedelta\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\ndef task_func(file_path, num_entries, seed=None):\n    \"\"\"\n    Create a JSON file on a specific file path with random user activity data.\n    The number of entries in the JSON file is determined by num_entries.\n    The written JSON file contains a list of dictionaries, with each dictionary\n    representing a log entry with the following keys: 'user', 'action', and\n    'timestamp'.\n\n    Args:\n        file_path (str): The file path to write the JSON file to.\n        num_entries (int): The number of log entries to generate.\n        seed (int, optional): A random seed to use for generating the data.\n\n    Returns:\n        str: The file path of the generated JSON file.\n    \"\"\"\n    # Set the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate the log entries\n    log_entries = []\n    for i in range(num_entries):\n        user = random.choice(USERS)\n        action = random.choice(['login', 'logout', 'edit', 'delete'])\n        timestamp = datetime.now() + timedelta(seconds=i)\n        log_entries.append({'user': user, 'action': action, 'timestamp': timestamp})\n\n    # Write the log entries to a JSON file\n    with open(file_path, 'w') as f:\n        json.dump(log_entries, f)\n\n    return file_path\nfile_path = 'log.json'\nnum_entries = 10\nseed = 42", "problem": "Create a JSON file on a specific file path with random user activity data. The number of entries in the JSON file is determined by num_entries. The written JSON file contains a list of dictionaries, with each dictionary representing a log entry with the following keys: 'user', 'action', and 'timestamp'.\nThe function should output with:\n    str: The file path of the generated JSON file.\nYou should write self-contained code starting with:\n```\nimport json\nimport random\nfrom datetime import datetime, timedelta\n# Constants\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\ndef task_func(file_path, num_entries, seed=None):\n```", "solution": "import json\nimport random\nfrom datetime import datetime, timedelta\n# Constants\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\ndef task_func(file_path, num_entries, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    log_entries = []\n    current_time = datetime.now()\n    for _ in range(num_entries):\n        user = random.choice(USERS)\n        action = random.choice(['login', 'logout', 'view_page', 'edit_profile', 'post_message'])\n        timestamp = current_time.strftime('%Y-%m-%dT%H:%M:%S')\n        log_entries.append({'user': user, 'action': action, 'timestamp': timestamp})\n        current_time -= timedelta(minutes=random.randint(1, 60))\n\n    with open(file_path, 'w') as json_file:\n        json.dump(log_entries, json_file, indent=4)\n\n    return file_path", "pass": false}
{"task_id": "230", "program": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n\n    pass\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n    \"\"\"\n    Generates a histogram of scores and a boxplot of scores by country from a pandas DataFrame.\n    It considers only unique names for both plots.\n    >>> print(task_func(\"not a dataframe\"))\n    Invalid input\n    \"\"\"\n    # Check if input is a pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        return \"Invalid input\"\n\n    # Check if required columns are present in the DataFrame\n    if not set(COLUMNS).issubset(df.columns):\n        return \"Invalid input\"\n\n    # Create a copy of the DataFrame to avoid modifying the original\n    df = df.copy()\n\n    # Drop duplicate rows\n    df.drop_duplicates(inplace=True)\n\n    # Create a histogram of scores\n    fig, ax = plt.subplots()\n    sns.histplot(data=df, x=\"Score\", hue=\"Country\", ax=ax)\n    ax.set_title(\"Histogram of Scores\")\n\n    # Create a boxplot of scores by country\n    fig, ax = plt.subplots()\n    sns.boxplot(data=df, x=\"Country\", y=\"Score\", ax=ax)\n    ax.set_title(\"Boxplot of Scores by Country\")\n\n    return fig", "problem": "Generates a histogram of scores and a boxplot of scores by country from a pandas DataFrame. It considers only unique names for both plots. >>> print(task_func(\"not a dataframe\")) Invalid input\nNote that: The function would return \"Invalid input\" string if the input is invalid (e.g., does not contain the required 'Name' key). The histogram of scores has a title \"Histogram of Scores\". The boxplot of scores has a title \"Boxplot of Scores by Country\".\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and boxplot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n```", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n    \n    if not isinstance(df, pd.DataFrame):\n        return \"Invalid input\"\n    \n    try:\n        df = df.drop_duplicates(subset='Name')\n\n        fig = plt.figure(figsize=(10, 5))\n\n        plt.subplot(1, 2, 1)\n        sns.histplot(df['Score'], bins=10)\n        plt.title('Histogram of Scores')\n\n        plt.subplot(1, 2, 2)\n        sns.boxplot(x='Country', y='Score', data=df)\n        plt.title('Boxplot of Scores by Country')\n\n        plt.tight_layout()\n\n        return fig\n    except Exception as e:\n        return \"Invalid input\"", "pass": false}
{"task_id": "231", "program": "import numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n\n    pass\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n    if not obj_list:\n        mean = 0\n        std = 0\n    else:\n        values = [obj.value for obj in obj_list]\n        mean = np.mean(values)\n        std = np.std(values)\n\n    x = np.linspace(mean - 3 * std, mean + 3 * std, 100)\n    y = stats.norm.pdf(x, mean, std)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    ax.set_title('Custom Normal Distribution')\n\n    return ax\nobj_list = [ValueObject(1, 2, 1), ValueObject(2, 3, 2), ValueObject(3, 4, 3)]", "problem": "Draw the histogram and the custom normal distribution curve from the mean and standard deviation derived from the values of a list of ValueObjects and return the plotted Axes. For an empty list, the mean and the standard deviation is 0.\nThe function should output with:\n    Axes: The plotted Axes.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n```", "solution": "import numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n    if len(obj_list) == 0:\n        values = [0]\n    else:\n        values = [obj.value for obj in obj_list]\n\n    # Create a new figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot histogram\n    ax.hist(values, bins=30, density=True, alpha=0.6, color='g')\n    mean = np.mean(values)\n    std = np.std(values)\n\n    # Plot the PDF.\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std)\n    ax.plot(x, p, 'k', linewidth=2)\n\n    title = \"Fit results: mu = %.2f,  std = %.2f\" % (mean, std)\n    ax.set_title(title)\n\n    plt.close(fig)  # Close the figure to avoid display during function execution\n    return ax", "pass": false}
{"task_id": "232", "program": "import pandas as pd\nimport collections\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport collections\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    # Get the total sales\n    total_sales = df[\"Sales\"].sum()\n\n    # Get the most popular category\n    category_counts = df[\"Category\"].value_counts()\n    most_popular_category = category_counts.index[0]\n\n    # Create a dictionary with the results\n    results = {\"Total Sales\": total_sales, \"Most Popular Category\": most_popular_category}\n\n    return results\ndf = pd.DataFrame({\"Customer\": [\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\"],\n                   \"Sales\": [100, 200, 300, 400, 500],\n                   \"Category\": [\"Books\", \"Electronics\", \"Food\", \"Books\", \"Electronics\"]})", "problem": "Generate a sales report from a DataFrame, excluding duplicate customer names. The report includes total sales and the most popular sales category.\nNote that: The function would return the first category in alphabetical order for \"Most Popular Category' in the case of tie\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    dict: A dictionary with keys 'Total Sales' (sum of sales) and 'Most Popular Category' (most frequent category).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport collections\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport collections\ndef task_func(df):\n    \n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Customer')\n    total_sales = df['Sales'].sum()\n    popular_category = collections.Counter(df['Category']).most_common(1)[0][0]\n    return {'Total Sales': total_sales, 'Most Popular Category': popular_category}", "pass": false}
{"task_id": "233", "program": "import random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n\n    pass\nimport random\nimport matplotlib.pyplot as plt\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n    random.seed(seed)\n    values = [getattr(obj, attr) for obj in obj_list]\n    counts, bins = np.histogram(values, bins=num_bins)\n    plt.hist(values, bins=bins, label='Histogram of attribute values')\n    plt.xlabel('Attribute Value')\n    plt.ylabel('Count')\n    plt.title('Histogram of attribute values')\n    return plt.gca()\nobj_list = [Object(random.gauss(0, 1)) for _ in range(100)]", "problem": "Create a histogram of the specified attribute from a list of objects and return the histogram plot. Constants: - NUM_BINS (int): Number of bins to use in the histogram, set to 30 by default.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The histogram plot of the attribute values, with the title 'Histogram of attribute values', x-axis labeled 'Attribute Value', and y-axis labeled 'Count'.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n```", "solution": "import random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n    # Set random seed\n    random.seed(seed)\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n\n    # Generate histogram\n    fig, ax = plt.subplots()\n    ax.hist(attr_values, bins=num_bins, alpha=0.5)\n    ax.set_title('Histogram of attribute values')\n    ax.set_xlabel('Attribute Value')\n    ax.set_ylabel('Count')\n\n    return ax", "pass": false}
{"task_id": "234", "program": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names. Plot the regression line and the scatter plot of the data.\n    Note that: The function use \"Linear Regression\" for the plot title. The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n    The function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\n    The function should output with:\n        tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    # Drop duplicate names\n    df = df.drop_duplicates(subset=[\"name\"])\n\n    # Perform linear regression\n    x = df[\"age\"]\n    y = df[\"score\"]\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)\n\n    # Plot the regression line and the scatter plot of the data\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.plot(x, slope * x + intercept, color=\"red\")\n    ax.set_xlabel(\"Age\")\n    ax.set_ylabel(\"Score\")\n    ax.set_title(\"Linear Regression\")\n\n    return fig, ax", "problem": "Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names. Plot the regression line and the scatter plot of the data.\nNote that: The function use \"Linear Regression\" for the plot title. The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Name')\n\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "pass": false}
{"task_id": "235", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    # Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate normal distribution data\n    data = np.random.normal(mu, sigma, num_samples)\n\n    # Create histogram of data\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=num_bins, density=True, alpha=0.5)\n\n    # Overlay PDF of normal distribution on histogram\n    x = np.linspace(data.min(), data.max(), 1000)\n    y = np.exp(-(x - mu)**2 / (2 * sigma**2)) / (sigma * np.sqrt(2 * np.pi))\n    ax.plot(x, y, color='red', label='PDF')\n\n    # Fit second order polynomial to histogram bins using OLS regression\n    x_bins = np.linspace(data.min(), data.max(), num_bins + 1)\n    y_bins = np.histogram(data, bins=x_bins)[0]\n    x_fit = np.linspace(data.min(), data.max(), 1000)\n    y_fit = np.polyfit(x_bins, y_bins, 2)\n    ax.plot(x_fit, y_fit, color='green', label='OLS')\n\n    # Add labels and legend\n    ax.set_xlabel('Data')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n\n    return ax\nmu = 0\nsigma = 1\nseed = 0\nnum_samples = 1000\nnum_bins = 30", "problem": "Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    \n    return ax", "pass": false}
{"task_id": "236", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n    \"\"\"\n    Predicts categories based on 'Age' and 'Score' in a given DataFrame using a Random Forest Classifier.\n    Rows with duplicate 'Name' entries are dropped before the prediction.\n    The function uses a Random Forest Classifier from sklearn to make predictions and evaluates the model using accuracy.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n        test_size (float, optional): The proportion of the dataset to include in the test split. Defaults to 0.2.\n        random_state (int, optional): The random state for the train-test split. Defaults to 42.\n\n    Returns:\n        float: The accuracy of the prediction as a float value.\n\n    Raises:\n        ValueError: If input df is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    # Drop duplicate rows\n    df.drop_duplicates(subset=[\"Name\"], inplace=True)\n\n    # Split the data into training and test sets\n    X = df[[\"Age\", \"Score\"]]\n    y = df[\"Category\"]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    # Train a Random Forest Classifier\n    clf = RandomForestClassifier(random_state=random_state)\n    clf.fit(X_train, y_train)\n\n    # Make predictions on the test set\n    y_pred = clf.predict(X_test)\n\n    # Evaluate the model using accuracy\n    accuracy = accuracy_score(y_test, y_pred)\n\n    return accuracy\ndf = pd.DataFrame({\"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Alice\"], \"Age\": [25, 30, 35, 40, 25], \"Score\": [90, 80, 70, 60, 90], \"Category\": [\"A\", \"B\", \"C\", \"D\", \"A\"]})", "problem": "Predicts categories based on 'Age' and 'Score' in a given DataFrame using a Random Forest Classifier. Rows with duplicate 'Name' entries are dropped before the prediction. The function uses a Random Forest Classifier from sklearn to make predictions and evaluates the model using accuracy.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    float: The accuracy of the prediction as a float value.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Name')\n\n    X = df[['Age', 'Score']]\n    y = df['Category']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = RandomForestClassifier(random_state=random_state)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n\n    accuracy = accuracy_score(y_test, predictions)\n\n    return accuracy", "pass": true}
{"task_id": "237", "program": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n\n    pass\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n    \"\"\"\n    Unzip a list of objects and their 3D coordinates, run PCA to reduce the dimensionality to 2D, and depending on the value of save_plot parameter, either save the plot to the provided path and return the 2D coordinates or return the 2D coordinates and the plot's Axes.\n\n    Args:\n        data (list): A list of objects and their 3D coordinates.\n        save_plot (bool, optional): Whether to save the plot to the provided path. Defaults to False.\n        plot_path (str, optional): The path to save the plot to. Defaults to None.\n\n    Raises:\n        ValueError: If save_plot is True but plot_path is not provided.\n\n    Returns:\n        coordinates_2d (numpy.ndarray): The 2D coordinates after applying PCA.\n        ax (matplotlib.axes._axes.Axes, optional): The plot's Axes if save_plot is True.\n    \"\"\"\n    # Unzip the data\n    objects, coordinates = zip(*data)\n\n    # Convert the coordinates to a numpy array\n    coordinates = np.array(coordinates)\n\n    # Run PCA to reduce the dimensionality to 2D\n    pca = PCA(n_components=2)\n    coordinates_2d = pca.fit_transform(coordinates)\n\n    # If save_plot is True, save the plot to the provided path\n    if save_plot and plot_path is not None:\n        plt.scatter(coordinates_2d[:, 0], coordinates_2d[:, 1])\n        plt.xlabel(\"Principal Component 1\")\n        plt.ylabel(\"Principal Component 2\")\n        plt.title(\"PCA Plot\")\n        plt.savefig(plot_path)\n\n    # Return the 2D coordinates and the plot's Axes\n    return coordinates_2d, plt.gca() if save_plot else None\ndata = [(\"Object 1\", [1, 2, 3]), (\"Object 2\", [4, 5, 6]), (\"Object 3\", [7, 8, 9])]", "problem": "Unzip a list of objects and their 3D coordinates, run PCA to reduce the dimensionality to 2D, and depending on the value of save_plot parameter, either save the plot to the provided path and return the 2D coordinates or return the 2D coordinates and the plot's Axes.\nThe function should raise the exception for: ValueError: If save_plot is True but plot_path is not provided.\nThe function should output with:\n    coordinates_2d (numpy.ndarray): The 2D coordinates after applying PCA.\n    ax (matplotlib.axes._axes.Axes, optional): The plot's Axes if save_plot is True.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n```", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n    items, x_values, y_values, z_values = zip(*data)\n    coordinates = np.array(list(zip(x_values, y_values, z_values)))\n\n    pca = PCA(n_components=2)\n    coordinates_2d = pca.fit_transform(coordinates)\n\n    # Initialize a fresh plot\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*coordinates_2d))\n\n    if save_plot:\n        if plot_path:\n            plt.savefig(plot_path)\n            plt.close(fig)\n            return coordinates_2d, ax\n        else:\n            raise ValueError(\"plot_path is required if save_plot is True\")\n    else:\n        return coordinates_2d", "pass": false}
{"task_id": "238", "program": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Standardize 'Age' and 'Score' columns\n    scaler = StandardScaler()\n    df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])\n\n    # Remove duplicate entries based on 'Name'\n    df.drop_duplicates(subset='Name', inplace=True)\n\n    # Plot a scatter plot of standardized values\n    fig, ax = plt.subplots()\n    ax.scatter(df['Age'], df['Score'])\n    ax.set_xlabel('Age (standardized)')\n    ax.set_ylabel('Score (standardized)')\n    ax.set_title('Scatter Plot of Standardized Age and Score')\n\n    return df, ax\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Alice'],\n                   'Age': [25, 30, 35, 40, 25],\n                   'Score': [90, 80, 70, 60, 90]})", "problem": "Standardize 'Age' and 'Score' columns in a pandas DataFrame, remove duplicate entries based on 'Name', and plot a scatter plot of these standardized values.\nNote that: The function use \"Scatter Plot of Standardized Age and Score\" for the plot title. The function use \"Age (standardized)\" and \"Score (standardized)\" as the xlabel and ylabel respectively.\nThe function should output with:\n    pandas.DataFrame: DataFrame with standardized 'Age' and 'Score', duplicates removed.\n    matplotlib.axes.Axes: Axes object of the scatter plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```", "solution": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    df = df.drop_duplicates(subset='Name')\n\n    scaler = StandardScaler()\n\n    df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])\n\n    plt.figure(figsize=(8, 6))\n    plt.scatter(df['Age'], df['Score'])\n    plt.xlabel('Age (standardized)')\n    plt.ylabel('Score (standardized)')\n    plt.title('Scatter Plot of Standardized Age and Score')\n    ax = plt.gca()  # Get current axes\n    \n    return df, ax", "pass": true}
{"task_id": "239", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    # Extract numeric values from the list of tuples\n    numeric_values = [value for value in original if isinstance(value, (int, float))]\n\n    # Compute basic statistics for the array\n    mean = np.mean(numeric_values)\n    std = np.std(numeric_values)\n    min_value = np.min(numeric_values)\n    max_value = np.max(numeric_values)\n\n    # Generate a histogram with an overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(numeric_values, density=True, alpha=0.6, bins='auto')\n    ax.plot(numeric_values, stats.norm.pdf(numeric_values, mean, std), 'r--')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    ax.set_title('Histogram with Overlaid PDF')\n\n    return np.array(numeric_values), {'mean': mean, 'std': std, 'min': min_value, 'max': max_value}, ax\noriginal = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]", "problem": "Given a list of tuples, extract numeric values, compute basic statistics, and generate a histogram with an overlaid probability density function (PDF).\nThe function should output with:\n    np.array: A numpy array of the extracted numeric values.\n    dict: Basic statistics for the array including mean, standard deviation, minimum, and maximum.\n    Axes: A matplotlib Axes object showing the histogram with overlaid PDF. The histogram\n    is plotted with density set to True, alpha as 0.6, and bins set to 'auto' for automatic bin selection.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    arr = np.array([b for (a, b) in original])\n\n    computed_stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    \n    # Plotting histogram and PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, density=True, alpha=0.6, bins='auto', label='Histogram')\n    \n    # Adding PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, computed_stats['mean'], computed_stats['std'])\n    ax.plot(x, p, 'k', linewidth=2, label='PDF')\n    ax.set_title('Histogram with PDF')\n    ax.legend()\n    plt.close(fig)  # Close the plot to prevent display here\n    \n    return arr, computed_stats, ax", "pass": false}
{"task_id": "240", "program": "import pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n\n    pass\nimport pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n    data = [uniform(min_value, max_value) for _ in range(n_data_points)]\n    data = [round(x, 3) for x in data]\n    df = pd.DataFrame(data, columns=[column_name])\n    return df", "problem": "Generate a random dataset of floating-point numbers, truncate each value to 3 decimal places, then return the generated DataFrame with the specified column name.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n```", "solution": "import pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n\n    data = [round(uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=[column_name])\n\n    return data_df", "pass": true}
{"task_id": "241", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    # Create a numpy array from the original list\n    arr = np.array(original)\n\n    # Normalize the array\n    normalized_arr = preprocessing.normalize(arr)\n\n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(normalized_arr, label='Normalized')\n    ax.legend()\n\n    return arr, normalized_arr, ax\noriginal = [1, 2, 3, 4, 5]", "problem": "Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays. The function will plot the original and normalized arrays using matplotlib.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    arr = np.array([b for (a, b) in original])\n    \n    # Check if the array is empty to avoid normalization error\n    if arr.size == 0:\n        norm_arr = arr\n    else:\n        norm_arr = preprocessing.normalize([arr])[0]\n    \n    # Plotting the data\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n    ax.set_title(\"Original vs. Normalized Data\")\n    \n    return arr, norm_arr, ax", "pass": false}
{"task_id": "242", "program": "import cv2\nimport matplotlib.pyplot as plt\ndef task_func(image_path, kernel_size):\n\n    pass\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(image_path, kernel_size):\n    \"\"\"\n    Applies a blur effect to an image using a specified kernel size, then visualizes both the original and blurred images side by side.\n\n    Args:\n        image_path (str): The path to the image file.\n        kernel_size (int): The size of the kernel used for blurring.\n\n    Returns:\n        tuple: A tuple containing a numpy.ndarray of the blurred image, and two matplotlib.axes.Axes objects for the plots of the original and blurred images.\n\n    Raises:\n        FileNotFoundError: If the specified image file does not exist.\n        ValueError: If kernel_size is not a positive integer.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file '{image_path}' does not exist.\")\n\n    # Check if kernel_size is a positive integer\n    if not isinstance(kernel_size, int) or kernel_size <= 0:\n        raise ValueError(\"kernel_size must be a positive integer.\")\n\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Apply the blur effect\n    blurred_image = cv2.blur(image, (kernel_size, kernel_size))\n\n    # Create the plots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n    ax1.imshow(image)\n    ax1.set_title(\"Original Image\")\n    ax2.imshow(blurred_image)\n    ax2.set_title(\"Blurred Image\")\n\n    return blurred_image, ax1, ax2", "problem": "Applies a blur effect to an image using a specified kernel size, then visualizes both the original and blurred images side by side.\nThe function should raise the exception for: FileNotFoundError: If the specified image file does not exist. ValueError: If kernel_size is not a positive integer.\nThe function should output with:\n    tuple: A tuple containing a numpy.ndarray of the blurred image, and two matplotlib.axes.Axes objects for the plots of the original and blurred images.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(image_path, kernel_size):\n```", "solution": "import cv2\nimport matplotlib.pyplot as plt\ndef task_func(image_path, kernel_size):\n    if kernel_size <= 0 or not isinstance(kernel_size, int):\n        raise ValueError(\"kernel_size must be a positive integer\")\n    \n    try:\n        image = cv2.imread(image_path)\n        if image is None:\n            raise FileNotFoundError(f\"No image found at {image_path}\")\n    except FileNotFoundError as e:\n        raise e\n\n    blurred_image = cv2.blur(image, (kernel_size, kernel_size))\n\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    ax1.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)), ax1.set_title('Original')\n    ax1.set_xticks([]), ax1.set_yticks([])\n    ax2.imshow(cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB)), ax2.set_title('Blurred')\n    ax2.set_xticks([]), ax2.set_yticks([])\n    # plt.show()\n\n    return blurred_image, ax1, ax2", "pass": false}
{"task_id": "243", "program": "import pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n\n    pass\nimport pandas as pd\nimport random\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n    \"\"\"\n    Generate a random set of floating-point numbers, truncate each value to 3 decimal places, and return them in a DataFrame.\n    The number of data points to generate can be specified. If zero, returns an empty DataFrame.\n    Note that: This function use 'Value' for the column name in returned DataFrame\n    The function should output with:\n        DataFrame: A pandas DataFrame containing one column 'Value' with the generated data. Empty if n_data_points is 0.\n    \"\"\"\n    if n_data_points == 0:\n        return pd.DataFrame()\n\n    data = [round(random.uniform(MIN_VALUE, MAX_VALUE), 3) for _ in range(n_data_points)]\n    return pd.DataFrame({'Value': data})", "problem": "Generate a random set of floating-point numbers, truncate each value to 3 decimal places, and return them in a DataFrame. The number of data points to generate can be specified. If zero, returns an empty DataFrame.\nNote that: This function use 'Value' for the column name in returned DataFrame\nThe function should output with:\n    DataFrame: A pandas DataFrame containing one column 'Value' with the generated data. Empty if n_data_points is 0.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n```", "solution": "import pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n    if n_data_points == 0:\n        return pd.DataFrame(columns=['Value'])\n    \n    data = [round(random.uniform(MIN_VALUE, MAX_VALUE), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    return data_df", "pass": true}
{"task_id": "244", "program": "import numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n\n    pass\nimport numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n    if not original:\n        return np.array([]), np.array([]), None\n    else:\n        original_array = np.array(original)\n        fft_data = fft(original_array)\n        fft_magnitude = np.abs(fft_data)\n        fig, ax = plt.subplots()\n        ax.hist(fft_magnitude, bins=50)\n        return original_array, fft_data, ax", "problem": "Create a numeric array from the \"original\" list, calculate Fast Fourier Transform (FFT) and record the original and FFT data. Additionally, plot the histogram of the magnitude of the FFT data and return the axes object of the plot. For an empty list, return an empty array for the FFT data and None for the axes object.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: FFT data.\n    plt.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n```", "solution": "import numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n    arr = np.array([b for (_, b) in original])\n\n    if arr.size == 0:\n        fft_data = np.array([])\n        return arr, fft_data, None\n\n    fft_data = fft(arr)\n    _, ax = plt.subplots()\n    ax.hist(np.abs(fft_data))\n\n    return arr, fft_data, ax", "pass": false}
{"task_id": "245", "program": "import pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n\n    pass\nimport pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    # Generate random data\n    data = [random.uniform(min_value, max_value) for _ in range(n_data_points)]\n\n    # Truncate each value to 3 decimal places\n    data = [round(x, 3) for x in data]\n\n    # Calculate statistical measures\n    mean = stats.mean(data)\n    median = stats.median(data)\n    mode = stats.mode(data)\n\n    # Return a dictionary with the results\n    return {'mean': mean, 'median': median, 'mode': mode}", "problem": "Generate a random dataset of floating-point numbers within a specified range, truncate each value to 3 decimal places, and calculate statistical measures (mean, median, mode) of the data.\nThe function should output with:\n    dict: A dictionary with keys 'mean', 'median', 'mode' and their corresponding calculated values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n```", "solution": "import pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    mean = data_df['Value'].mean()\n    median = data_df['Value'].median()\n    mode = stats.mode(data_df['Value'].values)[0][0]\n\n    return {'mean': mean, 'median': median, 'mode': mode}", "pass": false}
{"task_id": "246", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n    \"\"\"\n    Generate a series of n sine waves with increasing frequency with a fidelity of 0.01 radians as provided by the ANGLES array. The amplitude of each wave is 1. The function returns a list of numpy arrays with the y values of the sine waves. Additionally, calculate the Fast Fourier Transform (FFT) of the mixed signal and plot the histogram of the magnitude of the FFT data. If n_waves is less than 1, return an empty list for the sine waves, an empty array for the FFT data, and None for the axes object.\n\n    Args:\n        n_waves (int): The number of sine waves to generate.\n        seed (int, optional): The random seed to use for generating the sine waves. Defaults to 0.\n\n    Returns:\n        list: A list of numpy arrays with the y values of the sine waves.\n        np.array: FFT data.\n        plt.Axes: The axes object of the plot.\n    \"\"\"\n    if n_waves < 1:\n        return [], np.array([]), None\n\n    np.random.seed(seed)\n    sine_waves = [np.sin(ANGLES + np.random.rand() * 0.01) for _ in range(n_waves)]\n    mixed_signal = np.sum(sine_waves, axis=0)\n    fft_data = fft(mixed_signal)\n    fft_data = np.abs(fft_data)\n\n    fig, ax = plt.subplots()\n    ax.hist(fft_data, bins=100)\n    ax.set_xlabel(\"Magnitude\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of FFT Data\")\n\n    return sine_waves, fft_data, ax", "problem": "Generate a series of n sine waves with increasing frequency with a fidelity of 0.01 radians as provided by the ANGLES array. The amplitude of each wave is 1. The function returns a list of numpy arrays with the y values of the sine waves. Additionally, calculate the Fast Fourier Transform (FFT) of the mixed signal and plot the histogram of the magnitude of the FFT data. If n_waves is less than 1, return an empty list for the sine waves, an empty array for the FFT data, and None for the axes object.\nThe function should output with:\n    list: A list of numpy arrays with the y values of the sine waves.\n    np.array: FFT data.\n    plt.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n    np.random.seed(seed)\n    sine_wave_series = []\n\n    if n_waves < 1:\n        return sine_wave_series, np.array([]), None\n\n    for frequency in range(1, n_waves+1):\n        wave = np.sin(frequency * ANGLES)\n        sine_wave_series.append(wave)\n\n    fft_data = fft(np.sum(sine_wave_series, axis=0))\n    _, ax = plt.subplots()\n    ax.hist(np.abs(fft_data))\n\n    return sine_wave_series, fft_data, ax", "pass": false}
{"task_id": "247", "program": "import pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n\n    pass\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    \"\"\"\n    Generate a random dataset of floating point numbers, truncate each value to 3 decimal places and normalize the data using standard scaling (mean = 0, std = 1).\n    Note that: The function use \"Normalized Value\" for the column name in the DataFrame that being returned.\n    The function should raise the exception for: If max_value is less than min_value, a ValueError is raised.\n    The function should output with:\n        DataFrame: A pandas DataFrame with the normalized data.\n    \"\"\"\n    if max_value < min_value:\n        raise ValueError(\"max_value must be greater than or equal to min_value\")\n\n    # Generate random data\n    data = pd.DataFrame({\"Value\": [random.uniform(min_value, max_value) for _ in range(n_data_points)]})\n\n    # Truncate values to 3 decimal places\n    data[\"Value\"] = data[\"Value\"].round(3)\n\n    # Normalize data\n    scaler = StandardScaler()\n    data[\"Normalized Value\"] = scaler.fit_transform(data[\"Value\"].values.reshape(-1, 1))\n\n    return data", "problem": "Generate a random dataset of floating point numbers, truncate each value to 3 decimal places and normalize the data using standard scaling (mean = 0, std = 1).\nNote that: The function use \"Normalized Value\" for the column name in the DataFrame that being returned.\nThe function should raise the exception for: If max_value is less than min_value, a ValueError is raised.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n```", "solution": "import pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    if max_value < min_value:\n        raise ValueError()\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    scaler = StandardScaler()\n    normalized_data = scaler.fit_transform(data_df[['Value']])\n\n    return pd.DataFrame(normalized_data, columns=['Normalized Value'])", "pass": true}
{"task_id": "248", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n    if not data_list:\n        raise ValueError(\"data_list is empty\")\n    x, y = zip(*data_list)\n    plt.plot(x, y)\n    plt.show()\n    return plt.gca()\ndata_list = [(1, 2), (3, 4), (5, 6)]", "problem": "Unzips the provided list of tuples and plots the numerical values for each position.\nThe function should raise the exception for: ValueError: If the data_list is empty.\nThe function should output with:\n    Axes: The plot with the unzipped numerical values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    if len(unzipped_data) == 0:\n        raise ValueError('Empty data_list')\n    \n    fig, ax = plt.subplots()\n    for i, column in enumerate(unzipped_data[1:], start=1):\n        ax.plot(column, label='Position {}'.format(i))\n    ax.legend()\n    return ax", "pass": false}
{"task_id": "249", "program": "import pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n\n    pass\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n    # Generate random floating-point numbers within the specified range\n    data = pd.DataFrame({'Value': [random.uniform(min_value, max_value) for _ in range(n_data_points)]})\n\n    # Truncate each value to 3 decimal places\n    data['Value'] = data['Value'].round(3)\n\n    # Split the data into train and test sets based on the given test size\n    train_set, test_set = train_test_split(data, test_size=test_size)\n\n    return train_set, test_set", "problem": "Generate a random set of floating-point numbers within a specified range, truncate each value to 3 decimal places, and divide the data into train and test sets based on a given test size.\nNote that: The function use \"Value\" for the column name in the DataFrames (train set, test set) that being returned.\nThe function should output with:\n    tuple: A tuple with two pandas DataFrames (train set, test set).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n```", "solution": "import pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    train_data, test_data = train_test_split(data_df, test_size=test_size)\n\n    return train_data, test_data", "pass": true}
{"task_id": "250", "program": "import numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n\n    pass\nimport numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n    # Calculate the mean of the numeric values for each position in the provided data list\n    means = {f\"Position {i}\": np.mean(list(map(float, v))) for i, v in enumerate(zip(*data_list))}\n\n    # Optionally, export the results to a specified JSON file\n    if json_file_name:\n        with open(json_file_name, \"w\") as f:\n            json.dump(means, f)\n\n    return means\ndata_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the mean of the numeric values for each position in the provided data list and return the results. Optionally, the results can be exported to a specified JSON file.\nThe function should output with:\n    dict: A dictionary with keys in the format 'Position {i}' and values being the mean of the numeric values\n    at position i in the provided data list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n```", "solution": "import numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    mean_values = [np.nanmean(column) for column in unzipped_data[1:]]\n\n    results = {'Position {}'.format(i+1): mean_value for i, mean_value in enumerate(mean_values)}\n    \n    with open(json_file_name, 'w') as f:\n        json.dump(results, f)\n\n    return results", "pass": false}
{"task_id": "251", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame\")\n\n    # Create a pie chart\n    labels = data[\"Job\"].value_counts().index\n    sizes = data[\"Job\"].value_counts().values\n    explode = [0] * len(labels)\n\n    fig1, ax1 = plt.subplots()\n    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    return fig1", "problem": "Draw a pie chart that shows the job distribution in the given data and return the plot object.\nThe function should raise the exception for: The function will raise ValueError if the input data is not a DataFrame.\nThe function should output with:\n    matplotlib.figure.Figure: The Figure object containing the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    \n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    job_count = data['Job'].value_counts()\n    \n    labels = job_count.index.tolist()\n    sizes = job_count.values.tolist()\n    colors = [plt.cm.Spectral(i/float(len(labels))) for i in range(len(labels))]\n        \n    fig, ax = plt.subplots()\n    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n    ax.axis('equal')\n\n    return fig", "pass": false}
{"task_id": "252", "program": "import matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom itertools import zip_longest\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n    \"\"\"\n    Plot a list of data with different colors. If there are more data series than the predefined colors, the function cycles through the colors. In case of even more series than colors + labels, 'black' is used.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the plot.\n    \"\"\"\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Iterate over the data and labels\n    for data_series, label in zip_longest(data, labels, fillvalue=''):\n        # Plot the data series with the corresponding color\n        ax.plot(data_series, label=label, color=next(COLORS))\n\n    # Add a legend to the plot\n    ax.legend()\n\n    # Return the Axes object\n    return ax\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nlabels = ['Series 1', 'Series 2', 'Series 3', 'Series 4', 'Series 5']", "problem": "Plot a list of data with different colors. If there are more data series than the predefined colors, the function cycles through the colors. In case of even more series than colors + labels, 'black' is used.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n```", "solution": "import matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n    fig, ax = plt.subplots()\n    for series, label, color in zip_longest(data, labels, COLORS, fillvalue='black'):\n        ax.plot(series, label=label, color=color)\n        \n    ax.legend()\n    return ax", "pass": false}
{"task_id": "253", "program": "import numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n\n    pass\nimport numpy as np\nimport random\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n    # Generate a random sine wave function\n    t = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(t)\n\n    # Randomly select a color from the predefined list\n    color = random.choice(COLORS)\n\n    # Set a random position for radial labels\n    label_pos = random.randint(0, 100)\n\n    # Plot the sine wave function on the provided matplotlib polar subplot 'ax'\n    ax.plot(t, y, color=color, label=f'Sine wave ({label_pos})')\n\n    # Return the color code (as a string) of the plotted function\n    return color", "problem": "Generate a random sine wave function and draw it on a provided matplotlib polar subplot 'ax'. The function randomly selects a color from a predefined list and sets a random position for radial labels.\nThe function should output with:\n    str: The color code (as a string) of the plotted function.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n```", "solution": "import numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = np.sin(random.randint(1, 10)*x)\n\n    color = random.choice(COLORS)\n    ax.plot(x, y, color=color)\n    ax.set_rlabel_position(random.randint(0, 180))\n\n    return color", "pass": true}
{"task_id": "254", "program": "import json\nimport math\ndef task_func(decimal_value, precision=2):\n\n    pass\nimport json\nimport math\ndef task_func(decimal_value, precision=2):\n    \"\"\"\n    Calculate the square root of the given decimal value to a certain precision and then encode the result as a JSON string.\n\n    Args:\n        decimal_value (float): The decimal value to calculate the square root of.\n        precision (int, optional): The precision to round the result to. Defaults to 2.\n\n    Returns:\n        str: The square root of the decimal value encoded as a JSON string.\n    \"\"\"\n    result = math.sqrt(decimal_value)\n    result = round(result, precision)\n    return json.dumps(result)", "problem": "Calculate the square root of the given decimal value to a certain precision and then encode the result as a JSON string.\nThe function should output with:\n    str: The square root of the decimal value encoded as a JSON string.\nYou should write self-contained code starting with:\n```\nimport json\nimport math\ndef task_func(decimal_value, precision=2):\n```", "solution": "import json\nimport math\ndef task_func(decimal_value, precision=2):\n    # Calculate the square root of the decimal value\n    square_root = round(math.sqrt(decimal_value), 2)\n    \n    # Encode the result as a JSON string\n    json_str = json.dumps(str(square_root))\n    \n    return json_str", "pass": false}
{"task_id": "255", "program": "import matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n\n    pass\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n    \"\"\"\n    Draw a mathematical function (sine, cosine, or tangent) on a polar diagram 'ax'.\n    The radial ticks are placed at a position corresponding to the index of the function multiplied by 45 degrees.\n    The function should raise the exception for:\n        - This function will raise a ValueError if the input ax is not and Axes.\n    The function should output with:\n        - matplotlib.axes._axes.Axes: The modified ax with the plotted function.\n    \"\"\"\n    if not isinstance(ax, matplotlib.axes._axes.Axes):\n        raise ValueError(\"Input ax must be an Axes object.\")\n\n    # Get the function to plot\n    func = FUNCTIONS[func_index]\n\n    # Set the radial ticks\n    ax.set_rgrids(np.arange(0, 1.1, 0.1) * 45)\n\n    # Plot the function\n    ax.plot(np.linspace(0, 2 * np.pi, 100), func(np.linspace(0, 2 * np.pi, 100)), label=f\"{func.__name__}\")\n\n    # Add a legend\n    ax.legend()\n\n    return ax", "problem": "Draw a mathematical function (sine, cosine, or tangent) on a polar diagram 'ax'. The radial ticks are placed at a position corresponding to the index of the function multiplied by 45 degrees.\nThe function should raise the exception for: This function will raise a ValueError if the input ax is not and Axes.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified ax with the plotted function.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n```", "solution": "import matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n    print(type(ax))\n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"The input is not an axes\")\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = FUNCTIONS[func_index](x)\n\n    ax.plot(x, y)\n    ax.set_rlabel_position(func_index * 45)\n    return ax", "pass": false}
{"task_id": "256", "program": "import json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n\n    pass\nimport json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n    \"\"\"\n    Generate a random lowercase alphanumeric password of length password_length and then encrypt it as a JSON string.\n    The password is hashed using SHA-256. The hashing uses the combination of the user provided salt and the complete conventional string representation of the user provided UTC datetime.\n    The function should raise the exception for: ValueError: If the utc_datetime is not a datetime object or the salt is not a string.\n    The function should output with:\n        str: The hashed password encoded as a JSON string.\n    \"\"\"\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(salt, str):\n        raise ValueError(\"salt must be a string\")\n\n    random.seed(seed)\n    password = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for _ in range(password_length))\n    hashed_password = hashlib.sha256((salt + str(utc_datetime)).encode()).hexdigest()\n    return json.dumps({\"password\": password, \"hashed_password\": hashed_password})\nutc_datetime = datetime.utcnow()\nsalt = \"my_salt\"\npassword_length = 10\nseed = 0", "problem": "Generate a random lowercase alphanumeric password of length password_length and then encrypt it as a JSON string. The password is hashed using SHA-256. The hashing uses the combination of the user provided salt and the complete conventional string representation of the user provided UTC datetime.\nThe function should raise the exception for: ValueError: If the utc_datetime is not a datetime object or the salt is not a string.\nThe function should output with:\n    str: The hashed password encoded as a JSON string.\nYou should write self-contained code starting with:\n```\nimport json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n```", "solution": "import json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n    random.seed(seed)\n    # Test if the utc_datetime is a datetime object and the salt is a string\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"Input should be a datetime object\")\n    if not isinstance(salt, str):\n        raise ValueError(\"Salt should be a string\")\n\n    # Convert the datetime to a string\n    utc_time_str = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    # Create the salted string\n    salted_string = utc_time_str + salt\n\n    # Generate a random password\n    password = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for _ in range(password_length))\n    \n    # Hash the password\n    hashed_password = hashlib.sha256((password + salted_string).encode('utf-8')).hexdigest()\n    \n    # Encode the hashed password as a JSON string\n    password_json_str = json.dumps(hashed_password)\n    \n    return password_json_str", "pass": false}
{"task_id": "257", "program": "import numpy as np\nimport math\ndef task_func(ax, num_turns):\n\n    pass\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(ax, num_turns):\n    # Define the number of points to use in the spiral\n    num_points = 1000\n\n    # Define the starting point of the spiral\n    theta = 0\n    r = 0\n\n    # Define the increment in theta and r for each point\n    dtheta = 2 * math.pi / num_points\n    dr = 1 / num_points\n\n    # Generate the points for the spiral\n    theta_values = np.arange(0, 2 * math.pi * num_turns, dtheta)\n    r_values = np.arange(0, 1 * num_turns, dr)\n    x_values = r_values * np.cos(theta_values)\n    y_values = r_values * np.sin(theta_values)\n\n    # Plot the spiral\n    ax.plot(x_values, y_values)\n\n    # Set the radial ticks\n    ax.set_rgrids(np.arange(0, 1 * num_turns, 45))\n\n    return ax", "problem": "Draws a spiral on the polar diagram 'ax' with the specified number of turns 'num_turns'. The spiral starts at the center and expands outward with each turn. The radial ticks on the plot are positioned at intervals corresponding to the number of turns multiplied by 45 degrees.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with the spiral plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(ax, num_turns):\n```", "solution": "import numpy as np\nimport math\ndef task_func(ax, num_turns):\n\n    r = np.linspace(0, num_turns * 2 * math.pi, 1000)\n    theta = r\n\n    ax.plot(theta, r)\n    ax.set_rlabel_position(num_turns * 45)\n\n    return ax", "pass": false}
{"task_id": "258", "program": "import json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n\n    pass\nimport json\nimport random\nimport datetime\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n    \"\"\"\n    Select a random person from a dataset of people and their attributes (name, age, city) provided as a global variable DATA.\n    Add a UTC timestamp to the person's data which is passed as an argument utc_datetime 'timestamp'.\n    Finally, encode that person's data as a JSON string.\n\n    The function should output with:\n        str: The person's data encoded as a JSON string.\n    \"\"\"\n    random.seed(seed)\n    person = random.choice(DATA)\n    person['timestamp'] = utc_datetime\n    return json.dumps(person)\nutc_datetime = datetime.datetime.utcnow()", "problem": "Select a random person from a dataset of people and their attributes (name, age, city) provided as a global variable DATA. Add a UTC timestamp to the person's data which is passed as an argument utc_datetime 'timestamp'. Finally, encode that person's data as a JSON string.\nThe function should output with:\n    str: The person's data encoded as a JSON string.\nYou should write self-contained code starting with:\n```\nimport json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n```", "solution": "import json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n    random.seed(seed)\n    # Choose a random person\n    person = random.choice(DATA)\n    person['timestamp'] = utc_datetime.isoformat()\n    \n    # Encode the person's data as a JSON string\n    person_json_str = json.dumps(person)\n    \n    return person_json_str", "pass": false}
{"task_id": "259", "program": "import matplotlib\nimport numpy as np\ndef task_func(ax, num_points):\n\n    pass\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(ax, num_points):\n    if not isinstance(ax, matplotlib.axes._axes.Axes):\n        raise ValueError(\"Input ax must be an Axes object.\")\n    if num_points < 0:\n        raise ValueError(\"Number of points must be a positive integer.\")\n\n    # Generate random points on the polar diagram\n    theta = np.random.uniform(0, 2 * np.pi, num_points)\n    r = np.random.uniform(0, 1, num_points)\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n\n    # Plot the points on the Axes object\n    ax.plot(x, y, \"o\")\n\n    # Set the radial ticks\n    ax.set_rgrids(np.arange(0, 1.1, 0.1))\n\n    return ax", "problem": "Plots \"num_points\" random points on the polar diagram represented by \"ax.\" The radial ticks on the plot are positioned based on the number of points divided by 10 degrees.\nThe function should raise the exception for: This function will raise a ValueError if the input ax is not and Axes. This function will raise a ValueError if it is use the negative number as num_points.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with plotted points.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\ndef task_func(ax, num_points):\n```", "solution": "import matplotlib\nimport numpy as np\ndef task_func(ax, num_points):\n    \n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"The input is not an axes\")\n\n    r = np.random.rand(num_points)\n    theta = 2 * np.pi * np.random.rand(num_points)\n\n    ax.scatter(theta, r)\n    ax.set_rlabel_position(num_points / 10)\n    return ax", "pass": false}
{"task_id": "260", "program": "import json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n\n    pass\nimport json\nimport os\nimport glob\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    Specifically, the function searches for all JSON files within the provided directory and updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key doesn't already exist. The function modifies the JSON files in place.\n    The function should output with:\n        int: The number of JSON files updated.\n    \"\"\"\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    # Iterate over each JSON file and update it\n    num_updated = 0\n    for json_file in json_files:\n        # Load the JSON file\n        with open(json_file, \"r\") as f:\n            data = json.load(f)\n\n        # Check if the key already exists\n        if KEY not in data:\n            # Add the new key-value pair\n            data[KEY] = VALUE\n\n            # Save the updated JSON file\n            with open(json_file, \"w\") as f:\n                json.dump(data, f, indent=4)\n\n            num_updated += 1\n\n    return num_updated", "problem": "Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files. Specifically, the function searches for all JSON files within the provided directory and updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key doesn't already exist. The function modifies the JSON files in place.\nThe function should output with:\n    int: The number of JSON files updated.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n```", "solution": "import json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n\n    return updated_files", "pass": true}
{"task_id": "261", "program": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n    if not isinstance(ax, plt.Axes):\n        raise TypeError(\"ax must be a matplotlib.axes._axes.Axes object\")\n    if radius < 0:\n        raise ValueError(\"radius must be non-negative\")\n\n    # Create a circle with the given radius\n    circle = plt.Circle((0, 0), radius, color=\"red\", fill=False)\n\n    # Add the circle to the plot\n    ax.add_patch(circle)\n\n    # Set radial ticks\n    ax.set_rgrids([0, 1, 2, 3, 4])\n\n    return ax", "problem": "Draw a circle with a given radius on the polar chart 'ax' and set radial ticks. This function manipulates plot data using matplotlib.\nNote that: If the radius is negative this function will raise ValueError. If 'ax' is not a polar plot this function will raise TypeError.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with the circle plotted.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n    if radius < 0:\n        raise ValueError('Radius must be non-negative')\n    if not isinstance(ax, plt.PolarAxes):\n        raise TypeError('ax must be a polar plot')\n\n    theta = np.linspace(0, 2 * np.pi, 1000)\n    ax.plot(theta, radius * np.ones_like(theta))\n    ax.set_rlabel_position(radius * 45)\n    return ax", "pass": false}
{"task_id": "262", "program": "import collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n\n    pass\nimport collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n    \"\"\"\n    Add a new key-value pair to the dictionary and plot the distribution of its values.\n    The function should output with:\n        dict: The updated dictionary.\n        matplotlib.axes.Axes: The axes object of the plotted bar graph.\n    \"\"\"\n    dictionary[new_key] = new_value\n    ax = sns.barplot(x=list(dictionary.keys()), y=list(dictionary.values()))\n    return dictionary, ax\nnew_key = 'd'\nnew_value = 4", "problem": "Add a new key-value pair to the dictionary and plot the distribution of its values.\nThe function should output with:\n    dict: The updated dictionary.\n    matplotlib.axes.Axes: The axes object of the plotted bar graph.\nYou should write self-contained code starting with:\n```\nimport collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n```", "solution": "import collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n    # Add new key-value pair to the dictionary\n    dictionary[new_key] = new_value\n    \n    # Plot the distribution of its values\n    values_counts = collections.Counter(dictionary.values())\n    ax = sns.barplot(y=list(values_counts.keys()), x=list(values_counts.values()))\n    plt.title(\"Distribution of Dictionary Values\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Counts\")\n    \n    return dictionary, ax", "pass": true}
{"task_id": "263", "program": "import os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n\n    pass\nimport os\nimport glob\nimport shutil\nimport time\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n    \"\"\"\n    Archive files that were changed older than a specified number of days in a given directory.\n    This function searches for files with specific extensions (.txt, .csv, .xlsx, .docx, .pdf) in the given directory.\n    Files older than 'days_old' are moved to an 'archive' subdirectory within the specified directory.\n\n    Args:\n        my_path (str): The path of the directory to search for files.\n        days_old (int): The number of days that a file must be older than to be moved to the archive.\n\n    Returns:\n        str: The path of the archive subdirectory where files are moved.\n    \"\"\"\n    # Create the archive subdirectory if it doesn't exist\n    archive_path = os.path.join(my_path, 'archive')\n    if not os.path.exists(archive_path):\n        os.mkdir(archive_path)\n\n    # Get the current time\n    now = time.time()\n\n    # Loop through all files in the directory\n    for file in glob.glob(os.path.join(my_path, '*')):\n        # Check if the file is a file and has a supported extension\n        if os.path.isfile(file) and os.path.splitext(file)[1].lower() in FILE_EXTENSIONS:\n            # Get the file's modification time\n            mod_time = os.path.getmtime(file)\n\n            # Check if the file is older than the specified number of days\n            if now - mod_time > days_old * 86400:\n                # Move the file to the archive subdirectory\n                shutil.move(file, archive_path)\n\n    return archive_path", "problem": "Archive files that were changed older than a specified number of days in a given directory. This function searches for files with specific extensions (.txt, .csv, .xlsx, .docx, .pdf) in the given directory. Files older than 'days_old' are moved to an 'archive' subdirectory within the specified directory.\nThe function should output with:\n    str: The path of the archive subdirectory where files are moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n```", "solution": "import os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n\n    archive_dir = os.path.join(my_path, 'archive')\n    os.makedirs(archive_dir, exist_ok=True)\n\n    for ext in FILE_EXTENSIONS:\n        files = glob.glob(os.path.join(my_path, '*' + ext))\n        for file in files:\n            if os.path.isfile(file) and os.path.getmtime(file) < time.time() - days_old * 86400:\n                shutil.move(file, archive_dir)\n\n    return archive_dir", "pass": true}
{"task_id": "264", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n    \"\"\"\n    Updates the provided dictionary with a specified key-value pair and generates a random dataset of size 'n' following a normal distribution. The mean and standard deviation of the distribution are set to the value associated with the given key. Additionally, it returns a histogram of the generated dataset.\n    The function should raise the exception for: ValueError: If the provided value is not a number.\n    The function should output with:\n        tuple: Updated dictionary and the generated dataset as a pandas Series along with the histogram plot.\n    \"\"\"\n    if not isinstance(value, (int, float)):\n        raise ValueError(\"Value must be a number\")\n\n    dictionary[key] = value\n    np.random.seed(seed)\n    data = np.random.normal(value, 1, size=n)\n    hist = pd.Series(data).hist(bins=bins)\n    plt.show()\n    return dictionary, data, hist\nkey = \"c\"\nvalue = 3\nn = 100\nbins = 30\nseed = 0", "problem": "Updates the provided dictionary with a specified key-value pair and generates a random dataset of size 'n' following a normal distribution. The mean and standard deviation of the distribution are set to the value associated with the given key. Additionally, it returns a histogram of the generated dataset.\nThe function should raise the exception for: ValueError: If the provided value is not a number.\nThe function should output with:\n    tuple: Updated dictionary and the generated dataset as a pandas Series along with the histogram plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n    np.random.seed(seed)\n    # Test that value is a number\n    try:\n        float(value)\n    except ValueError:\n        raise ValueError(\"Value must be a number.\")\n    # Update the dictionary\n    dictionary[key] = value\n    \n    # Generate the dataset\n    data = np.random.normal(loc=float(value), scale=float(value), size=n)\n    \n    # Plot the histogram of the generated data and get the axes object\n    _, ax = plt.subplots()\n    ax.hist(data, bins=bins, density=True)\n    data = pd.Series(data)\n    return dictionary, data, ax", "pass": false}
{"task_id": "265", "program": "import collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n\n    pass\nimport collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n    # Add a new key \"a\" with the value 1 to the input dictionary\n    data['a'] = 1\n\n    # Calculate the frequency of its values\n    freq = collections.Counter(data.values())\n\n    # Save the updated dictionary along with its frequency distribution to a JSON file\n    with open(json_file_name, 'w') as f:\n        json.dump({'data': data, 'freq': freq}, f)\n\n    return json_file_name\ndata = {'a': 1, 'b': 2, 'c': 3}\njson_file_name = 'data.json'", "problem": "Add a new key \"a\" with the value 1 to the input dictionary, calculate the frequency of its values, and save the updated dictionary along with its frequency distribution to a JSON file. The dictionary is saved under the key 'data' and the frequency distribution under the key 'freq'.\nThe function should output with:\n    str: The path of the JSON file.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n```", "solution": "import collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n    # Add new key 'a' with value 1\n    data['a'] = 1\n\n    # Calculate the frequency of values in `data`\n    freq = collections.Counter(data.values())\n\n    # Save the updated `data` and the `freq` into a JSON file\n    json_data = {'data': data, 'freq': dict(freq)}\n    json_file_path = os.path.join(os.getcwd(), json_file_name)\n    with open(json_file_path, 'w') as json_file:\n        json.dump(json_data, json_file)\n\n    return json_file_path", "pass": true}
{"task_id": "266", "program": "import os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n\n    pass\nimport os\nimport os.path\nimport csv\nimport collections\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n    \"\"\"\n    Create a report on the file size in a directory and write it to a CSV file.\n    The function should output with:\n        str: The path of the CSV file.\n    \"\"\"\n    # Get the file sizes in the directory\n    file_sizes = []\n    for root, dirs, files in os.walk(my_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_size = os.path.getsize(file_path)\n            file_sizes.append((file_path, file_size))\n\n    # Write the file sizes to a CSV file\n    with open(FILE_NAME, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['File Path', 'File Size'])\n        for file_path, file_size in file_sizes:\n            writer.writerow([file_path, file_size])\n\n    return FILE_NAME", "problem": "Create a report on the file size in a directory and write it to a CSV file.\nThe function should output with:\n    str: The path of the CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n```", "solution": "import os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n\n    file_sizes = collections.defaultdict(int)\n\n    for dirpath, dirnames, filenames in os.walk(my_path):\n        for f in filenames:\n            fp = os.path.join(dirpath, f)\n            file_sizes[f] += os.path.getsize(fp)\n\n    with open(os.path.join(my_path, FILE_NAME), 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['File Name', 'Size'])\n        for row in file_sizes.items():\n            writer.writerow(row)\n\n    return os.path.join(my_path, FILE_NAME)", "pass": true}
{"task_id": "267", "program": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n\n    pass\nimport numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data[\"a\"] = 1\n\n    # Generate a signal based on the values in \"data\"\n    signal = np.array([data[key] for key in data])\n\n    # Run a Fast Fourier Transform (FFT) on the signal\n    fft = fftpack.fft(signal)\n\n    # Plot and return the FFT of the signal\n    plt.plot(fft)\n    return fft, plt.gca()", "problem": "Given a dictionary \"data\", this function performs the following operations: 1. Adds a new key \"a\" with the value 1 to the dictionary. 2. Generates a signal based on the values in \"data\". 3. Runs a Fast Fourier Transform (FFT) on the signal. 4. Plots and returns the FFT of the signal.\nThe function should output with:\n    tuple: A tuple containing:\n    ndarray: The FFT of the signal.\n    Axes: The plot of the FFT.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n```", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # Add new key 'a' with value 1\n    data['a'] = 1\n\n    # Generate a signal based on the values in `data`\n    signal = np.array(list(data.values()))\n    time = np.linspace(0, 2, 2 * sample_rate, False)\n    signal = np.sin(np.outer(time, signal) * np.pi)\n\n    # Perform a Fast Fourier Transform (FFT) on the signal\n    fft = fftpack.fft(signal)\n\n    # Plot the FFT\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(np.abs(fft))\n    ax.set_title('FFT of the Signal')\n    ax.set_xlabel('Frequency [Hz]')\n    ax.set_ylabel('Frequency Spectrum Magnitude')\n    \n    return fft, ax", "pass": false}
{"task_id": "268", "program": "import collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n\n    pass\nimport collections\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n    \"\"\"\n    Create a Python dictionary with a specified number of keys and values.\n    Note that: Keys are randomly selected from a predefined list of letters, and values are consecutive integers starting from 1. Due to the randomness in key selection, the actual keys in the dictionary may vary in each execution.\n    The function should output with:\n        dict: A Python dictionary with keys as strings and values as lists of integers.\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n\n    # Generate a list of random keys\n    random_keys = random.sample(LETTERS, n_keys)\n\n    # Generate a list of consecutive integers\n    values = list(range(1, n_values + 1))\n\n    # Add the keys and values to the dictionary\n    for key, value in zip(random_keys, values):\n        my_dict[key] = [value]\n\n    return my_dict", "problem": "Create a Python dictionary with a specified number of keys and values.\nNote that: Keys are randomly selected from a predefined list of letters, and values are consecutive integers starting from 1. Due to the randomness in key selection, the actual keys in the dictionary may vary in each execution.\nThe function should output with:\n    dict: A Python dictionary with keys as strings and values as lists of integers.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n```", "solution": "import collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n\n    keys = [random.choice(LETTERS) for _ in range(n_keys)]\n    values = list(range(1, n_values + 1))\n    return dict(collections.OrderedDict((k, values) for k in keys))", "pass": false}
{"task_id": "269", "program": "import numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # Add a key \"a\" with a value of 1\n    data_dict[\"a\"] = 1\n\n    # Conduct statistical analysis on the values\n    mean = round(np.mean(list(data_dict.values())), 2)\n    median = np.median(list(data_dict.values()))\n    mode = stats.mode(list(data_dict.values()))[0][0]\n    statistical_properties = {\"mean\": mean, \"median\": median, \"mode\": mode}\n\n    # Normalize the values using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(list(data_dict.values()))\n\n    # Plot a histogram of the normalized values\n    fig, ax = plt.subplots()\n    ax.hist(normalized_values, bins=50, label=\"Normalized Values\")\n    ax.set_title(\"Histogram of Normalized Values\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return data_dict, statistical_properties, ax\ndata_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}", "problem": "Performs the following operations on the input dictionary 'data_dict': 1. Adds a key \"a\" with a value of 1. 2. Conducts statistical analysis on its values (mean, median, mode), by rounding the mean to 2 decimal places. 3. Normalizes the values using MinMaxScaler to a range of (0, 1). 4. Plots a histogram of the normalized values, with the title \"Histogram of Normalized Values\", and x labels \"Value\" and y labels \"Frequency\".\nThe function should output with:\n    tuple: A tuple containing:\n    dict: The processed dictionary with key \"a\" added.\n    dict: A dictionary containing statistical properties (mean, median, mode).\n    matplotlib.axes.Axes: The histogram plot of normalized values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```", "solution": "import numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # Constants\n    SCALER_RANGE = (0, 1)\n\n    # Add the key 'a' with value 1\n    data_dict.update(dict(a=1))\n\n    # Convert the values to a numpy array\n    values = np.array(list(data_dict.values()))\n\n    # Perform statistical analysis\n    mean = round(np.mean(values), 2)\n    median = np.median(values)\n    mode_value, _ = stats.mode(values)\n\n    # Normalize the values\n    scaler = MinMaxScaler(feature_range=SCALER_RANGE)\n    normalized_values = scaler.fit_transform(values.reshape(-1, 1))\n\n    # Plot a histogram of the normalized values\n    fig, ax = plt.subplots()\n    ax.hist(normalized_values, bins=10, edgecolor='black')\n    ax.set_title(\"Histogram of Normalized Values\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return data_dict, {\"mean\": mean, \"median\": median, \"mode\": mode_value}, ax", "pass": false}
{"task_id": "270", "program": "import re\nfrom collections import Counter\ndef task_func(sentence):\n\n    pass\nimport re\nfrom collections import Counter\ndef task_func(sentence):\n    words = re.findall(r'\\w+', sentence)\n    word_counts = Counter(words)\n    return word_counts\nsentence = \"The quick brown fox jumps over the lazy dog\"", "problem": "Count the occurrence of each word in a sentence and return the result as a dictionary. This function uses a regular expression to find words and a Counter to count their occurrences.\nThe function should output with:\n    dict: A dictionary where the keys are the words and the values are their counts.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\ndef task_func(sentence):\n```", "solution": "import re\nfrom collections import Counter\ndef task_func(sentence):\n\n\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    return dict(Counter(words))", "pass": true}
{"task_id": "271", "program": "import random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n\n    pass\nimport random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n    # Add a key \"a\" with a value of 1\n    data_dict[\"a\"] = 1\n\n    # Generate a random salt of length 5 using lowercase ASCII letters\n    salt = ''.join(random.choice(string.ascii_lowercase) for _ in range(5))\n\n    # For each key-value pair in the dictionary, concatenate the value with the generated salt, hash the concatenated string using SHA-256, and update the value with the hashed string\n    for key, value in data_dict.items():\n        data_dict[key] = hashlib.sha256((value + salt).encode()).hexdigest()\n\n    # Add a 'timestamp' key with the current UNIX timestamp as its value\n    data_dict[\"timestamp\"] = int(time.time())\n\n    return data_dict\ndata_dict = {\"key1\": \"value1\", \"key2\": \"value2\"}", "problem": "Process the given dictionary by performing the following operations: 1. Add a key \"a\" with a value of 1. 2. Generate a random salt of length 5 using lowercase ASCII letters. 3. For each key-value pair in the dictionary, concatenate the value with the generated salt, hash the concatenated string using SHA-256, and update the value with the hashed string. 4. Add a 'timestamp' key with the current UNIX timestamp as its value.\nThe function should output with:\n    dict: The processed dictionary with the hashed values and added keys.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n```", "solution": "import random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n    random.seed(seed)\n    # Constants\n    SALT_LENGTH = 5\n    \n    # Add the key 'a' with value 1\n    data_dict.update(dict(a=1))\n\n    # Generate a random salt\n    salt = ''.join(random.choice(string.ascii_lowercase) for _ in range(SALT_LENGTH))\n\n    # Concatenate the salt with the values and hash the concatenated string\n    for key in data_dict.keys():\n        data_dict[key] = hashlib.sha256((str(data_dict[key]) + salt).encode()).hexdigest()\n\n    # Timestamp the process\n    data_dict['timestamp'] = time.time()\n\n    return data_dict", "pass": false}
{"task_id": "272", "program": "import cgi\nimport http.server\nimport json\ndef task_func():\n\n    pass\nimport cgi\nimport http.server\nimport json", "problem": "The function creates an HTTP POST request handler for processing incoming data. The data is expected to be in JSON format with a key 'data'. The handler responds with a 200 success message if the data is valid, or an error message otherwise.\nNote that: Notes: If the 'Content-Type' header is not 'application/json', the server responds with a 400 Bad Request status and a JSON object: {\"status\": \"error\", \"message\": \"Content-Type header is not application/json\"}. If the received JSON object does not contain a 'data' key, the response is a 400 Bad Request with a JSON object: {\"status\": \"error\", \"message\": \"No data received\"}. For successfully processed requests, the server responds with a 200 OK status and a JSON object: {\"status\": \"success\", \"message\": \"Data received successfully.\"}.\nThe function should output with:\n    class: A class that is a subclass of http.server.BaseHTTPRequestHandler, designed to handle HTTP POST requests.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport json\ndef task_func():\n```", "solution": "import cgi\nimport http.server\nimport json\ndef task_func():\n    class PostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            \n            # Define error response directly within the method\n            error_response = {\n                'status': 'error',\n                'message': ''  # This will be modified based on the error condition\n            }\n            \n            if ctype != 'application/json':\n                self.send_response(400)\n                self.end_headers()\n                error_response['message'] = 'Content-Type header is not application/json'\n                self.wfile.write(json.dumps(error_response).encode())\n                return\n\n            length = int(self.headers.get('content-length'))\n            message = json.loads(self.rfile.read(length))\n            \n            if 'data' not in message:\n                self.send_response(400)\n                self.end_headers()\n                error_response['message'] = 'No data received'\n                self.wfile.write(json.dumps(error_response).encode())\n                return\n\n            # Define success response directly within the method\n            success_response = {\n                'status': 'success',\n                'message': 'Data received successfully.'\n            }\n            \n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(success_response).encode())\n\n    return PostRequestHandler", "pass": true}
{"task_id": "273", "program": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n\n    pass\nimport cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\ndef task_func():\n    class HTTPPostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type = self.headers.get('Content-Type')\n            if content_type != 'application/json':\n                self.send_response(400)\n                self.send_header('Content-Type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Content-Type header is not application/json')\n                return\n\n            content_length = int(self.headers.get('Content-Length'))\n            post_data = self.rfile.read(content_length)\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Invalid JSON')\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.send_header('Content-Type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'No data key in request')\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode())\n\n    return HTTPPostRequestHandler", "problem": "Creates an HTTP POST request handler for processing incoming data. The data is expected to be in JSON format with a key 'data'. The handler responds with a 200 success message if the data is valid, or an error message otherwise. The type of the response can be retrieved as 'content-type' and the length of the response as 'content-length'. There are two types of error messages: 'Content-Type header is not application/json' and 'No data key in request'.\nNote that: Notes: If the 'content-type' header is not 'application/json', indicating the client sent a request with an unsupported format. This condition sends a 400 Bad Request response to the client with the message \"Content-Type header is not application/json\". If the JSON object does not contain the 'data' key, leading to a 400 Bad Request response with the message \"No data key in request\". If the request body does not contain valid JSON, resulting in a 400 Bad Request response with the message \"Invalid JSON\".\nThe function should output with:\n    function: A class that handles HTTP POST requests and validates incoming data.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n```", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n    class PostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            if ctype != 'application/json':\n                self.send_error(400, 'Content-Type header is not application/json')\n                return\n\n            length = int(self.headers.get('content-length'))\n            try:\n                message = json.loads(self.rfile.read(length))\n            except json.JSONDecodeError:\n                self.send_error(400, 'Invalid JSON')\n                return\n\n            if 'data' not in message:\n                self.send_error(400, 'No data key in request')\n                return\n\n            self.send_response(200)\n            self.send_header('content-type', 'application/json')\n            self.end_headers()\n            response = json.dumps(SUCCESS_RESPONSE).encode()\n            self.wfile.write(response)\n\n    return PostRequestHandler", "pass": false}
{"task_id": "274", "program": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n\n    pass\nimport cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class HTTPPostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            try:\n                # Get the email data from the request body\n                email_data = json.loads(self.rfile.read(int(self.headers['Content-Length'])))\n\n                # Check if the email data is valid JSON\n                if not isinstance(email_data, dict):\n                    raise ValueError(\"Invalid email data\")\n\n                # Check if the required keys are present in the email data\n                required_keys = ['subject', 'message', 'to']\n                if not all(key in email_data for key in required_keys):\n                    raise ValueError(\"Missing required keys in email data\")\n\n                # Set up the SMTP server\n                smtp = smtplib.SMTP(smtp_server, smtp_port)\n                smtp.ehlo()\n                smtp.starttls()\n                smtp.login(smtp_username, smtp_password)\n\n                # Create the email message\n                msg = MIMEText(email_data['message'])\n                msg['Subject'] = email_data['subject']\n                msg['To'] = email_data['to']\n\n                # Send the email\n                smtp.sendmail(smtp_username, email_data['to'], msg.as_string())\n\n                # Close the SMTP connection\n                smtp.quit()\n\n                # Set the response status code and content type\n                self.send_response(200)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n\n                # Send the response body\n                self.wfile.write(b'Email sent successfully')\n\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Invalid JSON data')\n\n            except ValueError as e:\n                self.send_response(400)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Invalid email data: ' + str(e).encode('utf-8'))\n\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Authentication failed')\n\n    return HTTPPostRequestHandler", "problem": "Creates an HTTP POST request handler that processes incoming email data and sends an email. The email data must be a JSON object with 'subject', 'message', and 'to' keys. The type of the response can be retrieved as 'content-type' and the length of the response as 'content-length'.\nThe function should raise the exception for: JSONDecodeError: If the email data is not valid JSON. This results in a 400 Bad Request response. ValueError: If the 'subject', 'message', or 'to' keys are missing from the email data, leading to a 400 Bad Request response. smtplib.SMTPAuthenticationError: If there is an authentication issue with the SMTP server. This is communicated to the client with a 535 Authentication Failed response.\nThe function should output with:\n    function: A class that handles HTTP POST requests and sends emails based on\n    the provided data.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n```", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            if ctype != 'application/json':\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            length = int(self.headers.get('content-length'))\n            try:\n                email_data = json.loads(self.rfile.read(length))\n            except (json.JSONDecodeError):\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            if 'subject' not in email_data or 'message' not in email_data or 'to' not in email_data:\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            msg = MIMEText(email_data['message'])\n            msg['Subject'] = email_data['subject']\n            msg['From'] = smtp_username\n            msg['To'] = email_data['to']\n\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                try:\n                    server.sendmail(smtp_username, [email_data['to']], msg.as_string())\n                except smtplib.SMTPAuthenticationError:\n                    self.send_response(535)\n                    self.end_headers()\n                    return\n\n            self.send_response(200)\n            self.end_headers()\n\n    return EmailRequestHandler", "pass": false}
{"task_id": "275", "program": "import numpy as np\nfrom itertools import combinations\ndef task_func(n):\n\n    pass\nimport numpy as np\nfrom itertools import combinations\ndef task_func(n):\n    if n < 1:\n        raise ValueError(\"Input n must be greater than or equal to 1\")\n    return list(combinations(range(1, n+1), 2))", "problem": "Generate a list of all possible integer pairs within the range of 1 to n.\nThe function should raise the exception for: This function will raise Value Error if the input n is less than 1.\nThe function should output with:\n    list of tuples: A list of tuple pairs representing all possible combinations\n    of two numbers within the specified range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import combinations\ndef task_func(n):\n```", "solution": "import numpy as np\nfrom itertools import combinations\ndef task_func(n):\n\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    numbers = np.arange(1, n + 1)\n    pairs = list(combinations(numbers, 2))\n    return pairs", "pass": true}
{"task_id": "276", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    # Calculate the maximum values of each row\n    max_values = np.max(matrix, axis=1)\n\n    # Calculate the histogram of the maximum values\n    hist, bins = np.histogram(max_values, bins=50)\n\n    # Calculate the estimate of the core density of the distribution\n    core_density = np.mean(hist) / (bins[1] - bins[0])\n\n    # Calculate the skewness and kurtosis of the distribution\n    skewness = stats.skew(max_values)\n    kurtosis = stats.kurtosis(max_values)\n\n    # Plot the histogram of the maximum values\n    fig, ax = plt.subplots()\n    ax.hist(max_values, bins=bins, density=True)\n    ax.set_xlabel('Maximum value')\n    ax.set_ylabel('Density')\n    ax.set_title('Histogram of Maximum Values')\n\n    return skewness, kurtosis, ax\nmatrix = np.random.rand(100, 10)", "problem": "Calculate the distribution of the maximum values of each row in the matrix, record the histogram and the estimate of the core density of the distribution, and return the skew, kurtosis, and the histogram plot of the distribution.\nThe function should output with:\n    tuple: The skewness, the kurtosis of the distribution, and the histogram plot (matplotlib Axes object).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    max_values = [max(row) for row in matrix]\n    \n    fig, ax = plt.subplots()\n    ax.hist(max_values, bins=10, density=True, alpha=0.6, color='g')\n    \n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, np.mean(max_values), np.std(max_values))\n    ax.plot(x, p, 'k', linewidth=2)\n\n    skewness = stats.skew(max_values)\n    kurtosis = stats.kurtosis(max_values)\n\n    return skewness, kurtosis, ax", "pass": true}
{"task_id": "277", "program": "import random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n\n    pass\nimport random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n    if n < 2:\n        return None\n    points = [(random.random(), random.random()) for _ in range(n)]\n    closest_pair = None\n    min_distance = float('inf')\n    for pair in combinations(points, 2):\n        distance = math.sqrt((pair[0][0] - pair[1][0]) ** 2 + (pair[0][1] - pair[1][1]) ** 2)\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = pair\n    return closest_pair", "problem": "Generate n random dots within a unit square (0 to 1 on both axes) in a 2D space and find the pair that comes closest to each other.\nNote that: This function will return None if the input n less than 2.\nThe function should output with:\n    tuple or None: A tuple of the form ((x1, y1), (x2, y2)), which are the coordinates of the closest pair,\n    or None if n is less than 2.\nYou should write self-contained code starting with:\n```\nimport random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n```", "solution": "import random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n\n    if n < 2:\n        return None\n\n    points = [(random.random(), random.random()) for i in range(n)]\n    closest_pair = min(combinations(points, 2), key=lambda pair: math.hypot(pair[0][0] - pair[1][0], pair[0][1] - pair[1][1]))\n    return closest_pair", "pass": true}
{"task_id": "278", "program": "import numpy as np\nfrom sympy import symbols, solve\ndef task_func(precision=2, seed=0):\n\n    pass\nimport numpy as np\nfrom sympy import symbols, solve\ndef task_func(precision=2, seed=0):\n    \"\"\"\n    Solve a quadratic equation in the form of ax^2 + bx + c = 0, where a, b, and c are randomly generated numbers between -10 and 10.\n    The solutions are complex numbers rounded to the specified accuracy.\n\n    Args:\n        precision (int): The number of decimal places to round the solutions to.\n        seed (int): The random seed to use for generating the random numbers.\n\n    Returns:\n        tuple: A tuple of two solutions formatted as complex numbers (rounded to the specified precision).\n    \"\"\"\n    np.random.seed(seed)\n    a = np.random.uniform(-10, 10)\n    b = np.random.uniform(-10, 10)\n    c = np.random.uniform(-10, 10)\n    x = symbols(\"x\")\n    solutions = solve(a*x**2 + b*x + c, x)\n    return tuple(round(solution, precision) for solution in solutions)", "problem": "Solve a quadratic equation in the form of ax ^ 2 + bx + c = 0, where a, b, and c randomly generated numbers are between -10 and 10. The solutions are complex numbers rounded to the specified accuracy.\nThe function should output with:\n    tuple: A tuple of two solutions formatted as complex numbers (rounded to the specified precision).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sympy import symbols, solve\ndef task_func(precision=2, seed=0):\n```", "solution": "import numpy as np\nfrom sympy import symbols, solve\ndef task_func(precision=2, seed=0):\n    np.random.seed(seed)\n    a = np.random.uniform(-10, 10)\n    b = np.random.uniform(-10, 10)\n    c = np.random.uniform(-10, 10)\n\n    x = symbols('x')\n    equation = a * x**2 + b * x + c\n\n    solutions = solve(equation, x)\n    solutions = [complex(round(complex(solution).real, precision), round(complex(solution).imag, precision)) for solution in solutions]\n\n    return tuple(solutions)", "pass": false}
{"task_id": "279", "program": "import random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n\n    pass\nimport random\nfrom collections import Counter\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n    \"\"\"\n    Draw x random 5-card poker hands from a 52-card pack (without suits) and return the hands along with a counter of the drawn cards.\n    The output is random; hence, the returned list will vary with each call.\n    The function should output with:\n        tuple: A tuple containing two elements:\n        list of list str: Each inner list contains 5 strings, representing a 5-card poker hand.\n        Counter: A counter of the drawn cards.\n    \"\"\"\n    # Initialize a list to store the drawn cards\n    drawn_cards = []\n\n    # Draw x random cards from the deck\n    for _ in range(x):\n        # Draw 5 random cards from the deck\n        hand = random.sample(CARDS, 5)\n\n        # Add the drawn cards to the list\n        drawn_cards.append(hand)\n\n    # Create a counter of the drawn cards\n    card_counter = Counter(drawn_cards)\n\n    # Return the drawn cards and the counter\n    return (drawn_cards, card_counter)\nx = 3", "problem": "Draw x random 5-card poker hands from a 52-card pack (without suits) and return the hands along with a counter of the drawn cards. The output is random; hence, the returned list will vary with each call.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    list of list str: Each inner list contains 5 strings, representing a 5-card poker hand.\n    Counter: A counter of the drawn cards.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n```", "solution": "import random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n    result = []\n    card_counts = Counter()\n\n    for i in range(x):\n        drawn = random.sample(CARDS, 5)\n        result.append(drawn)\n        card_counts.update(drawn)\n\n    return result, card_counts", "pass": false}
{"task_id": "280", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n    \"\"\"\n    Calculate the one-dimensional discrete N-point Fourier Transform (DFT) for a real or complex sequence (signal) using the Fast Fourier Transform (FFT) algorithm.\n    Plot the original signal and the transformed signal, rounding the transformed signal values to the specified accuracy.\n    The title of the plots will be 'Original Signal' and 'Transformed Signal'.\n\n    Args:\n        signal (array_like): The signal to be transformed.\n        precision (int, optional): The number of decimal places to round the transformed signal values to. Defaults to 2.\n        seed (int, optional): The random seed for the plot. Defaults to 777.\n\n    Returns:\n        ndarray: A numpy array of transformed signal values (rounded to the specified precision).\n        tuple: A tuple containing the Axes objects for the original signal and transformed signal plots.\n    \"\"\"\n    # Generate random signal\n    np.random.seed(seed)\n    signal = np.random.rand(100)\n\n    # Calculate the DFT using the FFT algorithm\n    transformed_signal = fft(signal)\n\n    # Round the transformed signal values to the specified precision\n    transformed_signal = np.round(transformed_signal, precision)\n\n    # Plot the original signal and the transformed signal\n    fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n    axs[0].plot(signal, label='Original Signal')\n    axs[0].set_title('Original Signal')\n    axs[1].plot(transformed_signal, label='Transformed Signal')\n    axs[1].set_title('Transformed Signal')\n    axs[1].set_xlabel('Frequency')\n    axs[1].set_ylabel('Amplitude')\n    plt.legend()\n\n    return transformed_signal, axs", "problem": "Calculate the one-dimensional discrete N-point Fourier Transform (DFT) for a real or complex sequence (signal) using the Fast Fourier Transform (FFT) algorithm. Plot the original signal and the transformed signal, rounding the transformed signal values to the specified accuracy. The title of the plots will be 'Original Signal' and 'Transformed Signal'.\nThe function should output with:\n    ndarray: A numpy array of transformed signal values (rounded to the specified precision).\n    tuple: A tuple containing the Axes objects for the original signal and transformed signal plots.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n    np.random.seed(seed)\n    transformed_signal = fft(signal)\n    transformed_signal_rounded = np.round(transformed_signal, precision).tolist()\n\n    fig, ax = plt.subplots(2, 1)\n    ax[0].plot(signal)\n    ax[0].set_title('Original Signal')\n    ax[1].plot(transformed_signal_rounded)\n    ax[1].set_title('Transformed Signal')\n    plt.tight_layout()  # Adjust layout to avoid overlap\n\n    return np.array(transformed_signal_rounded), ax", "pass": false}
{"task_id": "281", "program": "import re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n\n    pass\nimport re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n    \"\"\"\n    Scan a directory for log files and count the occurrences of each IP address in all files.\n    The function utilizes a regular expression pattern to identify IP addresses in the log files.\n    The function should output with:\n        dict: A dictionary with IP addresses as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the IP addresses and their counts\n    ip_counts = {}\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(folder_path):\n        # Skip files that are not log files\n        if not filename.endswith(\".log\"):\n            continue\n\n        # Open the log file and read its contents\n        with open(os.path.join(folder_path, filename), \"r\") as f:\n            contents = f.read()\n\n        # Use a regular expression to find all IP addresses in the file\n        ip_addresses = re.findall(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", contents)\n\n        # Iterate over the IP addresses and increment their counts in the dictionary\n        for ip_address in ip_addresses:\n            if ip_address not in ip_counts:\n                ip_counts[ip_address] = 0\n            ip_counts[ip_address] += 1\n\n    return ip_counts", "problem": "Scan a directory for log files and count the occurrences of each IP address in all files. The function utilizes a regular expression pattern to identify IP addresses in the log files.\nThe function should output with:\n    dict: A dictionary with IP addresses as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n```", "solution": "import re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n    IP_REGEX = re.compile('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    counter = Counter()\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.log'):\n            with open(os.path.join(folder_path, filename)) as file:\n                content = file.read()\n                ips = re.findall(IP_REGEX, content)\n                counter.update(ips)\n    return dict(counter)", "pass": true}
{"task_id": "282", "program": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n    \"\"\"\n    Draw the color histogram of an image in 3D and call a function when a data point is selected.\n    The function should raise the exception for: FileNotFoundError: If the image file does not exist.\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object of the 3D plot.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(\"Image file does not exist\")\n\n    # Load the image\n    img = cv2.imread(file_path)\n\n    # Convert the image to HSV color space\n    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n\n    # Get the histogram of the HSV image\n    hist = cv2.calcHist([hsv], [0, 1, 2], None, [180, 256, 256], [0, 180, 0, 256, 0, 256])\n\n    # Normalize the histogram\n    hist = cv2.normalize(hist, hist).flatten()\n\n    # Create a figure and 3D axes\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Plot the histogram\n    ax.plot_surface(hist, cmap='viridis')\n\n    # Set the axis labels\n    ax.set_xlabel('Hue')\n    ax.set_ylabel('Saturation')\n    ax.set_zlabel('Value')\n\n    # Set the title\n    ax.set_title('Color Histogram of ' + file_path)\n\n    # Add a pick event to the plot\n    fig.canvas.mpl_connect('pick_event', onpick)\n\n    # Return the Axes object\n    return ax\nfile_path = 'image.jpg'\ndef onpick(event):\n    print(\"Data point selected:\", event.artist.get_data()[0])", "problem": "Draw the color histogram of an image in 3D and call a function when a data point is selected.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the 3D plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n```", "solution": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"No file found at {file_path}\")\n\n    img = cv2.imread(file_path)\n    color = ('b', 'g', 'r')\n    fig = plt.figure()\n    ax = Axes3D(fig)\n\n    for i, col in enumerate(color):\n        hist = cv2.calcHist([img], [i], None, [256], [0, 256])\n        ax.plot(np.arange(256), hist, color=col)\n\n    fig.canvas.mpl_connect('pick_event', onpick)\n\n    # plt.show()\n\n    return ax", "pass": false}
{"task_id": "283", "program": "import os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n\n    pass\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n    \"\"\"\n    Count the occurrence of a particular key in all json files in a specified directory and return a dictionary with the values of the specified key and their counts.\n\n    Args:\n        json_files_path (str): The path to the directory containing the json files.\n        key (str): The key to count the occurrences of.\n\n    Returns:\n        dict: A dictionary with values of the key as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through all the json files in the directory\n    for filename in os.listdir(json_files_path):\n        # Open the json file and load it into a dictionary\n        with open(os.path.join(json_files_path, filename), 'r') as f:\n            data = json.load(f)\n\n        # Check if the key is in the dictionary\n        if key in data:\n            # If the key is in the dictionary, increment the count\n            counts[data[key]] = counts.get(data[key], 0) + 1\n\n    # Return the dictionary with the counts\n    return counts", "problem": "Count the occurrence of a particular key in all json files in a specified directory and return a dictionary with the values of the specified key and their counts. >>> task_func(json_files_path=directory, key='product') {'apple': 1, 'banana': 1}\nThe function should output with:\n    dict: A dictionary with values of the key as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n```", "solution": "import os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n    key_values = []\n\n    for filename in os.listdir(json_files_path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(json_files_path, filename)\n            with open(file_path, 'r') as json_file:\n                data = json.load(json_file)\n                if key in data:\n                    key_values.append(data[key])\n\n    return dict(Counter(key_values))", "pass": true}
{"task_id": "284", "program": "import mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\ndef task_func(url):\n\n    pass\nimport mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\ndef task_func(url):\n    \"\"\"\n    Extracts all hyperlinks (href attributes) from the specified URL using the mechanize browser object and BeautifulSoup. Absolute URLs are combined with the base URL.\n    The function should output with:\n        list: A list of strings, each being a hyperlink found on the page.\n    \"\"\"\n    # Create a new mechanize browser object\n    browser = mechanize.Browser()\n\n    # Set the base URL for the browser\n    browser.set_handle_robots(False)\n\n    # Set the user agent for the browser\n    browser.addheaders = [('User-agent', 'Mozilla/5.0')]\n\n    # Open the URL and get the HTML content\n    response = browser.open(url)\n    html = response.read()\n\n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find all hyperlinks in the HTML content\n    links = soup.find_all('a')\n\n    # Extract the href attribute from each hyperlink\n    hrefs = [link.get('href') for link in links]\n\n    # Combine the absolute URLs with the base URL\n    absolute_urls = [urljoin(url, href) for href in hrefs]\n\n    # Return the list of absolute URLs\n    return absolute_urls", "problem": "Extracts all hyperlinks (href attributes) from the specified URL using the mechanize browser object and BeautifulSoup. Absolute URLs are combined with the base URL.\nThe function should output with:\n    list: A list of strings, each being a hyperlink found on the page.\nYou should write self-contained code starting with:\n```\nimport mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\ndef task_func(url):\n```", "solution": "import mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\ndef task_func(url):\n    br = mechanize.Browser()\n    response = br.open(url)\n    soup = BeautifulSoup(response.read(), 'html.parser')\n\n    links = [urljoin(url, a['href']) for a in soup.find_all('a', href=True)]\n\n    return links", "pass": true}
{"task_id": "285", "program": "import mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n\n    pass\nimport mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n    br = mechanize.Browser()\n    br.open(url)\n    br.select_form(form_id)\n    for key, value in data.items():\n        br.form[key] = value\n    response = br.submit()\n    soup = BeautifulSoup(response.read(), 'html.parser')\n    title = soup.title.string\n    if title is None:\n        title = 'No Title'\n    return title", "problem": "Submits a form on a given webpage using mechanize and extracts the title of the response page.\nNote that: Notes: If the page has no title, it returns 'No Title'.\nThe function should output with:\n    str: The title of the page resulting from the form submission.\nYou should write self-contained code starting with:\n```\nimport mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n```", "solution": "import mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n    br = mechanize.Browser()\n    br.open(url)\n    br.select_form(nr=form_id)\n\n    for key, value in data.items():\n        br[key] = value\n\n    response = br.submit()\n\n    soup = BeautifulSoup(response.read(), 'html.parser')\n    title = soup.title.string if soup.title else 'No Title'\n\n    return title", "pass": false}
{"task_id": "286", "program": "from collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n\n    pass\nfrom collections import Counter\nimport os\nimport csv\ndef task_func(output_file, test_directory):\n    \"\"\"\n    Count the number of words in multiple dictionary files (.txt) in a specific directory, export the counts to a CSV file, and then return the total number of words.\n    Note that: Header for the csv output file is \"Word\", \"Count\"\n    Return 0 if the input invalid or error raised\n    The function should output with:\n        int: total number of words in .txt files\n    \"\"\"\n    # Check if the input is valid\n    if not os.path.isdir(test_directory):\n        return 0\n\n    # Initialize the counter\n    word_count = Counter()\n\n    # Iterate over the files in the directory\n    for filename in os.listdir(test_directory):\n        # Check if the file is a .txt file\n        if filename.endswith(\".txt\"):\n            # Open the file and read the contents\n            with open(os.path.join(test_directory, filename), \"r\") as f:\n                # Update the counter with the words in the file\n                word_count.update(f.read().split())\n\n    # Write the counts to a CSV file\n    with open(output_file, \"w\", newline=\"\") as f:\n        writer = csv.writer(f)\n        writer.writerow([\"Word\", \"Count\"])\n        for word, count in word_count.items():\n            writer.writerow([word, count])\n\n    # Return the total number of words\n    return sum(word_count.values())", "problem": "Count the number of words in multiple dictionary files (.txt) in a specific directory, export the counts to a CSV file, and then return the total number of words.\nNote that: Header for the csv output file is \"Word\", \"Count\" Return 0 if the input invalid or error raised\nThe function should output with:\n    int: total number of words in .txt files\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n```", "solution": "from collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n    total_words = 0\n    try:\n        word_counts = Counter()\n        for file_name in os.listdir(test_directory):\n            if not file_name.endswith('.txt'):\n                continue\n            with open(os.path.join(test_directory, file_name), 'r') as file:\n                words = file.read().split()\n                word_counts.update(words)\n\n        with open(output_file, 'w') as file:\n            writer = csv.writer(file)\n            writer.writerow(['Word', 'Count'])\n            writer.writerows(word_counts.items())\n        \n        for word in word_counts:\n            total_words += word_counts[word]\n    except Exception as e:\n        print(e)\n    return total_words", "pass": true}
{"task_id": "287", "program": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n\n    pass\nfrom collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    # Initialize a counter to keep track of the number of words\n    word_counter = Counter()\n\n    # Loop through all files in the directory\n    for file in os.listdir(directory):\n        # Check if the file is a .txt file\n        if file.endswith(\".txt\"):\n            # Open the file and read its contents\n            with open(os.path.join(directory, file), \"r\") as f:\n                # Add the words in the file to the counter\n                word_counter.update(f.read().split())\n\n    # Write the counter to a JSON file\n    with open(filename, \"w\") as f:\n        json.dump(word_counter, f)\n\n    # Return the total number of words\n    return sum(word_counter.values())\ndirectory = \"path/to/directory\"\nfilename = \"word_counts.json\"", "problem": "Count the number of words in .txt files within a specified directory, export the counts to a JSON file, and then return the total number of words.\nThe function should output with:\n    int: total number of words in .txt files\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n```", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    total_words = 0\n    word_counts = Counter()\n\n    for file_name in os.listdir(directory):\n        if not file_name.endswith('.txt'):\n            continue\n        with open(os.path.join(directory, file_name), 'r') as file:\n            words = file.read().split()\n            word_counts.update(words)\n\n    with open(filename, 'w') as file:\n        json.dump(dict(word_counts), file)\n    \n    for word in word_counts:\n        total_words += word_counts[word]\n    return total_words", "pass": true}
{"task_id": "288", "program": "import collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n\n    pass\nimport collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n    \"\"\"\n    Count the total appearances of all keys in all JSON files in the specified directory and return a dictionary with the keys from the JSON files as keys and their respective counts as values.\n\n    Args:\n        directory_path (str): The path to the directory containing the JSON files.\n\n    Returns:\n        dict: A dictionary with the keys from the JSON files as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    key_counts = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Check if the file is a JSON file\n        if filename.endswith(\".json\"):\n            # Open the JSON file and load it into a dictionary\n            with open(os.path.join(directory_path, filename), \"r\") as f:\n                data = json.load(f)\n\n            # Loop through all keys in the dictionary\n            for key in data.keys():\n                # If the key is already in the dictionary, increment its count\n                if key in key_counts:\n                    key_counts[key] += 1\n                # Otherwise, add the key to the dictionary with a count of 1\n                else:\n                    key_counts[key] = 1\n\n    return key_counts", "problem": "Count the total appearances of all keys in all JSON files in the specified directory and return a dictionary with the keys from the JSON files as keys and their respective counts as values.\nThe function should output with:\n    dict: A dictionary with the keys from the JSON files as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n```", "solution": "import collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n    key_counts = collections.defaultdict(int)\n\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(directory_path, filename)\n            with open(file_path, 'r') as json_file:\n                data = json.load(json_file)\n                for key in data.keys():\n                    key_counts[key] += 1\n\n    return dict(key_counts)", "pass": true}
{"task_id": "289", "program": "import tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(X, y, n_splits, batch_size, epochs):\n\n    pass\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(X, y, n_splits, batch_size, epochs):\n    # Define the neural network architecture\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(50, activation='relu', input_shape=(X.shape[1],)),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    # Define the optimizer and loss function\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n    loss_fn = tf.keras.losses.BinaryCrossentropy()\n\n    # Scale the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    # Define the k-fold cross-validation\n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n    # Initialize the training history\n    training_history = []\n\n    # Loop over each fold\n    for train_index, val_index in kfold.split(X_scaled):\n        # Split the data into training and validation sets\n        X_train, X_val = X_scaled[train_index], X_scaled[val_index]\n        y_train, y_val = y[train_index], y[val_index]\n\n        # Compile the model with the optimizer and loss function\n        model.compile(optimizer=optimizer, loss=loss_fn)\n\n        # Train the model on the training set\n        model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_val, y_val))\n\n        # Evaluate the model on the validation set\n        val_loss, val_acc = model.evaluate(X_val, y_val)\n\n        # Append the training history for this fold\n        training_history.append({'loss': val_loss, 'accuracy': val_acc})\n\n    return training_history", "problem": "Trains a simple neural network on provided data using k-fold cross-validation. The network has one hidden layer with 20 neurons and ReLU activation, and an output layer with sigmoid activation for binary classification.\nThe function should output with:\n    list: A list containing the training history of the model for each fold. Each history\n    object includes training loss and accuracy.\nYou should write self-contained code starting with:\n```\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(X, y, n_splits, batch_size, epochs):\n```", "solution": "import tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(X, y, n_splits, batch_size, epochs):\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    kf = KFold(n_splits=n_splits)\n    history = []\n\n    for train_index, test_index in kf.split(X_scaled):\n        X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(20, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n        hist = model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=batch_size, epochs=epochs, verbose=0)\n        history.append(hist)\n\n    return history", "pass": false}
{"task_id": "290", "program": "import nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n\n    pass\nimport nltk\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n    \"\"\"\n    Count the number of unique non-stop words across all '.txt' files in a specified directory.\n\n    Args:\n        directory_path (str): The path to the directory containing the '.txt' files.\n\n    Returns:\n        int: The total count of unique non-stop words across all files.\n    \"\"\"\n    # Initialize the counter\n    word_counter = Counter()\n\n    # Iterate over all '.txt' files in the directory\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.txt'):\n            # Open the file and read its contents\n            with open(os.path.join(directory_path, filename), 'r') as f:\n                text = f.read()\n\n            # Tokenize the text and remove stopwords\n            tokens = nltk.word_tokenize(text)\n            tokens = [token for token in tokens if token.lower() not in STOPWORDS]\n\n            # Update the counter with the unique words\n            word_counter.update(tokens)\n\n    # Return the total count of unique non-stop words\n    return sum(word_counter.values())\ndirectory_path = 'path/to/directory'", "problem": "Count the number of unique non-stop words across all '.txt' files in a specified directory.\nThe function should output with:\n    int: The total count of unique non-stop words across all files.\nYou should write self-contained code starting with:\n```\nimport nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n```", "solution": "import nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n\n    word_counts = Counter()\n\n    for file_name in os.listdir(directory_path):\n        if not file_name.endswith('.txt'):\n            continue\n        with open(os.path.join(directory_path, file_name), 'r') as file:\n            words = [word for word in file.read().split() if word.lower() not in STOPWORDS]\n            word_counts.update(words)\n\n    return len(word_counts)", "pass": false}
{"task_id": "291", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n    np.random.seed(seed)\n    x = np.random.normal(mu, sigma, 1000)\n    ax = sns.distplot(x, hist=False, kde=True, color=\"blue\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Density\")\n    ax.set_title(\"Normal Distribution\")\n    return ax\nmu = 0\nsigma = 1", "problem": "Draw a normal distribution using a 1000 samples, indicating the mean and standard deviation with a color bar.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the plotted distribution.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n    # Set the random seed\n    np.random.seed(seed)\n    # Generate samples from the normal distribution\n    samples = np.random.normal(mu, sigma, 1000)\n\n    # Generate a KDE plot\n    mappable = sns.kdeplot(samples, fill=True)\n\n    # Add a colorbar to the plot\n    plt.colorbar(mappable=mappable.collections[0])\n\n    return mappable", "pass": false}
{"task_id": "292", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n    # Scale the 'Age' and 'Income' columns between 0 and 1 for each group by 'id'\n    scaler = MinMaxScaler()\n    df_scaled = pd.DataFrame(scaler.fit_transform(df[['Age', 'Income']]), columns=['Age', 'Income'])\n\n    # Create a histogram of the 'Income' column after scaling\n    hist, bins = np.histogram(df_scaled['Income'], bins=10)\n\n    # Return the scaled DataFrame and the histogram data\n    return df_scaled, hist", "problem": "Scale the 'Age' and 'Income' columns between 0 and 1 for each group by 'id' in the provided pandas DataFrame. Additionally, create a histogram of the 'Income' column after scaling and return both the scaled DataFrame and the histogram data.\nThe function should output with:\n    tuple: A tuple containing the scaled DataFrame and the histogram data for the 'income' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    #Scaling the 'age' and 'income' columns\n    df_grouped = df.groupby('id').apply(\n        lambda x: pd.DataFrame(\n            scaler.fit_transform(x[['age', 'income']]), \n            columns=['age', 'income'], \n            index=x.index\n        )\n    )\n\n    # Creating a histogram of the 'income' column\n    hist, bins = np.histogram(df_grouped['income'], bins=10)\n\n    return df_grouped, (hist, bins)", "pass": false}
{"task_id": "293", "program": "import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n\n    pass\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n    \"\"\"\n    Generate all subsets of a given size from a tuple and draw a histogram of the sums of the subsets.\n    Additionally, return the Axes object of the plotted histogram and the combinations of the subsets and their sums.\n\n    Args:\n        elements (tuple): Tuple of elements to generate subsets from.\n        subset_size (int): Size of subsets to generate.\n\n    Returns:\n        matplotlib.axes.Axes: Axes object of the plotted histogram.\n        list: List of all the combinations of subsets.\n        list: List of the sums of all the subsets.\n    \"\"\"\n    # Generate all subsets of the given size\n    subsets = itertools.combinations(elements, subset_size)\n\n    # Calculate the sums of all the subsets\n    sums = [sum(subset) for subset in subsets]\n\n    # Plot the histogram of the sums\n    fig, ax = plt.subplots()\n    ax.hist(sums, bins=len(sums))\n\n    return ax, list(subsets), sums\nelements = (1, 2, 3, 4, 5)\nsubset_size = 3", "problem": "Generate all subsets of a given size from a tuple and draw a histogram of the sums of the subsets. Additionally, return the Axes object of the plotted histogram and the combinations of the subsets and their sums.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object of the plotted histogram.\n    list: List of all the combinations of subsets.\n    list: List of the sums of all the subsets.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n```", "solution": "import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    ax = plt.hist(sums, bins=np.arange(min(sums), max(sums) + 2) - 0.5, rwidth=0.8, align='left')\n    return plt.gca(), combinations, sums", "pass": false}
{"task_id": "294", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    \"\"\"\n    Standardize the 'age' and 'income' columns for each group by 'id' in a Pandas DataFrame, and return the standardized DataFrame.\n    The function should raise the exception for:\n        - This function will raise ValueError if the DataFrame does not have the 'id', 'age', and 'income' columns.\n    The function should output with:\n        - DataFrame: The pandas DataFrame after standardizing 'age' and 'income' columns.\n    \"\"\"\n    # Check if the DataFrame has the required columns\n    if not all(col in df.columns for col in ['id', 'age', 'income']):\n        raise ValueError(\"The DataFrame does not have the required columns: 'id', 'age', and 'income'\")\n\n    # Group the DataFrame by 'id' and standardize 'age' and 'income' columns\n    df_std = df.groupby('id').apply(lambda x: StandardScaler().fit_transform(x[['age', 'income']]))\n\n    # Return the standardized DataFrame\n    return df_std", "problem": "Standardize the 'age' and 'income' columns for each group by 'id' in a Pandas DataFrame, and return the standardized DataFrame.\nThe function should raise the exception for: This function will raise ValueError if the DataFrame does not have the 'id', 'age', and 'income' columns.\nThe function should output with:\n    DataFrame: The pandas DataFrame after standardizing 'age' and 'income' columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    try:\n        scaler = StandardScaler()\n\n        df_grouped = df.groupby('id').apply(lambda x: pd.DataFrame(scaler.fit_transform(x[['age', 'income']]), columns=['age', 'income'], index=x.index))\n\n        return df_grouped\n    except:\n        raise ValueError()", "pass": false}
{"task_id": "295", "program": "import itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n\n    pass\nimport itertools\nimport statistics\ndef task_func(elements, subset_size):\n    # Generate all subsets of the given size from the tuple\n    subsets = list(itertools.combinations(elements, subset_size))\n\n    # Calculate the sum of each subset\n    sums = [sum(subset) for subset in subsets]\n\n    # Calculate the mean, median, and mode of the sums\n    mean = statistics.mean(sums)\n    median = statistics.median(sums)\n    mode = statistics.mode(sums)\n\n    # Return a dictionary with the mean, median, and mode of the sums\n    return {\"mean\": mean, \"median\": median, \"mode\": mode}\nelements = (1, 2, 3, 4, 5)\nsubset_size = 3", "problem": "Generate all subsets of a given size from a tuple and calculate the mean, median, and mode of the sums of the subsets. Args: - elements (tuple): A tuple of numbers from which subsets will be generated. - subset_size (int): The size of the subsets to be generated.\nThe function should output with:\n    dict: A dictionary with the mean, median, and mode of the sums of the subsets.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n```", "solution": "import itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    return {\n        'mean': statistics.mean(sums),\n        'median': statistics.median(sums),\n        'mode': statistics.mode(sums)\n    }", "pass": true}
{"task_id": "296", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame\")\n    if df.empty:\n        return plt.bar([], [])\n    value_counts = df[\"value\"].value_counts()\n    ax = value_counts.plot(kind=\"bar\", title=\"Value Distribution\", xlabel=\"Value\", ylabel=\"Count\")\n    return ax", "problem": "Draw a bar chart of the counts of each unique value in the 'value' column of a pandas DataFrame and return the Axes object. Empty DataFrame will return an empty bar chart.\nNote that: This function use \"Value Distribution\" for the plot title. This function use \"Value\" and \"Count\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    Axes: The matplotlib Axes object of the bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    value_counts = df['value'].value_counts()\n    ax = plt.bar(value_counts.index, value_counts.values)\n    plt.xlabel('Value')\n    plt.ylabel('Count')\n    plt.title('Value Distribution')\n    return plt.gca()", "pass": false}
{"task_id": "297", "program": "import itertools\nimport collections\ndef task_func(elements, subset_size):\n\n    pass\nimport itertools\nimport collections\ndef task_func(elements, subset_size):\n    \"\"\"\n    Generate all 2-element subsets of a tuple and count the occurrences of each sum in the subsets.\n    The function should output with:\n        dict: A dictionary with the sums and their counts.\n    \"\"\"\n    # Generate all 2-element subsets of the input tuple\n    subsets = itertools.combinations(elements, subset_size)\n\n    # Initialize a dictionary to store the sums and their counts\n    sums = collections.defaultdict(int)\n\n    # Iterate over the subsets and count the occurrences of each sum\n    for subset in subsets:\n        sum_ = sum(subset)\n        sums[sum_] += 1\n\n    return sums\nelements = (1, 2, 3, 4, 5)\nsubset_size = 2", "problem": "Generate all 2-element subsets of a tuple and count the occurrences of each sum in the subsets.\nThe function should output with:\n    dict: A dictionary with the sums and their counts.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport collections\ndef task_func(elements, subset_size):\n```", "solution": "import itertools\nimport collections\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    return collections.Counter(sums)", "pass": true}
{"task_id": "298", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    \"\"\"\n    Splits a list in the 'Value' column of a DataFrame into several columns,\n    scales these columns using StandardScaler, and optionally returned the scaled data using a bar chart.\n    The 'Date' column is converted to datetime and used as the index in the plot.\n    Note that: This function use \"Scaled Values Over Time\" for the plot title.\n    This function use \"Date\" and \"Scaled Value\" as the xlabel and ylabel respectively.\n    The function should raise the exception for:\n        - This function will raise KeyError if the DataFrame does not have the 'Date' and 'Value' columns.\n    The function should output with:\n        - DataFrame: A pandas DataFrame with the 'Date' column and additional columns for each element in the original 'Value' list,\n          where these columns contain the scaled values.\n        - Axes (optional): A matplotlib Axes object containing the bar chart, returned if 'plot' is True.\n    \"\"\"\n    # Check if the DataFrame has the required columns\n    if not set(COLUMNS).issubset(df.columns):\n        raise KeyError(\"The DataFrame does not have the required columns.\")\n\n    # Convert the 'Date' column to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    # Split the 'Value' column into separate columns\n    df = pd.get_dummies(df, columns=['Value'], prefix='Value')\n\n    # Scale the values using StandardScaler\n    scaler = StandardScaler()\n    df[COLUMNS] = scaler.fit_transform(df[COLUMNS])\n\n    # Create a bar chart\n    if plot:\n        fig, ax = plt.subplots()\n        ax.bar(df['Date'], df['Value'])\n        ax.set_title(\"Scaled Values Over Time\")\n        ax.set_xlabel(\"Date\")\n        ax.set_ylabel(\"Scaled Value\")\n        return df, ax\n\n    # Return the scaled DataFrame\n    return df\ndf = pd.DataFrame({'Date': ['2022-01-01', '2022-01-02', '2022-01-03'],\n                   'Value': [1, 2, 3]})", "problem": "Splits a list in the 'Value' column of a DataFrame into several columns, scales these columns using StandardScaler, and optionally returned the scaled data using a bar chart. The 'Date' column is converted to datetime and used as the index in the plot.\nNote that: This function use \"Scaled Values Over Time\" for the plot title. This function use \"Date\" and \"Scaled Value\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise KeyError if the DataFrame does not have the 'Date' and 'Value' columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the 'Date' column and additional columns for each element in the original 'Value' list,\n    where these columns contain the scaled values.\n    Axes (optional): A matplotlib Axes object containing the bar chart, returned if 'plot' is True.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    scaler = StandardScaler()\n    df.iloc[:,1:] = scaler.fit_transform(df.iloc[:,1:])\n    \n    if plot:\n        plt.figure()\n        ax = df.set_index('Date').plot(kind='bar', stacked=True)\n        plt.title('Scaled Values Over Time')\n        plt.xlabel('Date')\n        plt.ylabel('Scaled Value')\n        return df, ax\n\n    \n    return df", "pass": false}
{"task_id": "299", "program": "import itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n\n    pass\nimport itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n    \"\"\"\n    Generate all subsets of a given size from a tuple and calculate the product of the sums of the subsets.\n    Additionally, return the top_n sums of the subsets. If the subset size is larger than the tuple length, return 1.\n    If the subset size is 0, return 1.\n\n    Args:\n        elements (tuple): The tuple to generate subsets from.\n        subset_size (int): The size of the subsets to generate.\n        top_n (int, optional): The number of top sums to return. Defaults to 2.\n\n    Returns:\n        int: The product of the sums of the subsets.\n        list: The top_n sums of the subsets as a pandas Series.\n    \"\"\"\n    if subset_size > len(elements):\n        return 1\n    if subset_size == 0:\n        return 1\n\n    subsets = list(itertools.combinations(elements, subset_size))\n    sums = [sum(subset) for subset in subsets]\n    product = math.prod(sums)\n\n    top_n_sums = Series(sums).nlargest(top_n)\n\n    return product, top_n_sums\nelements = (1, 2, 3, 4, 5)\nsubset_size = 3\ntop_n = 2", "problem": "Generate all subsets of a given size from a tuple and calculate the product of the sums of the subsets. Additionally, return the top_n sums of the subsets. If the subset size is larger than the tuple length, return 1. If the subset size is 0, return 1.\nThe function should output with:\n    int: The product of the sums of the subsets.\n    list: The top_n sums of the subsets as a pandas Series.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n```", "solution": "import itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n    if subset_size > len(elements) or subset_size <= 0:\n        return 1, []\n\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations if len(combination) != 0]\n    product = math.prod(sums)\n    top_sums = sorted(sums, reverse=True)[:top_n]\n    top_sums = Series(top_sums)\n    return product, top_sums", "pass": false}
{"task_id": "300", "program": "import pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Check if the DataFrame has the required columns\n    if 'Date' not in df.columns or 'Value' not in df.columns:\n        raise KeyError(\"DataFrame does not have the required columns\")\n\n    # Convert 'Date' column to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    # Split 'Value' lists into separate columns\n    df = pd.get_dummies(df, columns=['Value'], prefix='Value')\n\n    # Calculate Z-scores for each column\n    for col in df.columns:\n        if col.startswith('Value'):\n            df[col] = zscore(df[col])\n\n    # Create a box plot of Z-scores over time\n    fig, ax = plt.subplots()\n    ax.boxplot(df.groupby('Date').mean())\n    ax.set_title(\"Z-Scores Over Time\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Z-Score\")\n\n    return df, fig\ndf = pd.DataFrame({'Date': ['2022-01-01', '2022-01-02', '2022-01-03'],\n                   'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]})", "problem": "Processes a pandas DataFrame with 'Date' and 'Value' columns. The 'Value' column contains lists of numbers. Converts 'Date' to datetime, splits 'Value' lists into separate columns, calculates Z-scores, and creates a box plot for Z-scores over time.\nNote that: This function use \"Z-Scores Over Time\" for the plot title. This function use \"Date\" and \"Z-Score\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise KeyError if the DataFrame does not have the 'Date' and 'Value' columns.\nThe function should output with:\n    DataFrame: With original 'Value' lists split into separate columns and replaced with Z-scores.\n    Figure: A matplotlib figure of a box plot of Z-scores over time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    df.iloc[:,1:] = df.iloc[:,1:].apply(zscore)\n    \n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    df.set_index('Date').boxplot(ax=ax)\n    ax.set_title('Z-Scores Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Z-Score')\n    \n    return df, fig", "pass": false}
{"task_id": "301", "program": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n\n    pass\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n    date = parse(date_str)\n    date = date.astimezone(pytz.timezone(from_tz))\n    date = date.astimezone(pytz.timezone(to_tz))\n    solar_cycle_year = np.argmin(np.abs(SOLAR_CYCLE_YEARS - date.year))\n    solar_cycle_year = SOLAR_CYCLE_YEARS[solar_cycle_year]\n    solar_cycle_duration = 11\n    solar_cycle_progress = (date.year - solar_cycle_year) / solar_cycle_duration\n    solar_activity = math.cos(2 * math.pi * solar_cycle_progress)\n    return solar_activity", "problem": "Calculate solar activity based on the date and time, taking into account the solar cycle of 11 years.\nThe function should output with:\n    float: The solar activity between 0 and 1. The value represents the solar activity\n    calculated using a cosine function based on the years since the closest solar cycle year.\nYou should write self-contained code starting with:\n```\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n```", "solution": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    given_date = parse(date_str).replace(tzinfo=from_tz)\n    converted_date = given_date.astimezone(to_tz)\n\n    solar_cycle_year = SOLAR_CYCLE_YEARS[np.argmin(np.abs(SOLAR_CYCLE_YEARS - converted_date.year))]\n    years_since_solar_cycle_year = abs(converted_date.year - solar_cycle_year)\n\n    solar_activity = math.cos(math.pi * years_since_solar_cycle_year / 11)\n\n    return solar_activity", "pass": false}
{"task_id": "302", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes a pandas DataFrame by splitting lists in the 'Value' column into separate columns, calculates the Pearson correlation coefficient between these columns, and optionally visualizes the correlation matrix using a heatmap.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        plot (bool, optional): Whether to plot the correlation matrix. Defaults to False.\n\n    Raises:\n        ValueError: If the DataFrame input is empty or have invalid 'Value'.\n\n    Returns:\n        pandas.DataFrame: A pandas DataFrame containing the correlation coefficients among the lists in the 'Value' column.\n        matplotlib.Axes: A matplotlib Axes object containing the heatmap plot, returned if 'plot' is True.\n    \"\"\"\n    # Check if the DataFrame is empty or have invalid 'Value'\n    if df.empty or not isinstance(df['Value'].iloc[0], list):\n        raise ValueError(\"Invalid DataFrame input\")\n\n    # Split the lists in the 'Value' column into separate columns\n    df = pd.concat([df, pd.DataFrame(df['Value'].tolist(), index=df.index)], axis=1)\n    df = df.drop(columns=['Value'])\n\n    # Calculate the Pearson correlation coefficient between the columns\n    corr = df.corr(method='pearson')\n\n    # Optionally plot the correlation matrix using a heatmap\n    if plot:\n        fig, ax = plt.subplots(figsize=(10, 10))\n        sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)\n        ax.set_title(\"Correlation Heatmap\")\n        return df, ax\n\n    return df\ndf = pd.DataFrame({'Date': ['2022-01-01', '2022-01-02', '2022-01-03'],\n                   'Value': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]})", "problem": "Processes a pandas DataFrame by splitting lists in the 'Value' column into separate columns, calculates the Pearson correlation coefficient between these columns, and optionally visualizes the correlation matrix using a heatmap.\nNote that: This function use \"Correlation Heatmap\" as the title of the heatmap plot\nThe function should raise the exception for: If the DataFrame input is empty or have invalid 'Value', this function will raise ValueError.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the correlation coefficients among the lists in the 'Value' column.\n    Axes (optional): A matplotlib Axes object containing the heatmap plot, returned if 'plot' is True.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n\n    if not isinstance(df, pd.DataFrame) or 'Value' not in df or 'Date' not in df or len(df.index) == 0:\n        raise ValueError()\n    \n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    corr_df = df.iloc[:, 1:].corr()\n\n    if plot:\n        plt.figure()\n        heatmap = sns.heatmap(corr_df, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        return corr_df, heatmap\n\n    return corr_df", "pass": false}
{"task_id": "303", "program": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef task_func(date_str, from_tz, to_tz):\n\n    pass\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef task_func(date_str, from_tz, to_tz):\n    date = parse(date_str)\n    date = date.astimezone(pytz.timezone(from_tz))\n    date = date.astimezone(pytz.timezone(to_tz))\n    year = date.year\n    month = date.month\n    day = date.day\n    hour = date.hour\n    minute = date.minute\n    second = date.second\n    moon_phase = 0\n    for i in range(len(MOON_PHASES_YEARS)):\n        if year > MOON_PHASES_YEARS[i]:\n            moon_phase += 1\n    moon_phase = moon_phase / len(MOON_PHASES_YEARS)\n    return moon_phase", "problem": "Calculate the moon phase by the date and time taking into account the lunar phase cycle of 7 years. The function uses a constant array `MOON_PHASES_YEARS` to determine the reference years for the moon phases.\nThe function should output with:\n    float: The moon phase between 0 and 1. A value of 0 indicates a new moon and a value of 1 indicates a full moon.\nYou should write self-contained code starting with:\n```\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef task_func(date_str, from_tz, to_tz):\n```", "solution": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef task_func(date_str, from_tz, to_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    given_date = parse(date_str).replace(tzinfo=from_tz)\n    converted_date = given_date.astimezone(to_tz)\n\n    moon_phase_year = MOON_PHASES_YEARS[np.argmin(np.abs(MOON_PHASES_YEARS - converted_date.year))]\n    years_since_moon_phase_year = abs(converted_date.year - moon_phase_year)\n\n    moon_phase = math.sin(math.pi * years_since_moon_phase_year / 7)\n\n    return moon_phase", "pass": true}
{"task_id": "304", "program": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if df.empty:\n        return 0, 0\n    # Convert lists to separate columns\n    df = pd.get_dummies(df, columns=['list_of_numbers'])\n    # Perform PCA\n    pca = PCA(n_components=len(df.columns))\n    pca_df = pca.fit_transform(df)\n    # Get explained variance ratio\n    explained_variance_ratio = pca.explained_variance_ratio_\n    # Create bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(explained_variance_ratio)), explained_variance_ratio)\n    ax.set_title('Explained Variance Ratio of Principal Components')\n    ax.set_xlabel('Principal Component')\n    ax.set_ylabel('Explained Variance Ratio')\n    return explained_variance_ratio, ax", "problem": "Processes a DataFrame containing dates and lists of numbers. It converts the lists into separate columns, performs Principal Component Analysis (PCA), and returns the explained variance ratio of the principal components along with a bar chart visualizing this ratio. Returns 0,0 if the input DataFrame is empty.\nNote that: The function use \"Explained Variance Ratio of Principal Components\" for the plot title. The function use \"Principal Component\" and \"Explained Variance Ratio\" as the xlabel and ylabel respectively.\nThe function should output with:\n    tuple: (explained_variance_ratio, ax)\n    explained_variance_ratio (ndarray): The explained variance ratio of the principal components.\n    ax (Axes): The matplotlib Axes object for the variance ratio bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    # Data preparation\n\n    if df.empty:\n        return 0,0\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    # Performing PCA\n    pca = PCA()\n    pca.fit(df.iloc[:,1:])\n    \n    # Extracting explained variance ratio\n    explained_variance_ratio = pca.explained_variance_ratio_\n    \n    # Creating bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(explained_variance_ratio)), explained_variance_ratio)\n    ax.set_title('Explained Variance Ratio of Principal Components')\n    ax.set_xlabel('Principal Component')\n    ax.set_ylabel('Explained Variance Ratio')\n    \n    return explained_variance_ratio, ax", "pass": false}
{"task_id": "305", "program": "from collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n\n    pass\nfrom collections import Counter\nimport itertools\nimport random\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n    \"\"\"\n    Count the frequency of each letter in a list of lists. If a list is empty, fill it with a random sample from the alphabet, and then count the letters.\n    The function should output with:\n        Counter: A Counter object with the frequency of each letter.\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Initialize the counter\n    counter = Counter()\n\n    # Iterate over the list of lists\n    for lst in list_of_lists:\n        # If the list is empty, fill it with a random sample from the alphabet\n        if not lst:\n            lst = list(random.sample(ALPHABET, len(ALPHABET)))\n\n        # Count the letters in the list\n        for letter in lst:\n            counter[letter] += 1\n\n    # Return the counter\n    return counter\nlist_of_lists = [\n    ['a', 'b', 'c', 'd', 'e'],\n    ['f', 'g', 'h', 'i', 'j'],\n    ['k', 'l', 'm', 'n', 'o'],\n    ['p', 'q', 'r', 's', 't'],\n    ['u', 'v', 'w', 'x', 'y'],\n    ['z']\n]\nseed = 0", "problem": "Count the frequency of each letter in a list of lists. If a list is empty, fill it with a random sample from the alphabet, and then count the letters.\nThe function should output with:\n    Counter: A Counter object with the frequency of each letter.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n```", "solution": "from collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    flattened_list = list(itertools.chain(*list_of_lists))\n\n    for list_item in list_of_lists:\n        if list_item == []:\n            flattened_list += random.sample(ALPHABET, 10)\n\n    counter = Counter(flattened_list)\n    \n    return counter", "pass": false}
{"task_id": "306", "program": "import os\nimport logging\ndef task_func(directory):\n\n    pass\nimport os\nimport logging\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n    Note that: Removed files are logged in 'jquery_removal.log' file.\n    The function should raise the exception for: If the specified directory does not exist the code would raise FileNotFoundError.\n    The function should output with:\n        tuple: A tuple containing two elements:\n        int: The number of files removed.\n        list: The names of the removed files.\n    \"\"\"\n    # Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Initialize the logger\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    file_handler = logging.FileHandler('jquery_removal.log')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n    # Initialize the number of files removed and the list of removed files\n    num_removed = 0\n    removed_files = []\n\n    # Iterate over the files in the directory\n    for file in os.listdir(directory):\n        # Check if the file name contains 'jquery'\n        if 'jquery' in file:\n            # Remove the file\n            os.remove(os.path.join(directory, file))\n            # Log the removal\n            logger.info(f\"Removed file '{file}' from directory '{directory}'.\")\n            # Increment the number of files removed and add the file name to the list of removed files\n            num_removed += 1\n            removed_files.append(file)\n\n    # Return the number of files removed and the list of removed files\n    return num_removed, removed_files", "problem": "Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\nNote that: Removed files are logged in 'jquery_removal.log' file.\nThe function should raise the exception for: If the specified directory does not exist the code would raise FileNotFoundError.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    int: The number of files removed.\n    list: The names of the removed files.\nYou should write self-contained code starting with:\n```\nimport os\nimport logging\ndef task_func(directory):\n```", "solution": "import os\nimport logging\ndef task_func(directory):\n\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    \n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Get all files in the directory\n    files = os.listdir(directory)\n\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n\n    return removed_files, removed_file_names", "pass": false}
{"task_id": "307", "program": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n\n    pass\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n    \"\"\"\n    Create a histogram from the data in a list of lists. If any sublist is empty, it will be filled with 5 random integers ranging from 0 to 100 (both inclusive) The histogram will then be constructed using the combined data from all sublists.\n    The function should output with:\n        matplotlib.axes._axes.Axes: The histogram plot object.\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Initialize an empty list to store the combined data\n    combined_data = []\n\n    # Iterate over the sublists and fill them with random data if they are empty\n    for sublist in list_of_lists:\n        if not sublist:\n            sublist = [random.randint(0, 100) for _ in range(5)]\n        combined_data.extend(sublist)\n\n    # Create the histogram\n    ax = sns.histplot(combined_data)\n\n    # Return the histogram plot object\n    return ax\nlist_of_lists = [[1, 2, 3], [], [4, 5], [6, 7, 8, 9]]", "problem": "Create a histogram from the data in a list of lists. If any sublist is empty, it will be filled with 5 random integers ranging from 0 to 100 (both inclusive) The histogram will then be constructed using the combined data from all sublists.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The histogram plot object.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n```", "solution": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    data = []\n    # Initialize a fresh plot\n    plt.figure()\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(5)]\n\n    plot = sns.histplot(data)\n    return plot", "pass": false}
{"task_id": "308", "program": "import pandas as pd\nfrom statistics import mean\nimport random\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n\n    pass\nimport pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    # Generate random grades for each student and subject\n    grades = {student: {field: random.randint(0, 100) for field in FIELDS} for student in STUDENTS}\n\n    # Calculate the average grade for each student and subject\n    averages = {student: {field: mean(grades[student][field]) for field in FIELDS} for student in STUDENTS}\n\n    # Add the average grade for each subject to the grades DataFrame\n    grades['Average'] = {field: mean(averages[student][field] for student in STUDENTS) for field in FIELDS}\n\n    # Add the average grade for each student to the grades DataFrame\n    grades['Average Grade'] = {student: mean(averages[student][field] for field in FIELDS) for student in STUDENTS}\n\n    # Return the grades DataFrame\n    return grades", "problem": "Create a report on students' grades in different subjects and then calculate the average grade for each student and subject.\nNote that: This function does not take any input parameters and generates a report based on predefined constants and additional fields from input (if any). This function use 'Average' as the row name for the average grade for each subject. This function use 'Average Grade' as the column name for the average grade for each student Grade of each subject is between 0 to 100.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the columns being subjects, each student's grades, and their average grades.\n    The DataFrame also includes the average grade per subject.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom statistics import mean\nimport random\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n```", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n\n    FIELDS_ALL = FIELDS + additional_fields\n    # Generate random grades for each student in each field\n    report_data = {field: [random.randint(0, 100) for _ in STUDENTS] for field in FIELDS_ALL}\n\n    # Create DataFrame from the generated data\n    df = pd.DataFrame(report_data, index=STUDENTS)\n    # Calculate the average grade for each student\n    df['Average Grade'] = df.apply(mean, axis=1)\n    # Calculate the average grade for each subject\n    df.loc['Average'] = df.apply(mean)\n\n    return df", "pass": false}
{"task_id": "309", "program": "import numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n\n    pass\nimport numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n    \"\"\"\n    Scale the values in a list of lists to a (0,1) range using MinMaxScaler. If any inner list is empty, the function fills it with five random integers between 0 and 100, and then scales the values.\n\n    Args:\n        list_of_lists (list): A list of lists containing values to be scaled.\n        seed (int, optional): Random seed for reproducibility. Defaults to 42.\n\n    Returns:\n        list of list of float: A list of lists containing scaled values between the range [0, 1].\n    \"\"\"\n    random.seed(seed)\n    scaler = MinMaxScaler()\n    scaled_lists = []\n    for inner_list in list_of_lists:\n        if not inner_list:\n            inner_list = [random.randint(0, 100) for _ in range(5)]\n        scaled_lists.append(scaler.fit_transform(inner_list.reshape(-1, 1)).ravel().tolist())\n    return scaled_lists\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]", "problem": "Scale the values in a list of lists to a (0,1) range using MinMaxScaler. If any inner list is empty, the function fills it with five random integers between 0 and 100, and then scales the values.\nThe function should output with:\n    list of list of float: A list of lists containing scaled values between the range [0, 1].\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n```", "solution": "import numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n    np.random.seed(seed)\n    random.seed(seed)\n    scaled_data = []\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    for list_ in list_of_lists:\n        if not list_:\n            list_ = [random.randint(0, 100) for _ in range(5)]\n        # Reshape the data to fit the scaler\n        reshaped_data = np.array(list_).reshape(-1, 1)\n        scaled_list = scaler.fit_transform(reshaped_data)\n        # Flatten the list and append to the result\n        scaled_data.append(scaled_list.flatten().tolist())\n    \n    return scaled_data", "pass": false}
{"task_id": "310", "program": "import os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n\n    pass\nimport os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    # Create a list of dictionaries to store the data\n    data = [{} for _ in range(PEOPLE_COUNT)]\n\n    # Generate random data for each person\n    for i in range(PEOPLE_COUNT):\n        data[i]['Name'] = f'Person {i}'\n        data[i]['Age'] = random.randint(18, 80)\n        data[i]['Height'] = random.uniform(1.5, 2.5)\n        data[i]['Weight'] = random.uniform(40, 150)\n\n    # Calculate the average age, height, and weight\n    average_age = mean([person['Age'] for person in data])\n    average_height = mean([person['Height'] for person in data])\n    average_weight = mean([person['Weight'] for person in data])\n\n    # Append the average data to the data list\n    data.append({'Name': 'Average', 'Age': average_age, 'Height': average_height, 'Weight': average_weight})\n\n    # Write the data to a CSV file\n    with open(filename, 'w', newline='') as csvfile:\n        writer = csv.DictWriter(csvfile, fieldnames=COLUMNS)\n        writer.writeheader()\n        for person in data:\n            writer.writerow(person)\n\n    return filename\nfilename = 'people.csv'", "problem": "Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight. It also calculates and appends the average age, height, and weight at the end of the file.\nThe function should output with:\n    str: The path of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n```", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n\n    filepath = os.path.join(os.getcwd(), filename)\n    with open(filepath, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n\n        data = [\n            ['Person_' + str(i), random.randint(20, 50), random.randint(150, 200), random.randint(50, 100)] \n            for i in range(1, PEOPLE_COUNT+1)\n        ]\n        writer.writerows(data)\n\n        averages = ['Average', mean([row[1] for row in data]), \n                    mean([row[2] for row in data]), mean([row[3] for row in data])]\n        writer.writerow(averages)\n\n    return filepath", "pass": true}
{"task_id": "311", "program": "import numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n\n    pass\nimport numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n    if not list_of_lists:\n        random.seed(seed)\n        list_of_lists = [[random.randint(0, 100) for _ in range(size)] for _ in range(size)]\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    return {\n        \"mean\": np.mean(flattened_list),\n        \"median\": np.median(flattened_list),\n        \"mode\": stats.mode(flattened_list)[0][0]\n    }\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the mean, median, and mode of values in a list of lists. If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, and then calculate the statistics.\nThe function should output with:\n    dict: A dictionary with the mean, median, and mode of the values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n```", "solution": "import numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    \n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "pass": false}
{"task_id": "312", "program": "import random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n\n    pass\nimport random\nimport matplotlib.pyplot as plt\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n    # Generate a Gaussian distribution\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.hist(distribution, bins=bins)\n\n    return distribution, ax", "problem": "Generate a Gaussian distribution and plot its histogram.\nThe function should output with:\n    tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n```", "solution": "import random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "pass": true}
{"task_id": "313", "program": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n\n    pass\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    \"\"\"\n    Organize files in a directory based on the first text that is not enclosed in square brackets.\n    Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\n    The function should output with:\n        tuple:\n            str: The directory path with organized files.\n            dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\n    \"\"\"\n    # Get the list of files in the directory\n    files = os.listdir(directory)\n\n    # Create a dictionary to store the files that need to be moved\n    files_to_move = {}\n\n    # Iterate over the files and check if they contain the text that is not enclosed in square brackets\n    for file in files:\n        with open(os.path.join(directory, file), \"r\") as f:\n            text = f.read()\n            match = re.search(r\"\\[[^\\]]+\\]\", text)\n            if match:\n                # If the text is enclosed in square brackets, skip the file\n                continue\n            else:\n                # If the text is not enclosed in square brackets, get the first line of the file\n                first_line = text.split(\"\\n\")[0]\n                # Create a subdirectory with the first line as the name\n                subdirectory = os.path.join(directory, first_line)\n                if not os.path.exists(subdirectory):\n                    os.makedirs(subdirectory)\n                # Add the file to the dictionary with the subdirectory as the key\n                if subdirectory not in files_to_move:\n                    files_to_move[subdirectory] = []\n                files_to_move[subdirectory].append(file)\n\n    # Move the files to the corresponding subdirectories\n    for subdirectory, files in files_to_move.items():\n        for file in files:\n            shutil.move(os.path.join(directory, file), subdirectory)\n\n    # Return the directory path and the dictionary of files moved\n    return directory, files_to_move", "problem": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    DATE_FORMAT = '%Y%m%d%H%M%S'\n    moved_files = {}\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), 'r') as file:\n            content = file.read()\n            match = re.search('(.*?)\\[.*?\\]', content)\n            if match:\n                subdirectory = match.group(1).strip()\n\n                if not os.path.exists(os.path.join(directory, subdirectory)):\n                    os.makedirs(os.path.join(directory, subdirectory))\n\n                new_filename = f\"{filename.split('.')[0]}_{datetime.now().strftime(DATE_FORMAT)}.{filename.split('.')[1]}\"\n                shutil.move(os.path.join(directory, filename), os.path.join(directory, subdirectory, new_filename))\n                \n                if subdirectory not in moved_files:\n                    moved_files[subdirectory] = []\n                moved_files[subdirectory].append(new_filename)\n\n    return directory, moved_files", "pass": false}
{"task_id": "314", "program": "import socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n\n    pass\nimport socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n    try:\n        conn = http.client.HTTPSConnection(SERVER_NAME, SERVER_PORT)\n        conn.request(\"GET\", path)\n        response = conn.getresponse()\n        return response.read()\n    except ssl.SSLError as e:\n        raise e", "problem": "Makes an HTTPS GET request to a specified server and path, and retrieves the response.\nThe function should raise the exception for: ssl.SSLError: If there is an SSL handshake error.\nThe function should output with:\n    str: The response body from the server as a string.\nYou should write self-contained code starting with:\n```\nimport socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n```", "solution": "import socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n    context = ssl.create_default_context()\n\n    with socket.create_connection((SERVER_NAME, SERVER_PORT)) as sock:\n        with context.wrap_socket(sock, server_hostname=SERVER_NAME) as ssock:\n            conn = http.client.HTTPSConnection(SERVER_NAME, SERVER_PORT, context=context)\n            conn.request('GET', path)\n            response = conn.getresponse()\n            return response.read().decode()", "pass": false}
{"task_id": "315", "program": "import os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n\n    pass\nimport os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n    \"\"\"\n    Get a list of files in a directory and send that list by e-mail to a specific recipient using a provided SendGrid API key.\n    The function should raise the exception for:\n        FileNotFoundError: If the specified directory does not exist.\n        HTTPError: If an HTTP error occurs during the sending process.\n        Exception: For any other exceptions that may occur during the execution.\n    The function should output with:\n        bool: True if the email was sent successfully. Specifically, a successful send is indicated by an HTTP status code in the 2xx range, which denotes success. False is returned if the directory does not exist.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.isdir(dir):\n        raise FileNotFoundError(f\"Directory {dir} does not exist\")\n\n    # Get a list of files in the directory\n    files = os.listdir(dir)\n\n    # Create a SendGrid API client\n    sg = SendGridAPIClient(api_key)\n\n    # Create a SendGrid mail object\n    mail = Mail(\n        from_email=\"sender@example.com\",\n        to_emails=recipient_email,\n        subject=\"File list\",\n        html_content=f\"<p>Here is the list of files in {dir}:</p><ul>{files}</ul>\"\n    )\n\n    # Send the email\n    try:\n        response = sg.send(mail)\n    except HTTPError as e:\n        raise HTTPError(f\"HTTP error occurred during email sending: {e}\")\n    except Exception as e:\n        raise Exception(f\"An unexpected error occurred during email sending: {e}\")\n\n    # Check if the email was sent successfully\n    if response.status_code // 100 == 2:\n        return True\n    else:\n        return False", "problem": "Get a list of files in a directory and send that list by e-mail to a specific recipient using a provided SendGrid API key.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. HTTPError: If an HTTP error occurs during the sending process. Exception: For any other exceptions that may occur during the execution.\nThe function should output with:\n    bool: True if the email was sent successfully. Specifically, a successful send is indicated by an HTTP status code in the 2xx range, which denotes success. False is returned if the directory does not exist.\nYou should write self-contained code starting with:\n```\nimport os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n```", "solution": "import os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n    try:\n        file_list = os.listdir(dir)\n    except:\n        raise FileNotFoundError(f\"Directory '{dir}' does not exist.\")\n\n    file_list_str = ', '.join(file_list)\n\n    message = Mail(\n        from_email='from_email@example.com',\n        to_emails=recipient_email,\n        subject=f'Directory Listing for {dir}',\n        plain_text_content=file_list_str)\n\n    try:\n        sg = SendGridAPIClient(api_key)\n        response = sg.send(message)\n        # Assuming success codes are in the 2xx range\n        return 200 <= response.status_code < 300\n    except HTTPError as e:\n        print(f\"HTTP error occurred: {e}\")\n        raise\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        raise", "pass": false}
{"task_id": "316", "program": "import pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n\n    pass\nimport pandas as pd\nimport random\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n    \"\"\"\n    Generate a category distribution within a specified range and return as a DataFrame.\n    The function should output with:\n        DataFrame: A pandas DataFrame that has two columns: 'Category' (category names) and 'Count' (count of each category).\n    \"\"\"\n    # Generate random values within the specified range\n    values = [random.randint(value_range[0], value_range[1]) for _ in range(100)]\n\n    # Create a dictionary to store the category counts\n    category_counts = {}\n    for category in CATEGORIES:\n        category_counts[category] = 0\n\n    # Iterate through the values and increment the corresponding category count\n    for value in values:\n        if value <= 20:\n            category_counts['A'] += 1\n        elif value <= 40:\n            category_counts['B'] += 1\n        elif value <= 60:\n            category_counts['C'] += 1\n        elif value <= 80:\n            category_counts['D'] += 1\n        else:\n            category_counts['E'] += 1\n\n    # Create a DataFrame from the category counts\n    df = pd.DataFrame(category_counts.items(), columns=['Category', 'Count'])\n\n    return df", "problem": "Generate a category distribution within a specified range and return as a DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame that has two columns: 'Category' (category names) and 'Count' (count of each category).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n```", "solution": "import pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n\n    distribution = {category: random.randint(*value_range) for category in CATEGORIES}\n    df = pd.DataFrame(list(distribution.items()), columns=['Category', 'Count'])\n\n    return df", "pass": false}
{"task_id": "317", "program": "import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n\n    pass\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n    # Extract all texts not enclosed in square brackets into a string\n    text = re.sub(r'\\[.*?\\]', '', example_str)\n\n    # Create a TF-IDF vectorizer\n    vectorizer = TfidfVectorizer()\n\n    # Convert the text to a matrix of TF-IDF features\n    X = vectorizer.fit_transform([text])\n\n    # Get the TF-IDF scores for each word\n    scores = X.toarray()[0]\n\n    # Create a dictionary with words as keys and TF-IDF scores as values\n    word_scores = {}\n    for i, word in enumerate(vectorizer.get_feature_names()):\n        word_scores[word] = scores[i]\n\n    return word_scores\nexample_str = \"This is an example [string] with some words in square brackets.\"", "problem": "Extract all texts not enclosed in square brackets into a string and calculate the TF-IDF values which are returned as a dictionary.\nThe function should output with:\n    dict: A dictionary with words as keys and TF-IDF scores as values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n```", "solution": "import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n    pattern = r'\\[.*?\\]'\n    text = re.sub(pattern, '', example_str)\n    if not text.strip():\n        return {}\n\n    tfidf_vectorizer = TfidfVectorizer()\n    tfidf_matrix = tfidf_vectorizer.fit_transform([text])\n    feature_names = tfidf_vectorizer.get_feature_names_out()\n    tfidf_scores = dict(zip(feature_names, np.squeeze(tfidf_matrix.toarray())))\n\n    return tfidf_scores", "pass": false}
{"task_id": "318", "program": "import random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n\n    pass\nimport random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n    # Generate random points within the circle\n    x_coords = [random.uniform(-radius, radius) for _ in range(points_count)]\n    y_coords = [random.uniform(-radius, radius) for _ in range(points_count)]\n    points = [(x, y) for x, y in zip(x_coords, y_coords)]\n\n    # Filter out points outside the circle\n    points = [point for point in points if math.hypot(point[0], point[1]) <= radius]\n\n    # Plot the points\n    fig, ax = plt.subplots()\n    ax.scatter(x_coords, y_coords, s=1)\n    ax.set_aspect('equal')\n    return ax", "problem": "Generate a specified (i.e., points_counts) number of random points within a circle of a given radius and plot them using a scatter plot.\nNote that: All settings of the scatter plot are the default version. The aspect ratio of the plot is set to 'equal' to maintain proportions.\nThe function should output with:\n    Axes: The matplotlib Axes object representing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n```", "solution": "import random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n\n    points = [(radius * math.sqrt(random.random()) * math.cos(2 * math.pi * random.random()), \n               radius * math.sqrt(random.random()) * math.sin(2 * math.pi * random.random())) \n              for _ in range(points_count)]\n\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*points))\n    ax.set_aspect('equal', adjustable='box')\n    return ax", "pass": true}
{"task_id": "319", "program": "import re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n\n    pass\nimport re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n    # Extract all texts that are not enclosed in square brackets from the given string\n    text = re.sub(r'\\[.*?\\]', '', example_str)\n\n    # Create a frequency distribution of the words\n    fdist = FreqDist(text.split())\n\n    # Plot the frequency distribution\n    ax = fdist.plot(20)\n    plt.show()\n\n    # Return the top_n most common words in the frequency distribution as a dictionary\n    top_words = {word: fdist[word] for word in fdist.keys()[:top_n]}\n    return ax, top_words\nexample_str = \"This is an example string [with some text in square brackets] and more text.\"", "problem": "Extract all texts that are not enclosed in square brackets from the given string and plot a frequency distribution of the words. Also return the top_n most common words in the frequency distribution as a dictionary.\nThe function should output with:\n    Axes: A matplotlib Axes object representing the frequency distribution plot.\n    dict: A dictionary containing the top_n most common words and their frequencies.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n```", "solution": "import re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n    text = ' '.join(re.findall('(.*?)\\\\[.*?\\\\]', example_str))\n    words = text.split()\n    fdist = FreqDist(words)\n\n    if top_n > len(fdist):\n        top_n = len(fdist)\n    # Initialize a fresh plot for the frequency distribution but do not show it\n    plt.figure()\n    ax = fdist.plot(top_n, cumulative=False, show=False)\n    plt.close()\n\n    top_n_words = dict(fdist.most_common(top_n))\n    return ax, top_n_words", "pass": false}
{"task_id": "320", "program": "import subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n\n    pass\nimport subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n    if not file_list:\n        return None\n    file_path = os.path.join(directory, random.choice(file_list))\n    process = subprocess.Popen(file_path, shell=True)\n    exit_code = process.wait()\n    return exit_code", "problem": "Select a random file from a given list of files in a specified directory and run it as a subprocess.\nThe function should output with:\n    int: The exit code of the subprocess, or None if the process is still running or if the file list is empty.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n```", "solution": "import subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n\n    if not file_list:\n        return None\n\n    file = random.choice(file_list)\n    file_path = os.path.join(directory, file)\n    try:\n        process = subprocess.Popen(file_path)\n        process.wait()  # wait for the process to complete\n        return process.returncode  # return the exit code\n    except Exception as e:\n        return None", "pass": false}
{"task_id": "321", "program": "import pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n\n    pass\nimport pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n    # Extract names from text\n    names = re.findall(r'\\w+', text)\n\n    # Create a dictionary to store the frequency of each name\n    name_freq = {}\n    for name in names:\n        if name not in name_freq:\n            name_freq[name] = 1\n        else:\n            name_freq[name] += 1\n\n    # Create a pandas Series with the frequency of each name\n    name_freq_series = pd.Series(name_freq)\n\n    # Create a bar chart of the name frequencies\n    ax = name_freq_series.plot(kind='bar')\n\n    # Calculate the skewness and kurtosis of the name frequencies\n    skewness = stats.skew(name_freq_series)\n    kurtosis = stats.kurtosis(name_freq_series)\n\n    # Return the name frequencies, bar chart, skewness, and kurtosis\n    return name_freq_series, ax, skewness, kurtosis", "problem": "Extracts all names from a given text string that are not surrounded by square brackets and counts the frequency of each extracted name. It then creates a bar chart of the name frequencies and returns the name frequencies as a pandas Series and the bar chart plot's axes object along with the skewness and kurtosis of the name frequencies. If the skewness and kurtosis are nan, they are returned as None.\nThe function should output with:\n    tuple: A tuple containing:\n    pd.Series: A pandas Series with the frequency of each name.\n    Axes: A bar chart plot showing the name frequencies. If no names are found, this will be None.\n    float: The skewness of the name frequencies.\n    float: The kurtosis of the name frequencies.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n```", "solution": "import pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n    # Extracting names from the text\n    names = re.findall(r'(.*?)(?:\\[.*?\\]|$)', text)\n    names = [name.strip() for name in names if name.strip()]  # Removing any empty or whitespace names\n\n    # Counting name frequencies\n    name_freqs = pd.Series(names).value_counts()\n    \n    # Creating a bar chart of name frequencies if there are names found\n    if not name_freqs.empty:\n        ax = name_freqs.plot(kind='bar', title=\"Name Frequencies\")\n        skewness = stats.skew(name_freqs)\n        kurtosis = stats.kurtosis(name_freqs)\n    else:\n        ax = skewness = kurtosis = None\n\n    if skewness == float('nan'):\n        skewness = None\n    if kurtosis == float('nan'):\n        kurtosis = None\n    \n    return name_freqs, ax, skewness, kurtosis", "pass": false}
{"task_id": "322", "program": "import subprocess\nimport os\nimport shutil\nimport sys\n# Constants\nDIRECTORY = 'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = 'c:\\Program Files\\VMware\\VMware Server\\Backup'\ndef task_func(filename):\n\n    pass\nimport subprocess\nimport os\nimport shutil\nimport sys\nDIRECTORY = 'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = 'c:\\Program Files\\VMware\\VMware Server\\Backup'\ndef task_func(filename):\n    # Check if the file exists in the directory\n    if not os.path.isfile(os.path.join(DIRECTORY, filename)):\n        return -1\n\n    # Create the backup directory if it doesn't exist\n    if not os.path.isdir(BACKUP_DIRECTORY):\n        os.makedirs(BACKUP_DIRECTORY)\n\n    # Copy the file to the backup directory\n    shutil.copy(os.path.join(DIRECTORY, filename), BACKUP_DIRECTORY)\n\n    # Execute the file as a subprocess\n    process = subprocess.Popen(os.path.join(BACKUP_DIRECTORY, filename), shell=True)\n    process.wait()\n\n    # Return the exit code of the subprocess\n    return process.returncode", "problem": "Backs up a specified file from a predefined directory to a backup directory and executes it as a subprocess.\nThe function should output with:\n    int: The exit code of the subprocess, or -1 if the backup process fails.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport shutil\nimport sys\n# Constants\nDIRECTORY = 'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = 'c:\\Program Files\\VMware\\VMware Server\\Backup'\ndef task_func(filename):\n```", "solution": "import subprocess\nimport os\nimport shutil\nimport sys\n# Constants\nDIRECTORY = 'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = 'c:\\Program Files\\VMware\\VMware Server\\Backup'\ndef task_func(filename):\n\n    file_path = os.path.join(DIRECTORY, filename)\n    backup_path = os.path.join(BACKUP_DIRECTORY, filename)\n\n    # Backup the file\n    try:\n        shutil.copy(file_path, backup_path)\n    except Exception as e:\n        print(f\"Failed to backup the file: {e}\", file=sys.stderr)\n        return -1\n    try:\n        # Execute the file as a subprocess\n        process = subprocess.Popen(file_path)\n        return process.poll()  # return the exit code\n    except Exception as e:\n        print(f\"Failed to execute the file: {e}\", file=sys.stderr)\n        return -1", "pass": false}
{"task_id": "323", "program": "import re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n\n    pass\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n    \"\"\"\n    Extract names from a string that aren't enclosed by square brackets, tokenize the names into words, and count the frequency of each word. Finally, fit a mixture of num_gaussians 1-D Gaussian distributions to the word frequencies and return the means and variances of the fitted Gaussians.\n    The function should raise the exception for:\n        ValueError: If num_gaussians is less than or equal to 0.\n        Exception: If num_gaussians is greater than the number of unique words.\n    The function should output with:\n        dict: A dictionary with the frequency of each word.\n    \"\"\"\n    # Extract names from the text that aren't enclosed by square brackets\n    names = re.findall(r'\\[[^]]*\\]|[^\\s\\[\\]]+', text)\n\n    # Tokenize the names into words\n    words = [word for name in names for word in name.split()]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Fit a mixture of num_gaussians 1-D Gaussian distributions to the word frequencies\n    gmm = GaussianMixture(n_components=num_gaussians, random_state=seed)\n    gmm.fit(word_counts.values())\n\n    # Return the means and variances of the fitted Gaussians\n    return {word: (gmm.means_[i], gmm.covariances_[i][0]) for i, word in enumerate(word_counts)}\ntext = \"Hello, my name is [John Doe]. I am a [Data Scientist].\"", "problem": "Extract names from a string that aren't enclosed by square brackets, tokenize the names into words, and count the frequency of each word. Finally, fit a mixture of num_gaussians 1-D Gaussian distributions to the word frequencies and return the means and variances of the fitted Gaussians.\nThe function should raise the exception for: ValueError: If num_gaussians is less than or equal to 0. Exception: If num_gaussians is greater than the number of unique words.\nThe function should output with:\n    dict: A dictionary with the frequency of each word.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n```", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n    np.random.seed(seed)\n    names = re.findall(r'(.*?)(?:\\[.*?\\]|$)', text)\n    words = ' '.join(names).split()\n    word_freqs = Counter(words)\n    if num_gaussians <= 0:\n        raise ValueError('Number of Gaussians must be greater than 0.')\n    if len(word_freqs) < num_gaussians:\n        raise Exception('Number of Gaussians must be less than or equal to the number of unique words.')\n\n    mixture = GaussianMixture(n_components=num_gaussians)\n    mixture.fit([[freq] for freq in word_freqs.values()])\n    means = mixture.means_\n    return dict(word_freqs), means", "pass": false}
{"task_id": "324", "program": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n\n    pass\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocesses at the same time.\n    The function should output with:\n        list: The exit codes of the subprocesses.\n    \"\"\"\n    # Create a list to store the exit codes of the subprocesses\n    exit_codes = []\n\n    # Create a thread for each file in the list\n    for file in file_list:\n        # Create a thread to run the file as a subprocess\n        thread = threading.Thread(target=run_file, args=(file,))\n\n        # Start the thread\n        thread.start()\n\n        # Add the thread to the list of threads\n        threads.append(thread)\n\n    # Wait for all threads to finish\n    for thread in threads:\n        thread.join()\n\n    # Get the exit codes of the subprocesses\n    for thread in threads:\n        exit_codes.append(thread.exitcode)\n\n    # Return the list of exit codes\n    return exit_codes\ndef run_file(file):\n    \"\"\"\n    Run a file as a subprocess.\n    \"\"\"\n    # Run the file as a subprocess\n    subprocess.run(file)\nfile_list = ['file1.txt', 'file2.txt', 'file3.txt']", "problem": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n\n    exit_codes = []\n\n    def execute_file(file):\n        file_path = file\n        process = subprocess.Popen(file_path)\n        time.sleep(1)  # wait for the process to start\n        exit_codes.append(process.poll())  # store the exit code\n\n    # Start a thread for each file\n    threads = [threading.Thread(target=execute_file, args=(file,)) for file in file_list]\n    for thread in threads:\n        thread.start()\n\n    # Wait for all threads to finish\n    for thread in threads:\n        thread.join()\n\n    return exit_codes", "pass": false}
{"task_id": "325", "program": "import re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n\n    pass\nimport re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern.\n    It captures whatever is between parentheses as a single match, and any character outside the parentheses as individual matches in the string.\n\n    Args:\n        directory_path (str): The path to the directory containing the text files.\n        regex_pattern (str): The regular expression pattern to use for matching.\n\n    Returns:\n        dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n    \"\"\"\n    # Create a dictionary to store the matches\n    matches = {}\n\n    # Get a list of all text files in the directory\n    file_paths = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Iterate over the files and extract the matches\n    for file_path in file_paths:\n        # Get the file name without the path\n        file_name = os.path.basename(file_path)\n\n        # Read the file contents\n        with open(file_path, 'r') as f:\n            file_contents = f.read()\n\n        # Use the regular expression to extract the matches\n        matches[file_name] = re.findall(regex_pattern, file_contents)\n\n    return matches", "problem": "Extracts matches from all text files in a specified directory based on a regular expression pattern. It captures whatever is between parentheses as a single match, and any character outside the parentheses as individual matches in the string.\nThe function should output with:\n    dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n```", "solution": "import re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n\n    return match_dict", "pass": true}
{"task_id": "326", "program": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n\n    pass\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    # Get a list of all .bat files in the given directory\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n\n    # Create a list to store the results\n    results = []\n\n    # Iterate over the .bat files and run them\n    for bat_file in bat_files:\n        # Run the .bat file and capture its exit code\n        exit_code = subprocess.call(bat_file)\n\n        # If the exit code is not None, add the file name and exit code to the results list\n        if exit_code is not None:\n            results.append((bat_file, exit_code))\n\n    # Return the results list\n    return results", "problem": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```", "solution": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n\n    results = []\n    file_paths = glob.glob(os.path.join(directory_path, '*.bat'))\n\n    for file_path in file_paths:\n        try:\n            process = subprocess.Popen(file_path, shell=True)\n            exit_code = process.wait()\n            results.append((os.path.basename(file_path), exit_code))\n        except Exception as e:\n            print(f\"Failed to execute the file: {file_path}. Error: {e}\", file=sys.stderr)\n            results.append((os.path.basename(file_path), None))\n\n    return results", "pass": false}
{"task_id": "327", "program": "import csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n\n    pass\nimport csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n    \"\"\"\n    Counts matches from a CSV file based on a given regex pattern. By default, it captures content between parentheses as a single match and any word or sequence of non-alphanumeric characters outside as matches in a string.\n\n    Args:\n        file_path (str): The path to the CSV file.\n        regex_pattern (str): The regex pattern to use for matching.\n\n    Returns:\n        dict: A dictionary with counts of matches.\n    \"\"\"\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        matches = []\n        for row in reader:\n            for cell in row:\n                matches.extend(re.findall(regex_pattern, cell))\n    return Counter(matches)\nfile_path = 'data.csv'\nregex_pattern = r'\\(.+?\\)|\\w+|[\\W_]+'", "problem": "Counts matches from a CSV file based on a given regex pattern. By default, it captures content between parentheses as a single match and any word or sequence of non-alphanumeric characters outside as matches in a string.\nThe function should output with:\n    dict: A dictionary with counts of matches.\nYou should write self-contained code starting with:\n```\nimport csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n```", "solution": "import csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        text = ' '.join(row[0] for row in reader)\n        matches = re.findall(regex_pattern, text)\n\n    counts = Counter(matches)\n    return dict(counts)", "pass": false}
{"task_id": "328", "program": "import collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n\n    pass\nimport collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n    # Create a dictionary to store the team names and points\n    team_points = {}\n\n    # Generate random team names and points\n    for i in range(1, number_teams + 1):\n        team_name = f\"Team {i}\"\n        points = random.randint(0, 100)\n        team_points[team_name] = points\n\n    # Sort the dictionary by points in descending order\n    sorted_teams = sorted(team_points.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the sorted dictionary as an OrderedDict\n    return collections.OrderedDict(sorted_teams)", "problem": "Create a random sports ranking and sort it by points in descending order.\nNote that: Each team is assigned a name in the format \"Team i\" and a corresponding random number of points, where i ranges from 1 to the specified number of teams. The ranking is then sorted in descending order of points and returned as an OrderedDict.\nThe function should output with:\n    OrderedDict: Sorted dictionary where keys are team names and values are points.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n```", "solution": "import collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n\n    # Constants\n    \n    TEAMS = []\n    POINTS = []\n\n    for i in range(1, number_teams+1):\n        TEAMS.append(\"Team \"+str(i))\n        POINTS.append(10*i)\n    \n    shuffled_points = POINTS.copy()\n    random.shuffle(shuffled_points)\n    ranking = dict(zip(TEAMS, shuffled_points))\n\n    sorted_ranking = PriorityQueue()\n    for team, points in ranking.items():\n        sorted_ranking.put((-points, team))\n\n    sorted_ranking_dict = collections.OrderedDict()\n    while not sorted_ranking.empty():\n        points, team = sorted_ranking.get()\n        sorted_ranking_dict[team] = -points\n\n    return sorted_ranking_dict", "pass": true}
{"task_id": "329", "program": "import re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n\n    pass\nimport re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n    \"\"\"\n    Extracts matches from a JSON file based on a predefined regular pattern.\n    The default regular expression pattern is designed to extract any content between parentheses as a single match and any individual character outside the parentheses as a separate match.\n    The function should output with:\n        dict: A dictionary with the JSON file name as the key and a list of matches as values.\n        The format is: {filename: [match1, match2, ...]}.\n    \"\"\"\n    # Check if the file path is valid\n    if not os.path.isfile(file_path):\n        raise ValueError(f\"Invalid file path: {file_path}\")\n\n    # Open the JSON file and read its contents\n    with open(file_path, \"r\") as f:\n        json_data = json.load(f)\n\n    # Extract the matches using the regular expression pattern\n    matches = re.findall(regex_pattern, json_data)\n\n    # Create a dictionary with the JSON file name as the key and a list of matches as values\n    result = {os.path.basename(file_path): matches}\n\n    return result\nfile_path = \"sample.json\"", "problem": "Extracts matches from a JSON file based on a predefined regular pattern. The default regular expression pattern is designed to extract any content between parentheses as a single match and any individual character outside the parentheses as a separate match.\nThe function should output with:\n    dict: A dictionary with the JSON file name as the key and a list of matches as values.\n    The format is: {filename: [match1, match2, ...]}.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n```", "solution": "import re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n        text = ' '.join(data.values())\n        matches = re.findall(regex_pattern, text)\n\n    match_dict = {os.path.basename(file_path): matches}\n    return match_dict", "pass": false}
{"task_id": "330", "program": "import heapq\nimport random\ndef task_func(list_length:5, k:int):\n\n    pass\nimport heapq\nimport random\ndef task_func(list_length: int, k: int):\n    \"\"\"\n    Find the k largest numbers in a random-generated list using heapq.\n\n    Args:\n        list_length (int): The length of the randomly generated list.\n        k (int): The number of largest numbers to find.\n\n    Returns:\n        tuple: A tuple containing two lists:\n            list[int]: The randomly generated list of integers with the specified length.\n            list[int]: The k largest numbers found using heapq.\n    \"\"\"\n    # Generate a random list of integers with the specified length\n    random_list = [random.randint(0, 100) for _ in range(list_length)]\n\n    # Use heapq to find the k largest numbers in the list\n    largest_numbers = heapq.nlargest(k, random_list)\n\n    return random_list, largest_numbers", "problem": "Find the k largest numbers in a random-generated list using heapq.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: The k largest numbers found using heapq.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport random\ndef task_func(list_length:5, k:int):\n```", "solution": "import heapq\nimport random\ndef task_func(list_length:5, k:int):\n\n    \n    numbers = [random.randint(0, 100) for _ in range(list_length)]\n    heapq.heapify(numbers)\n    largest_numbers = heapq.nlargest(k, numbers)\n   \n    return numbers, largest_numbers", "pass": true}
{"task_id": "331", "program": "import bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 0):\n\n    pass\nimport bisect\nimport random\ndef task_func(num, list_length=5, min_value=0, max_value=0):\n    \"\"\"\n    Insert a number into a randomly generated sorted list and return the new sorted list.\n    The function should output with:\n        tuple: A tuple containing two lists:\n        list[int]: The randomly generated list of integers with the specified length.\n        list[int]: A new sorted list containing the original elements and the inserted number.\n    \"\"\"\n    # Generate a random list of integers with the specified length\n    random_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    random_list.sort()\n\n    # Insert the number into the sorted list\n    index = bisect.bisect_left(random_list, num)\n    random_list.insert(index, num)\n\n    return random_list", "problem": "Insert a number into a randomly generated sorted list and return the new sorted list.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: A new sorted list containing the original elements and the inserted number.\nYou should write self-contained code starting with:\n```\nimport bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 0):\n```", "solution": "import bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 0):\n\n    numbers = [random.randint(min_value, max_value) for _ in range(list_length)]\n    sorted_list = numbers.copy()\n    bisect.insort(sorted_list, num)\n    return numbers, sorted_list", "pass": false}
{"task_id": "332", "program": "import re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n\n    pass\nimport re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    \"\"\"\n    Count the number of non-stop words in a given text.\n    The function should output with:\n        dict: A dictionary with the words (as keys) and their counts (as values).\n    \"\"\"\n    # Remove punctuation and convert text to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text.lower())\n\n    # Tokenize text into individual words\n    words = text.split()\n\n    # Remove stop words\n    stop_words = set(stopwords.words('english'))\n    words = [word for word in words if word.lower() not in stop_words]\n\n    # Count word frequencies\n    word_counts = Counter(words)\n\n    return word_counts\ntext = \"This is a sample text for testing the function. It should count the number of non-stop words in the text.\"", "problem": "Count the number of non-stop words in a given text.\nThe function should output with:\n    dict: A dictionary with the words (as keys) and their counts (as values).\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n```", "solution": "import re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    words = re.findall(r'\\b\\w+\\b', text)\n    non_stopwords = [word for word in words if word.lower() not in set(stopwords.words('english'))]\n    count = dict(Counter(non_stopwords))\n\n    return count", "pass": false}
{"task_id": "333", "program": "import heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n\n    pass\nimport heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n    \"\"\"\n    Find the k smallest numbers in a randomly generated list using heapq.\n    The function should output with:\n        tuple: A tuple containing two lists:\n        list[int]: The randomly generated list of integers with the specified length.\n        list[int]: The k smallest numbers found using heapq.\n    \"\"\"\n    # Generate a random list of integers with the specified length\n    random_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n\n    # Use heapq to find the k smallest numbers in the list\n    smallest_numbers = heapq.nsmallest(k, random_list)\n\n    return (random_list, smallest_numbers)\nk = 3\nlist_length = 10\nmin_value = 0\nmax_value = 100", "problem": "Find the k smallest numbers in a randomly generated list using heapq.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: The k smallest numbers found using heapq.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n```", "solution": "import heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n\n    numbers = [random.randint(min_value, max_value) for _ in range(list_length)]\n    heapq.heapify(numbers)\n    smallest_numbers = heapq.nsmallest(k, numbers)\n   \n    return numbers, smallest_numbers", "pass": true}
{"task_id": "334", "program": "from nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n\n    pass\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n    # Tokenize the documents\n    tokenized_docs = [word_tokenize(doc) for doc in documents]\n\n    # Create a TF-IDF vectorizer\n    vectorizer = TfidfVectorizer()\n\n    # Fit the vectorizer to the tokenized documents\n    vectorizer.fit(tokenized_docs)\n\n    # Transform the tokenized documents into a TF-IDF matrix\n    tfidf_matrix = vectorizer.transform(tokenized_docs)\n\n    # Convert the TF-IDF matrix into a DataFrame\n    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names())\n\n    # Return the TF-IDF DataFrame\n    return tfidf_df\ndocuments = [\"This is the first document.\", \"This is the second document.\", \"This is the third document.\"]", "problem": "Calculate the TF-IDF score of the words in a list of documents.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with words as columns and documents as rows, containing the TF-IDF scores.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n```", "solution": "from nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n    vectorizer = TfidfVectorizer(tokenizer=word_tokenize)\n    tfidf_matrix = vectorizer.fit_transform(documents)\n    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return tfidf_df", "pass": false}
{"task_id": "335", "program": "import collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n\n    pass\nimport collections\nfrom queue import PriorityQueue\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n    \"\"\"\n    Create a random string of a given length from a predefined list of letters and count the frequency of each letter, returning an ordered dictionary sorted by frequency in descending order.\n    The function should output with:\n        collections.OrderedDict: An ordered dictionary where keys are letters and values are\n        their frequencies in the generated string, sorted in descending order of frequency.\n    \"\"\"\n    # Initialize an ordered dictionary to store the letter frequencies\n    letter_freq = collections.OrderedDict()\n\n    # Generate a random string of the given length\n    random_string = ''.join(random.choice(LETTERS) for _ in range(string_length))\n\n    # Iterate over the letters in the random string\n    for letter in random_string:\n        # If the letter is already in the dictionary, increment its frequency\n        if letter in letter_freq:\n            letter_freq[letter] += 1\n        # Otherwise, add the letter to the dictionary with a frequency of 1\n        else:\n            letter_freq[letter] = 1\n\n    # Sort the dictionary by frequency in descending order\n    letter_freq = collections.OrderedDict(sorted(letter_freq.items(), key=lambda x: x[1], reverse=True))\n\n    return letter_freq", "problem": "Create a random string of a given length from a predefined list of letters and count the frequency of each letter, returning an ordered dictionary sorted by frequency in descending order.\nThe function should output with:\n    collections.OrderedDict: An ordered dictionary where keys are letters and values are\n    their frequencies in the generated string, sorted in descending order of frequency.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n```", "solution": "import collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n\n    string = ''.join([LETTERS[random.randint(0, len(LETTERS)-1)] for _ in range(string_length)])\n\n    freq = collections.Counter(string)\n\n    pq = PriorityQueue()\n    for letter, count in freq.items():\n        pq.put((-count, letter))\n\n    sorted_freq = collections.OrderedDict()\n    while not pq.empty():\n        count, letter = pq.get()\n        sorted_freq[letter] = -count\n\n    return sorted_freq", "pass": true}
{"task_id": "336", "program": "import re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n\n    pass\nimport re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n    \"\"\"\n    Find all files in a specific directory that contain a regex pattern in their contents in a case insensitive manner.\n\n    Args:\n        pattern (str): The regex pattern to search for.\n        directory (str): The directory to search in.\n        extensions (list): A list of file extensions to search for.\n\n    Returns:\n        list: A list of absolute file paths that contain the pattern.\n    \"\"\"\n    # Create a regex pattern that matches the given pattern in a case insensitive manner\n    regex = re.compile(pattern, re.IGNORECASE)\n\n    # Get a list of all files in the directory with the given extensions\n    file_paths = glob.glob(os.path.join(directory, \"*.{}\".format(\"*\".join(extensions))))\n\n    # Iterate over the files and check if the pattern is present in their contents\n    matching_files = []\n    for file_path in file_paths:\n        with open(file_path, \"r\") as f:\n            if regex.search(f.read()):\n                matching_files.append(os.path.abspath(file_path))\n\n    return matching_files\ndirectory = \"path/to/directory\"\nextensions = [\"txt\", \"py\"]\npattern = \"hello\"", "problem": "Find all files in a specific directory that contain a regex pattern in their contents in a case insensitive manner.\nThe function should output with:\n    list: A list of absolute file paths that contain the pattern.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n```", "solution": "import re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n    matched_files = []\n    for ext in extensions:\n        files = glob.glob(os.path.join(directory, ext))\n        for file in files:\n            with open(file, 'r') as f:\n                content = f.read().lower()\n                if re.search(pattern.lower(), content):\n                    matched_files.append(Path(file).resolve())\n    return matched_files", "pass": false}
{"task_id": "337", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n    \"\"\"\n    Create a bar chart of data in multiple groups with error bars.\n    Note that: The function uses a predefined set of colors for the bars. If there are more groups than colors, the colors will repeat from the beginning of the COLORS list. This function use \"Bar chart of {value_col} by {group_col}\" for the plot title. This function use value of variables group_col and value_col as the xlabel and ylabel respectively.\n    The function should raise the exception for: This function will raise TypeError if the 'Value' has non-numeric values.\n    The function should output with:\n        Axes: A matplotlib axes object with the bar chart.\n    \"\"\"\n    # Check if the value column has non-numeric values\n    if not np.issubdtype(df[value_col].dtype, np.number):\n        raise TypeError(\"The 'Value' column has non-numeric values.\")\n\n    # Create a list of colors for the bars\n    colors = COLORS * int(np.ceil(len(df[group_col].unique()) / len(COLORS)))\n\n    # Create a bar chart\n    ax = df.plot(kind='bar', x=group_col, y=value_col, color=colors, rot=0)\n\n    # Add error bars\n    ax.errorbar(x=df[group_col], y=df[value_col], yerr=df[value_col].std(), color='k', linestyle='none', elinewidth=1)\n\n    # Set the plot title\n    ax.set_title(f\"Bar chart of {value_col} by {group_col}\")\n\n    # Set the xlabel and ylabel\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n\n    return ax", "problem": "Create a bar chart of data in multiple groups with error bars.\nNote that: The function uses a predefined set of colors for the bars. If there are more groups than colors, the colors will repeat from the beginning of the COLORS list. This function use \"Bar chart of {value_col} by {group_col}\" for the plot title. This function use value of variables group_col and value_col as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise TypeError if the 'Value' has non-numeric values.\nThe function should output with:\n    Axes: A matplotlib axes object with the bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n\n    group_mean = df.groupby(group_col)[value_col].mean()\n    group_std = df.groupby(group_col)[value_col].std()\n\n    # Get the number of groups and generate x locations for the bars\n    num_groups = len(group_mean)\n    index = np.arange(num_groups)\n\n    # Create the bar chart with error bars\n    for i, (mean, std) in enumerate(zip(group_mean, group_std)):\n        plt.bar(index[i], mean, yerr=std, color=COLORS[i % len(COLORS)], capsize=4, label=f'Group {i+1}')\n\n    # Set labels and title\n    plt.xlabel(group_col)\n    plt.ylabel(value_col)\n    plt.title(f'Bar chart of {value_col} by {group_col}')\n    plt.xticks(index, group_mean.index)  # Set x-axis labels to group names\n    plt.legend()\n    # Return the axes object\n    return plt.gca()", "pass": false}
{"task_id": "338", "program": "import random\nimport string\nfrom matplotlib import pyplot as plt\ndef task_func(elements, seed=100):\n\n    pass\nimport random\nimport string\nfrom matplotlib import pyplot as plt\ndef task_func(elements, seed=100):\n    random.seed(seed)\n    formatted_elements = []\n    char_counts = {}\n    for element in elements:\n        random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(5))\n        formatted_element = f\"% {random_string}%\"\n        formatted_elements.append(formatted_element)\n        for char in formatted_element:\n            if char not in char_counts:\n                char_counts[char] = 0\n            char_counts[char] += 1\n    plt.hist(list(char_counts.values()), bins=len(char_counts))\n    plt.xlabel(\"Character Count\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Character Counts\")\n    return formatted_elements, plt.gca(), char_counts\nelements = [\"apple\", \"banana\", \"orange\", \"mango\", \"pineapple\"]", "problem": "Format each string in the given list \"elements\" into a pattern \"% {0}%\", where {0} is a randomly generated alphanumeric string of length 5. Additionally, return the plot axes of an histogram of the occurrence of each character across all the strings and a dictionary containing the count of each character in all the formatted strings.\nThe function should output with:\n    List[str]: A list of elements formatted with random patterns.\n    plt.Axes: The axes object of the histogram plot.\n    dict: A dictionary containing the count of each character in the formatted strings.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom matplotlib import pyplot as plt\ndef task_func(elements, seed=100):\n```", "solution": "import random\nimport string\nfrom matplotlib import pyplot as plt\ndef task_func(elements, seed=100):\n    random.seed(seed)\n    random_patterns = []\n\n    for element in elements:\n        random_str = ''.join(random.choices(string.ascii_letters + string.digits, k=5))\n        pattern = '% {}%'.format(random_str)\n        random_patterns.append(pattern)\n\n    # Histogram of character occurrences\n    char_count = {}\n    for pattern in random_patterns:\n        for char in pattern:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n            \n    # Getting the axes object for the histogram plot\n    _, ax = plt.subplots()\n    ax.bar(char_count.keys(), char_count.values())\n\n    return random_patterns, ax, char_count", "pass": false}
{"task_id": "339", "program": "import json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n\n    pass\nimport json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    req_data_json = json.dumps(req_data, separators=(',', ':'))\n    req_data_bytes = req_data_json.encode('utf-8')\n    hmac_signature = hmac.new(secret_key.encode('utf-8'), req_data_bytes, hashlib.sha256).hexdigest()\n    url_encoded_signature = urllib.parse.quote(hmac_signature, safe='')\n    return url_encoded_signature.replace(' ', '+')\nreq_data = {'key1': 'value1', 'key2': 'value2'}\nsecret_key = 'my_secret_key'", "problem": "Signs the specified request data with a secret key using HMAC SHA256, then URL encodes the signature and replace spaces with '+'.\nThe function should raise the exception for: TypeError: If `req_data` is not a dictionary.\nThe function should output with:\n    str: The URL encoded HMAC signature of the request data.\nYou should write self-contained code starting with:\n```\nimport json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n```", "solution": "import json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    # Convert request data to json string\n    json_req_data = json.dumps(req_data)\n    # Create a new hmac object with the secret key and the json string as the message\n    hmac_obj = hmac.new(secret_key.encode(), json_req_data.encode(), hashlib.sha256)\n    # Get the hmac signature\n    hmac_signature = hmac_obj.hexdigest()  # Use hexdigest for a hexadecimal representation\n    # URL encode the hmac signature\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature)\n\n    return url_encoded_signature", "pass": false}
{"task_id": "340", "program": "import json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n\n    pass\nimport json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n    # Hash the request data with BLAKE3\n    blake3_hash = blake3.blake3(req_data.encode(\"utf-8\"))\n\n    # Convert the BLAKE3 hash to a hexadecimal string\n    hex_hash = blake3_hash.hexdigest()\n\n    # Generate an MD5 hash of the hexadecimal BLAKE3 representation for demonstration purposes\n    md5_hash = hashlib.md5(hex_hash.encode(\"utf-8\")).hexdigest()\n\n    return hex_hash, md5_hash", "problem": "Hashes the specified request data with BLAKE3 and then converts it into a hexadecimal representation. Additionally, generates an MD5 hash of the BLAKE3 hash for demonstration purposes (not for security). BLAKE3 is a cryptographic hash function that is much faster than MD5 and SHA-1, while providing high security.\nThe function should output with:\n    tuple:\n    str: The hexadecimal representation of the BLAKE3 hash of the request data.\n    str: An MD5 hash of the hexadecimal BLAKE3 representation, for demonstration.\nYou should write self-contained code starting with:\n```\nimport json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n```", "solution": "import json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n    # Convert request data to json string\n    json_req_data = json.dumps(req_data)\n    # Hash the request data using BLAKE3 and get hexadecimal representation directly\n    blake3_hex = blake3.blake3(json_req_data.encode('utf-8')).hexdigest()\n    # Use hashlib for generating an MD5 hash of the BLAKE3 hex representation (for demonstration)\n    md5_hash = hashlib.md5(blake3_hex.encode('utf-8')).hexdigest()\n\n    return blake3_hex, md5_hash", "pass": false}
{"task_id": "341", "program": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    \"\"\"\n    This function takes a pandas DataFrame and a column name as input and generates two subplots in one matplotlib figure: the first subplot is a histogram (with a kernel density estimate for numerical data), and the second is a box plot, representing the distribution of the values in the specified column.\n    The function should raise the exception for:\n        - The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise ValueError.\n    The function should output with:\n        - matplotlib.figure.Figure: A matplotlib figure object containing the histogram and box plot.\n    \"\"\"\n    # Check if the input is a pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    \n    # Check if the DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"The DataFrame must not be empty.\")\n    \n    # Check if the specified column exists in the DataFrame\n    if col not in df.columns:\n        raise ValueError(f\"The column '{col}' does not exist in the DataFrame.\")\n    \n    # Create a figure with two subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n    \n    # Plot the histogram on the first subplot\n    sns.histplot(df[col], ax=ax1, kde=True)\n    \n    # Plot the box plot on the second subplot\n    sns.boxplot(df[col], ax=ax2)\n    \n    # Return the figure\n    return fig", "problem": "This function takes a pandas DataFrame and a column name as input and generates two subplots in one matplotlib figure: the first subplot is a histogram (with a kernel density estimate for numerical data), and the second is a box plot, representing the distribution of the values in the specified column.\nThe function should raise the exception for: The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise ValueError.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure object containing the histogram and box plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n\n    if not isinstance(df, pd.DataFrame) or df.empty or col not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n\n    fig, axes = plt.subplots(nrows=2, ncols=1)\n\n    # Plot histogram or count plot based on data type\n    if pd.api.types.is_numeric_dtype(df[col]):\n        axes[0].hist(df[col], bins=10, edgecolor='black', alpha=0.7)  # Using matplotlib's hist function for numerical data\n    else:\n        sns.countplot(x=df[col], ax=axes[0])\n\n    # Plot boxplot or strip plot based on data type\n    if pd.api.types.is_numeric_dtype(df[col]):\n        sns.boxplot(x=df[col], ax=axes[1])\n    else:\n        sns.stripplot(x=df[col], ax=axes[1], jitter=True)\n\n    return fig", "pass": false}
{"task_id": "342", "program": "import string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n\n    pass\nimport string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n    \"\"\"\n    Replace each character in each element of the Elements list with a random character and format the element into a pattern \"%{0}%\", where {0} is the replaced element. Finally, concatenate all the formatted elements into a single string and search for the regex pattern specified in the parameter pattern. Return the true or false value based on the search result.\n\n    Args:\n        elements (list[str]): The list of elements to be formatted and searched.\n        pattern (str): The regex pattern to search for in the formatted elements.\n        seed (int, optional): The random seed to use for generating random characters. Defaults to 100.\n\n    Returns:\n        list[str]: The list of formatted elements with replaced characters.\n        bool: The search result based on the regex pattern.\n    \"\"\"\n    random.seed(seed)\n    formatted_elements = []\n    for element in elements:\n        replaced_element = ''.join([random.choice(string.ascii_letters) for _ in range(len(element))])\n        formatted_elements.append(f\"%{replaced_element}%\")\n    formatted_string = ''.join(formatted_elements)\n    search_result = re.search(pattern, formatted_string)\n    return formatted_elements, bool(search_result)\nelements = [\"hello\", \"world\"]\npattern = r\"%h%w%\"", "problem": "Replace each character in each element of the Elements list with a random character and format the element into a pattern \"%{0}%\", where {0} is the replaced element. Finally, concatenate all the formatted elements into a single string and search for the regex pattern specified in the parameter pattern. Return the true or false value based on the search result.\nThe function should output with:\n    List[str]: The list of formatted elements with replaced characters.\n    bool: The search result based on the regex pattern.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n```", "solution": "import string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n    # Set the seed for reproducibility\n    random.seed(seed)\n    replaced_elements = []\n    \n    for element in elements:\n        replaced = ''.join([random.choice(string.ascii_letters) for _ in element])\n        formatted = '%{}%'.format(replaced)\n        replaced_elements.append(formatted)\n        \n    # Concatenate all the formatted elements into a single string\n    concatenated_elements = ''.join(replaced_elements)\n    # Search for the regex pattern in the concatenated string\n    search_result = re.search(pattern, concatenated_elements)\n    # Return the search result\n    return replaced_elements, bool(search_result)", "pass": true}
{"task_id": "343", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n    \"\"\"\n    Draw a pie chart of the number of unique values in a given DataFrame column with an optional title.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The input DataFrame.\n    col : str\n        The name of the column to draw the pie chart for.\n    title : str, optional\n        The title of the pie chart.\n\n    Returns\n    -------\n    Axes\n        A matplotlib axes object representing the pie chart.\n\n    Raises\n    ------\n    ValueError\n        If the input df is not a DataFrame, is empty, or does not contain the specified column.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input df cannot be empty.\")\n    if col not in df.columns:\n        raise ValueError(f\"Column {col} not found in input df.\")\n\n    # Get the unique values in the column and their counts\n    unique_vals = df[col].unique()\n    counts = df[col].value_counts()\n\n    # Create a pie chart with the unique values as slices\n    fig, ax = plt.subplots()\n    ax.pie(counts, labels=unique_vals, colors=COLORS[:len(unique_vals)])\n\n    # Add a title if specified\n    if title:\n        ax.set_title(title)\n\n    return ax\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [2, 4, 6, 8, 10]})", "problem": "Draw a pie chart of the number of unique values in a given DataFrame column with an optional title.\nNote that: Each unique value in the column is represented by a slice in the pie chart with a unique color from a predefined set. The pie chart can have a title if specified.\nThe function should raise the exception for: The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise ValueError.\nThe function should output with:\n    Axes: A matplotlib axes object representing the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n\n    # Ensure that the DataFrame is not empty and the specified column exists\n    if not isinstance(df, pd.DataFrame) or df.empty or col not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n\n    # Compute the value counts for the specified column\n    value_counts = df[col].value_counts()\n\n    # Plot the pie chart with an optional title\n    ax = value_counts.plot(kind='pie', colors=COLORS[:len(value_counts)], autopct='%1.1f%%')\n    if title:\n        plt.title(title)\n\n    return ax", "pass": true}
{"task_id": "344", "program": "import os\nimport shutil\ndef task_func(src_folder, backup_dir):\n\n    pass\nimport os\nimport shutil\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    The function should raise the exception for:\n        ValueError: If the source folder does not exist.\n        Exception: If an error occurs while deleting the source folder.\n    The function should output with:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"\n    # Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist\")\n\n    # Create the backup directory if it does not exist\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Backup the source folder to the backup directory\n    shutil.copytree(src_folder, backup_dir)\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except OSError as e:\n        raise Exception(\"Error occurred while deleting the source folder\") from e\n\n    return True", "problem": "Backs up a given source folder to the specified backup directory, then deletes the source folder.\nThe function should raise the exception for: ValueError: If the source folder does not exist. Exception: If an error occurs while deleting the source folder.\nThe function should output with:\n    bool: True if the operation is successful, False otherwise.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(src_folder, backup_dir):\n```", "solution": "import os\nimport shutil\ndef task_func(src_folder, backup_dir):\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    \n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    \n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "pass": false}
{"task_id": "345", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n    \"\"\"\n    Draw a scatter plot with a regression line for two columns from a DataFrame.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to use for the plot.\n    col1 : str\n        The name of the first column to use for the plot.\n    col2 : str\n        The name of the second column to use for the plot.\n\n    Returns\n    -------\n    Axes\n        A seaborn axes object.\n\n    Raises\n    ------\n    ValueError\n        If the input df is not a DataFrame, empty, or does not contain the specified columns.\n    TypeError\n        If df contains non-numeric data.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if df.empty:\n        raise ValueError(\"df cannot be empty\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"df must contain the specified columns\")\n    if df[col1].dtype != float or df[col2].dtype != float:\n        raise TypeError(\"df must contain only numeric data\")\n\n    # Create the scatter plot\n    ax = sns.regplot(x=col1, y=col2, data=df)\n\n    return ax\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [2, 4, 6, 8, 10]})", "problem": "Draw a scatter plot with a regression line for two columns from a DataFrame.\nThe function should raise the exception for: Raise ValueError if the input df is not a DataFrame, empty, or does not contain the specified columns. Raise TypeError if df use non-numeric data\nThe function should output with:\n    Axes: A seaborn axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n    # Ensure that the df is DataFrame, not empty and the specified column exists\n    if not isinstance(df, pd.DataFrame) or df.empty or col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n    \n    ax = sns.regplot(x=col1, y=col2, data=df)\n\n    return ax", "pass": false}
{"task_id": "346", "program": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n\n    pass\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None.\n    Raise:\n        - ValueError: If the script does not exist.\n        - subprocess.CalledProcessError: If the script raises an exception.\n    The function should output with:\n        int: The return code of the subprocess. If 'wait' is False, returns None.\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script '{script_path}' does not exist.\")\n\n    process = subprocess.Popen([sys.executable, script_path, *args], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    if wait:\n        process.wait()\n        return process.returncode\n    else:\n        return None\nscript_path = \"test_script.py\"\nargs = [\"arg1\", \"arg2\"]", "problem": "Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None. Raise: - ValueError: If the script does not exist. - subprocess.CalledProcessError: If the script raises an exception.\nThe function should output with:\n    int: The return code of the subprocess. If 'wait' is False, returns None.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n```", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    # Check if script exists\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"Script '{script_path}' does not exist.\")\n\n    # Run script in a background process\n    process = subprocess.Popen(\n        [sys.executable, script_path, *args], \n        stderr=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n    )\n    if \"Exception\" in str(process.communicate()[1]):\n        raise subprocess.CalledProcessError(process.returncode, process.args)\n\n    # Wait for the process to complete if 'wait' is True\n    if wait:\n        while process.poll() is None:\n            time.sleep(1)\n        return process.returncode\n    else:\n        return None", "pass": false}
{"task_id": "347", "program": "import pandas as pd\nimport re\nimport numpy as np\n# Constants\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n\n    pass\nimport pandas as pd\nimport re\nimport numpy as np\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n    \"\"\"\n    Find all matches of the regex pattern '([a-fA-F\\d] {32})' in a Pandas DataFrame column and count the occurrence of any unique match in the data.\n    The function should raise the exception for:\n        - The function will raise KeyError if the \"column\" does not exist in input \"df\"\n    The function should output with:\n        - Series: A pandas Series with counts of each unique match.\n    \"\"\"\n    # Check if the column exists in the DataFrame\n    if column not in df.columns:\n        raise KeyError(f\"Column {column} does not exist in the DataFrame\")\n\n    # Extract the matches from the column\n    matches = df[column].str.extractall(PATTERN)\n\n    # Count the unique matches\n    counts = matches.value.value_counts()\n\n    # Return the counts as a Series\n    return counts\ndf = pd.DataFrame({\"column1\": [\"1234567890abcdef\", \"abcdef1234567890\", \"1234567890abcdef\", \"abcdef1234567890\"]})", "problem": "Find all matches of the regex pattern '([a-fA-F\\ d] {32})' in a Pandas DataFrame column and count the occurrence of any unique match in the data.\nThe function should raise the exception for: The function will raise KeyError if the \"column\" does not exist in input \"df\"\nThe function should output with:\n    Series: A pandas Series with counts of each unique match.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport numpy as np\n# Constants\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n```", "solution": "import pandas as pd\nimport re\nimport numpy as np\n# Constants\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n\n    matches = df[column].apply(lambda x: re.findall(PATTERN, x))\n    flattened_matches = np.concatenate(matches.values)\n    counts = pd.Series(flattened_matches).value_counts()\n    \n    return counts", "pass": false}
{"task_id": "348", "program": "import subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n\n    pass\nimport subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n    \"\"\"\n    Stops all running processes with a specific name.\n    Note that: The function sends a termination signal to the processes and waits for 1 second. There is no guarantee that all processes will have terminated within this time.\n    The function should output with:\n        int: The number of processes stopped. If no processes are found, returns 0.\n    \"\"\"\n    # Get a list of all running processes\n    processes = subprocess.run([\"ps\", \"-A\"], stdout=subprocess.PIPE).stdout.decode().splitlines()\n\n    # Filter the list to only include processes with the given name\n    filtered_processes = [process for process in processes if process_name in process]\n\n    # Send a termination signal to each process\n    for process in filtered_processes:\n        subprocess.run([\"kill\", \"-9\", process.split()[0]])\n\n    # Wait for 1 second to allow the processes to terminate\n    time.sleep(1)\n\n    # Get a list of all running processes again\n    processes = subprocess.run([\"ps\", \"-A\"], stdout=subprocess.PIPE).stdout.decode().splitlines()\n\n    # Count the number of processes that were stopped\n    stopped_processes = [process for process in processes if process_name in process]\n    return len(stopped_processes)", "problem": "Stops all running processes with a specific name.\nNote that: The function sends a termination signal to the processes and waits for 1 second. There is no guarantee that all processes will have terminated within this time.\nThe function should output with:\n    int: The number of processes stopped. If no processes are found, returns 0.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n```", "solution": "import subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n    # Find all processes with the given name, and get their PIDs\n    try:\n        pids = subprocess.check_output(['pgrep', '-f', process_name]).decode().split('\\n')[:-1] \n    except subprocess.CalledProcessError:\n        pids = []\n\n    # Send SIGTERM signal to each process\n    for pid in pids:\n        os.kill(int(pid), signal.SIGTERM)\n\n    # Wait for processes to stop\n    time.sleep(1)\n\n    return len(pids)", "pass": false}
{"task_id": "349", "program": "import pandas as pd\nimport random\ndef task_func(product_list, categories):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(product_list, categories):\n    # Create a DataFrame with the product list and categories\n    df = pd.DataFrame({'Product': product_list, 'Category': categories})\n\n    # Add a column for the quantity sold\n    df['Quantity Sold'] = df.apply(lambda x: random.randint(1, 100), axis=1)\n\n    # Add a column for the revenue\n    df['Revenue'] = df.apply(lambda x: x['Quantity Sold'] * random.randint(10, 100), axis=1)\n\n    return df\nproduct_list = ['Product 1', 'Product 2', 'Product 3']\ncategories = ['Category 1', 'Category 2', 'Category 3']", "problem": "Create a sales report for a list of products in different categories. The report includes the quantity sold and revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', and 'Revenue'. The quantity sold is random number from 1 to 100 The revenue is the number of quantity sold times with the random number from 10 to 100\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(1, 100)\n        revenue = quantity_sold * random.randint(10, 100)\n        report_data.append([product, category, quantity_sold, revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return report_df", "pass": false}
{"task_id": "350", "program": "import subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n\n    pass\nimport subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n    \"\"\"\n    Compress all files in the specified source folder and move the compressed files to a destination folder.\n    This operation is executed as a background process using the 'gzip' command.\n    The function should output with:\n        dict: A dictionary containing:\n        'success': A boolean indicating if all files were compressed and moved successfully.\n        'message': A descriptive message about the operation's result.\n        'failed_files': A list of filenames that failed to compress or move.\n    \"\"\"\n    # Check if the source folder exists\n    if not os.path.isdir(src_folder):\n        return {'success': False, 'message': f\"Source folder '{src_folder}' does not exist.\"}\n\n    # Check if the destination folder exists\n    if not os.path.isdir(dst_folder):\n        return {'success': False, 'message': f\"Destination folder '{dst_folder}' does not exist.\"}\n\n    # Get a list of all files in the source folder\n    files = glob(os.path.join(src_folder, '*'))\n\n    # Create a list to store the failed files\n    failed_files = []\n\n    # Iterate over the files and compress them\n    for file in files:\n        # Check if the file is a file\n        if os.path.isfile(file):\n            # Compress the file using gzip\n            subprocess.run(['gzip', file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n            # Move the compressed file to the destination folder\n            shutil.move(file + '.gz', dst_folder)\n\n            # Check if the file was moved successfully\n            if not os.path.isfile(os.path.join(dst_folder, file + '.gz')):\n                failed_files.append(file)\n\n    # Check if all files were compressed and moved successfully\n    if len(failed_files) == 0:\n        return {'success': True, 'message': f\"All files in '{src_folder}' were compressed and moved to '{dst_folder}'.\"}\n    else:\n        return {'success': False, 'message': f\"Failed to compress and move the following files: {', '.join(failed_files)}.\"}", "problem": "Compress all files in the specified source folder and move the compressed files to a destination folder. This operation is executed as a background process using the 'gzip' command.\nThe function should output with:\n    dict: A dictionary containing:\n    'success': A boolean indicating if all files were compressed and moved successfully.\n    'message': A descriptive message about the operation's result.\n    'failed_files': A list of filenames that failed to compress or move.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n```", "solution": "import subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n    # Check if source and destination folders exist\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    if not os.path.isdir(dst_folder):\n        raise ValueError(f\"Destination folder '{dst_folder}' does not exist.\")\n    \n    processes = []\n    failed_files = []\n\n    # Compress files in a background process\n    for file in glob(os.path.join(src_folder, '*')):\n        process = subprocess.Popen(['gzip', file])\n        processes.append((process, file))\n\n    # Wait for all processes to complete\n    for process, file in processes:\n        retcode = process.wait()\n        if retcode != 0:\n            failed_files.append(os.path.basename(file))\n\n    # Move compressed files to destination folder\n    for file in glob(os.path.join(src_folder, '*.gz')):\n        try:\n            shutil.move(file, dst_folder)\n        except Exception as e:\n            failed_files.append(os.path.basename(file))\n\n    if failed_files:\n        return {'success': False, 'message': 'Some files failed to compress or move.', 'failed_files': failed_files}\n    else:\n        return {'success': True, 'message': 'All files compressed and moved successfully.', 'failed_files': []}", "pass": false}
{"task_id": "351", "program": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n    \"\"\"\n    Create a sales report for a list of products in different categories.\n    The report includes the quantity sold and revenue generated for each product.\n    The column names uses are 'Product', 'Category', 'Quantity Sold', and 'Revenue'.\n    The function should output with:\n        DataFrame: A pandas DataFrame with sales data for the products.\n    \"\"\"\n    # Create a dictionary to map categories to products\n    category_map = {category: [] for category in categories}\n    for product in product_list:\n        category_map[product[1]].append(product)\n\n    # Create a DataFrame to store the sales data\n    sales_data = pd.DataFrame(columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n\n    # Loop through each category and calculate the sales data\n    for category, products in category_map.items():\n        for product in products:\n            quantity_sold = random.randint(min_value, max_value)\n            revenue = quantity_sold * product[2]\n            sales_data = sales_data.append({'Product': product[0], 'Category': category, 'Quantity Sold': quantity_sold, 'Revenue': revenue}, ignore_index=True)\n\n    return sales_data\nproduct_list = [('Product 1', 'Category 1', 10), ('Product 2', 'Category 1', 20), ('Product 3', 'Category 2', 30), ('Product 4', 'Category 2', 40)]\ncategories = ['Category 1', 'Category 2']", "problem": "Create a sales report for a list of products in different categories. The report includes the quantity sold and revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', and 'Revenue'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = quantity_sold * random.randint(min_value, max_value)\n        report_data.append([product, category, quantity_sold, revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return report_df", "pass": false}
{"task_id": "352", "program": "import pandas as pd\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n\n    pass\nimport pandas as pd\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text_dict, word_keys, top_k=2):\n    \"\"\"\n    Calculate the frequency of certain words in a text dictionary and return a bar chart's Axes object and a dictionary containing the frequencies of the top_k most common words in text_dict.\n\n    Args:\n        text_dict (dict): A dictionary containing word frequencies.\n        word_keys (list): A list of words.\n        top_k (int, optional): The number of top words to display in the bar chart. Defaults to 2.\n\n    Raises:\n        ValueError: If top_k is a negative integer.\n\n    Returns:\n        matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\n        dict: Dictionary containing the frequencies of the top_k most common words. Key is the word and value is its frequency.\n    \"\"\"\n    if top_k < 0:\n        raise ValueError(\"top_k must be a non-negative integer\")\n\n    # Calculate the frequency of the provided words in the dictionary\n    word_freq = Counter(text_dict)\n    word_freq = {word: word_freq[word] for word in word_keys}\n\n    # Create a bar chart of the top_k most common words\n    ax = plt.bar(word_freq.keys(), word_freq.values())\n\n    # Sort the dictionary by frequency in descending order\n    word_freq = {k: v for k, v in sorted(word_freq.items(), key=lambda item: item[1], reverse=True)}\n\n    # Return the Axes object and the top_k most common words and their frequencies\n    return ax, word_freq\ntext_dict = {'hello': 5, 'world': 3, 'python': 2, 'pandas': 1, 'matplotlib': 1}\nword_keys = ['hello', 'world', 'python', 'pandas', 'matplotlib']", "problem": "Calculate the frequency of certain words in a text dictionary and return a bar chart's Axes object and a dictionary containing the frequencies of the top_k most common words in text_dict. The function takes a dictionary containing word frequencies and a list of words. It calculates the frequency of the provided words in the dictionary and returns the Axes object of the bar chart displaying the frequencies along with the top_k most common words and their frequencies as a dictionary. If a word in word_keys is not present in text_dict, its frequency is considered to be 0.\nThe function should raise the exception for: ValueError: If top_k is a negative integer.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\n    dict: Dictionary containing the frequencies of the top_k most common words. Key is the word and value is\n    its frequency.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n```", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n    if top_k < 0:\n        raise ValueError('top_k must be a positive integer.')\n    elif top_k >= len(text_dict):\n        top_k = len(text_dict)\n\n    frequencies = [text_dict.get(word, 0) for word in word_keys]\n    freq_dict = Counter(text_dict)\n    top_k_words = freq_dict.most_common(top_k)\n    word_series = pd.Series(frequencies, index=word_keys)\n    ax = word_series.plot(kind='bar')\n    return ax, dict(top_k_words)", "pass": false}
{"task_id": "353", "program": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n    # Create a DataFrame with the product list and categories\n    df = pd.DataFrame({'Product': product_list, 'Category': categories})\n\n    # Add a column for the quantity sold\n    df['Quantity Sold'] = random.randint(min_value, max_value, len(df))\n\n    # Add a column for the revenue for each product\n    df['Revenue'] = df['Quantity Sold'] * random.uniform(10, 100, len(df))\n\n    # Add a column for the total revenue generated for each product\n    df['Total Revenue'] = df.groupby('Product')['Revenue'].transform('sum')\n\n    return df\nproduct_list = ['Product A', 'Product B', 'Product C']\ncategories = ['Category 1', 'Category 2', 'Category 3']", "problem": "Create a sales report for a list of products in different categories. The report includes the quantity sold, revenue for 1 product, and total revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', 'Revenue' , and 'Total Revenue'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = random.randint(min_value, max_value)\n        total_revenue = quantity_sold * revenue\n        report_data.append([product, category, quantity_sold, revenue, total_revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue', 'Total Revenue'])\n    return report_df", "pass": false}
{"task_id": "354", "program": "import collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n\n    pass\nimport collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n    \"\"\"\n    Calculate the occurrence of certain words in a collection of sentences and return a bar chart.\n\n    Args:\n        sentences_dict (dict): A dictionary of sentences, where each sentence is a list of words.\n        word_keys (list): A list of words to count the occurrence of.\n\n    Returns:\n        matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\n    \"\"\"\n    # Initialize an empty dictionary to store the word counts\n    word_counts = {}\n\n    # Iterate over the sentences in the dictionary\n    for sentence in sentences_dict.values():\n        # Iterate over the words in the sentence\n        for word in sentence:\n            # Check if the word is in the word_keys list\n            if word in word_keys:\n                # Increment the count for the word in the word_counts dictionary\n                if word not in word_counts:\n                    word_counts[word] = 1\n                else:\n                    word_counts[word] += 1\n\n    # Create a pandas DataFrame from the word_counts dictionary\n    df = pd.DataFrame.from_dict(word_counts, orient='index', columns=['Count'])\n\n    # Create a bar chart from the DataFrame\n    ax = df.plot.bar(x='Count', y=df.index)\n\n    # Set the x-axis label\n    ax.set_xlabel('Count')\n\n    # Set the y-axis label\n    ax.set_ylabel('Word')\n\n    # Set the title\n    ax.set_title('Word Frequencies')\n\n    # Return the Axes object\n    return ax\nsentences_dict = {'sentence1': ['the', 'cat', 'sat', 'on', 'the', 'mat'],\n                  'sentence2': ['the', 'dog', 'chased', 'the', 'cat'],\n                  'sentence3': ['the', 'cat', 'and', 'the', 'dog', 'are', 'friends']}", "problem": "Calculate the occurrence of certain words in a collection of sentences and return a bar chart.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n```", "solution": "import collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n    word_counts = collections.Counter(' '.join(sentences_dict.values()).split())\n    frequencies = [word_counts[word] for word in word_keys]\n    word_series = pd.Series(frequencies, index=word_keys)\n    plt.figure()\n    word_series.plot(kind='bar')\n    return word_series.plot(kind='bar')", "pass": false}
{"task_id": "355", "program": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\ndef task_func(amplitude, frequency, time):\n\n    pass\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\ndef task_func(amplitude, frequency, time):\n    # Generate the complex wave\n    t = np.linspace(0, time, 1000)\n    x = amplitude * np.cos(2 * np.pi * frequency * t) + 1j * amplitude * np.sin(2 * np.pi * frequency * t)\n\n    # Apply the Hann window\n    window = get_window('hann', len(x))\n    x = x * window\n\n    # Plot the wave\n    fig, ax = plt.subplots()\n    ax.plot(t, np.real(x), label='Real part')\n    ax.plot(t, np.imag(x), label='Imaginary part')\n    ax.set_title('Complex Wave with Hann Window')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.legend()\n\n    return x, fig, ax\namplitude = 1\nfrequency = 10\ntime = 10", "problem": "Generates and plots a complex wave with a specified amplitude and frequency over given time points, applying a Hann window to reduce edge effects. The wave is represented as a complex number where the real part is the cosine component, and the imaginary part is the sine component. It returns both the wave and the plot object.\nNote that: Notes: The plot title is \"Complex Wave with Hann Window\". The x-label of the plot is \"Time\". The y-label of the plot is \"Amplitude\". The plot displays both the real and imaginary parts of the complex wave.\nThe function should output with:\n    numpy.ndarray: The generated complex wave as a numpy array of complex numbers.\n    matplotlib.figure.Figure: The figure object of the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\ndef task_func(amplitude, frequency, time):\n```", "solution": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\ndef task_func(amplitude, frequency, time):\n    wave = amplitude * np.exp(1j * 2 * math.pi * frequency * time)\n    window = get_window('hann', time.size)  # Apply a Hann window\n    wave *= window  # Apply the window to the wave\n\n    # Plot the wave\n    fig, ax = plt.subplots(figsize=(10, 4))\n    ax.plot(time, np.real(wave), label=\"Real Part\")\n    ax.plot(time, np.imag(wave), label=\"Imaginary Part\")\n    ax.set_title(\"Complex Wave with Hann Window\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend()\n\n    return wave, fig, ax", "pass": false}
{"task_id": "356", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError(\"x and y must be numpy arrays\")\n    if len(x) != len(y):\n        raise ValueError(\"x and y must have the same length\")\n\n    # Calculate the phase of the complex function\n    z = x + y * 1j\n    phase = np.angle(z)\n\n    # Plot the phase\n    fig, ax = plt.subplots()\n    ax.imshow(phase, cmap=\"gray\")\n    ax.set_title(\"Phase of Complex Function\")\n    ax.set_xlabel(\"Real Part\")\n    ax.set_ylabel(\"Imaginary Part\")\n\n    return ax, phase\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)", "problem": "Draw the phase of a complex function over a range of x and y and return the matplotlib axes object along with the 2D array of calculated phase values.\nThe function should raise the exception for: TypeError: If either `x` or `y` is not a numpy.ndarray. ValueError: If `x` and `y` do not have the same length.\nThe function should output with:\n    tuple: containing\n    matplotlib.axes.Axes: The axes object with the phase plot.\n    numpy.ndarray: The 2D array of calculated phase values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n    # Type check for x and y\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError(\"x and y must be numpy.ndarray\")\n\n    # Handle empty arrays\n    if x.size == 0 or y.size == 0:\n        print(\"Empty x or y array provided.\")\n        return None, np.array([])  # Adjusted to return a tuple\n\n    # Check for mismatched array sizes\n    if len(x) != len(y):\n        raise ValueError(\"Mismatched array sizes: x and y must have the same length\")\n\n    Z = np.zeros((len(y), len(x)), dtype=float)\n    for i in range(len(y)):\n        for j in range(len(x)):\n            z = complex(x[j], y[i])\n            Z[i, j] = cmath.phase(z**2 - 1)\n\n    fig, ax = plt.subplots()\n    c = ax.imshow(Z, extent=(np.amin(x), np.amax(x), np.amin(y), np.amax(y)), origin='lower', cmap='hsv')\n    fig.colorbar(c, ax=ax, label=\"Phase (radians)\")\n    ax.grid()\n\n    return ax, Z", "pass": false}
{"task_id": "357", "program": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n\n    pass\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n    if not isinstance(x, np.ndarray):\n        raise TypeError(\"x must be a numpy.ndarray\")\n    real_part = norm.pdf(x, loc=0, scale=1)\n    imag_part = norm.pdf(x, loc=2, scale=2)\n    return real_part + 1j * imag_part\nx = np.linspace(-5, 5, 100)", "problem": "Draws a plot visualizing a complex distribution created from two Gaussian distributions. The real part of the complex distribution is a Gaussian centered at 0 with a standard deviation of 1, and the imaginary part is a Gaussian centered at 2 with a standard deviation of 2.\nThe function should raise the exception for: TypeError: If `x` is not a numpy.ndarray.\nThe function should output with:\n    numpy.ndarray: The complex distribution created from the two Gaussian distributions.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n```", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n\n    # Type check for x and y\n    if not isinstance(x, np.ndarray):\n        raise TypeError(\"x must be numpy.ndarray\")\n\n    real_part = norm.pdf(x, 0, 1)\n    imag_part = norm.pdf(x, 2, 2)\n    complex_dist = real_part + 1j * imag_part\n\n    plt.plot(x, complex_dist.real, label='Real part')\n    plt.plot(x, complex_dist.imag, label='Imaginary part')\n    plt.legend()\n    plt.grid()\n    plt.show()\n    return complex_dist", "pass": true}
{"task_id": "358", "program": "import itertools\nimport json\ndef task_func(json_list, r):\n\n    pass\nimport itertools\nimport json\ndef task_func(json_list, r):\n    \"\"\"\n    Generate all possible combinations of r elements from a given number list taken from JSON string input.\n    Note that: The datetime to be extracted is located in the 'number_list' key in the JSON data.\n    The function should raise the exception for:\n        Raise an Exception if the json_list is an invalid JSON, empty, or does not have 'number_list' key.\n    The function should output with:\n        list: A list of tuples, each tuple representing a combination.\n    \"\"\"\n    # Check if the json_list is a valid JSON\n    try:\n        json_data = json.loads(json_list)\n    except json.JSONDecodeError:\n        raise Exception(\"Invalid JSON\")\n\n    # Check if the json_data is empty\n    if not json_data:\n        raise Exception(\"JSON is empty\")\n\n    # Check if the json_data has the 'number_list' key\n    if \"number_list\" not in json_data:\n        raise Exception(\"JSON does not have 'number_list' key\")\n\n    # Get the number list from the JSON data\n    number_list = json_data[\"number_list\"]\n\n    # Generate all possible combinations of r elements from the number list\n    combinations = itertools.combinations(number_list, r)\n\n    # Convert the combinations to a list of tuples\n    combinations_list = [tuple(combination) for combination in combinations]\n\n    return combinations_list\njson_list = '{\"number_list\": [1, 2, 3, 4, 5]}'\nr = 3", "problem": "Generate all possible combinations of r elements from a given number list taken from JSON string input.\nNote that: The datetime to be extracted is located in the 'number_list' key in the JSON data.\nThe function should raise the exception for: Raise an Exception if the json_list is an invalid JSON, empty, or does not have 'number_list' key.\nThe function should output with:\n    list: A list of tuples, each tuple representing a combination.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport json\ndef task_func(json_list, r):\n```", "solution": "import itertools\nimport json\ndef task_func(json_list, r):\n    try:\n        # Convert JSON string to Python dictionary\n        data = json.loads(json_list)\n\n        # Extract number_list from dictionary\n        number_list = data['number_list']\n        return list(itertools.combinations(number_list, r))\n    except Exception as e:\n        raise e", "pass": true}
{"task_id": "359", "program": "from scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n\n    pass\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n    \"\"\"\n    Calculate the correlation between two data series and return a scatter plot along with the correlation coefficient.\n\n    Parameters\n    ----------\n    data_dict : dict\n        A dictionary containing the data series.\n    data_keys : list\n        A list of the keys of the data series in the dictionary.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the correlation coefficient and the scatter plot of the two data series.\n    \"\"\"\n    # Extract the data series from the dictionary\n    x = data_dict[data_keys[0]]\n    y = data_dict[data_keys[1]]\n\n    # Calculate the correlation coefficient\n    r, p = stats.pearsonr(x, y)\n\n    # Create a scatter plot of the data series\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_xlabel(data_keys[0])\n    ax.set_ylabel(data_keys[1])\n    ax.set_title(f\"Correlation Coefficient: {r:.2f}\")\n\n    return r, ax", "problem": "Calculate the correlation between two data series and return a scatter plot along with the correlation coefficient.\nThe function should output with:\n    tuple:\n    float: The correlation coefficient.\n    Axes: The scatter plot of the two data series.\nYou should write self-contained code starting with:\n```\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n```", "solution": "from scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n    x = data_dict[data_keys[0]]\n    y = data_dict[data_keys[1]]\n    correlation, _ = stats.pearsonr(x, y)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    \n    return correlation, ax", "pass": true}
{"task_id": "360", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from an Excel spreadsheet (.xlsx), calculate the mean and standard deviation of each column, and draw a bar chart.\n    The bar chart will be returned as a matplotlib figure object.\n    The function should raise the exception for:\n        FileNotFoundError: If the Excel file does not exist at the specified path.\n        ValueError: If the specified sheet does not exist in the workbook.\n    The function should output with:\n        dict: A dictionary with mean and standard deviation of each column.\n        matplotlib.figure.Figure: The figure object containing the bar chart. The figure is titled 'Mean and Standard Deviation', the X-axis is labeled 'Columns', and the Y-axis is labeled 'Values'.\n    \"\"\"\n    # Check if the Excel file exists at the specified path\n    if not os.path.isfile(file_location):\n        raise FileNotFoundError(f\"Excel file does not exist at {file_location}\")\n\n    # Load the Excel file into a pandas DataFrame\n    df = pd.read_excel(file_location, sheet_name=sheet_name)\n\n    # Calculate the mean and standard deviation of each column\n    mean = df.mean()\n    std = df.std()\n\n    # Create a bar chart of the mean and standard deviation\n    fig, ax = plt.subplots()\n    ax.bar(mean.index, mean.values, yerr=std.values, capsize=10)\n    ax.set_title(\"Mean and Standard Deviation\")\n    ax.set_xlabel(\"Columns\")\n    ax.set_ylabel(\"Values\")\n\n    return fig", "problem": "Load data from an Excel spreadsheet (.xlsx), calculate the mean and standard deviation of each column, and draw a bar chart. The bar chart will be returned as a matplotlib figure object.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified sheet does not exist in the workbook.\nThe function should output with:\n    dict: A dictionary with mean and standard deviation of each column.\n    matplotlib.figure.Figure: The figure object containing the bar chart. The figure is titled 'Mean and Standard Deviation', the X-axis is labeled 'Columns', and the Y-axis is labeled 'Values'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"No file found at {file_location}\")\n\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except ValueError as e:\n        raise ValueError(f\"Error reading sheet: {e}\")\n\n    result = {}\n    fig, ax = plt.subplots()\n    for column in df.columns:\n        mean = np.mean(df[column])\n        std = np.std(df[column])\n        result[column] = {\"mean\": mean, \"std\": std}\n\n        ax.bar(column, mean, yerr=std)\n\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n\n    return result, fig", "pass": false}
{"task_id": "361", "program": "import pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n\n    pass\nimport pandas as pd\nimport logging\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n    \"\"\"\n    Reads data from an Excel spreadsheet, converts it to a CSV file, then calculates the sum of each column in the CSV file.\n    Note that: Ensure the Excel file contains only numerical data for accurate sum calculations.\n    The function should raise the exception for:\n        FileNotFoundError: If the Excel file does not exist at the specified path.\n        ValueError: If the specified sheet name is not found in the Excel file.\n    The function should output with:\n        dict: A dictionary with the sum of each column.\n    \"\"\"\n    # Check if the Excel file exists\n    if not os.path.exists(excel_file_location):\n        raise FileNotFoundError(f\"Excel file not found at {excel_file_location}\")\n\n    # Check if the sheet name is valid\n    if sheet_name not in pd.read_excel(excel_file_location).sheet_names:\n        raise ValueError(f\"Sheet name {sheet_name} not found in Excel file\")\n\n    # Read the Excel file and convert it to a CSV file\n    df = pd.read_excel(excel_file_location, sheet_name=sheet_name)\n    df.to_csv(csv_file_location, index=False)\n\n    # Calculate the sum of each column\n    sums = df.sum()\n\n    # Return the sum of each column as a dictionary\n    return sums.to_dict()\nexcel_file_location = \"test.xlsx\"\nsheet_name = \"Sheet1\"\ncsv_file_location = \"test.csv\"", "problem": "Reads data from an Excel spreadsheet, converts it to a CSV file, then calculates the sum of each column in the CSV file.\nNote that: Ensure the Excel file contains only numerical data for accurate sum calculations.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified sheet name is not found in the Excel file.\nThe function should output with:\n    dict: A dictionary with the sum of each column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n```", "solution": "import pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n    try:\n        logging.info('Reading the Excel file.')\n        # Reading the Excel file\n        df = pd.read_excel(excel_file_location, sheet_name=sheet_name)\n\n        logging.info('Converting to CSV.')\n        # Converting to CSV\n        df.to_csv(csv_file_location, index=False)\n\n        # Calculating the sum of each column\n        column_sum = df.sum(numeric_only=True)\n    except FileNotFoundError:\n        logging.error(f\"Excel file not found at {excel_file_location}\")\n        raise FileNotFoundError(f\"Excel file not found at {excel_file_location}\")\n    except ValueError as e:\n        logging.error(f\"Error in processing Excel file: {e}\")\n        raise ValueError(f\"Error in processing Excel file: {e}\")\n\n    return column_sum.to_dict()", "pass": false}
{"task_id": "362", "program": "import pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n\n    pass\nimport pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n    \"\"\"\n    Copies data from an Excel spreadsheet into a new Excel file, then reads the new Excel file and returns its contents.\n    The function should raise the exception for:\n        FileNotFoundError: If the original Excel file does not exist at the specified path.\n        ValueError: If the specified sheet does not exist in the workbook.\n    The function should output with:\n        DataFrame: A pandas DataFrame representing the content of the new Excel file.\n    \"\"\"\n    # Check if the original file exists\n    if not os.path.exists(original_file_location):\n        raise FileNotFoundError(f\"The original Excel file does not exist at {original_file_location}\")\n\n    # Copy the data from the original file to the new file\n    df = pd.read_excel(original_file_location, sheet_name=sheet_name)\n    df.to_excel(new_file_location, index=False)\n\n    # Read the data from the new file\n    new_df = pd.read_excel(new_file_location, sheet_name=sheet_name)\n\n    # Check if the sheet exists in the new file\n    if sheet_name not in new_df.sheet_names:\n        raise ValueError(f\"The specified sheet {sheet_name} does not exist in the new Excel file\")\n\n    # Return the data from the new file\n    return new_df\noriginal_file_location = \"test.xlsx\"\nnew_file_location = \"new_test.xlsx\"\nsheet_name = \"Sheet1\"", "problem": "Copies data from an Excel spreadsheet into a new Excel file, then reads the new Excel file and returns its contents.\nThe function should raise the exception for: FileNotFoundError: If the original Excel file does not exist at the specified path. ValueError: If the specified sheet does not exist in the workbook.\nThe function should output with:\n    DataFrame: A pandas DataFrame representing the content of the new Excel file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n```", "solution": "import pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n    if not os.path.exists(original_file_location):\n        raise FileNotFoundError(f\"No file found at {original_file_location}\")\n\n    # Read data from the original Excel file\n    try:\n        original_df = pd.read_excel(original_file_location, sheet_name=sheet_name)\n    except ValueError as e:\n        raise ValueError(f\"Error reading sheet: {e}\")\n\n    # Write data to a new Excel file\n    original_df.to_excel(new_file_location, index=False)\n\n    # Read and return data from the new Excel file\n    new_df = pd.read_excel(new_file_location)\n    return new_df", "pass": false}
{"task_id": "363", "program": "from multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n\n    pass\nfrom multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\ndef task_func(numbers: list) -> dict:\n    if not all(isinstance(number, int) and number >= 0 for number in numbers):\n        raise ValueError(\"All elements in the input list must be non-negative integers.\")\n    with Pool(processes=4) as pool:\n        results = pool.map(calculate_factorial, numbers)\n    return {number: factorial for number, factorial in results}\nnumbers = [1, 2, 3, 4, 5]", "problem": "Calculate factorials for a list of numbers in parallel using multiprocessing.\nThe function should raise the exception for: ValueError: If any element in the input list is not an integer or is negative.\nThe function should output with:\n    dict[int, int]: A dictionary with numbers as keys and their factorial as values.\nYou should write self-contained code starting with:\n```\nfrom multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n```", "solution": "from multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n    # Check input types\n    if not all(isinstance(n, int) and n >= 0 for n in numbers):\n        raise ValueError(\"All elements in the list must be integers\")\n    with Pool() as pool:\n        factorial_dict = dict(pool.starmap(calculate_factorial, [(i,) for i in numbers]))\n    return factorial_dict", "pass": false}
{"task_id": "364", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n    \"\"\"\n    Train a linear regression model on a given DataFrame.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n\n    Returns:\n        LinearRegression: The trained linear regression model.\n\n    Raises:\n        ValueError: If the input df is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(df[FEATURES], df[TARGET], test_size=0.2, random_state=42)\n\n    # Train a linear regression model on the training data\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Evaluate the model on the testing data\n    y_pred = model.predict(X_test)\n    mse = ((y_test - y_pred) ** 2).mean()\n    print(f\"Mean squared error: {mse:.2f}\")\n\n    return model\ndf = pd.DataFrame({\n    'feature 1': [1, 2, 3, 4, 5],\n    'feature 2': [2, 4, 6, 8, 10],\n    'feature 3': [3, 6, 9, 12, 15],\n    'target': [10, 20, 30, 40, 50]\n})", "problem": "Train a linear regression model on a given DataFrame.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    LinearRegression: The trained linear regression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    X = df[FEATURES]\n    y = df[TARGET]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model", "pass": true}
{"task_id": "365", "program": "from collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n\n    pass\nfrom collections import Counter\nimport json\nimport random\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n    \"\"\"\n    Create a json file with a number of n randomly selected words from a constant list named WORDS.\n    The function should output with:\n        str: The name of the json file generated.\n    \"\"\"\n    random.seed(seed)\n    words = random.sample(WORDS, n)\n    with open(file_name, 'w') as f:\n        json.dump(words, f)\n    return file_name\nn = 5\nfile_name = 'random_words.json'", "problem": "Create a json file with a number of n randomly selected words from a constant list named WORDS.\nThe function should output with:\n    str: The name of the json file generated.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n```", "solution": "from collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n    random.seed(seed)\n    if n < 1 or n > len(WORDS):\n        raise ValueError('n must be greater than 0')\n    random.shuffle(WORDS)\n    selected_words = WORDS[:n]\n    counts = Counter(selected_words)\n\n    with open(file_name, 'w') as f:\n        json.dump(dict(counts), f)\n\n    return file_name", "pass": false}
{"task_id": "366", "program": "import matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n\n    pass\nimport matplotlib.pyplot as plt\nimport random\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n    \"\"\"\n    Create a histogram subplot of a list of numbers.\n    :param number_list: A list of numbers to be plotted.\n    :param bins: The number of bins to use in the histogram.\n    :return: The axes object representing the histogram plot.\n    \"\"\"\n    # Create a histogram plot\n    ax = plt.hist(number_list, bins=bins, color=random.choice(COLORS))\n\n    # Set the plot title, x-axis label, and y-axis label\n    ax.set_title('Histogram')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n\n    # Return the axes object\n    return ax\nnumber_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nbins = 5", "problem": "Create a histogram subplot of a list of numbers.\nNote that: This function generates a histogram plot using Matplotlib. The plot title is set to 'Histogram'. The x-axis label is set to 'Number'. The y-axis label is set to 'Frequency'. The color of the histogram bars is randomly selected from a predefined set of colors.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n```", "solution": "import matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n\n    fig, ax = plt.subplots()\n    color = random.choice(COLORS)  # Randomly select color from the COLORS constant\n    ax.hist(number_list, bins=bins, color=color)\n    ax.set_title('Histogram')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    return ax", "pass": false}
{"task_id": "367", "program": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n\n    pass\nfrom datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    \"\"\"\n    Return a bar chart of the number of activities performed on each day of the week based on the provided list of activities.\n    If the activities are not datetime objects, raise a TypeError.\n    The function should raise the exception for:\n        TypeError: If the activities are not datetime objects.\n    The function should output with:\n        matplotlib.axes.Axes: Axes object representing the bar chart, with the x-axis labeled 'Day of the Week', the y-axis labeled 'Number of Activities', and the title 'Weekly Activity'.\n    \"\"\"\n    # Check if the activities are datetime objects\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"Activities must be datetime objects\")\n\n    # Create a dictionary to count the number of activities on each day of the week\n    day_of_week_count = defaultdict(int)\n    for activity in activities:\n        day_of_week_count[activity.strftime(\"%A\")] += 1\n\n    # Create a bar chart of the number of activities on each day of the week\n    fig, ax = plt.subplots()\n    ax.bar(day_of_week_count.keys(), day_of_week_count.values())\n    ax.set_xlabel(\"Day of the Week\")\n    ax.set_ylabel(\"Number of Activities\")\n    ax.set_title(\"Weekly Activity\")\n\n    return ax\nactivities = [datetime(2022, 1, 3), datetime(2022, 1, 4), datetime(2022, 1, 5), datetime(2022, 1, 6), datetime(2022, 1, 7), datetime(2022, 1, 10), datetime(2022, 1, 11), datetime(2022, 1, 12), datetime(2022, 1, 13)]", "problem": "Return a bar chart of the number of activities performed on each day of the week based on the provided list of activities. If the activities are not datetime objects, raise a TypeError.\nThe function should raise the exception for: TypeError: If the activities are not datetime objects.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object representing the bar chart, with the x-axis labeled 'Day of the Week', the y-axis labeled 'Number of Activities', and the title 'Weekly Activity'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n```", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError('All activities must be datetime objects')\n    activity_counts = defaultdict(int)\n\n    # Count the activities for each day of the week\n    for activity in activities:\n        day = activity.strftime('%A')\n        activity_counts[day] += 1\n\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    counts = [activity_counts[day] for day in days]\n\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax", "pass": false}
{"task_id": "368", "program": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n\n    pass\nimport os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    \"\"\"\n    Moves a random file from the source directory to the specified destination directory.\n    The function should output with:\n        str: The name of the file moved. Format: 'filename.extension' (e.g., 'file1.txt').\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Get a list of all files in the source directory\n    files = os.listdir(src_dir)\n\n    # Choose a random file from the list\n    file_to_move = random.choice(files)\n\n    # Move the file to the destination directory\n    shutil.move(os.path.join(src_dir, file_to_move), dest_dir)\n\n    return file_to_move", "problem": "Moves a random file from the source directory to the specified destination directory.\nThe function should output with:\n    str: The name of the file moved. Format: 'filename.extension' (e.g., 'file1.txt').\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n```", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    # Setting the seed for reproducibility\n    random.seed(seed)\n    # Constants\n    files = os.listdir(src_dir)\n    if len(files) == 0:\n        raise FileNotFoundError(f\"No files found in {src_dir}\")\n\n    # Selecting a random file\n    file_name = random.choice(files)\n    \n    # Creating the source and destination paths\n    src_file = os.path.join(src_dir, file_name)\n    dest_file = os.path.join(dest_dir, file_name)\n\n    # Moving the file\n    shutil.move(src_file, dest_file)\n\n    # Returning the name of the moved file\n    return file_name", "pass": false}
{"task_id": "369", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    # Generate a histogram of the array\n    ax = plt.hist(l, bins=50, edgecolor='black', linewidth=1)\n\n    # Fit a Gaussian distribution to the histogram\n    x = np.linspace(l.min(), l.max(), 1000)\n    params = stats.norm.fit(l)\n    y = stats.norm.pdf(x, *params)\n\n    # Plot the Gaussian distribution on top of the histogram\n    ax.plot(x, y, label='Gaussian fit')\n\n    # Set the title and labels\n    ax.set_title(f'Fit results: mu = {params[0]:.2f}, std = {params[1]:.2f}')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    return ax\nl = np.random.normal(size=1000)", "problem": "Draw a histogram of the given array with a Gaussian fit.\nNote that: This function use \"Fit results: mu = {mean},  std = {standard deviation}\" as the title of the plot, where the values are rounded to two decimal points.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    fig, ax = plt.subplots()\n    ax.hist(l, bins='auto', density=True, alpha=0.6, color='g')\n\n    mu, std = stats.norm.fit(l)\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Fit results: mu = %.2f,  std = %.2f\" % (mu, std)\n    ax.set_title(title)\n    return ax", "pass": false}
{"task_id": "370", "program": "import os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n\n    pass\nimport os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n    \"\"\"\n    Protect all double quotes in all JSON files in the specified directory by prepending them with a double backslash.\n\n    Args:\n        directory_path (str): The path to the directory containing the JSON files.\n\n    Returns:\n        list: A list of the processed JSON files.\n\n    Raises:\n        FileNotFoundError: If the specified directory does not exist.\n    \"\"\"\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_files = []\n    for json_file in json_files:\n        with open(json_file, \"r\") as f:\n            data = json.load(f)\n\n        escaped_data = json.dumps(data, indent=4, ensure_ascii=False)\n        escaped_data = re.sub(r'\"', r'\\\\\"', escaped_data)\n\n        with open(json_file, \"w\") as f:\n            f.write(escaped_data)\n\n        processed_files.append(json_file)\n\n    return processed_files", "problem": "Protect all double quotes in all JSON files in the specified directory by prepending them with a double backslash. Functionality: - Reads each JSON file in the given directory. - Escapes the double quotes by prepending them with a double backslash. - Writes back the modified content to the respective JSON file.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist.\nThe function should output with:\n    list: A list of the processed JSON files.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n```", "solution": "import os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found.\")\n    \n    json_files = glob.glob(directory_path + '/*.json')\n    processed_files = []\n    \n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n        \n        escaped_data = json.dumps(data, ensure_ascii=False)\n        escaped_data = re.sub(r'(?<!\\\\)\"', r'\\\\\\\"', escaped_data)\n        \n        with open(json_file, 'w') as file:\n            file.write(escaped_data)\n        \n        processed_files.append(json_file)\n    \n    return processed_files", "pass": true}
{"task_id": "371", "program": "from sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n\n    pass\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n    \"\"\"\n    Scale the input field to the range [0, 1] and display it as a DataFrame.\n    Note that: The return DataFrame use 'Scaled Values' as the column name.\n    The function should output with:\n        DataFrame: A pandas DataFrame of the scaled array.\n    \"\"\"\n    # Create a MinMaxScaler object\n    scaler = MinMaxScaler()\n\n    # Scale the input array\n    scaled_array = scaler.fit_transform(l)\n\n    # Create a DataFrame with the scaled array\n    df = pd.DataFrame(scaled_array, columns=['Scaled Values'])\n\n    return df", "problem": "Scale the input field to the range [0, 1] and display it as a DataFrame.\nNote that: The return DataFrame use 'Scaled Values' as the column name.\nThe function should output with:\n    DataFrame: A pandas DataFrame of the scaled array.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n```", "solution": "from sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n\n    scaler = MinMaxScaler()\n    l_scaled = scaler.fit_transform(l.reshape(-1, 1))\n    df = pd.DataFrame(l_scaled, columns=['Scaled Values'])\n    return df", "pass": false}
{"task_id": "372", "program": "import re\nimport glob\nfrom docx import Document\ndef task_func(directory_path: str) -> int:\n\n    pass\nimport re\nimport glob\nfrom docx import Document\ndef task_func(directory_path: str) -> int:\n    \"\"\"\n    Processes all Word (.docx) files in the provided directory, searching for double quotes in the text and adding a backslash before each double quote to \"protect\" it.\n\n    Args:\n        directory_path (str): The path to the directory containing the .docx files.\n\n    Returns:\n        int: The number of .docx files processed.\n    \"\"\"\n    num_files = 0\n    for file_path in glob.glob(f\"{directory_path}/*.docx\"):\n        doc = Document(file_path)\n        text = doc.paragraphs[0].text\n        text = re.sub(r'\"', r'\\\"', text)\n        doc.paragraphs[0].text = text\n        doc.save(file_path)\n        num_files += 1\n    return num_files", "problem": "Processes all Word (.docx) files in the provided directory, searching for double quotes in the text and adding a backslash before each double quote to \"protect\" it.\nThe function should output with:\n    int: Number of .docx files processed.\nYou should write self-contained code starting with:\n```\nimport re\nimport glob\nfrom docx import Document\ndef task_func(directory_path: str) -> int:\n```", "solution": "import re\nimport glob\nfrom docx import Document\ndef task_func(directory_path: str) -> int:\n    docx_files = glob.glob(directory_path + '/*.docx')\n    processed_files = 0\n\n    for docx_file in docx_files:\n        document = Document(docx_file)\n\n        for paragraph in document.paragraphs:\n            paragraph.text = re.sub(r'(?<!\\\\)\"', r'\\\"', paragraph.text)\n\n        document.save(docx_file)\n        processed_files += 1\n\n    return processed_files", "pass": false}
{"task_id": "373", "program": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(l, x_data, plot=False):\n\n    pass\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(l, x_data, plot=False):\n    \"\"\"\n    Adjust a quadratic curve to the specified data and return the parameters and fitted values.\n\n    Parameters\n    ----------\n    l : int\n        The number of data points.\n    x_data : numpy array\n        The x-values of the data.\n    plot : bool, optional\n        Whether to plot the fitted curve.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the following:\n        params (numpy array): Parameters of the fitted curve.\n        fitted_values (numpy array): Fitted y-values for the provided x_data.\n        ax (matplotlib.axes._axes.Axes, optional): Axes object of the plot if plot=True.\n    \"\"\"\n    # Define the function to be fitted\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Initialize the parameters\n    p0 = np.array([1, 1, 1])\n\n    # Fit the data\n    popt, _ = curve_fit(func, x_data, l, p0=p0)\n\n    # Calculate the fitted values\n    fitted_values = func(x_data, *popt)\n\n    # Plot the data and the fitted curve\n    if plot:\n        fig, ax = plt.subplots()\n        ax.plot(x_data, l, 'bo', label='Original data')\n        ax.plot(x_data, fitted_values, 'r', label='Fitted curve')\n        ax.legend()\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title('Quadratic Curve Fitting')\n\n    return popt, fitted_values, ax\nx_data = np.array([1, 2, 3, 4, 5])\nl = np.array([1, 4, 9, 16, 25])", "problem": "Adjust a quadratic curve to the specified data and return the parameters and fitted values.\nThe function should output with:\n    tuple: A tuple containing the following:\n    params (numpy array): Parameters of the fitted curve.\n    fitted_values (numpy array): Fitted y-values for the provided x_data.\n    ax (matplotlib.axes._axes.Axes, optional): Axes object of the plot if plot=True.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(l, x_data, plot=False):\n```", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(l, x_data, plot=False):\n\n    def func(x, a, b):\n        return a * x**2 + b\n\n    params, _ = curve_fit(func, x_data, l)\n    fitted_values = func(x_data, *params)\n    \n    if plot:\n        fig, ax = plt.subplots(figsize=(6, 4))\n        ax.scatter(x_data, l, label='Data')\n        ax.plot(x_data, fitted_values, label='Fitted function')\n        ax.legend(loc='best')\n        return params, fitted_values, ax\n\n    return params, fitted_values", "pass": false}
{"task_id": "374", "program": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n\n    pass\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in all Excel (.xlsx) files in the specified directory by prefixing them with a double backslash.\n    The function should output with:\n        int: The number of Excel files processed.\n    \"\"\"\n    # Get a list of all Excel files in the specified directory\n    xlsx_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n\n    # Loop through each Excel file and protect double quotes\n    for xlsx_file in xlsx_files:\n        # Load the Excel file\n        wb = load_workbook(xlsx_file)\n\n        # Loop through each worksheet in the Excel file\n        for ws in wb.worksheets:\n            # Loop through each cell in the worksheet\n            for cell in ws.iter_rows():\n                # Check if the cell contains a double quote\n                if '\"' in cell.value:\n                    # Replace the double quote with a double backslash\n                    cell.value = re.sub(r'\"', r'\\\\\"', cell.value)\n\n        # Save the modified Excel file\n        wb.save(xlsx_file)\n\n    # Return the number of Excel files processed\n    return len(xlsx_files)\ndirectory_path = './xlsx_files/'", "problem": "Protects all double quotes in all Excel (.xlsx) files in the specified directory by prefixing them with a double backslash.\nThe function should output with:\n    int: The number of Excel files processed.\nYou should write self-contained code starting with:\n```\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n```", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError('The specified directory does not exist.')\n    xlsx_files = glob.glob(directory_path + '/*.xlsx')\n    processed_files = 0\n\n    for xlsx_file in xlsx_files:\n        workbook = load_workbook(filename=xlsx_file)\n\n        for sheet in workbook.sheetnames:\n            for row in workbook[sheet].iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        cell.value = re.sub(r'(?<=(^|[^\\\\])(\\\\\\\\)*)\"', r'\\\"',\n                                            cell.value)\n\n        workbook.save(xlsx_file)\n        processed_files += 1\n\n    return processed_files", "pass": false}
{"task_id": "375", "program": "from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n\n    pass\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    # Perform PCA on the given array\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(l)\n\n    # Plot the first two main components\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c='blue')\n    ax.set_title('PCA Result')\n    ax.set_xlabel('First Principal Component')\n    ax.set_ylabel('Second Principal Component')\n\n    return ax", "problem": "Perform Principal Component Analysis (PCA) on the given array and record the first two main components.\nNote that: This function use \"PCA Result\" as the title of the plot. This function use \"First Principal Component\" and \"Second Principal Component\" as the xlabel and ylabel of the plot, respectively.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object of the generated plot\nYou should write self-contained code starting with:\n```\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n```", "solution": "from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(l)\n    \n    fig = plt.figure(figsize=(6, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(principalComponents[:, 0], principalComponents[:, 1])\n    plt.xlabel('First Principal Component')\n    plt.ylabel('Second Principal Component')\n    plt.title('PCA Result')\n\n    return ax", "pass": true}
{"task_id": "376", "program": "import nltk\nimport re\nfrom collections import Counter\n# Constants\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n\n    pass\nimport nltk\nimport re\nfrom collections import Counter\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n    # Split the text into words\n    words = nltk.word_tokenize(text)\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation marks\n    words = [re.sub(r'[^\\w\\s]', '', word) for word in words]\n\n    # Remove common stopwords\n    words = [word for word in words if word.lower() not in STOPWORDS]\n\n    # Calculate the frequency of each word\n    word_freq = Counter(words)\n\n    # Return a dictionary with words as keys and their frequencies as values\n    return dict(word_freq)\ntext = \"This is a sample text for testing the function.\"", "problem": "Calculate the frequency of continuous words in a text string. The function splits the text into words, converts them to lowercase, removes punctuation marks and common stopwords (provided as a constant), and then calculates the frequency of each word.\nThe function should output with:\n    dict: A dictionary with words as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nimport nltk\nimport re\nfrom collections import Counter\n# Constants\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n```", "solution": "import nltk\nimport re\nfrom collections import Counter\n# Constants\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n    words = re.split(r'\\W+', text.lower())\n    words = [word for word in words if word not in STOPWORDS and word != '']\n    word_freq = dict(Counter(words))\n\n    return word_freq", "pass": false}
{"task_id": "377", "program": "from texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n\n    pass\nfrom texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n    # Initialize the table\n    table = Texttable()\n    table.set_cols_dtype(['t', 'f'])\n    table.set_cols_align(['l', 'r'])\n    table.add_rows([\n        ['Item', 'Value'],\n        ['CPU Usage (%)', 'Memory Usage (%)', 'Disk Usage (%)']\n    ])\n\n    # Get the system information\n    cpu_usage = psutil.cpu_percent()\n    mem_usage = psutil.virtual_memory().percent\n    disk_usage = psutil.disk_usage('/').percent\n\n    # Add the system information to the table\n    table.add_row(['CPU Usage (%)', cpu_usage])\n    table.add_row(['Memory Usage (%)', mem_usage])\n    table.add_row(['Disk Usage (%)', disk_usage])\n\n    # Return the table as a string\n    return str(table)", "problem": "Generates a table displaying the system's CPU usage, memory usage, and disk usage.\nThe function should output with:\n    A string representation of a table with the columns of 'Item' and 'Value',\n    and the following system information:\n    CPU Usage (%)\n    Memory Usage (%)\n    Disk Usage (%)\nYou should write self-contained code starting with:\n```\nfrom texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n```", "solution": "from texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n    cpu_usage = psutil.cpu_percent(interval=1)\n    memory_info = psutil.virtual_memory()\n    disk_usage = psutil.disk_usage(os.sep)\n\n    table = Texttable()\n    table.add_rows([\n        ['Item', 'Value'],\n        ['CPU Usage (%)', cpu_usage],\n        ['Memory Usage (%)', memory_info.percent],\n        ['Disk Usage (%)', disk_usage.percent]\n    ])\n    return table.draw()", "pass": false}
{"task_id": "378", "program": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n\n    pass\nimport pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable.\n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n    The function should raise the exception for:\n        FileNotFoundError: If the specified directory does not exist.\n        ValueError: If there are no CSV files in the specified directory.\n        pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n    The function should output with:\n        str: A string representation of the table summarizing the CSV files.\n        Each row contains the file name, number of rows, and number of columns.\n    \"\"\"\n    # Check if the specified directory exists\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n\n    # Get a list of all CSV files in the directory\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n\n    # Check if there are any CSV files in the directory\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n\n    # Create a Texttable object to store the summary table\n    table = Texttable()\n\n    # Add a header to the table\n    table.header([\"File Name\", \"Number of Rows\", \"Number of Columns\"])\n\n    # Iterate over each CSV file and add its summary to the table\n    for csv_file in csv_files:\n        try:\n            # Read the CSV file using pandas\n            df = pd.read_csv(csv_file)\n\n            # Get the number of rows and columns in the dataframe\n            num_rows = len(df.index)\n            num_cols = len(df.columns)\n\n            # Add a row to the table with the file name, number of rows, and number of columns\n            table.add_row([csv_file, num_rows, num_cols])\n        except pd.errors.EmptyDataError:\n            # If an empty CSV file is encountered, raise an exception\n            raise pd.errors.EmptyDataError(f\"Empty CSV file: {csv_file}\")\n\n    # Return the string representation of the table\n    return str(table)", "problem": "Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. ValueError: If there are no CSV files in the specified directory. pandas.errors.EmptyDataError: If an empty CSV file is encountered.\nThe function should output with:\n    str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n```", "solution": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n\n    return table.draw()", "pass": false}
{"task_id": "379", "program": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n\n    pass\nimport pandas as pd\nimport numpy as np\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n    # Generate random data\n    data = np.random.rand(length, len(COLUMNS))\n\n    # Create a Pandas DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Record the data\n    df.to_csv('data.csv', index=False)\n\n    return df", "problem": "Generate a Pandas DataFrame with specified length and random data and then record the data.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n```", "solution": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n\n    data = np.random.randint(0,100,size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    return df", "pass": true}
{"task_id": "380", "program": "import re\nimport os\nimport shutil\ndef task_func(directory):\n\n    pass\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n    \"\"\"\n    Arrange files in a directory by their extensions. Create a new directory for each extension and move the files to the corresponding directories.\n    The function should output with:\n        None\n    \"\"\"\n    # Get a list of all files in the directory\n    files = os.listdir(directory)\n\n    # Create a dictionary to store the files by extension\n    files_by_ext = {}\n\n    # Loop through each file and add it to the dictionary\n    for file in files:\n        # Get the file extension\n        ext = os.path.splitext(file)[1]\n\n        # If the extension is not already in the dictionary, create a new list for it\n        if ext not in files_by_ext:\n            files_by_ext[ext] = []\n\n        # Add the file to the list for its extension\n        files_by_ext[ext].append(file)\n\n    # Loop through each extension and create a new directory for it\n    for ext, files in files_by_ext.items():\n        # Create a new directory for the extension\n        os.mkdir(os.path.join(directory, ext))\n\n        # Move each file to the new directory\n        for file in files:\n            shutil.move(os.path.join(directory, file), os.path.join(directory, ext))\n\n    return None", "problem": "Arrange files in a directory by their extensions. Create a new directory for each extension and move the files to the corresponding directories.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n```", "solution": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    for filename in os.listdir(directory):\n        match = re.search(r'\\.(.*?)$', filename)\n        if match:\n            ext_dir = os.path.join(directory, match.group(1))\n            if not os.path.exists(ext_dir):\n                os.mkdir(ext_dir)\n            shutil.move(os.path.join(directory, filename), ext_dir)", "pass": false}
{"task_id": "381", "program": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n\n    pass\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n    \"\"\"\n    Trains a random forest model on data from a CSV file, using one column as the target variable (y) and the rest as features (X), and visualizes the feature importances in a bar plot.\n    This function also handles missing values by dropping rows with any NaN values.\n\n    Parameters:\n    file_path (str): The path to the CSV file containing the data.\n    target_column (str): The name of the column containing the target variable.\n    seed (int): The random seed to use for the random forest model.\n\n    Returns:\n    matplotlib.axes.Axes: Axes object displaying the bar plot of feature importances.\n    numpy.ndarray: Array containing the feature importances derived from the random forest model.\n\n    Raises:\n    FileNotFoundError: Raised if the specified file_path does not lead to a valid file.\n    ValueError: Raised if the specified target_column is not found in the CSV file's columns, or if the input data contains NaN, infinity or a value too large for dtype('float32').\n    \"\"\"\n    # Check if file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n    # Read data from CSV file\n    data = pd.read_csv(file_path)\n\n    # Check if target column exists\n    if target_column not in data.columns:\n        raise ValueError(f\"Target column {target_column} not found in CSV file\")\n\n    # Drop rows with missing values\n    data.dropna(inplace=True)\n\n    # Split data into features (X) and target variable (y)\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    # Train random forest model\n    rf = RandomForestClassifier(random_state=seed)\n    rf.fit(X, y)\n\n    # Get feature importances\n    importances = rf.feature_importances_\n\n    # Plot feature importances\n    ax = sns.barplot(x=importances, y=X.columns)\n\n    return ax, importances", "problem": "Trains a random forest model on data from a CSV file, using one column as the target variable (y) and the rest as features (X), and visualizes the feature importances in a bar plot. This function also handles missing values by dropping rows with any NaN values. >>> file_path = 'arena.csv' >>> create_dummy_file(file_path) >>> ax, importances = task_func(file_path, 'Index') # This will train a random forest model predicting 'Index' from 'Score1', 'Score2', and 'Score3', then plot and return the importances of 'Score1', 'Score2', and 'Score3' as features (X). >>> os.remove(file_path)\nThe function should raise the exception for: FileNotFoundError: Raised if the specified file_path does not lead to a valid file. ValueError: Raised if the specified target_column is not found in the CSV file's columns, or if the input data contains NaN, infinity or a value too large for dtype('float32').\nThe function should output with:\n    matplotlib.axes.Axes: Axes object displaying the bar plot of feature importances.\n    numpy.ndarray: Array containing the feature importances derived from the random forest model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n```", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n    \n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n    \n    df = pd.read_csv(file_path)\n    \n    if target_column not in df.columns:\n        raise ValueError(f\"The specified target column '{target_column}' does not exist in the CSV file.\")\n    \n    # Drop rows with any NaN values\n    df_cleaned = df.dropna()\n\n    X = df_cleaned.drop(target_column, axis=1)\n    y = df_cleaned[target_column]\n    \n    # Option to scale features if needed\n    # scaler = StandardScaler()\n    # X_scaled = scaler.fit_transform(X)\n    \n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(X, y)\n    importances = clf.feature_importances_\n    \n    fig, ax = plt.subplots()\n    sns.barplot(x=X.columns, y=importances, ax=ax)\n    ax.set_title('Feature Importances')\n    \n    return ax, importances", "pass": true}
{"task_id": "382", "program": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n\n    pass\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n    # Define the mean and standard deviation of the normal distribution\n    mu = 0\n    sigma = 1\n\n    # Generate a normal distribution with the given length\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, length)\n    y = norm.pdf(x, mu, sigma)\n\n    # Plot the histogram and the probability density function\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=50, density=True, alpha=0.5, label='Histogram')\n    ax.plot(x, y, label='Probability Density Function')\n    ax.legend()\n    ax.set_xlabel('x')\n    ax.set_ylabel('Probability Density')\n    ax.set_title('Normal Distribution with Mean = 0 and Standard Deviation = 1')\n\n    return x, ax", "problem": "Create a normal distribution with a given length, plot its histogram alongside the probability density function, and return the distribution and the plot.\nNote that: This function use this constant MU (mean): 0, SIGMA (standard deviation): 1\nThe function should output with:\n    tuple: A tuple containing:\n    1. numpy array with the normal distribution.\n    2. matplotlib Axes object representing the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n```", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n\n    MU = 0\n    SIGMA = 1\n    \n    distribution = np.random.normal(MU, SIGMA, length)\n    fig, ax = plt.subplots()\n    ax.hist(distribution, 30, density=True, label='Histogram')\n    ax.plot(np.sort(distribution), norm.pdf(np.sort(distribution), MU, SIGMA), \n            linewidth=2, color='r', label='PDF')\n    ax.legend()\n    \n    return distribution, ax", "pass": false}
{"task_id": "383", "program": "import pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n    \"\"\"\n    Visualize the uppermost K n-grams in a given text string.\n    The function should output with:\n        None\n    \"\"\"\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Tokenize the text into individual words\n    words = text.split()\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Create a DataFrame with the word counts\n    df = pd.DataFrame(word_counts.most_common(), columns=['word', 'count'])\n\n    # Create a bar plot of the top K n-grams\n    sns.barplot(x='word', y='count', data=df.head(top_k))\n    plt.xlabel('Word')\n    plt.ylabel('Frequency')\n    plt.title(f'Top {top_k} {n}-grams in {text}')\n    plt.show()\ntext = \"The quick brown fox jumps over the lazy dog\"\nn = 2\ntop_k = 3", "problem": "Visualize the uppermost K n-grams in a given text string.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n    blob = TextBlob(text.lower())\n    words_freq = Counter([' '.join(list(span)) for span in blob.ngrams(n=n)])  # Get n-grams and count frequency\n    words_freq_filtered = words_freq.most_common(top_k)  # Get top k n-grams\n    top_df = pd.DataFrame(words_freq_filtered, columns=['n-gram', 'Frequency'])\n    plt.figure()\n\n    return sns.barplot(x='n-gram', y='Frequency', data=top_df)", "pass": false}
{"task_id": "384", "program": "import collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n\n    pass\nimport collections\nimport random\nimport itertools\ndef task_func(animal_dict, max_count=10, seed=0):\n    random.seed(seed)\n    reversed_dict = {}\n    counter = collections.Counter()\n    for name, animal in animal_dict.items():\n        if animal not in reversed_dict:\n            reversed_dict[animal] = [name]\n        else:\n            reversed_dict[animal].append(name)\n        counter[animal] += random.randint(1, max_count)\n    return reversed_dict, counter\nanimal_dict = {'Alice': 'Cat', 'Bob': 'Dog', 'Charlie': 'Elephant', 'David': 'Lion', 'Eve': 'Tiger', 'Frank': 'Bear', 'George': 'Giraffe', 'Harry': 'Horse', 'Iris': 'Rabbit', 'Jane': 'Snake', 'Kate': 'Zebra'}", "problem": "Given a constant list of animals in ANIMALS, and a dictionary 'animal_dict' with keys as people's names and values as their favorite animal names, reverse the keys and values in a given dictionary and count the occurrences of each predefined animal name with a random count. Return the reversed dictionary and the counter with animal name occurrences. This function performs two tasks: 1. It reverses the given dictionary (animal_dict) such that the original values become keys and the original keys become lists of values. 2. It counts the occurrences of each animal name in a predefined list (ANIMALS). The count of each animal name is a random integer between 1 and max_count (inclusive).\nThe function should output with:\n    tuple: A tuple where the first element is a reversed dictionary and the second element is a counter with animal\n    name occurrences (with randomness in count).\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n```", "solution": "import collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n    if max_count < 1:\n        raise ValueError(\"max_count must be a positive integer\")\n\n    random.seed(seed)\n\n    reversed_dict = {v: [] for v in animal_dict.values() if isinstance(v, str) and v in ANIMALS}\n    for k, v in animal_dict.items():\n        if isinstance(v, str) and v in ANIMALS:\n            reversed_dict[v].append(k)\n\n    animal_counter = collections.Counter(itertools.chain.from_iterable([[v] * random.randint(1, max_count) for v in ANIMALS]))\n    return reversed_dict, animal_counter", "pass": false}
{"task_id": "385", "program": "import matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n    # Create a dictionary to store the frequency of each fruit\n    fruit_counts = {}\n\n    # Iterate over the keys in the fruit_dict\n    for person in fruit_dict:\n        # Get the person's favorite fruit\n        favorite_fruit = fruit_dict[person]\n\n        # If the fruit is in the FRUITS list, increment its count\n        if favorite_fruit in FRUITS:\n            if favorite_fruit not in fruit_counts:\n                fruit_counts[favorite_fruit] = 1\n            else:\n                fruit_counts[favorite_fruit] += 1\n\n    # Create a bar chart of the fruit counts\n    fig, ax = plt.subplots()\n    ax.bar(FRUITS, fruit_counts.values())\n    ax.set_xticks(FRUITS)\n    ax.set_xticklabels(FRUITS)\n    ax.set_ylabel('Frequency')\n    ax.set_title('Fruit Frequency')\n\n    return fruit_counts, ax\nfruit_dict = {'Alice': 'Apple', 'Bob': 'Banana', 'Charlie': 'Cherry', 'David': 'Date', 'Eve': 'Elderberry', 'Frank': 'Fig', 'George': 'Grape', 'Helen': 'Honeydew', 'Indiana': 'Indian Prune', 'Jack': 'Jackfruit'}", "problem": "Given a constant list of fruits in FRUITS, and a dictionary 'fruit_dict' with keys as people's names and values as their favorite fruit names, record the frequency of each fruits' occurence. Return a bar chart of the number of fruits for each fruit type and return the dictionary with fruit names as keys and their counts as values.\nThe function should output with:\n    dict: A dictionary with fruit names as keys and their counts as values.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n```", "solution": "import matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n    fruit_list = [item for item in fruit_dict.values() if isinstance(item, str) and item in FRUITS]\n    fruit_counter = Counter(fruit_list)\n    \n    plt.bar(fruit_counter.keys(), fruit_counter.values())\n    return Counter([item for item in fruit_dict.values() if isinstance(item, str)]), plt.gca()", "pass": false}
{"task_id": "386", "program": "import numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n\n    pass\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n    # Generate random data\n    data = np.random.randint(min_value, max_value, size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Calculate cumulative distribution function (CDF)\n    cdf = df.cumsum() / df.sum()\n\n    return cdf\nlength = 10\nmin_value = 0\nmax_value = 100", "problem": "Randomly generate a pandas DataFrame with specified ranges and length, and calculate the cumulative distribution function (CDF).\nNote that: DataFrame columns are defined by the COLUMNS constant.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the calculated cumulative distribution function (CDF).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n```", "solution": "import numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n\n    # Generate random data and create a DataFrame\n    data = np.random.randint(min_value, max_value, size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Calculate the cumulative distribution function (CDF) for each column\n    df = df.apply(lambda x: x.value_counts().sort_index().cumsum())\n\n    return df", "pass": false}
{"task_id": "387", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n    \"\"\"\n    Generates a dictionary of city populations for the cities in the list and plots the population data using a bar chart.\n    The population values are randomly generated integers between 1 and 'max_range' if the city is in the list of cities,\n    otherwise the population value is -1. The random number generator is seeded with the value 'seed' before generating the\n    population values.\n\n    Args:\n        city_dict (dict): A dictionary of people's names and their favorite cities.\n        max_range (int): The maximum range of the randomly generated population values.\n        seed (int): The seed value for the random number generator.\n\n    Returns:\n        dict: A dictionary with city names as keys and randomly generated populations as values.\n        matplotlib.axes.Axes: The Axes object of the plot for further manipulation or testing.\n    \"\"\"\n    # Seed the random number generator\n    np.random.seed(seed)\n\n    # Create an empty dictionary to store the city populations\n    city_populations = {}\n\n    # Iterate over the cities in the list\n    for city in CITIES:\n        # Check if the city is in the city_dict\n        if city in city_dict.values():\n            # Generate a random population value between 1 and max_range\n            population = np.random.randint(1, max_range)\n        else:\n            # Set the population value to -1 if the city is not in the city_dict\n            population = -1\n\n        # Add the city and population to the city_populations dictionary\n        city_populations[city] = population\n\n    # Plot the bar chart of the city populations\n    fig, ax = plt.subplots()\n    ax.bar(CITIES, list(city_populations.values()))\n    ax.set_xticks(CITIES)\n    ax.set_xticklabels(CITIES)\n    ax.set_ylabel(\"Population\")\n    ax.set_title(\"City Populations\")\n\n    return city_populations, ax\ncity_dict = {\"Alice\": \"New York\", \"Bob\": \"London\", \"Charlie\": \"Beijing\", \"David\": \"Tokyo\", \"Eve\": \"Sydney\"}", "problem": "Given a constant list of cities (CITIES) and a dictionary 'city_dict' of people's names and their favorite cities, this function generates a dictionary of city populations for the cities in the list and plots the population data using a bar chart. The population values are randomly generated integers between 1 and 'max_range' if the city is in the list of cities, otherwise the population value is -1. The random number generator is seeded with the value 'seed' before generating the population values.\nThe function should output with:\n    dict: A dictionary with city names as keys and randomly generated populations as values.\n    matplotlib.axes.Axes: The Axes object of the plot for further manipulation or testing.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n    if max_range < 1:\n        raise ValueError(\"max_range must be a positive integer\")\n\n    np.random.seed(seed)\n    city_population = {\n        city: (np.random.randint(1, max_range) if city in CITIES else -1) \n        for _, city in city_dict.items() if isinstance(city, str)\n    }\n\n    # Plotting the bar chart\n    plt.figure()\n    ax = plt.bar(city_population.keys(), city_population.values())\n    plt.xlabel('City')\n    plt.ylabel('Population')\n    plt.title('City Populations')\n\n    return city_population, plt.gca()", "pass": false}
{"task_id": "388", "program": "import collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n\n    pass\nimport collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n    \"\"\"\n    Count the occurrences of each value in the specified columns in multiple CSV files.\n    The function should output with:\n        dict: A dictionary where keys are column names and values are dictionaries\n        with unique values in the column as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the results\n    result = {}\n\n    # Loop over the column names and CSV files\n    for column, file in zip(my_tuple, path_csv_files):\n        # Read the CSV file into a pandas DataFrame\n        df = pd.read_csv(file)\n\n        # Extract the values in the specified column\n        values = df[column].values\n\n        # Count the occurrences of each value\n        counts = collections.Counter(values)\n\n        # Store the results in the dictionary\n        result[column] = dict(counts)\n\n    return result", "problem": "Count the occurrences of each value in the specified columns in multiple CSV files.\nThe function should output with:\n    dict: A dictionary where keys are column names and values are dictionaries\n    with unique values in the column as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n```", "solution": "import collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n\n    counter = {column: collections.Counter() for column in my_tuple}\n\n    for csv_file in path_csv_files:\n        df = pd.read_csv(csv_file)\n\n        for column in my_tuple:\n            if column in df:\n                counter[column].update(df[column])\n\n    return counter", "pass": false}
{"task_id": "389", "program": "import re\nimport os\nimport shutil\ndef task_func(directory):\n\n    pass\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n    \"\"\"\n    Finds files with filenames that contain \"like\" or \"what\" in a directory,\n    creates a new subdirectory called \"Interesting Files\" and moves those files\n    to the new subdirectory.\n\n    Args:\n        directory (str): The directory to search for files.\n\n    Returns:\n        list: List of files moved.\n    \"\"\"\n    # Create a new subdirectory called \"Interesting Files\"\n    new_dir = os.path.join(directory, \"Interesting Files\")\n    os.mkdir(new_dir)\n\n    # Find files with filenames that contain \"like\" or \"what\"\n    files = [f for f in os.listdir(directory) if re.search(r\"like|what\", f)]\n\n    # Move files to the new subdirectory\n    for file in files:\n        shutil.move(os.path.join(directory, file), new_dir)\n\n    return files\ndirectory = \"path/to/directory\"", "problem": "Find the files with filenames that contain \"like\" or \"what\" in a directory, create a new subdirectory called \"Interesting Files\" and move those files to the new subdirectory.\nThe function should output with:\n    List of files moved\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n```", "solution": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    pattern = re.compile(r'(like|what)', re.IGNORECASE)\n    interesting_files = [file for file in os.listdir(directory) if pattern.search(file)]\n\n    if not os.path.exists(os.path.join(directory, 'Interesting Files')):\n        os.mkdir(os.path.join(directory, 'Interesting Files'))\n\n    for file in interesting_files:\n        shutil.move(os.path.join(directory, file), os.path.join(directory, 'Interesting Files'))\n\n    return interesting_files", "pass": false}
{"task_id": "390", "program": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n\n    pass\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n    if not csv_url_dict or \"URL\" not in csv_url_dict:\n        raise ValueError(\"Invalid dictionary or URL key not found\")\n    response = requests.get(csv_url_dict[\"URL\"])\n    if response.status_code != 200:\n        raise ValueError(\"Invalid URL or server error\")\n    df = pd.read_csv(StringIO(response.text))\n    return df.sort_values(sort_by_column)\ncsv_url_dict = {\"URL\": \"http://example.com/test.csv\"}", "problem": "Fetches data from a given dictionary that includes a CSV URL and returns a pandas DataFrame sorted based on two specified columns. >>> task_func({\"URL\": \"http://example.com/test.csv\"}, \"price\") id   title  price 2   3  Cherry    0.2 0   1   Apple    0.3 1   2  Banana    0.5\nThe function should raise the exception for: This function will raise a ValueError if the dictionary is empty or the key \"URL\" does not exist in the dictionary.\nThe function should output with:\n    DataFrame: The pandas DataFrame sorted based on the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n```", "solution": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n\n    if \"URL\" not in csv_url_dict or not csv_url_dict:\n        raise ValueError(\"The dictionary must contain a 'URL' key.\")\n    \n    response = requests.get(csv_url_dict[\"URL\"])\n    response.raise_for_status()  # Raise an exception for invalid responses\n    csv_data = response.text\n    df = pd.read_csv(StringIO(csv_data))\n    sorted_df = df.sort_values(by=sort_by_column)\n    return sorted_df", "pass": true}
{"task_id": "391", "program": "import os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n\n    pass\nimport os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n    The function should output with:\n        tuple: A tuple containing a boolean value and a list of error messages.\n        The boolean is True if all files are successfully moved, and False otherwise.\n        The list contains error messages for each file that failed to move.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        return (False, [f\"Directory '{directory}' does not exist.\"])\n\n    # Check if the archive directory exists\n    if not os.path.isdir(archive_dir):\n        return (False, [f\"Archive directory '{archive_dir}' does not exist.\"])\n\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    # Move each JSON file to the archive directory\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_messages.append(f\"Failed to move '{json_file}': {e}\")\n\n    # Return a tuple containing the boolean and the list of error messages\n    return (len(error_messages) == 0, error_messages)", "problem": "Archive all JSON files in a given directory by moving them to a specified archive directory.\nThe function should output with:\n    tuple: A tuple containing a boolean value and a list of error messages.\n    The boolean is True if all files are successfully moved, and False otherwise.\n    The list contains error messages for each file that failed to move.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n```", "solution": "import os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n\n    return (len(error_messages) == 0, error_messages)", "pass": false}
{"task_id": "392", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n    \"\"\"\n    Create a bar subplot of a specific group from the input dataframe.\n    Note that: The title of the plot will be 'Bar chart of [value_col] for [group_name]'. The x-axis label will be the name of the grouping column [group_col]. The y-axis label will be the name of the value column [value_col].\n    The function should raise the exception for: Raise ValueError if the group_name does not exist in df.\n    The function should output with:\n        Axes: A matplotlib axes object with the bar chart.\n    \"\"\"\n    # Check if the group_name exists in the dataframe\n    if group_name not in df[group_col].unique():\n        raise ValueError(f\"Group name {group_name} does not exist in the dataframe.\")\n\n    # Create a bar subplot\n    fig, ax = plt.subplots()\n    ax.bar(df[group_col], df[value_col], color=COLORS)\n\n    # Set the title, x-axis label, and y-axis label\n    ax.set_title(f\"Bar chart of {value_col} for {group_name}\")\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n\n    return ax\ndf = pd.DataFrame({\"Group\": [\"A\", \"B\", \"C\"], \"Value\": [10, 20, 30]})", "problem": "Create a bar subplot of a specific group from the input dataframe.\nNote that: The title of the plot will be 'Bar chart of [value_col] for [group_name]'. The x-axis label will be the name of the grouping column [group_col]. The y-axis label will be the name of the value column [value_col].\nThe function should raise the exception for: Raise ValueError if the group_name does not exist in df.\nThe function should output with:\n    Axes: A matplotlib axes object with the bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n    # Filter the DataFrame to select the specific group\n    group_data = df[df[group_col] == group_name]\n    if group_data.empty:\n        raise ValueError\n    \n    # Create a figure and axes\n    fig, ax = plt.subplots()\n\n    # Get the number of bars\n    num_bars = len(group_data)\n\n    # Set the width of the bars\n    bar_width = 0.35\n\n    # Generate positions for the bars\n    index = np.arange(num_bars)\n\n    # Create the bar chart\n    bars = ax.bar(index, group_data[value_col], bar_width, color=COLORS[:num_bars])\n\n    # Set labels and title\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    ax.set_title(f'Bar chart of {value_col} for {group_name}')\n\n    # Set x-axis ticks and labels\n    ax.set_xticks(index)\n    ax.set_xticklabels(group_data[group_col])\n\n    return ax", "pass": false}
{"task_id": "393", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    axs[0].hist(samples, bins=50, density=True)\n    axs[0].set_title('Histogram of Samples')\n    axs[0].set_xlabel('Value')\n    axs[0].set_ylabel('Density')\n    axs[1].plot(stats.norm.ppf(np.linspace(0, 1, 100)), 'r-', label='Normal CDF')\n    axs[1].hist(samples, bins=50, density=True, histtype='step', label='Samples')\n    axs[1].legend()\n    axs[1].set_title('Q-Q Plot of Samples')\n    axs[1].set_xlabel('Theoretical Quantiles')\n    axs[1].set_ylabel('Sample Quantiles')\n    return fig", "problem": "Generate a normal distribution with the given mean and standard deviation. Creates a figure containing a histogram and a Q-Q plot of the generated samples.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n\n    return fig", "pass": true}
{"task_id": "394", "program": "import collections\nimport string\nimport random\ndef task_func(length, seed=0):\n\n    pass\nimport collections\nimport string\nimport random\ndef task_func(length, seed=0):\n    \"\"\"\n    Generate a random string of a given length using ASCII letters and calculate the frequency of each character.\n\n    Args:\n        length (int): The length of the string to generate.\n        seed (int, optional): The random seed to use. Defaults to 0.\n\n    Returns:\n        dict: A dictionary with the frequency of each character in the generated string.\n    \"\"\"\n    random.seed(seed)\n    ascii_letters = string.ascii_letters\n    random_string = ''.join(random.choice(ascii_letters) for _ in range(length))\n    char_freq = collections.Counter(random_string)\n    return char_freq", "problem": "Generate a random string of a given length using ASCII letters and calculate the frequency of each character.\u200b\nThe function should output with:\n    dict: A dictionary with the frequency of each character in the generated string.\nYou should write self-contained code starting with:\n```\nimport collections\nimport string\nimport random\ndef task_func(length, seed=0):\n```", "solution": "import collections\nimport string\nimport random\ndef task_func(length, seed=0):\n    random.seed(seed)\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(length))\n\n    char_freq = collections.Counter(random_string)\n\n    return dict(char_freq)", "pass": true}
{"task_id": "395", "program": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n\n    pass\nimport re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n    The function should raise the exception for:\n        FileNotFoundError: If the specified directory does not exist.\n        ValueError: If no files matching the pattern are found.\n    The function should output with:\n        DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all files matching the pattern\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n\n    # Extract numeric data from each file\n    data = []\n    for file in natsort.natsorted(files):\n        with open(file, 'r') as f:\n            numeric_data = re.findall(regex, f.read())\n            data.append((file, numeric_data))\n\n    # Create a Pandas DataFrame\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df\ndirectory = './'\nfile_pattern = '*.txt'\nregex = r'([0-9]+)'", "problem": "Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. ValueError: If no files matching the pattern are found.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n```", "solution": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "pass": false}
{"task_id": "396", "program": "import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n\n    pass\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n    \"\"\"\n    Create a Gaussian kernel density estimate diagram of a normal distribution with a given mean and a standard deviation using a random sample of a size determined by the sample_size parameter. The density diagram is plotted using default settings in a deterministic matplotlib plot. Return the axes object.\n\n    Parameters\n    ----------\n    mu : float\n        Mean of the normal distribution.\n    sigma : float\n        Standard deviation of the normal distribution.\n    sample_size : int\n        Size of the random sample to use for the kernel density estimate.\n    seed : int, optional\n        Random seed to use for the random sample.\n\n    Returns\n    -------\n    matplotlib.axes._axes.Axes\n        Axes object containing the plot of the normal distribution.\n    \"\"\"\n    # Generate a random sample from the normal distribution\n    np.random.seed(seed)\n    x = np.random.normal(mu, sigma, sample_size)\n\n    # Compute the kernel density estimate\n    kde = stats.gaussian_kde(x)\n\n    # Plot the density diagram\n    fig, ax = plt.subplots()\n    ax.plot(x, kde(x))\n\n    return ax\nmu = 0\nsigma = 1\nsample_size = 1000", "problem": "Create a Gaussian kernel density estimate diagram of a normal distribution with a given mean and a standard deviation using a random sample of a size determined by the sample_size parameter. The density diagram is plotted using default settings in a deterministic matplotlib plot. Return the axes object.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object containing the plot of the normal distribution.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n```", "solution": "import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n    if sample_size <= 0:\n        raise ValueError('sample_size must be a positive integer.')\n\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    density = stats.gaussian_kde(sample)\n\n    x = np.linspace(min(sample), max(sample), sample_size)\n    fig, ax = plt.subplots()\n    ax.plot(x, density(x))\n    \n    return ax", "pass": true}
{"task_id": "397", "program": "import re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n\n    pass\nimport re\nimport urllib.request\nimport json\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n    \"\"\"\n    Get the public IP address of the current host from an API.\n    The function should raise the exception for:\n        - If the API request fails, the function will return the error message.\n    The function should output with:\n        - str: The public IP address.\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(API_URL)\n        data = json.loads(response.read())\n        ip_address = re.search(IP_REGEX, data['ip']).group()\n        return ip_address\n    except urllib.error.URLError as e:\n        raise Exception(f\"API request failed: {e}\")\n    except KeyError as e:\n        raise Exception(f\"Invalid API response: {e}\")\n    except Exception as e:\n        raise Exception(f\"Unknown error: {e}\")", "problem": "Get the public IP address of the current host from an API.\nThe function should raise the exception for: If the API request fails, the function will return the error message.\nThe function should output with:\n    str: The public IP address.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n```", "solution": "import re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n\n    try:\n        response = urllib.request.urlopen(API_URL)\n        data = json.loads(response.read())\n        ip = data['ip']\n        if re.match(IP_REGEX, ip):\n            return ip\n        else:\n            return 'Invalid IP address received'\n    except Exception as e:\n        return str(e)", "pass": false}
{"task_id": "398", "program": "import json\nimport os\ndef task_func(file_path):\n\n    pass\nimport json\nimport os\ndef task_func(file_path):\n    \"\"\"\n    Check that the data in a JSON file is a list of dictionaries (objects in JavaScript).\n    The function should output with:\n        bool: True if the data is a list of dictionaries, False otherwise.\n    \"\"\"\n    with open(file_path, \"r\") as f:\n        data = json.load(f)\n    return isinstance(data, list) and all(isinstance(item, dict) for item in data)\nfile_path = \"data.json\"", "problem": "Check that the data in a JSON file is a list of dictionaries (objects in JavaScript).\nThe function should output with:\n    bool: True if the data is a list of dictionaries, False otherwise.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\ndef task_func(file_path):\n```", "solution": "import json\nimport os\ndef task_func(file_path):\n    if not os.path.exists(file_path):\n        return False\n\n    with open(file_path, 'r') as file:\n        try:\n            data = json.load(file)\n        except json.JSONDecodeError:\n            return False\n\n    return isinstance(data, list) and all(isinstance(item, dict) for item in data)", "pass": false}
{"task_id": "399", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\n    The function should raise the exception for:\n        ValueError: If the frequency is negative.\n        ValueError: If the sample size is non-positive.\n    The function should output with:\n        matplotlib.figure.Figure: The figure object containing the plot.\n        matplotlib.axes.Axes: The axes object of the plot.\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n\n    t = np.linspace(0, 1, sample_size)\n    x = np.sin(2 * np.pi * frequency * t)\n    y = np.cos(2 * np.pi * frequency * t)\n\n    fig, ax = plt.subplots()\n    ax.plot(t, x, label=\"Sine Wave\")\n    ax.plot(t, y, label=\"Cosine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend()\n\n    return fig, ax\nsample_size = 1000", "problem": "Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\nThe function should raise the exception for: ValueError: If the frequency is negative. ValueError: If the sample size is non-positive.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size cannot be negative or zero\")\n\n    x = np.linspace(0, 2 * math.pi, sample_size)\n    y_sin = np.sin(frequency * x)\n    y_cos = np.cos(frequency * x)\n\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sin, label='sin')\n    ax.plot(x, y_cos, label='cos')\n    ax.legend()\n    return fig, ax", "pass": false}
{"task_id": "400", "program": "import json\nfrom glob import glob\ndef task_func(directory, string):\n\n    pass\nimport json\nfrom glob import glob\ndef task_func(directory, string):\n    \"\"\"\n    Search for a specific string within the JSON data of files in a given directory and its subdirectories.\n    This function recursively scans the specified directory for JSON files, then checks each file to see if the given string is present within the JSON data structure.\n    Note that: The string search is case-sensitive and looks for a match within the structure of the JSON data, not just as a substring in the file content. If the directory does not contain any JSON files or if no JSON files contain the string, an empty list is returned.\n    The function should output with:\n        list: A list of file paths (str) containing the string within their JSON data.\n    \"\"\"\n    json_files = glob(f\"{directory}/**/*.json\", recursive=True)\n    matching_files = []\n    for json_file in json_files:\n        with open(json_file, \"r\") as f:\n            json_data = json.load(f)\n            if string in json_data:\n                matching_files.append(json_file)\n    return matching_files", "problem": "Search for a specific string within the JSON data of files in a given directory and its subdirectories. This function recursively scans the specified directory for JSON files, then checks each file to see if the given string is present within the JSON data structure.\nNote that: The string search is case-sensitive and looks for a match within the structure of the JSON data, not just as a substring in the file content. If the directory does not contain any JSON files or if no JSON files contain the string, an empty list is returned.\nThe function should output with:\n    list: A list of file paths (str) containing the string within their JSON data.\nYou should write self-contained code starting with:\n```\nimport json\nfrom glob import glob\ndef task_func(directory, string):\n```", "solution": "import json\nfrom glob import glob\ndef task_func(directory, string):\n    #json_files = list(Path(directory).rglob(\"/*.json\"))\n    json_files = glob(f\"{directory}/**/*.json\", recursive=True)\n    found_files = []\n\n    for file in json_files:\n        try:\n            with open(file, 'r') as f:\n                data = json.load(f)\n                if string in data:\n                    found_files.append(str(file))\n        except (IOError, json.JSONDecodeError):\n            continue\n\n    return found_files", "pass": false}
{"task_id": "401", "program": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n\n    pass\nfrom flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n    app = Flask(app_name)\n    mail_server = os.environ.get('MAIL_SERVER', 'localhost')\n    mail_port = int(os.environ.get('MAIL_PORT', 25))\n    use_tls = os.environ.get('MAIL_USE_TLS', False)\n    username = os.environ.get('MAIL_USERNAME', None)\n    password = os.environ.get('MAIL_PASSWORD', None)\n    mail = Mail(app)\n    mail.init_app(app, mail_server, mail_port, use_tls, username, password)\n    return mail", "problem": "Initializes a Flask-Mail instance for sending emails using the generated Flask application with the specified app_name.\nNote that: The details of the email server are retrieved from environment variables. If the variables do not exist, use defaults: 'MAIL_SERVER': 'localhost' 'MAIL_PORT': 25 'MAIL_USE_TLS': False (boolean) 'MAIL_USERNAME': None 'MAIL_PASSWORD': None\nThe function should output with:\n    tuple: A tuple containing the Flask-Mail instance and the app's mail configurations.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n```", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False) == 'True'\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    \n    mail = Mail(app)\n    \n    return mail, {\n        'MAIL_SERVER': app.config['MAIL_SERVER'],\n        'MAIL_PORT': app.config['MAIL_PORT'],\n        'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],\n        'MAIL_USERNAME': app.config['MAIL_USERNAME'],\n        'MAIL_PASSWORD': app.config['MAIL_PASSWORD']\n    }", "pass": false}
{"task_id": "402", "program": "import re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n\n    pass\nimport re\nimport requests\nimport json\nimport csv\nimport os\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n    # Make a GET request to the API\n    response = requests.get(API_URL)\n\n    # Check if the response was successful\n    if response.status_code != 200:\n        raise Exception('Failed to fetch data from API')\n\n    # Extract the data from the JSON response\n    data = json.loads(response.text)['data']\n\n    # Create a CSV file to store the matched data\n    csv_file = 'matched_data.csv'\n    with open(csv_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n\n        # Iterate over the data and extract the matched data\n        for item in data:\n            match = re.search(pattern, item)\n            if match:\n                writer.writerow([match.group()])\n\n    # Return the absolute path to the CSV file\n    return os.path.abspath(csv_file)\npattern = r'[0-9]+'", "problem": "Make a GET request to an API, extract data that matches a RegEx pattern, and write it to a CSV file.\nNote that: The CSV file generated name is \"matched_data.csv\" The JSON response from the GET request in the API contains a key named \"data\", from which the data is extracted.\nThe function should output with:\n    str: The absolute path to the CSV file containing matched data. If no data is matched, the file will be empty.\nYou should write self-contained code starting with:\n```\nimport re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n```", "solution": "import re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n\n    response = requests.get(API_URL)\n    data = json.loads(response.text)\n    matched_data = [re.findall(pattern, str(item)) for item in data['data']]\n    with open('matched_data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(matched_data)\n    return os.path.abspath('matched_data.csv')", "pass": false}
{"task_id": "403", "program": "from PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n\n    pass\nfrom PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n    \"\"\"\n    Open an RGB image from a specific path, apply a blur filter, convert it to grayscale, and then display both the original and the edited images side by side. Returns numpy arrays representing both the original and the processed images.\n    The function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\n    The function should output with:\n        tuple: A tuple containing two numpy arrays, the first representing the original image and\n        the second representing the blurred and grayscaled image.\n    \"\"\"\n    # Check if the image file exists at the specified path\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(\"Image file does not exist at the specified path\")\n\n    # Open the image file using PIL\n    img = Image.open(img_path)\n\n    # Convert the image to grayscale\n    gray = img.convert(\"L\")\n\n    # Apply a blur filter to the grayscale image\n    blurred = gray.filter(ImageFilter.GaussianBlur(radius=blur_radius))\n\n    # Convert the blurred image to numpy array\n    blurred_array = np.array(blurred)\n\n    # Convert the original image to numpy array\n    original_array = np.array(img)\n\n    # Display both the original and the edited images side by side\n    cv2.imshow(\"Original\", original_array)\n    cv2.imshow(\"Edited\", blurred_array)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\n    # Return the original and edited images as numpy arrays\n    return original_array, blurred_array", "problem": "Open an RGB image from a specific path, apply a blur filter, convert it to grayscale, and then display both the original and the edited images side by side. Returns numpy arrays representing both the original and the processed images.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays, the first representing the original image and\n    the second representing the blurred and grayscaled image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n```", "solution": "from PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n\n    img = Image.open(img_path)\n    img = img.convert(\"RGB\")\n\n    blurred_img = img.filter(ImageFilter.GaussianBlur(blur_radius))\n    grey_img = cv2.cvtColor(np.array(blurred_img), cv2.COLOR_RGB2GRAY)\n\n    return np.array(img), np.array(grey_img)", "pass": false}
{"task_id": "404", "program": "import cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n\n    pass\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n    \"\"\"\n    Open an RGB image, convert it to grayscale, find contours using the cv2 library, and return the original image and contours.\n    The function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\n    The function should output with:\n        tuple: A tuple containing the original image as a numpy array and a list of contours.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(\"Image file does not exist at the specified path.\")\n\n    # Open the image file\n    img = cv2.imread(img_path)\n\n    # Convert the image to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # Find contours in the image\n    contours, _ = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    # Return the original image and contours\n    return img, contours\nimg_path = \"image.jpg\"", "problem": "Open an RGB image, convert it to grayscale, find contours using the cv2 library, and return the original image and contours.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing the original image as a numpy array and a list of contours.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n```", "solution": "import cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n    \n    img = cv2.imread(img_path)\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n    # Find contours\n    contours, _ = cv2.findContours(gray_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    return np.array(img), contours", "pass": true}
{"task_id": "405", "program": "import random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n\n    pass\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n    \"\"\"\n    Generate a plot of random numbers such that indices are on the x-axis and generated numbers are on the y-axis.\n    The function should output with:\n        Returns a tuple containing:\n        A list of generated random numbers.\n        A matplotlib Axes object representing the plot.\n    \"\"\"\n    # Generate random numbers\n    random_numbers = [random.random() for _ in range(points)]\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the random numbers\n    ax.plot(random_numbers)\n\n    # Set the x-axis label\n    ax.set_xlabel(\"Index\")\n\n    # Set the y-axis label\n    ax.set_ylabel(\"Random Number\")\n\n    # Set the title\n    ax.set_title(\"Random Number Plot\")\n\n    # Show the plot\n    plt.show()\n\n    return random_numbers, ax", "problem": "Generate a plot of random numbers such that indices are on the x-axis and generated numbers are on the y-axis.\nThe function should output with:\n    Returns a tuple containing:\n    A list of generated random numbers.\n    A matplotlib Axes object representing the plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n```", "solution": "import random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n    x = list(range(points))\n    y = [random.random() for _ in range(points)]\n\n    _, ax = plt.subplots()\n    ax.plot(x, y)\n\n    return y, ax", "pass": true}
{"task_id": "406", "program": "from PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n\n    pass\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n    \"\"\"\n    Open an image, rotate it around a certain angle, and then display both the original and the rotated images side by side.\n    Additionally, return both images as numpy arrays.\n\n    Args:\n        img_path (str): The path to the image file.\n        angle (float): The angle to rotate the image by.\n\n    Returns:\n        tuple: A tuple containing two numpy arrays, the first representing the original image and\n        the second representing the rotated image. Expands the rotated image to make it large enough to hold the entire rotated image.\n\n    Raises:\n        FileNotFoundError: If the image file does not exist at the specified path.\n    \"\"\"\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"Image file not found at {img_path}\")\n\n    # Open the image and convert it to a numpy array\n    img = np.array(Image.open(img_path))\n\n    # Rotate the image by the specified angle\n    rotated_img = np.rot90(img, angle)\n\n    # Expand the rotated image to make it large enough to hold the entire rotated image\n    rotated_img = np.pad(rotated_img, ((0, 0), (0, 0), (0, 0)), \"constant\")\n\n    # Display both the original and rotated images side by side\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.title(\"Original Image\")\n    plt.subplot(122)\n    plt.imshow(rotated_img)\n    plt.title(\"Rotated Image\")\n    plt.show()\n\n    return img, rotated_img\nimg_path = \"image.jpg\"\nangle = 90", "problem": "Open an image, rotate it around a certain angle, and then display both the original and the rotated images side by side. Additionally, return both images as numpy arrays.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays, the first representing the original image and\n    the second representing the rotated image. Expands the rotated image to make it large enough to hold the entire rotated image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n```", "solution": "from PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n    \n    img = Image.open(img_path)\n    rotated_img = img.rotate(angle,expand=True)\n\n    # Convert images to numpy arrays\n    original_img_array = np.array(img)\n    rotated_img_array = np.array(rotated_img)\n    \n    # Display original and rotated images side by side\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.title('Original Image')\n    plt.subplot(1, 2, 2)\n    plt.imshow(rotated_img)\n    plt.title('Rotated Image')\n\n    return original_img_array, rotated_img_array", "pass": true}
{"task_id": "407", "program": "import os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n\n    pass\nimport os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n    \"\"\"\n    Converts an Excel file (.xls or .xlsx) to a CSV file by reading the contents of the Excel file and writing them to a new CSV file with the same name but a different extension.\n    Allows specifying separate paths for the Excel file source and the CSV file destination.\n    Note that: This function assumes the active sheet is the one to be converted.\n    The function should output with:\n        str: The name of the created CSV file.\n    \"\"\"\n    # Load the Excel file\n    wb = load_workbook(excel_file_path)\n    # Get the active sheet\n    sheet = wb.active\n    # Create a CSV file with the same name as the Excel file\n    csv_file_name = os.path.join(csv_file_path, file_name + \".csv\")\n    with open(csv_file_name, \"w\", newline=\"\") as csvfile:\n        writer = csv.writer(csvfile)\n        # Write the header row\n        writer.writerow(sheet.rows[0])\n        # Write the data rows\n        for row in sheet.rows[1:]:\n            writer.writerow(row)\n    return csv_file_name\nexcel_file_path = \"path/to/excel/file.xlsx\"\ncsv_file_path = \"path/to/csv/files\"\nfile_name = \"excel_file\"", "problem": "Converts an Excel file (.xls or .xlsx) to a CSV file by reading the contents of the Excel file and writing them to a new CSV file with the same name but a different extension. Allows specifying separate paths for the Excel file source and the CSV file destination.\nNote that: This function assumes the active sheet is the one to be converted.\nThe function should output with:\n    str: The name of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n```", "solution": "import os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n\n    excel_file = os.path.join(excel_file_path, file_name)\n    # Check if the Excel file exists\n    if not os.path.isfile(excel_file):\n        raise FileNotFoundError(f\"[Errno 2] No such file or directory: '{excel_file}'\")\n\n    workbook = load_workbook(filename=excel_file, read_only=True)\n    sheet = workbook.active\n\n    data = [[cell.value for cell in row] for row in sheet.iter_rows()]\n\n    csv_file_name = os.path.splitext(file_name)[0] + '.csv'\n    csv_file = os.path.join(csv_file_path, csv_file_name)\n\n    with open(csv_file, 'w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    return csv_file_name", "pass": false}
{"task_id": "408", "program": "import sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n\n    pass\nimport sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n    \"\"\"\n    Query an SQLite database and return the results.\n\n    Parameters\n    ----------\n    db_file : str\n        The path to the SQLite database file.\n    query : str\n        The SQL query to execute.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the results of the executed query.\n    \"\"\"\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_file)\n    # Create a cursor object\n    cursor = conn.cursor()\n    # Execute the query\n    cursor.execute(query)\n    # Fetch the results\n    results = cursor.fetchall()\n    # Create a DataFrame from the results\n    df = pd.DataFrame(results)\n    # Close the cursor and connection\n    cursor.close()\n    conn.close()\n    # Return the DataFrame\n    return df", "problem": "Query an SQLite database and return the results. This function connects to a given SQLite database, executes a given SQL query, and returns the results as a pandas DataFrame.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the results of the executed query.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n```", "solution": "import sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n    with sqlite3.connect(db_file) as conn:\n        return pd.read_sql_query(query, conn)", "pass": false}
{"task_id": "409", "program": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n\n    pass\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate the mean, median, and standard deviation of the data from a specific column in an Excel file.\n    The function should raise the exception for:\n        FileNotFoundError: If the Excel file does not exist at the specified path.\n        ValueError: If the specified column is not found in the Excel file.\n    The function should output with:\n        dict: A dictionary with the mean, median, and standard deviation.\n    \"\"\"\n    # Check if the Excel file exists at the specified path\n    if not os.path.isfile(excel_file_path):\n        raise FileNotFoundError(f\"Excel file not found at {excel_file_path}\")\n\n    # Read the Excel file into a pandas DataFrame\n    df = pd.read_excel(excel_file_path, sheet_name=file_name)\n\n    # Check if the specified column is in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} not found in Excel file\")\n\n    # Calculate the mean, median, and standard deviation of the column\n    mean = df[column_name].mean()\n    median = df[column_name].median()\n    std = df[column_name].std()\n\n    # Return a dictionary with the mean, median, and standard deviation\n    return {\"mean\": mean, \"median\": median, \"std\": std}\nexcel_file_path = \"data.xlsx\"\nfile_name = \"Sheet1\"\ncolumn_name = \"A\"", "problem": "Calculate the mean, median, and standard deviation of the data from a specific column in an Excel file.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified column is not found in the Excel file.\nThe function should output with:\n    dict: A dictionary with the mean, median, and standard deviation.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n```", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    excel_file = os.path.join(excel_file_path, file_name)\n    if not os.path.exists(excel_file):\n        raise FileNotFoundError(f\"No file found at {excel_file}\")\n\n    df = pd.read_excel(excel_file)\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the Excel file.\")\n\n    mean = np.mean(df[column_name])\n    median = np.median(df[column_name])\n    std_dev = np.std(df[column_name])\n\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}", "pass": false}
{"task_id": "410", "program": "import os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n\n    pass\nimport os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n    \"\"\"\n    Filters data in a specific date range from a column in an Excel file and returns a Pandas DataFrame of the filtered data.\n    The function should raise the exception for:\n        FileNotFoundError: If the specified Excel file does not exist.\n        ValueError: If start_date or end_date are in an incorrect format, or if column_name does not exist in the DataFrame.\n    The function should output with:\n        pd.DataFrame: A pandas DataFrame with the filtered data.\n    \"\"\"\n    # Check if the Excel file exists\n    if not os.path.isfile(os.path.join(excel_directory, file_name)):\n        raise FileNotFoundError(f\"Excel file {file_name} does not exist in {excel_directory}\")\n\n    # Read the Excel file into a Pandas DataFrame\n    df = pd.read_excel(os.path.join(excel_directory, file_name))\n\n    # Check if the column name exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} does not exist in the DataFrame\")\n\n    # Convert the start and end dates to datetime objects\n    start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n    end_date = datetime.strptime(end_date, \"%Y-%m-%d\")\n\n    # Filter the data based on the date range\n    df = df[(df[column_name] >= start_date) & (df[column_name] <= end_date)]\n\n    return df\nexcel_directory = \"C:/Users/JohnDoe/Documents\"\nfile_name = \"data.xlsx\"\ncolumn_name = \"Date\"\nstart_date = \"2022-01-01\"\nend_date = \"2022-01-31\"", "problem": "Filters data in a specific date range from a column in an Excel file and returns a Pandas DataFrame of the filtered data.\nThe function should raise the exception for: FileNotFoundError: If the specified Excel file does not exist. ValueError: If start_date or end_date are in an incorrect format, or if column_name does not exist in the DataFrame.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with the filtered data.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n```", "solution": "import os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n    excel_file = os.path.join(excel_directory, file_name)\n    if not os.path.exists(excel_file):\n        raise FileNotFoundError(f\"The file {excel_file} does not exist.\")\n\n    df = pd.read_excel(excel_file, engine='openpyxl')\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} does not exist in the DataFrame.\")\n\n    try:\n        df[column_name] = pd.to_datetime(df[column_name])\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')\n        end_date = datetime.strptime(end_date, '%Y-%m-%d')\n    except ValueError as e:\n        raise ValueError(\"Date format is incorrect. Please use 'yyyy-mm-dd' format.\") from e\n\n    filtered_df = df[(df[column_name] >= start_date) & (df[column_name] <= end_date)]\n\n    return filtered_df", "pass": true}
{"task_id": "411", "program": "import pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n\n    pass\nimport pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n    \"\"\"\n    Converts the given DataFrame to a dictionary, dropping the column named 'c' if it exists, and then saves it as a JSON file.\n    The function should output with:\n        str: Path where the JSON file was saved.\n    \"\"\"\n    # Convert the DataFrame to a dictionary\n    data_dict = data.to_dict(orient=\"records\")\n\n    # Drop the column named 'c' if it exists\n    if \"c\" in data_dict:\n        del data_dict[\"c\"]\n\n    # Save the dictionary as a JSON file\n    with open(output_path, \"w\") as f:\n        json.dump(data_dict, f)\n\n    return output_path", "problem": "Converts the given DataFrame to a dictionary, dropping the column named 'c' if it exists, and then saves it as a JSON file.\nThe function should output with:\n    str: Path where the JSON file was saved.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n```", "solution": "import pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n    df = pd.DataFrame(data)\n    # Drop column named 'c' if it exists\n    df = df.drop(columns=\"c\", errors=\"ignore\")\n    # Convert the DataFrame to dictionary\n    data_dict = df.to_dict(orient=\"dict\")\n    # Save the dictionary as a JSON file\n    with open(output_path, \"w\") as file:\n        json.dump(data_dict, file)\n\n    return output_path", "pass": false}
{"task_id": "412", "program": "import json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n\n    pass\nimport json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n    \"\"\"\n    This function reads a JSON file where each key is a unique identifier, and the corresponding value is a base64 encoded string.\n    After decoding, it applies Unicode normalization form C (NFC) to each decoded string to ensure the canonical composition of characters.\n    The function returns a dictionary where the keys are preserved, and the values are the normalized, decoded strings.\n    Decoding is performed using the UTF-8 encoding scheme.\n    \"\"\"\n    with open(json_file, \"r\") as f:\n        data = json.load(f)\n\n    result = {}\n    for key, value in data.items():\n        decoded_value = base64.b64decode(value).decode(\"utf-8\")\n        normalized_value = unicodedata.normalize(\"NFC\", decoded_value)\n        result[key] = normalized_value\n\n    return result", "problem": "This function reads a JSON file where each key is a unique identifier, and the corresponding value is a base64 encoded string. After decoding, it applies Unicode normalization form C (NFC) to each decoded string to ensure the canonical composition of characters. The function returns a dictionary where the keys are preserved, and the values are the normalized, decoded strings. Decoding is performed using the UTF-8 encoding scheme. >>> task_func('example.json') {'key1': 'Hello World', 'key2': 'Python Code Refiner'} Given a file 'empty.json' with the content: {} >>> task_func('empty.json') {}\nThe function should output with:\n    dict: A dictionary where each key is mapped to a normalized, decoded string from the base64 encoded value in the input file.\nYou should write self-contained code starting with:\n```\nimport json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n```", "solution": "import json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n    ENCODING = 'utf-8'\n    \n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    decoded_data = {k: unicodedata.normalize('NFC', base64.b64decode(v).decode(ENCODING)) for k, v in data.items()}\n\n    return decoded_data", "pass": true}
{"task_id": "413", "program": "import os\nfrom flask_mail import Mail\ndef task_func(app):\n\n    pass\nimport os\nfrom flask_mail import Mail\ndef task_func(app):\n    # Initialize Flask-Mail\n    mail = Mail(app)\n\n    # Retrieve email server details from environment variables\n    email_server = os.environ.get('EMAIL_SERVER', 'smtp.gmail.com')\n    email_port = os.environ.get('EMAIL_PORT', 587)\n    email_username = os.environ.get('EMAIL_USERNAME', 'your_email@gmail.com')\n    email_password = os.environ.get('EMAIL_PASSWORD', 'your_password')\n\n    # Set email server details\n    mail.init_app(\n        app,\n        email_server=email_server,\n        email_port=email_port,\n        email_username=email_username,\n        email_password=email_password\n    )\n\n    # Return Flask-Mail instance and app's mail configurations\n    return mail, {\n        'email_server': email_server,\n        'email_port': email_port,\n        'email_username': email_username,\n        'email_password': email_password\n    }", "problem": "Initialize a Flask application with Flask-Mail.\nNote that: The details of the email server are retrieved from environment variables. If the variables do not exist, use defaults.\nThe function should output with:\n    tuple: A tuple containing the Flask-Mail instance and the app's mail configurations.\nYou should write self-contained code starting with:\n```\nimport os\nfrom flask_mail import Mail\ndef task_func(app):\n```", "solution": "import os\nfrom flask_mail import Mail\ndef task_func(app):\n\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False) == 'True'\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    \n    mail = Mail(app)\n    \n    return mail, {\n        'MAIL_SERVER': app.config['MAIL_SERVER'],\n        'MAIL_PORT': app.config['MAIL_PORT'],\n        'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],\n        'MAIL_USERNAME': app.config['MAIL_USERNAME'],\n        'MAIL_PASSWORD': app.config['MAIL_PASSWORD']\n    }", "pass": false}
{"task_id": "414", "program": "import pandas as pd\nimport numpy as np\ndef task_func(data, column=\"c\"):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data, column=\"c\"):\n    \"\"\"\n    Remove a column from a data dictionary if it exists, and then plot the remaining data if it contains numeric data.\n    The function should output with:\n        df (pd.DataFrame): The modified DataFrame after removing the specified column.\n        ax (matplotlib.axes._axes.Axes or None): The plot of the modified DataFrame if there's\n        numeric data to plot, otherwise None.\n    \"\"\"\n    # Check if the column exists in the DataFrame\n    if column in data.columns:\n        # Remove the column from the DataFrame\n        data.drop(columns=[column], inplace=True)\n    \n    # Check if the DataFrame contains numeric data\n    if data.select_dtypes(include=np.number).empty:\n        # If the DataFrame does not contain numeric data, return None for the plot\n        ax = None\n    else:\n        # If the DataFrame contains numeric data, plot the data\n        ax = data.plot()\n    \n    return data, ax\ndata = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})", "problem": "Remove a column from a data dictionary if it exists, and then plot the remaining data if it contains numeric data.\nThe function should output with:\n    df (pd.DataFrame): The modified DataFrame after removing the specified column.\n    ax (matplotlib.axes._axes.Axes or None): The plot of the modified DataFrame if there's\n    numeric data to plot, otherwise None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, column=\"c\"):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data, column=\"c\"):\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=column)\n\n    # If there's no numeric data, return None for the plot.\n    if df.empty or not np.any(df.dtypes.apply(pd.api.types.is_numeric_dtype)):\n        return df, None\n\n    ax = df.plot()\n    return df, ax", "pass": false}
{"task_id": "415", "program": "import pandas as pd\nimport codecs\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport codecs\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Decodes all Unicode escape strings in a particular column (\"UnicodeString\") in a given Pandas DataFrame.\n    The function should raise the exception for:\n        KeyError: If the column \"UnicodeString\" does not exist in the DataFrame.\n        TypeError: If the input is not a Pandas DataFrame.\n    The function should output with:\n        pd.DataFrame: The DataFrame with decoded strings in the \"UnicodeString\" column.\n    \"\"\"\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input is not a Pandas DataFrame\")\n    if \"UnicodeString\" not in dataframe.columns:\n        raise KeyError(\"Column 'UnicodeString' does not exist in the DataFrame\")\n    dataframe[\"UnicodeString\"] = dataframe[\"UnicodeString\"].apply(lambda x: codecs.decode(x, \"unicode_escape\"))\n    return dataframe", "problem": "Decodes all Unicode escape strings in a particular column (\"UnicodeString\") in a given Pandas DataFrame.\nThe function should raise the exception for: KeyError: If the column \"UnicodeString\" does not exist in the DataFrame. TypeError: If the input is not a Pandas DataFrame.\nThe function should output with:\n    pd.DataFrame: The DataFrame with decoded strings in the \"UnicodeString\" column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport codecs\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport codecs\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"The input must be a pandas DataFrame.\")\n\n    if 'UnicodeString' not in dataframe.columns:\n        raise KeyError(\"'UnicodeString' column not found in the DataFrame.\")\n\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: codecs.decode(x, 'unicode_escape'))\n\n    return dataframe", "pass": true}
{"task_id": "416", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data, column=\"c\"):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data, column=\"c\"):\n    \"\"\"\n    Removes a column from a given data dictionary and creates a heatmap of the correlation matrix of the remaining data.\n    Non-numeric columns are excluded from the heatmap. If the data is empty or has no numeric columns, the function returns None.\n\n    Parameters:\n    data (dict): The data dictionary to process.\n    column (str): The column to remove from the data.\n\n    Returns:\n    matplotlib.axes._axes.Axes or None: The Axes object of the heatmap or None if the heatmap is not generated.\n    \"\"\"\n    # Check if the data is empty or has no numeric columns\n    if not data or not any(isinstance(v, (int, float)) for v in data.values()):\n        return None\n\n    # Remove the specified column from the data\n    data = {k: v for k, v in data.items() if k != column}\n\n    # Create a correlation matrix of the remaining data\n    corr_matrix = pd.DataFrame(data).corr()\n\n    # Create a heatmap of the correlation matrix\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    # Return the Axes object of the heatmap\n    return ax\ndata = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}", "problem": "Removes a column from a given data dictionary and creates a heatmap of the correlation matrix of the remaining data. Non-numeric columns are excluded from the heatmap. If the data is empty or has no numeric columns, the function returns None.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: The Axes object of the heatmap\n    or None if the heatmap is not generated.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data, column=\"c\"):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data, column=\"c\"):\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=column)\n\n    df = df.select_dtypes(include=[\"number\"])\n\n    if df.empty:\n        return None\n\n    return sns.heatmap(df.corr())", "pass": false}
{"task_id": "417", "program": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n\n    pass\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    # Split data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Construct Sequential model with one dense hidden layer and sigmoid activation function\n    model = Sequential()\n    model.add(Dense(units=64, activation='sigmoid', input_shape=(2,)))\n\n    # Compile model with binary cross-entropy loss and SGD optimizer\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n\n    # Fit model to training data without verbose output\n    model.fit(X_train, Y_train, epochs=100, batch_size=32, verbose=0)\n\n    # Evaluate model on test set\n    test_loss, test_acc = model.evaluate(X_test, Y_test)\n    print(f'Test accuracy: {test_acc:.3f}')\n\n    # Plot model's training and validation loss over epochs\n    plt.plot(model.history['loss'], label='Train')\n    plt.plot(model.history['val_loss'], label='Test')\n    plt.legend()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model loss')\n    plt.show()\n\n    return model, plt.gca()", "problem": "Trains a simple neural network on given input data and target labels. The function: - Splits the data into a training set (75%) and a test set (25%), assuming the input dimension is always 2. - Constructs a Sequential model with one dense hidden layer and a sigmoid activation function. - Compiles the model using binary cross-entropy loss and SGD optimizer with a specified learning rate. - Fits the model to the training data (without verbose output), also evaluating it on the test set as validation data. - Plots the model's training and validation loss over epochs and returns the plot's Axes object for further customization.\nNote that: Notes: The input dimension of X must always be 2. The Axes title is 'Model loss' The x-axis label is 'Epoch' The y-axis label is 'Loss'\nThe function should output with:\n    Sequential: The trained Keras Sequential model.\n    matplotlib.axes.Axes: The Axes object of the plot. The plot visualizes the model's training and validation loss over epochs, with the x-axis representing epochs and the y-axis representing loss. The legend distinguishes between 'Train' and 'Test' losses.\nYou should write self-contained code starting with:\n```\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n```", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25)\n\n    model = Sequential([Dense(input_dim=2, units=1, activation='sigmoid')])\n    model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))\n\n    history = model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test))\n\n    fig, ax = plt.subplots()\n    ax.plot(history.history['loss'], label='Train Loss')\n    ax.plot(history.history['val_loss'], label='Validation Loss')\n    ax.set_title('Model loss')\n    ax.set_ylabel('Loss')\n    ax.set_xlabel('Epoch')\n    ax.legend(['Train', 'Test'], loc='upper left')\n\n    return model, ax", "pass": false}
{"task_id": "418", "program": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n\n    pass\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model with one hidden layer using a sigmoid activation function\n    model = keras.Sequential([\n        keras.layers.Dense(64, activation='sigmoid', input_shape=(X.shape[1],)),\n        keras.layers.Dense(1)\n    ])\n\n    # Compile the model with binary cross-entropy loss and an SGD optimizer specifying a learning rate\n    model.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Fit the model to the training data in a non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Evaluate the model on the test set\n    Y_pred = model.predict(X_test)\n\n    # Plot the ROC curve for the model on the test set\n    fpr, tpr, thresholds = roc_curve(Y_test, Y_pred)\n    plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % auc(fpr, tpr))\n    plt.xlabel('False positive rate')\n    plt.ylabel('True positive rate')\n    plt.title('ROC curve')\n    plt.legend(loc='lower right')\n    plt.show()\n\n    return model, plt.gca()", "problem": "Divide the input data into training and test sets (70% training, 30% test), create a Keras Sequential model with one hidden layer using a sigmoid activation function, compile the model with binary cross-entropy loss and an SGD optimizer specifying a learning rate, fit the model to the training data in a non-verbose mode, and plot the ROC curve for the model on the test set, including the AUC score in the plot legend.\nNote that: Notes: The title of the axes should be 'ROC curve' The x label is 'False positive rate' The y label is 'True positive rate'\nThe function should output with:\n    keras.models.Sequential: The trained Keras model.\n    matplotlib.axes._axes.Axes: The matplotlib Axes object for the Precision-Recall curve plot.\nYou should write self-contained code starting with:\n```\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n```", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n    model = keras.Sequential([keras.layers.Dense(input_dim=2, units=1, activation='sigmoid')])\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))\n\n    model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)\n\n    Y_pred = model.predict(X_test, verbose=0).ravel()\n    fpr, tpr, thresholds = roc_curve(Y_test, Y_pred)\n    auc_score = auc(fpr, tpr)\n\n    fig, ax = plt.subplots()  # Create a figure and an axes object\n    ax.plot([0, 1], [0, 1], 'k--')\n    ax.plot(fpr, tpr, label='AUC = {:.3f}'.format(auc_score))\n    ax.set_xlabel('False positive rate')\n    ax.set_ylabel('True positive rate')\n    ax.set_title('ROC curve')\n    ax.legend(loc='best')\n\n    return model, ax  # Return both the model and the axes object", "pass": true}
{"task_id": "419", "program": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n\n    pass\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Construct Keras Sequential model with one hidden dense layer and sigmoid activation\n    model = keras.Sequential([\n        keras.layers.Dense(64, activation='sigmoid', input_shape=(X.shape[1],)),\n        keras.layers.Dense(1)\n    ])\n\n    # Compile model with binary cross-entropy loss and SGD optimizer\n    model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])\n\n    # Fit model to training data in non-verbose mode\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    # Evaluate model on test data\n    Y_pred = model.predict(X_test)\n\n    # Plot Precision-Recall curve\n    precision, recall, thresholds = precision_recall_curve(Y_test, Y_pred)\n    plt.plot(recall, precision, label='Precision-Recall curve')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title('Precision-Recall Curve')\n    plt.show()\n\n    return model, plt.gca()", "problem": "This function should: - Splits the input data into training (70%) and test (30%) sets. - Constructs a Keras Sequential model with one hidden dense layer and sigmoid activation. The input dimension is determined based on the first feature set of X. - Compiles the model using binary cross-entropy loss and SGD optimizer. - Fits the model to the training data in a non-verbose mode. - Plots the Precision-Recall curve for the model based on the test set data.\nNote that: Notes: The plot's x-axis is labeled 'Recall', and the y-axis is labeled 'Precision'. The title of the axes is set to 'Precision-Recall Curve'. The axes object allows for further customization of the plot outside the function.\nThe function should output with:\n    keras.models.Sequential: The trained Keras model.\n    matplotlib.axes._axes.Axes: The matplotlib Axes object for the Precision-Recall curve plot.\nYou should write self-contained code starting with:\n```\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n```", "solution": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n    input_dim = X.shape[1]  # Dynamically set input dimension\n\n    model = keras.models.Sequential([keras.layers.Dense(units=1, input_dim=input_dim, activation='sigmoid')])\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))\n\n    model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)\n\n    Y_pred = model.predict(X_test, verbose=0).ravel()\n    precision, recall, thresholds = precision_recall_curve(Y_test, Y_pred)\n\n    fig, ax = plt.subplots()  # Modify here to return Axes object\n    ax.plot(recall, precision, label='Precision-Recall curve')\n    ax.set_xlabel('Recall')\n    ax.set_ylabel('Precision')\n    ax.set_title('Precision-Recall Curve')\n    ax.legend(loc='best')\n\n    return model, ax  # Return both the model and the axes object", "pass": true}
{"task_id": "420", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n    \"\"\"\n    Scales numeric columns of a data dictionary using the StandardScaler.\n    This function scales the numeric columns of a dataframe using the StandardScaler from scikit-learn.\n    Non-numeric columns remain unchanged.\n    If a column contains mixed data types, it tries to convert the entire column to float.\n    If any value in the column cannot be converted to float, the entire column is left unchanged.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Dataframe with numeric and non-numeric columns.\n\n    Returns\n    -------\n    pd.DataFrame\n        Dataframe with scaled numeric columns.\n    \"\"\"\n    # Create a copy of the dataframe to avoid modifying the original data\n    data_scaled = data.copy()\n\n    # Get the names of the numeric columns\n    numeric_cols = data_scaled.select_dtypes(include=['number']).columns\n\n    # Create a StandardScaler object\n    scaler = StandardScaler()\n\n    # Scale the numeric columns\n    data_scaled[numeric_cols] = scaler.fit_transform(data_scaled[numeric_cols])\n\n    return data_scaled\ndata = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50], 'C': ['a', 'b', 'c', 'd', 'e']})", "problem": "Scales numeric columns of a data dictionary using the StandardScaler. This function scales the numeric columns of a dataframe using the StandardScaler from scikit-learn. Non-numeric columns remain unchanged. If a column contains mixed data types, it tries to convert the entire column to float. If any value in the column cannot be converted to float, the entire column is left unchanged.\nThe function should output with:\n    pd.DataFrame: Dataframe with scaled numeric columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n    dataframe = pd.DataFrame(data)\n    # Initialize the scaler\n    scaler = StandardScaler()\n\n    # Iterate over columns and scale if they are numeric\n    for column in dataframe.columns:\n        if dataframe[column].dtype in [\"float64\", \"int64\"]:\n            dataframe[column] = scaler.fit_transform(\n                dataframe[column].values.reshape(-1, 1)\n            )\n        else:\n            # Attempt to convert the entire column to float and then scale\n            converted_column = dataframe[column].apply(pd.to_numeric, errors=\"coerce\")\n            if (\n                not converted_column.isna().all()\n            ):  # If all values are convertible to float\n                dataframe[column] = scaler.fit_transform(\n                    converted_column.values.reshape(-1, 1)\n                )\n    return dataframe", "pass": false}
{"task_id": "421", "program": "import requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n\n    pass\nimport requests\nimport os\nimport json\nimport time\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n    \"\"\"\n    Upload all files from a specific directory to the specified server URL, along with the associated metadata.\n    In addition, the speed limit function pauses for one second after each upload.\n    The function should raise the exception for:\n        - The function will raise FileNotFoundError if the directory does not exist.\n        - The function will raise TypeError if the url is invalid.\n    The function should output with:\n        - list: A list of status codes for the upload responses.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    # Check if the URL is valid\n    if not url.startswith(\"http\"):\n        raise TypeError(\"Invalid URL.\")\n\n    # Get a list of all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n\n    # Initialize the list of status codes\n    status_codes = []\n\n    # Iterate over the files and upload them to the server\n    for file in files:\n        # Read the file's metadata\n        with open(os.path.join(directory, file), \"rb\") as f:\n            data = f.read()\n        # Upload the file to the server\n        response = requests.post(url, headers=HEADERS, data=data)\n        # Add the status code to the list\n        status_codes.append(response.status_code)\n        # Pause for one second\n        time.sleep(1)\n\n    # Return the list of status codes\n    return status_codes", "problem": "Upload all files from a specific directory to the specified server URL, along with the associated metadata. In addition, the speed limit function pauses for one second after each upload.\nThe function should raise the exception for: The function will raise FileNotFoundError if the directory does not exist. The function will raise TypeError if the url is invalid.\nThe function should output with:\n    list: A list of status codes for the upload responses.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n```", "solution": "import requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n\n    files = os.listdir(directory)\n    status_codes = []\n\n    for file in files:\n        if os.path.isfile(os.path.join(directory, file)):\n            with open(os.path.join(directory, file), 'rb') as f:\n                files = {'file': f}\n                response = requests.post(url, files=files, headers=HEADERS, data=json.dumps(metadata))\n                status_codes.append(response.status_code)\n                time.sleep(1)\n\n    return status_codes", "pass": true}
{"task_id": "422", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n    \"\"\"\n    Split the data into train and test datasets after removing a specified column if it exists.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The input data.\n    target_column : str\n        The name of the target column.\n    column_to_remove : str, optional\n        The name of the column to remove, by default \"c\"\n    test_size : float, optional\n        The proportion of the data to include in the test split, by default 0.2\n\n    Returns\n    -------\n    X_train : pd.DataFrame\n        Split features for training.\n    X_test : pd.DataFrame\n        Split features for testing.\n    y_train : pd.Series\n        Split target values for training.\n    y_test : pd.Series\n        Split target values for testing.\n    \"\"\"\n    # Remove the specified column if it exists\n    if column_to_remove in df.columns:\n        df = df.drop(columns=[column_to_remove])\n\n    # Split the data into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(df.drop(columns=[target_column]), df[target_column], test_size=test_size)\n\n    return X_train, X_test, y_train, y_test\ndf = pd.DataFrame({\"a\": [1, 2, 3, 4, 5], \"b\": [6, 7, 8, 9, 10], \"c\": [11, 12, 13, 14, 15], \"d\": [16, 17, 18, 19, 20]})", "problem": "Split the data into train and test datasets after removing a specified column if it exists.\nThe function should output with:\n    X_train (pd.DataFrame): Split features for training.\n    X_test  (pd.DataFrame): Split features for testing.\n    y_train    (pd.Series): Split target values for training.\n    y_test     (pd.Series): Split target values for testing.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n    df = pd.DataFrame(df)\n    # Drop the specified column if it exists in the dataframe\n    if column_to_remove in df.columns:\n        df = df.drop(columns=column_to_remove)\n\n    # Split the dataframe into training and test datasets\n    X_train, X_test, y_train, y_test = train_test_split(\n        df.drop(columns=target_column), df[target_column], test_size=test_size\n    )\n\n    return X_train, X_test, y_train, y_test", "pass": false}
{"task_id": "423", "program": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n\n    pass\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    \"\"\"\n    Read an RGB image, convert it to grayscale, binarize it using a given threshold, and return both the original and binarized images as numpy arrays.\n    The function checks for the existence of the image file and validates the threshold value.\n    The function should raise the exception for:\n        FileNotFoundError: If the image file does not exist at the specified path.\n        ValueError: If the threshold is not an integer or not in the range 0-255.\n    The function should output with:\n        tuple: A tuple containing two numpy arrays. The first array represents the original grayscale image,\n        and the second array represents the binarized image.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file not found at {image_path}\")\n\n    # Check if the threshold is an integer and in the range 0-255\n    if not isinstance(threshold, int) or threshold < 0 or threshold > 255:\n        raise ValueError(f\"Threshold must be an integer in the range 0-255, but got {threshold}\")\n\n    # Read the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to grayscale\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Binarize the image using the threshold\n    _, binarized = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY)\n\n    return gray, binarized\nimage_path = \"image.jpg\"\nthreshold = 128", "problem": "Read an RGB image, convert it to grayscale, binarize it using a given threshold, and return both the original and binarized images as numpy arrays. The function checks for the existence of the image file and validates the threshold value.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If the threshold is not an integer or not in the range 0-255.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays. The first array represents the original grayscale image,\n    and the second array represents the binarized image.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n```", "solution": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n\n    if not isinstance(threshold, int) or not (0 <= threshold <= 255):\n        raise ValueError(\"Threshold must be an integer between 0 and 255.\")\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    binary_img = np.where(img > threshold, 255, 0).astype('uint8')\n\n    return np.array(img), binary_img", "pass": true}
{"task_id": "424", "program": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n\n    pass\nimport cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads an RGB image, applies K-means clustering to segment the image into 'n_clusters' regions, and saves each region as a separate image. The function returns numpy arrays of the original and segmented images.\n    Note that: This function assumes the input image is in RGB format. The segmented image array will have the same shape as the original image but with pixel colors replaced by their corresponding cluster centroid colors, effectively segmenting the image into regions based on color similarity. Clustering with a single cluster is allowed and will return the original image as both the original and segmented images, since all pixels will be assigned to the same cluster.\n    The function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If 'n_clusters' is not a positive integer.\n    The function should output with:\n        tuple: A tuple containing two numpy arrays. The first array represents the original RGB image,\n        and the second array represents the segmented image, with each pixel's color replaced by\n        the centroid of the cluster it belongs to.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file not found at {image_path}\")\n\n    # Check if n_clusters is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"n_clusters must be a positive integer\")\n\n    # Read the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to RGB\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    # Reshape the image to a 2D array\n    image = image.reshape((-1, 3))\n\n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed).fit(image)\n\n    # Get the cluster centroids\n    centroids = kmeans.cluster_centers_\n\n    # Assign each pixel to the closest cluster\n    labels = kmeans.labels_\n\n    # Create a new image with the same shape as the original image\n    segmented_image = np.zeros(image.shape, dtype=np.uint8)\n\n    # Replace each pixel with the centroid of the cluster it belongs to\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            segmented_image[i, j] = centroids[labels[i, j]]\n\n    # Convert the segmented image to BGR format\n    segmented_image = cv2.cvtColor(segmented_image, cv2.COLOR_RGB2BGR)\n\n    return image, segmented_image", "problem": "Reads an RGB image, applies K-means clustering to segment the image into 'n_clusters' regions, and saves each region as a separate image. The function returns numpy arrays of the original and segmented images.\nNote that: This function assumes the input image is in RGB format. The segmented image array will have the same shape as the original image but with pixel colors replaced by their corresponding cluster centroid colors, effectively segmenting the image into regions based on color similarity. Clustering with a single cluster is allowed and will return the original image as both the original and segmented images, since all pixels will be assigned to the same cluster.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If 'n_clusters' is not a positive integer.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays. The first array represents the original RGB image,\n    and the second array represents the segmented image, with each pixel's color replaced by\n    the centroid of the cluster it belongs to.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n```", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"n_clusters must be a positive integer.\")\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    # Image processing\n    img = cv2.imread(image_path)\n    if img is None:\n        raise ValueError(\"Failed to read the image file.\")\n    if n_clusters == 1:\n        # Return the original image without modification if n_clusters is 1\n        return img, img.copy()\n    \n    pixels = img.reshape(-1, 3)\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    segmented_image = kmeans.cluster_centers_[kmeans.labels_]\n    segmented_image = segmented_image.reshape(img.shape).astype('uint8')\n\n    # Save each cluster as a separate image, if more than one cluster\n    if n_clusters > 1:\n        for i in range(n_clusters):\n            mask = kmeans.labels_.reshape(img.shape[:2]) == i\n            cluster_img = np.where(np.stack([mask]*3, axis=-1), segmented_image, np.array([255, 255, 255], dtype=np.uint8))\n            cv2.imwrite(f'cluster_{i+1}.jpg', cluster_img)\n\n    return np.array(img), np.array(segmented_image)", "pass": false}
{"task_id": "425", "program": "import cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n\n    pass\nimport cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n    # Check if the image file exists\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"Image file '{image_path}' does not exist.\")\n\n    # Read the image\n    image = cv2.imread(image_path)\n\n    # Create a histogram of the image pixel intensities\n    hist = cv2.calcHist([image], [0], None, [256], [0, 256])\n\n    # Normalize the histogram\n    hist = cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n\n    # Plot the histogram\n    plt.plot(hist)\n    plt.xlabel(\"Pixel intensity\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Image Pixel Intensities\")\n\n    # Save the histogram as a PNG file\n    plt.savefig(histogram_path)\n\n    # Return the histogram plot object\n    return plt.gca()\nimage_path = 'image.jpg'\nhistogram_path = 'histogram.png'\nimage = np.random.randint(0, 256, size=(20, 20), dtype=np.uint8)", "problem": "Read an image, create a histogram of the image pixel intensities, save the histogram as a PNG file, and return the histogram plot object. The function also displays the original image and its histogram. The limit to the size of the image depends on the hardware capabilities of the system you are working on. A possible size of an image is 20x20.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n```", "solution": "import cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    hist = cv2.calcHist([img], [0], None, [256], [0, 256])\n\n    plt.figure()\n    plt.title(\"Grayscale Histogram\")\n    plt.xlabel(\"Bins\")\n    plt.ylabel(\"# of Pixels\")\n    axes = plt.plot(hist)[0].axes\n    plt.savefig(histogram_path)\n    return axes", "pass": false}
{"task_id": "426", "program": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n\n    pass\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    \"\"\"\n    Read an image, convert it to grayscale, binarize it using a given threshold, and save it as 'binary_image.jpg'.\n    The function returns numpy arrays of the original and binarized images, and ensures that the threshold value is valid.\n    The function should raise the exception for:\n        FileNotFoundError: If the image file does not exist at the specified path.\n        ValueError: If the threshold is not an integer or not in the range 0-255.\n    The function should output with:\n        tuple: A tuple containing two numpy arrays; the first is the original grayscale image, the second is the binarized image.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"Image file '{image_path}' does not exist.\")\n\n    # Check if the threshold is an integer and in the range 0-255\n    if not isinstance(threshold, int) or threshold < 0 or threshold > 255:\n        raise ValueError(f\"Threshold value '{threshold}' is not an integer or not in the range 0-255.\")\n\n    # Read the image\n    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n\n    # Binarize the image\n    _, binary_image = cv2.threshold(image, threshold, 255, cv2.THRESH_BINARY)\n\n    # Save the binarized image\n    cv2.imwrite(\"binary_image.jpg\", binary_image)\n\n    return image, binary_image\nimage_path = \"image.jpg\"\nthreshold = 128", "problem": "Read an image, convert it to grayscale, binarize it using a given threshold, and save it as 'binary_image.jpg'. The function returns numpy arrays of the original and binarized images, and ensures that the threshold value is valid.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If the threshold is not an integer or not in the range 0-255.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays; the first is the original grayscale image, the second is the binarized image.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n```", "solution": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n\n    if not isinstance(threshold, int) or not (0 <= threshold <= 255):\n        raise ValueError(\"Threshold must be an integer between 0 and 255.\")\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    # Image processing\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    binary_img = np.where(img >= threshold, 255, 0).astype('uint8')\n    cv2.imwrite('binary_image.jpg', binary_img)\n\n    return np.array(img), np.array(binary_img)", "pass": true}
{"task_id": "427", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n    # Merge the two dataframes based on the 'id' column\n    df = pd.merge(df1, df2, on=\"id\")\n\n    # Perform linear regression using the specified features to predict the target\n    X = df[features]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n\n    # Get the regression coefficients and intercept\n    coefficients = model.coef_\n    intercept = model.intercept_\n\n    # Plot the residuals\n    residuals = model.resid_\n    plt.scatter(y, residuals)\n    plt.xlabel(\"Predicted Values\")\n    plt.ylabel(\"Residuals\")\n    plt.title(\"Residuals Plot\")\n    residuals_plot = plt.gca()\n\n    # Return a dictionary containing the regression coefficients, intercept, and residuals plot\n    return {\"coefficients\": coefficients, \"intercept\": intercept, \"residuals_plot\": residuals_plot}", "problem": "Perform linear regression analysis with specified characteristics and targets. The function should merge two dataframes based on the 'id' column, perform linear regression using columns specified in features to predict the target, and plot the residuals.\nThe function should output with:\n    dict: A dictionary containing:\n    'coefficients': Regression coefficients (list).\n    'intercept': Regression intercept (float).\n    'residuals_plot': A matplotlib Axes object representing the residuals plot, with the title 'Residuals Plot', x-axis label 'Predicted Values', and y-axis label 'Residuals'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n    df = pd.merge(df1, df2, on=\"id\")\n    X = df[features]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    y_pred = model.predict(X)\n    residuals = y - y_pred\n    fig, ax = plt.subplots()\n    ax.scatter(y_pred, residuals)  # scatter plot of residuals\n    ax.axhline(y=0, color=\"r\", linestyle=\"-\")  # horizontal line at y=0\n    ax.set_xlabel(\"Predicted Values\")\n    ax.set_ylabel(\"Residuals\")\n    ax.set_title(\"Residuals Plot\")\n    return {\n        \"coefficients\": list(model.coef_),\n        \"intercept\": model.intercept_,\n        \"residuals_plot\": ax,\n    }", "pass": false}
{"task_id": "428", "program": "import pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n    # Merge the two dataframes on the 'id' column\n    merged_df = pd.merge(df1, df2, on='id', how='outer')\n\n    # Scale the numeric features of the merged dataframe\n    scaler = StandardScaler()\n    scaled_df = scaler.fit_transform(merged_df.drop('id', axis=1))\n\n    # Create a pair plot of the scaled features from df1\n    pair_plot = sns.pairplot(scaled_df, hue='id')\n\n    return merged_df, pair_plot", "problem": "Merge two dataframes on the 'id' column and then scale the numeric features. This function merges two dataframes via outer join on the 'id' column, and scales the merged dataframe's numeric features from df1 to have a mean of 0 and standard deviation of 1. It also returns a pair plot of the scaled features from df1.\nThe function should output with:\n    merged_df (pd.DataFrame): The partially scaled and merged dataframe.\n    pair_plot (seaborn.axisgrid.PairGrid): Pair plot of the scaled dataframe.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n    merged_df = pd.merge(df1, df2, on=\"id\", how=\"outer\")\n\n    # Select only numeric columns from df1 (excluding 'id')\n    numeric_features_df1 = df1.select_dtypes(\n        include=[\"float64\", \"int64\"]\n    ).columns.tolist()\n    if \"id\" in numeric_features_df1:\n        numeric_features_df1.remove(\"id\")\n\n    # Scale only the numeric features of df1\n    if not merged_df.empty and numeric_features_df1:\n        scaler = StandardScaler()\n        merged_df[numeric_features_df1] = scaler.fit_transform(\n            merged_df[numeric_features_df1]\n        )\n\n    # Pair plot only for the numeric features of df1\n    pair_plot = None\n    if numeric_features_df1:\n        pair_plot = sns.pairplot(merged_df[numeric_features_df1])\n\n    return merged_df, pair_plot", "pass": false}
{"task_id": "429", "program": "import pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n\n    pass\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n    # Perform feature selection with SelectKBest (k=2)\n    selector = SelectKBest(f_classif, k=2)\n    selector.fit(df1, df2)\n    selected_features = selector.get_support(indices=True)\n\n    # Create a heatmap of the feature correlations\n    corr_matrix = df1.corr()\n    sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    return selected_features, corr_matrix", "problem": "Perform the feature selection with SelectKBest (k=2) and return a heatmap of the feature correlations.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list of the selected features.\n    Axes: A heatmap showing the correlation between the selected features.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n```", "solution": "import pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n    # Merge dataframes based on 'id'\n    df = pd.merge(df1, df2, on=\"id\")\n\n    # Separate features and target\n    features = df1.columns.drop(\"id\")\n    X = df[features]\n    y = df[\"target\"]\n\n    # Select top 2 features\n    selector = SelectKBest(f_classif, k=2)\n    X_new = selector.fit_transform(X, y)\n\n    selected_features = [x for x, y in zip(features, selector.get_support()) if y]\n\n    # Draw heatmap\n    heatmap = sns.heatmap(\n        pd.DataFrame(X_new, columns=selected_features).corr(), annot=True\n    )\n\n    return selected_features, heatmap", "pass": false}
{"task_id": "430", "program": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n\n    pass\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    # Merge datasets\n    df = pd.concat([df1, df2], axis=0)\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=2, n_init=10)\n    kmeans.fit(df[[column1, column2]])\n\n    # Get cluster labels\n    labels = kmeans.labels_\n\n    # Create scatterplot\n    fig, ax = plt.subplots()\n    ax.scatter(df[column1], df[column2], c=labels, cmap=\"viridis\")\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title(\"Clustered Data\")\n\n    return labels, ax", "problem": "Merge datasets, perform KMeans clustering, then return cluster labels and scatterplot. Each dataset is assumed to contain at least one id column and one feature column. The column to process is specified for df1 and df2 via column1 and column2, respectively. KMeans clustering is applied with k=2 and n_init=10. Resulting scatterplot shows column1 on the x-axis, column2 on the y-axis, and predicted cluster as color.\nThe function should output with:\n    labels (numpy.ndarray): Cluster labels for each data point (dtype=int32).\n    ax (matplotlib.axes._axes.Axes): The plotted figure's Axes object.\nYou should write self-contained code starting with:\n```\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n```", "solution": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    df = pd.merge(df1, df2, on=\"id\")\n    X = df[[column1, column2]]\n\n    kmeans = KMeans(n_clusters=2, n_init=10)\n    kmeans.fit(X)\n    labels = kmeans.labels_\n\n    _, ax = plt.subplots()\n    ax.scatter(X[column1], X[column2], c=kmeans.labels_)\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n\n    return labels, ax", "pass": false}
{"task_id": "431", "program": "import cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n\n    pass\nimport cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n    \"\"\"\n    Creates a histogram of the pixel values of a grayscale image.\n\n    Parameters\n    ----------\n    image_file : str\n        The path to the image file.\n\n    Returns\n    -------\n    np.ndarray\n        A 1D numpy array representing the histogram of the image, with 256 bins corresponding to\n        the pixel values in the range [0, 256). Each entry in the array represents the frequency of a pixel value\n        in the grayscale image.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified image file does not exist.\n    ValueError\n        If the image file is not a valid image.\n    \"\"\"\n    if not os.path.exists(image_file):\n        raise FileNotFoundError(f\"Image file '{image_file}' does not exist.\")\n\n    image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)\n    if image is None:\n        raise ValueError(f\"Image file '{image_file}' is not a valid image.\")\n\n    hist = cv2.calcHist([image], [0], None, [256], [0, 256])\n    return hist\nimage_file = \"image.jpg\"", "problem": "Creates a histogram of the pixel values of a grayscale image.\nNote that: The function assumes the image is in grayscale format. The histogram array is 1D with a size of 256, where each index corresponds to a pixel value, and the value at each index represents the count of pixels in the image with that pixel value.\nThe function should raise the exception for: FileNotFoundError: If the specified image file does not exist. ValueError: If the image file is not a valid image.\nThe function should output with:\n    np.ndarray: A 1D numpy array representing the histogram of the image, with 256 bins corresponding to\n    the pixel values in the range [0, 256). Each entry in the array represents the frequency of a pixel value\n    in the grayscale image.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n```", "solution": "import cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n    if not os.path.exists(image_file):\n        raise FileNotFoundError(f\"The file {image_file} does not exist.\")\n\n    img = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        raise ValueError(\"Invalid image file.\")\n\n    histogram, _ = np.histogram(img.ravel(), bins=256, range=[0,256])\n    \n    return histogram", "pass": false}
{"task_id": "432", "program": "import seaborn as sns\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    # Merge the two dataframes based on the 'id' column\n    merged_df = pd.merge(df1, df2, on=\"id\")\n\n    # Perform a chi-square independence test on the merged dataframe\n    chi2, p, dof, expected = chi2_contingency(merged_df[[column1, column2]])\n\n    # Draw a heatmap of the contingency table created from the features in column1 and column2\n    heatmap = sns.heatmap(merged_df[[column1, column2]].corr(), annot=True, cmap=\"coolwarm\")\n\n    return p, heatmap\ndf1 = pd.DataFrame({\"id\": [1, 2, 3], \"feature1\": [1, 2, 3], \"feature2\": [4, 5, 6]})\ndf2 = pd.DataFrame({\"id\": [1, 2, 3], \"feature1\": [7, 8, 9], \"feature2\": [10, 11, 12]})", "problem": "Merge two dataframes based on the 'id' column, perform a chi-square independence test on the merged dataframe, and draw a heatmap of the contingency table created from the features in column1, column2.\nThe function should output with:\n    tuple: A tuple containing:\n    p (float): The p-value of the Chi-Squared test.\n    heatmap (matplotlib.pyplot.Axes): Seaborn heatmap of the contingency table.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n```", "solution": "import seaborn as sns\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    df = pd.merge(df1, df2, on=\"id\")\n    contingency_table = pd.crosstab(df[column1], df[column2])\n    heatmap = sns.heatmap(contingency_table)\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p, heatmap", "pass": false}
{"task_id": "433", "program": "import base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n\n    pass\nimport base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n    \"\"\"\n    Validates the HMAC SHA-1 signature of a base64-encoded message against a provided signature using a specified secret key.\n\n    Args:\n        s (str): The base64-encoded message.\n        signature (str): The signature to be validated.\n        secret_key (str): The secret key used to compute the HMAC SHA-1 hash.\n\n    Returns:\n        bool: Returns True if the provided signature matches the computed signature, False otherwise.\n    \"\"\"\n    # Decode the base64-encoded message\n    decoded_message = base64.b64decode(s)\n\n    # Compute the HMAC SHA-1 hash of the decoded message using the secret key\n    hmac_sha1 = hmac.new(secret_key.encode(), decoded_message, hashlib.sha1)\n\n    # Convert the HMAC SHA-1 hash to a hexadecimal string\n    hmac_sha1_hex = hmac_sha1.hexdigest()\n\n    # Compare the computed HMAC SHA-1 hash with the provided signature\n    if hmac_sha1_hex == signature:\n        return True\n    else:\n        return False", "problem": "Validates the HMAC SHA-1 signature of a base64-encoded message against a provided signature using a specified secret key. This function first decodes the base64-encoded message, then computes its HMAC SHA-1 hash using the provided secret key, and finally compares this computed hash with the provided signature. >>> task_func('SGVsbG8gV29ybGQ=', 'incorrect_signature', 'my_secret_key') False\nThe function should output with:\n    bool: Returns True if the provided signature matches the computed signature, False otherwise.\nYou should write self-contained code starting with:\n```\nimport base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n```", "solution": "import base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n    decoded_msg = base64.b64decode(s).decode()\n    computed_signature = hmac.new(secret_key.encode(), decoded_msg.encode(), hashlib.sha1)\n    return binascii.hexlify(computed_signature.digest()).decode() == signature", "pass": true}
{"task_id": "434", "program": "import pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n    \"\"\"\n    Generate a Pandas DataFrame of products with their ID, quantity, code, price, product, and description based on a specified string of product data.\n\n    Parameters\n    ----------\n    s : str\n        A string of product data, where each segment is separated by a newline and each segment is further split into parts by whitespace.\n    seed : int, optional\n        A random seed for generating product names, by default 0\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame with columns: ['ID', 'Quantity', 'Code', 'Price', 'Product', 'Description'].\n    \"\"\"\n    # Split the input string into segments\n    segments = s.split(\"\\n\")\n\n    # Initialize an empty list to store the data\n    data = []\n\n    # Iterate over the segments\n    for segment in segments:\n        # Split the segment into parts\n        parts = segment.split()\n\n        # Extract the ID, quantity, code, price, and description\n        id = parts[0]\n        quantity = parts[1]\n        code = parts[2]\n        price = parts[3]\n        description = \" \".join(parts[4:])\n\n        # Remove trailing whitespaces in each field\n        id = id.strip()\n        quantity = quantity.strip()\n        code = code.strip()\n        price = price.strip()\n        description = description.strip()\n\n        # Assign a product name per unique code\n        if code not in data:\n            # Set the random seed\n            random.seed(seed)\n\n            # Randomly sample a product name from the list\n            product = random.choice(['Apple', 'Banana', 'Orange', 'Pear', 'Grape'])\n\n            # Add the product name to the data\n            data.append({\"ID\": id, \"Quantity\": quantity, \"Code\": code, \"Price\": price, \"Product\": product, \"Description\": description})\n\n    # Convert the data to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Set the data types of the columns\n    df[\"Quantity\"] = df[\"Quantity\"].astype(int)\n    df[\"Price\"] = df[\"Price\"].astype(int)\n\n    return df\ns = \"1 10 A10B 100 This is a description with spaces\\n2 20 B20C 200 Another description example\"", "problem": "Generate a Pandas DataFrame of products with their ID, quantity, code, price, product, and description based on a specified string of product data. The input string is expected to be divided into segments by newlines. Each segment is expected to be further split into parts by whitespace: ID, quantity, code, price, and a product description. The function will remove trailing whitespaces in each field and assign a product name per unique code. Product name is randomly sampled from: ['Apple', 'Banana', 'Orange', 'Pear', 'Grape']. The same product name will be assigned to each code for each input s, however different codes can be mapped to the same name. >>> s = '1 10 A10B 100 This is a description with spaces\\\\n2 20 B20C 200 Another description example' >>> df = task_func(s) >>> df ID  Quantity  Code  Price Product                        Description 0  1        10  A10B    100    Pear  This is a description with spaces 1  2        20  B20C    200    Pear        Another description example\nThe function should output with:\n    data_df (pd.DataFrame): DataFrame with columns: ['ID', 'Quantity', 'Code', 'Price', 'Product', 'Description'].\n    Quantity and Price are expected to be integers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n\n    if not s:\n        raise ValueError(\"Incomplete data provided.\")\n\n    random.seed(seed)\n\n    products = [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Grape\"]\n    code_to_product = dict()\n\n    data_list = []\n    segments = [segment.strip() for segment in s.split(\"\\n\")]\n    for segment in segments:\n        if segment:\n            elements = re.split(r\"\\s+\", segment.strip(), 4)\n            if len(elements) < 5:\n                raise ValueError(\"Incomplete data provided.\")\n            id, quantity, code, price, description = elements\n            product = code_to_product.get(code, random.choice(products))\n            data_list.append([id, quantity, code, price, product, description])\n    df = pd.DataFrame(\n        data_list, columns=[\"ID\", \"Quantity\", \"Code\", \"Price\", \"Product\", \"Description\"]\n    )\n    df[\"Quantity\"] = df[\"Quantity\"].astype(int)\n    df[\"Price\"] = df[\"Price\"].astype(int)\n    return df", "pass": false}
{"task_id": "435", "program": "import pandas as pd\nfrom random import randint\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nfrom random import randint\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n    data_df = pd.DataFrame({'Name': [name], 'Age': [age], 'Code': [code], 'Salary': [salary], 'Bio': [bio], 'Job Title': [job_title]})\n    return data_df\nname = 'John Doe'\nage = 30\ncode = '12345'\nsalary = 50000\nbio = 'John is a hardworking and dedicated employee.'", "problem": "Generate a Pandas DataFrame of employees with their details based on the input provided.\nThe function should output with:\n    data_df (pd.DataFrame): dataframe with columns: 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'.\n    The 'Job Title' is randomly assigned from the predefined job titles:\n    'Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nfrom random import randint\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    EMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    JOBS = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    if name not in EMPLOYEES:\n        raise ValueError(f\"Invalid employee name. Must be one of {EMPLOYEES}\")\n\n    job = JOBS[randint(0, len(JOBS) - 1)]\n    data_df = pd.DataFrame(\n        [[name, age, code, salary, bio, job]],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    return data_df", "pass": false}
{"task_id": "436", "program": "import string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n\n    pass\nimport string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Convert the input string to lowercase\n    s = s.lower()\n\n    # Create a dictionary to store the frequency of each letter\n    letter_freq = {}\n\n    # Iterate through each letter in the string\n    for letter in s:\n        # If the letter is not already in the dictionary, add it with a frequency of 1\n        if letter not in letter_freq:\n            letter_freq[letter] = 1\n        # Otherwise, increment the frequency of the letter\n        else:\n            letter_freq[letter] += 1\n\n    # Create a list of letters and their frequencies\n    letters = [letter for letter in letter_freq]\n    frequencies = [letter_freq[letter] for letter in letters]\n\n    # Create a bar chart of the letter frequencies\n    plt.bar(letters, frequencies)\n    plt.xlabel(\"Letters\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Letter Frequencies\")\n\n    # Return the dictionary of letter frequencies and the bar chart\n    return letter_freq, plt.gca()\ns = \"The quick brown fox jumps over the lazy dog\"", "problem": "Calculate the frequency of each letter in a string and return a bar chart of frequencies. Results are case-insensitive. If non-string input is provided, function will throw an error.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the frequency of each letter.\n    Axes: The bar subplot of 'Letter Frequencies' with 'Letters' on the x-axis and 'Frequency'\n    on the y-axis.\nYou should write self-contained code starting with:\n```\nimport string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n```", "solution": "import string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n\n    if not isinstance(s, str):\n        raise TypeError(\"Expected string input\")\n\n    LETTERS = string.ascii_lowercase\n\n    s = s.lower()\n\n    letter_counts = {letter: s.count(letter) for letter in LETTERS}\n\n    fig, ax = plt.subplots()\n    ax.bar(letter_counts.keys(), letter_counts.values())\n    ax.set_xlabel(\"Letters\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Letter Frequencies\")\n\n    return letter_counts, ax", "pass": false}
{"task_id": "437", "program": "import pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n\n    pass\nimport pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n    # Save the DataFrame to a pickle file\n    with open(file_name, \"wb\") as f:\n        pickle.dump(df, f)\n\n    # Read the DataFrame back from the pickle file\n    with open(file_name, \"rb\") as f:\n        loaded_df = pickle.load(f)\n\n    # Delete the intermediate file\n    os.remove(file_name)\n\n    return loaded_df", "problem": "Save the provided Pandas DataFrame \"df\" in a pickle file with the given name, read it back for validation, and delete the intermediate file.\nThe function should output with:\n    loaded_df (pd.DataFrame): The loaded DataFrame from the specified file.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n```", "solution": "import pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n    with open(file_name, \"wb\") as file:\n        pickle.dump(df, file)\n\n    with open(file_name, \"rb\") as file:\n        loaded_df = pickle.load(file)\n\n    os.remove(file_name)\n\n    return loaded_df", "pass": true}
{"task_id": "438", "program": "import pickle\nimport os\nimport matplotlib.pyplot as plt\ndef task_func(numbers, file_path=\"save.pkl\"):\n\n    pass\nimport pickle\nimport os\nimport matplotlib.pyplot as plt\ndef task_func(numbers, file_path=\"save.pkl\"):\n    \"\"\"\n    Save a Matplotlib image generated from the provided \"numbers\" list in a pickle file.\n    The function then reads the image back from the file for validation and deletes the pickle file afterward.\n    The function should raise the exception for: TypeError: If the input is not a list of numbers.\n    The function should output with:\n        loaded_fig (matplotlib.figure.Figure): The loaded matplotlib figure from file_path.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of numbers.\")\n\n    # Create a figure and plot the numbers\n    fig, ax = plt.subplots()\n    ax.plot(numbers)\n\n    # Save the figure to a pickle file\n    with open(file_path, \"wb\") as f:\n        pickle.dump(fig, f)\n\n    # Load the figure from the pickle file\n    with open(file_path, \"rb\") as f:\n        loaded_fig = pickle.load(f)\n\n    # Validate the loaded figure\n    assert loaded_fig.axes[0].get_xlabel() == \"Numbers\"\n    assert loaded_fig.axes[0].get_ylabel() == \"Values\"\n    assert loaded_fig.axes[0].get_title() == \"Plot of Numbers\"\n\n    # Delete the pickle file\n    os.remove(file_path)\n\n    return loaded_fig\nnumbers = [1, 2, 3, 4, 5]\nfile_path = \"save.pkl\"", "problem": "Save a Matplotlib image generated from the provided \"numbers\" list in a pickle file. The function then reads the image back from the file for validation and deletes the pickle file afterward.\nThe function should raise the exception for: TypeError: If the input is not a list of numbers.\nThe function should output with:\n    loaded_fig (matplotlib.figure.Figure): The loaded matplotlib figure from file_path.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\nimport matplotlib.pyplot as plt\ndef task_func(numbers, file_path=\"save.pkl\"):\n```", "solution": "import pickle\nimport os\nimport matplotlib.pyplot as plt\ndef task_func(numbers, file_path=\"save.pkl\"):\n\n    if not isinstance(numbers, list) or not all(\n        isinstance(item, (int, float)) for item in numbers\n    ):\n        raise TypeError(\"Expect list of numbers.\")\n\n    fig = plt.figure()\n    plt.plot(numbers)\n\n    with open(file_path, \"wb\") as file:\n        pickle.dump(fig, file)\n\n    with open(file_path, \"rb\") as file:\n        loaded_fig = pickle.load(file)\n\n    os.remove(file_path)\n\n    return loaded_fig", "pass": false}
{"task_id": "439", "program": "import numpy as np\nimport seaborn as sns\ndef task_func(P, T):\n\n    pass\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n    \"\"\"\n    Calculate the product of a matrix 'P' and a 3D tensor 'T' using numpy and visualize the results as a heatmap.\n    Note that: This function only accepts numpy matrices/arrays.\n    The function should output with:\n        numpy.ndarray: Resultant product after matrix-tensor multiplication.\n        matplotlib.axes.Axes: Axes object displaying the heatmap of the 2D result.\n    \"\"\"\n    # Calculate the product of the matrix and tensor\n    result = np.dot(P, T)\n\n    # Reshape the result into a 2D array\n    result = result.reshape(result.shape[0], -1)\n\n    # Create a heatmap of the 2D result\n    fig, ax = plt.subplots()\n    sns.heatmap(result, ax=ax)\n\n    return result, ax\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])", "problem": "Calculate the product of a matrix 'P' and a 3D tensor 'T' using numpy and visualize the results as a heatmap.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    numpy.ndarray: Resultant product after matrix-tensor multiplication.\n    matplotlib.axes.Axes: Axes object displaying the heatmap of the 2D result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(P, T):\n```", "solution": "import numpy as np\nimport seaborn as sns\ndef task_func(P, T):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    result = np.tensordot(P, T, axes=[1, 0])\n    # Sum along the last dimension to get a 2D matrix\n    result_2D = np.sum(result, axis=-1)\n    heatmap = sns.heatmap(result_2D)\n    return result, heatmap", "pass": false}
{"task_id": "440", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n    \"\"\"\n    Calculate the product of matrix \"P\" and 3D tensor \"T\" then return dataframe of normalized results.\n\n    Parameters\n    ----------\n    P : numpy.ndarray\n        A 2D matrix.\n    T : numpy.ndarray\n        A 3D tensor.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with the normalized result.\n    \"\"\"\n    # Check if the shapes of P and T are compatible for multiplication\n    if P.shape[1] != T.shape[1]:\n        raise ValueError(\"Incompatible shapes for matrix-tensor multiplication\")\n\n    # Perform matrix-tensor multiplication\n    result = np.dot(P, T)\n\n    # Flatten the resulting 2D array\n    result = result.reshape(-1, result.shape[-1])\n\n    # Normalize the resulting array using sklearn's StandardScaler\n    scaler = StandardScaler()\n    result = scaler.fit_transform(result)\n\n    # Create a pandas DataFrame with the normalized result\n    df = pd.DataFrame(result, columns=[\"feature_{}\".format(i) for i in range(result.shape[1])])\n\n    return df\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])", "problem": "Calculate the product of matrix \"P\" and 3D tensor \"T\" then return dataframe of normalized results. This function performs matrix-tensor multiplication between a matrix \"P\" and a 3D tensor \"T\" using numpy. It checks if the shapes of P and T are compatible for multiplication, raising a ValueError if they are not. The function then normalizes the resulting 2D array using sklearn's StandardScaler. The final output is returned as a pandas DataFrame, with columns named feature_0, feature_1, ..., feature_n, where n is the number of features in the flattened result of the matrix-tensor multiplication.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with the normalized result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n    if P.size == 0 or T.size == 0:\n        raise ValueError(\"Inputs cannot be empty.\")\n    if P.shape[1] != T.shape[0]:\n        raise ValueError(\n            f\"Matrix P shape {P.shape[1]} and Tensor T shape {T.shape[0]} are incompatible for tensor multiplication.\"\n        )\n\n    result = np.tensordot(P, T, axes=[1, 0]).swapaxes(0, 1)\n    result = result.reshape(result.shape[0], -1)\n\n    scaler = StandardScaler()\n    result = scaler.fit_transform(result)\n\n    adjusted_feature_names = [f\"feature_{i}\" for i in range(result.shape[1])]\n    result = pd.DataFrame(result, columns=adjusted_feature_names)\n\n    return result", "pass": false}
{"task_id": "441", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef task_func(P, T):\n    \"\"\"\n    Calculate the product of a matrix \"P\" and a 3D tensor \"T\" with numpy and then visualize the result in 3D with matplotlib.\n    The product of the matrix and tensor is based on the Einstein summation.\n    Note that: This function only accepts numpy matrices/arrays.\n    The function should output with:\n        tuple:\n        result (numpy.ndarray): The product of matrix P and tensor T with shape (N, 3).\n        ax (mpl_toolkits.mplot3d.axes3d.Axes3D): The 3D visualization of the result.\n    \"\"\"\n    # Calculate the product of the matrix and tensor\n    result = np.einsum('ij,jkl->ikl', P, T)\n\n    # Create a 3D plot\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Plot the result as a surface\n    ax.plot_surface(result[:, :, 0], result[:, :, 1], result[:, :, 2], cmap='viridis')\n\n    # Add a title and labels\n    ax.set_title('Product of Matrix and Tensor')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n\n    return result, ax\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])", "problem": "Calculate the product of a matrix \"P\" and a 3D tensor \"T\" with numpy and then visualize the result in 3D with matplotlib. The product of the matrix and tensor is based on the Einstein summation.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    tuple:\n    result (numpy.ndarray): The product of matrix P and tensor T with shape (N, 3).\n    ax (mpl_toolkits.mplot3d.axes3d.Axes3D): The 3D visualization of the result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    # Compute the matrix-tensor product to ensure the result has the desired shape\n    result = np.einsum(\"ij,jkl->ik\", P, T)\n\n    # Visualize the result in 3D\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ax.scatter(result[:, 0], result[:, 1], result[:, 2])\n\n    # Return the result and the 3D visualization\n    return result, ax", "pass": false}
{"task_id": "442", "program": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n\n    pass\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n    # Calculate the product of the matrix P and the 3D tensor T\n    result = np.dot(P, T.reshape(tensor_shape[0], -1))\n\n    # Apply PCA to reduce the dimensionality of the result\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(result)\n\n    # Visualize the PCA result\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA Result Visualization')\n\n    return pca_result, ax\nP = np.array([[1, 2, 3], [4, 5, 6]])\nT = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]])", "problem": "Calculate the product of a matrix \"P\" and a 3D tensor \"T\" with numpy and then apply PCA to reduce the dimensionality of the result. The resulting 2D data is then visualized.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    pca_result (numpy.ndarray): The result of PCA of shape (N, 2), where N is the number of rows in matrix P.\n    ax (matplotlib.axes.Axes): Plot of 'PCA Result Visualization', with 'Principal Component 1' on the x-axis\n    and 'Principal Component 2' on the y-axis.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n```", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    if not T.shape == tensor_shape:\n        raise ValueError(\"Provided tensor does not match the specified tensor_shape.\")\n\n    result = np.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)\n\n    # Reshape the result for PCA\n    result = result.reshape(result.shape[0], -1)\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(result)\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_title(\"PCA Result Visualization\")\n    ax.set_xlabel(\"Principal Component 1\")\n    ax.set_ylabel(\"Principal Component 2\")\n\n    return pca_result, ax", "pass": false}
{"task_id": "443", "program": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n\n    pass\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(P, T, n_clusters=3, random_state=0, n_init=10):\n    # Calculate the product of the matrix P and the 3D tensor T\n    product = np.dot(P, T)\n\n    # Flatten the result\n    flattened = product.reshape(-1, 1)\n\n    # Apply KMeans clustering to the flattened data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened)\n\n    # Visualize the KMeans clustering\n    ax = plt.subplot(111)\n    ax.set_title('KMeans Clustering Visualization')\n    ax.scatter(flattened[:, 0], cluster_result, c=cluster_result)\n    ax.set_xlabel('Flattened Data')\n    ax.set_ylabel('Cluster Labels')\n    ax.set_zlabel('Cluster Centroids')\n\n    return cluster_result, ax\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nn_clusters = 3\nrandom_state = 0\nn_init = 10", "problem": "Calculate the product of a matrix 'P' and a 3D tensor 'T', flatten the result, apply KMeans clustering to the flattened data, and visualize it.\nThe function should output with:\n    cluster_result (numpy.ndarray): The result of KMeans clustering.\n    ax (matplotlib.axes.Axes): The visualization of the KMeans clustering, with the title 'KMeans Clustering Visualization'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n```", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n\n    tensor_shape = (3, 3, 3)\n    if not T.shape == tensor_shape:\n        raise ValueError(\"Provided tensor does not match the expected shape.\")\n\n    # Using numpy for tensor product\n    result = np.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)\n    flattened_result = result.reshape(-1, tensor_shape[2])  # Flattening the result\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result)\n    fig, ax = plt.subplots()\n    ax.scatter(flattened_result[:, 0], flattened_result[:, 1], c=cluster_result)\n    ax.set_title(\"KMeans Clustering Visualization\")\n    return cluster_result, ax", "pass": false}
{"task_id": "444", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(n_points=100, random_seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef task_func(n_points=100, random_seed=None):\n    \"\"\"\n    Generate an array of random 3D dots in the range [0, 1) for each dimension and draw them in a 3D scatter plot.\n\n    Parameters\n    ----------\n    n_points : int, optional\n        The number of points to generate, by default 100\n    random_seed : int, optional\n        The random seed to use for generating the points, by default None\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n        points (ndarray): A numpy ndarray of shape (n_points, 3) with the coordinates of the points.\n        plot (Axes3D): A 3D scatter plot of the generated points.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    points = np.random.rand(n_points, 3)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter(points[:, 0], points[:, 1], points[:, 2])\n\n    return points, ax", "problem": "Generate an array of random 3D dots in the range [0, 1) for each dimension and draw them in a 3D scatter plot.\nThe function should output with:\n    tuple: A tuple containing:\n    points (ndarray): A numpy ndarray of shape (n_points, 3) with the coordinates of the points.\n    plot (Axes3D): A 3D scatter plot of the generated points.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(n_points=100, random_seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(n_points=100, random_seed=None):\n    np.random.seed(random_seed)\n    points = np.random.random((n_points, 3))\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ax.scatter(points[:, 0], points[:, 1], points[:, 2])\n\n    return points, ax", "pass": true}
{"task_id": "445", "program": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n\n    pass\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate the Voronoi diagram for a number of points in 2D and plot it.\n    Note that: this function will raise errors when input is invalid, for example wrong type or shape.\n    Jittering is applied prior to plotting.\n    The function should output with:\n        tuple (vor, ax): A tuple containing:\n        vor (Voronoi): A Voronoi object representing the Voronoi diagram of the points.\n        ax (Axes): The axes of the plotted Voronoi diagram.\n    \"\"\"\n    # Check if the input is valid\n    if not isinstance(points, np.ndarray) or points.shape[1] != 2:\n        raise ValueError(\"Invalid input: points must be a 2D numpy array.\")\n\n    # Jitter the points to avoid duplicate points\n    points = points + np.random.rand(points.shape[0], 2) * 1e-6\n\n    # Calculate the Voronoi diagram\n    vor = Voronoi(points)\n\n    # Plot the Voronoi diagram\n    ax = voronoi_plot_2d(vor, show_points=True, show_vertices=False)\n\n    # Return the Voronoi object and the axes\n    return vor, ax\npoints = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])", "problem": "Calculate the Voronoi diagram for a number of points in 2D and plot it.\nNote that: this function will raise errors when input is invalid, for example wrong type or shape. Jittering is applied prior to plotting.\nThe function should output with:\n    tuple (vor, ax): A tuple containing:\n    vor (Voronoi): A Voronoi object representing the Voronoi diagram of the points.\n    ax (Axes): The axes of the plotted Voronoi diagram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n```", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Expected Numpy array\")\n    if len(points) < 3:\n        raise ValueError(\"Voronoi diagram needs at least 3 points\")\n    if points.shape[-1] != 2:\n        raise ValueError(\"Expected array of 2D points\")\n\n    np.random.seed(seed)\n\n    # Add a slight random jitter to the points\n    jittered_points = points + np.random.normal(0, 1e-10, points.shape)\n\n    vor = Voronoi(jittered_points)\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n\n    return vor, ax", "pass": false}
{"task_id": "446", "program": "import matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\nimport numpy as np\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n    \"\"\"\n    Create isotropic Gaussian blobs to form clusters and visualize them.\n\n    Parameters\n    ----------\n    n_samples : int, optional\n        The number of samples to generate.\n    centers : int, optional\n        The number of clusters to generate.\n    n_features : int, optional\n        The number of features to generate.\n    random_seed : int, optional\n        The random seed to use for reproducibility.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n        X (numpy.ndarray): The matrix of blob points.\n        y (numpy.ndarray): The vector of blob labels.\n        ax (matplotlib.axes.Axes): The Axes object with the scatter plot.\n    \"\"\"\n    # Generate isotropic Gaussian blobs\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n\n    # Visualize the blobs\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    ax.set_title('Isotropic Gaussian Blobs')\n\n    return X, y, ax", "problem": "Create isotropic Gaussian blobs to form clusters and visualize them.\nThe function should output with:\n    tuple: A tuple containing:\n    X (numpy.ndarray): The matrix of blob points.\n    y (numpy.ndarray): The vector of blob labels.\n    ax (matplotlib.axes.Axes): The Axes object with the scatter plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n```", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n    X, y = make_blobs(\n        n_samples=n_samples,\n        centers=centers,\n        n_features=n_features,\n        random_state=random_seed,\n    )\n\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n\n    return X, y, ax", "pass": true}
{"task_id": "447", "program": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n\n    pass\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n    \"\"\"\n    Performs Principal Component Analysis (PCA) on the provided dataset to reduce its dimensionality, and visualizes the results using a scatter plot.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        The input data.\n    n_components : int, optional\n        The number of principal components to retain. The default is 2.\n    random_state : int, optional\n        The random state for the PCA algorithm. The default is None.\n\n    Returns\n    -------\n    dict\n        A dictionary containing:\n        \"transformed_data\" (np.ndarray): The transformed data.\n        \"ax\" (plt.Axes): The scatter plot visualizing the transformed data.\n    \"\"\"\n    # Perform PCA on the data\n    pca = PCA(n_components=n_components, random_state=random_state)\n    transformed_data = pca.fit_transform(data)\n\n    # Visualize the transformed data\n    if n_components == 1:\n        # Generate a 1D scatter plot along the X-axis\n        ax = plt.scatter(transformed_data[:, 0], np.zeros(transformed_data.shape[0]), c=data[:, 0])\n    else:\n        # Generate a 2D scatter plot\n        ax = plt.scatter(transformed_data[:, 0], transformed_data[:, 1], c=data[:, 0])\n\n    return {\"transformed_data\": transformed_data, \"ax\": ax}", "problem": "Performs Principal Component Analysis (PCA) on the provided dataset to reduce its dimensionality, and visualizes the results using a scatter plot. This function applies PCA to the dataset, reducing its features to the specified number of principal components. It then visualizes the reduced data in a scatter plot. For datasets reduced to a single component, the function generates a 1D scatter plot along the X-axis, with all Y-values set to zero. For reductions resulting in two or more components, only the first two principal components are visualized.\nThe function should output with:\n    dict: A dictionary containing:\n    \"transformed_data\" (np.ndarray): The transformed data.\n    \"ax\" (plt.Axes): The scatter plot visualizing the transformed data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n```", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n    pca = PCA(n_components=n_components, random_state=random_state)\n    transformed_data = pca.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    if transformed_data.shape[1] == 1:\n        ax.scatter(transformed_data[:, 0], np.zeros_like(transformed_data[:, 0]))\n    else:\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n\n    return {\"transformed_data\": transformed_data, \"ax\": ax}", "pass": false}
{"task_id": "448", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return ax\nmu = 0\nsigma = 1", "problem": "Draw and return a subplot of a normal distribution with the given mean and standard deviation, utilizing numpy's linspace to create an array of 100 linearly spaced numbers between `mu - 3*sigma` and `mu + 3*sigma`.\nThe function should output with:\n    matplotlib.axes.Axes: The subplot representing the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return ax", "pass": true}
{"task_id": "449", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n    \"\"\"\n    This function takes a pandas DataFrame and standardizes its features using sklearn's StandardScaler, which standardizes features by removing the mean and scaling to unit variance. After standardization, it draws a histogram for each feature with 20 bins.\n    The function should output with:\n        standardized_data (pd.DataFrame): The standardized data.\n        axes_list (list): A list of matplotlib Axes objects representing the histograms for each feature.\n    \"\"\"\n    # Standardize the data\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n\n    # Create a list to store the histogram Axes objects\n    axes_list = []\n\n    # Iterate over the features and create a histogram for each one\n    for feature in data.columns:\n        # Create a histogram with 20 bins\n        ax = plt.hist(standardized_data[feature], bins=20)\n\n        # Add the Axes object to the list\n        axes_list.append(ax)\n\n    return standardized_data, axes_list", "problem": "This function takes a pandas DataFrame and standardizes its features using sklearn's StandardScaler, which standardizes features by removing the mean and scaling to unit variance. After standardization, it draws a histogram for each feature with 20 bins.\nThe function should output with:\n    standardized_data (pd.DataFrame): The standardized data.\n    axes_list (list): A list of matplotlib Axes objects representing the histograms for each feature.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n    FEATURES = [\"Feature1\", \"Feature2\", \"Feature3\", \"Feature4\", \"Feature5\"]\n\n    scaler = StandardScaler()\n    data_standardized = pd.DataFrame(\n        scaler.fit_transform(data[FEATURES]), columns=FEATURES\n    )\n\n    axes_list = []\n    for feature in FEATURES:\n        fig, ax = plt.subplots()\n        ax.hist(data_standardized[feature], bins=20, alpha=0.5)\n        ax.set_title(\"Histogram of {}\".format(feature))\n        axes_list.append(ax)\n\n    return data_standardized, axes_list", "pass": false}
{"task_id": "450", "program": "from scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n\n    pass\nfrom scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n    \"\"\"\n    Generate a synthetic 2D dataset using make_blobs, visualize the dataset, and then calculate the Euclidean distance between individual samples of the dataset.\n\n    Args:\n        n_samples (int, optional): Number of samples to generate. Defaults to 200.\n        centers (int, optional): Number of centers to generate. Defaults to 4.\n        plot_path (str, optional): Path to save the plot. Defaults to None.\n        random_seed (int, optional): Random seed for reproducibility. Defaults to None.\n\n    Returns:\n        tuple:\n            ndarray: A 2D array with distances between each sample.\n            Axes or None: If plot_path is None, returns the matplotlib Axes object of the plot.\n            Otherwise, saves the plot to the provided path and return None.\n            Plot shows values of the first feature dimension on the x-axis, values\n            of the second feature dimension on the y-axis, and labels of the synthetic\n            examples as color.\n    \"\"\"\n    # Generate synthetic dataset\n    X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=random_seed)\n\n    # Calculate Euclidean distance between each sample\n    dist = cdist(X, X)\n\n    # Plot the dataset\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n    ax.set_xlabel(\"Feature 1\")\n    ax.set_ylabel(\"Feature 2\")\n    ax.set_title(\"Synthetic Dataset\")\n\n    # Save the plot if a path is provided\n    if plot_path is not None:\n        plt.savefig(plot_path)\n        return None\n\n    # Otherwise, return the Axes object\n    return dist, ax", "problem": "Generate a synthetic 2D dataset using make_blobs, visualize the dataset, and then calculate the Euclidean distance between individual samples of the dataset.\nThe function should output with:\n    tuple:\n    ndarray: A 2D array with distances between each sample.\n    Axes or None: If plot_path is None, returns the matplotlib Axes object of the plot.\n    Otherwise, saves the plot to the provided path and return None.\n    Plot shows values of the first feature dimension on the x-axis, values\n    of the second feature dimension on the y-axis, and labels of the synthetic\n    examples as color.\nYou should write self-contained code starting with:\n```\nfrom scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n```", "solution": "from scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n    X, y = make_blobs(\n        n_samples=n_samples,\n        n_features=2,\n        centers=centers,\n        random_state=random_seed,\n    )\n\n    fig, ax = plt.subplots()\n\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n\n    if plot_path:\n        plt.savefig(plot_path)\n        plt.close(fig)\n        return cdist(X, X), None\n\n    return cdist(X, X), ax", "pass": false}
{"task_id": "451", "program": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n\n    pass\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n    \"\"\"\n    Generate a high-dimensional dataset, run PCA to reduce its dimensionality, and then draw a heatmap of the covariance matrix of the transformed data.\n\n    Parameters\n    ----------\n    n_components : int, default=2\n        The number of principal components to keep.\n    N_SAMPLES : int, default=500\n        The number of samples in the dataset.\n    N_FEATURES : int, default=50\n        The number of features in the dataset.\n    random_seed : int, default=None\n        The random seed for reproducibility.\n\n    Returns\n    -------\n    tuple:\n        transformed_data (ndarray): The transformed data of shape (N_SAMPLES, n_components).\n        heatmap_axes (Axes): The heatmap of the covariance matrix of the transformed data or None if n_components=1.\n    \"\"\"\n    # Generate a high-dimensional dataset\n    np.random.seed(random_seed)\n    X = np.random.rand(N_SAMPLES, N_FEATURES)\n\n    # Run PCA to reduce its dimensionality\n    pca = PCA(n_components=n_components)\n    X_pca = pca.fit_transform(X)\n\n    # Draw a heatmap of the covariance matrix of the transformed data\n    if n_components > 1:\n        cov_matrix = np.cov(X_pca.T)\n        heatmap_axes = sns.heatmap(cov_matrix, annot=True, cmap=\"coolwarm\")\n    else:\n        heatmap_axes = None\n\n    return X_pca, heatmap_axes", "problem": "Generate a high-dimensional dataset, run PCA to reduce its dimensionality, and then draw a heatmap of the covariance matrix of the transformed data.\nThe function should output with:\n    tuple:\n    transformed_data (ndarray): The transformed data of shape (N_SAMPLES, n_components).\n    heatmap_axes (Axes): The heatmap of the covariance matrix of the transformed data or None if n_components=1.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n```", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n    np.random.seed(random_seed)  # Ensuring reproducibility\n    X = np.random.rand(N_SAMPLES, N_FEATURES)\n\n    pca = PCA(n_components=n_components, random_state=random_seed)\n    X_transformed = pca.fit_transform(X)\n\n    if n_components == 1:\n        return X_transformed, None\n\n    fig, ax = plt.subplots(figsize=(10, 7))\n    sns.heatmap(np.cov(X_transformed.T), annot=True, fmt=\".2f\", ax=ax)\n\n    return X_transformed, ax", "pass": true}
{"task_id": "452", "program": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n\n    pass\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n    # Generate synthetic data using a simple regression model\n    X, y = datasets.make_regression(n_samples=n_samples, n_features=n_features, random_state=random_seed)\n\n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_seed)\n\n    # Fit a linear regression model to the training data\n    model = LinearRegression().fit(X_train, y_train)\n\n    # Predict the values of the test set\n    y_pred = model.predict(X_test)\n\n    # Calculate the mean squared error of the model predictions\n    mse = np.mean((y_test - y_pred) ** 2)\n\n    return y_pred, model.coef_, model.intercept_, mse\nn_samples = 100\nn_features = 10\nrandom_seed = 42", "problem": "Generate synthetic data using a simple regression model, fit a linear regression model to the data, and return the predicted values along with the coefficients and intercept of the model.\nThe function should output with:\n    tuple: A tuple containing:\n    predictions (numpy.ndarray): The predicted values of the test set.\n    coefficients (numpy.ndarray): Coefficients of the linear regression model.\n    intercept (float): Intercept of the linear regression model.\n    mse (float): Mean squared error of the model predictions.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n```", "solution": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n    # Generate synthetic data\n    X, y = datasets.make_regression(\n        n_samples=n_samples, n_features=n_features, noise=0.1, random_state=random_seed\n    )\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=random_seed\n    )\n\n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Make predictions on the test set\n    predictions = model.predict(X_test)\n    coefficients = model.coef_\n    intercept = model.intercept_\n\n    mse = np.mean((predictions - y_test) ** 2)\n    return predictions, coefficients, intercept, mse", "pass": false}
{"task_id": "453", "program": "import re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n\n    pass\nimport re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n    while True:\n        s = ''.join(choice(string.ascii_letters) for _ in range(n))\n        if re.match(pattern, s):\n            return s", "problem": "Generates a random string of a specified length that conforms to a given regular expression pattern. The function repeatedly generates random strings, using both uppercase and lowercase ASCII letters, of the specified length until one matches the pattern. >>> bool(re.match('^[A-Z]+$', task_func(3, '^[A-Z]+$'))) True\nThe function should output with:\n    str: A randomly generated string that matches the specified pattern.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n```", "solution": "import re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n    while True:\n        s = ''.join(choice(string.ascii_letters) for _ in range(n))\n        if re.match(pattern, s):\n            return s", "pass": true}
{"task_id": "454", "program": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n\n    pass\nimport os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with a specified extension from a source directory to a destination directory.\n    This function searches for files in the source directory that match the given extension.\n    If a file with the same name already exists in the destination directory, it is not moved.\n\n    Args:\n        src_dir (str): The source directory to search for files.\n        dest_dir (str): The destination directory to move files to.\n        ext (str): The file extension to search for.\n\n    Returns:\n        list: A list of the full paths of files that were successfully moved.\n\n    Raises:\n        FileNotFoundError: If either the source or destination directory does not exist.\n    \"\"\"\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist.\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist.\")\n\n    moved_files = []\n    for file in glob.glob(os.path.join(src_dir, f\"*.{ext}\")):\n        if not os.path.exists(os.path.join(dest_dir, os.path.basename(file))):\n            shutil.move(file, dest_dir)\n            moved_files.append(file)\n\n    return moved_files\nsrc_dir = \"source_dir\"\ndest_dir = \"dest_dir\"\next = \"txt\"", "problem": "Moves files with a specified extension from a source directory to a destination directory. This function searches for files in the source directory that match the given extension. If a file with the same name already exists in the destination directory, it is not moved.\nThe function should raise the exception for: FileNotFoundError: if either the source or destination directory does not exist\nThe function should output with:\n    list: A list of the full paths of files that were successfully moved. If a file was not moved\n    because it already exists in the destination directory, it will not be included in this list.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n```", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist.\")\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist.\")\n\n    files_moved = []\n    files = glob.glob(os.path.join(src_dir, '*.' + ext))\n    for file in files:\n        filename = os.path.basename(file)\n        dest_file_path = os.path.join(dest_dir, filename)\n        if not os.path.exists(dest_file_path):\n            shutil.move(file, dest_dir)\n            files_moved.append(dest_file_path)\n    return files_moved", "pass": false}
{"task_id": "455", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n    \"\"\"Generates a set of samples from a normal distribution with a specified mean and standard deviation.\n\n    Args:\n        mean (float): The mean of the normal distribution.\n        std_dev (float): The standard deviation of the normal distribution.\n        n (int): The number of samples to generate.\n\n    Returns:\n        numpy.ndarray: An array of generated samples from the normal distribution.\n    \"\"\"\n    # Generate samples from the normal distribution\n    samples = np.random.normal(mean, std_dev, n)\n\n    # Plot the histogram of the samples\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Probability\")\n    plt.title(\"Histogram of Normal Distribution\")\n    plt.show()\n\n    # Plot the probability density function of the samples\n    x = np.linspace(mean - 3*std_dev, mean + 3*std_dev, 100)\n    y = stats.norm.pdf(x, mean, std_dev)\n    plt.plot(x, y)\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Probability Density\")\n    plt.title(\"Probability Density Function of Normal Distribution\")\n    plt.show()\n\n    return samples", "problem": "Generates a set of samples from a normal distribution with a specified mean and standard deviation. It also visualizes the generated samples by plotting their histogram and the probability density function. Generate 500 samples from a normal distribution with mean 5 and standard deviation 2. >>> len(task_func(5, 2, 500)) 500\nThe function should output with:\n    numpy.ndarray: An array of generated samples from the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n    samples = np.random.normal(mean, std_dev, n)\n\n    plt.figure(figsize=(10, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    plt.plot(x, p, 'k', linewidth=2)\n\n    title = f'Normal Distribution: Mean = {mean}, Std Dev = {std_dev}'\n    plt.title(title)\n    plt.xlabel('Value')\n    plt.ylabel('Density')\n    plt.show()\n\n    return samples", "pass": true}
{"task_id": "456", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n    \"\"\"\n    Normalize the data and visualize it using a heatmap.\n    This function takes a pandas DataFrame, normalizes the data to a range [0, 1], and then visualizes this normalized data using a seaborn heatmap.\n    The heatmap uses the \"YlGnBu\" colormap to represent normalized values and includes a color bar labeled \"Normalized Value\" to indicate the range of data values.\n    It returns both the normalized data and the heatmap plot.\n    \"\"\"\n    # Normalize the data to a range [0, 1]\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n\n    # Create a heatmap of the normalized data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    sns.heatmap(normalized_data, cmap=\"YlGnBu\", annot=True, fmt=\".2f\", ax=ax)\n    ax.set_title(\"Normalized Data\")\n    ax.set_xlabel(\"Features\")\n    ax.set_ylabel(\"Samples\")\n    ax.set_xticklabels(data.columns, rotation=45)\n    ax.set_yticklabels(data.index)\n    ax.figure.colorbar(ax.get_children()[0], ax=ax)\n\n    return normalized_data, ax\ndata = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})", "problem": "Normalize the data and visualize it using a heatmap. This function takes a pandas DataFrame, normalizes the data to a range [0, 1], and then visualizes this normalized data using a seaborn heatmap.  The heatmap uses the \"YlGnBu\" colormap to represent normalized values and includes a color bar labeled \"Normalized Value\" to indicate the range of data values. It returns both the normalized data and the heatmap plot.\nThe function should output with:\n    pd.DataFrame: Normalized data.\n    plt.Axes: Heatmap plot of the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n    # Normalizing the data\n    scaler = MinMaxScaler()\n    normalized_data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)\n\n    # Plotting heatmap\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(\n        normalized_data, cmap=\"YlGnBu\", cbar_kws={\"label\": \"Normalized Value\"}\n    )\n\n    return normalized_data, ax", "pass": false}
{"task_id": "457", "program": "import pandas as pd\nimport numpy as np\ndef task_func(L):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    \"\"\"\n    Draw a histogram of all elements in a nested list 'L' and return the Axes object of the plot.\n    The function first uses Numpy to handle array operations, checking for correct input type while ignoring empty sublists.\n    It then plots the histogram using pandas, assigning each unique value its own bin and plotting the histogram with rwidth 0.8.\n    The function should raise the exception for:\n        If the input is not a list of list of integers, a TypeError is raised.\n    The function should output with:\n        ax (matplotlib.axes._axes.Axes): The Axes object of the histogram plot.\n    \"\"\"\n    # Check if the input is a list of list of integers\n    if not isinstance(L, list) or not all(isinstance(sublist, list) and all(isinstance(x, int) for x in sublist) for sublist in L):\n        raise TypeError(\"Input must be a list of list of integers.\")\n\n    # Flatten the nested list and remove empty sublists\n    flat_list = [x for sublist in L for x in sublist if x != []]\n\n    # Convert the flattened list to a NumPy array\n    arr = np.array(flat_list)\n\n    # Use pandas to plot the histogram\n    ax = pd.Series(arr).plot.hist(bins=len(np.unique(arr)), rwidth=0.8)\n\n    return ax\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "problem": "Draw a histogram of all elements in a nested list 'L' and return the Axes object of the plot. The function first uses Numpy to handle array operations, checking for correct input type while ignoring empty sublists. It then plots the histogram using pandas, assigning each unique value its own bin and plotting the histogram with rwidth 0.8.\nThe function should raise the exception for: If the input is not a list of list of integers, a TypeError is raised.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(L):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(L):\n\n    flattened = np.concatenate([l for l in L if l])\n    if not np.issubdtype(flattened.dtype, np.integer):\n        raise TypeError(\"Expected list of list of int\")\n    bins = len(np.unique(flattened))\n    ax = pd.Series(flattened).plot(kind=\"hist\", rwidth=0.8, bins=bins)\n    return ax", "pass": false}
{"task_id": "458", "program": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n\n    pass\nimport json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    \"\"\"\n    Load a JSON string into a dictionary, normalize the dictionary by doubling the numerical values, and then create a Pandas DataFrame from the dictionary.\n    This function processes a JSON string by converting it into a dictionary, normalizes the data by doubling the numerical values, and then constructs a Pandas DataFrame from this dictionary.\n    Note that: the function is designed to handle simple flat dictionaries, with values that are either single numerical values, lists of numerical values, or strings that can be interpreted as numbers. It doubles the values of numerical data types within the dictionary, including those within lists and those in strings (which are extracted using regex), but the function does not process nested dictionaries. Finally, it returns the DataFrame with numerical values stored as floats and other types left as-is, or an empty DataFrame if the input JSON string is empty or does not contain any valid data structures for DataFrame conversion.\n    :param json_str: A JSON string to be converted into a dictionary and then into a Pandas DataFrame.\n    :return: A pandas DataFrame created from the dictionary.\n    \"\"\"\n    # Convert the JSON string into a dictionary\n    data = json.loads(json_str)\n\n    # Normalize the dictionary by doubling the numerical values\n    for key, value in data.items():\n        if isinstance(value, (int, float)):\n            data[key] = value * 2\n        elif isinstance(value, list):\n            data[key] = [item * 2 for item in value]\n        elif isinstance(value, str):\n            match = re.search(r\"[+-]?\\d+(?:\\.\\d+)?\", value)\n            if match:\n                data[key] = float(match.group()) * 2\n\n    # Create a Pandas DataFrame from the dictionary\n    df = pd.DataFrame.from_dict(data, orient=\"index\")\n\n    # Return the DataFrame with numerical values stored as floats and other types left as-is\n    return df.astype({col: \"float64\" for col in df.select_dtypes(include=[\"float64\"]).columns})", "problem": "Load a JSON string into a dictionary, normalize the dictionary by doubling the numerical values, and then create a Pandas DataFrame from the dictionary. This function processes a JSON string by converting it into a dictionary, normalizes the data by doubling the numerical values, and then constructs a Pandas DataFrame from this dictionary.\nNote that: the function is designed to handle simple flat dictionaries, with values that are either single numerical values, lists of numerical values, or strings that can be interpreted as numbers. It doubles the values of numerical data types within the dictionary, including those within lists and those in strings (which are extracted using regex), but the function does not process nested dictionaries. Finally, it returns the DataFrame with numerical values stored as floats and other types left as-is, or an empty DataFrame if the input JSON string is empty or does not contain any valid data structures for DataFrame conversion.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the dictionary.\nYou should write self-contained code starting with:\n```\nimport json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n```", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    NUMBERS = re.compile(r\"^-?\\d+(?:\\.\\d+)?$\")\n\n    my_dict = json.loads(json_str)\n\n    if not my_dict:\n        return pd.DataFrame()\n\n    for key, value in my_dict.items():\n        if isinstance(value, list):\n            my_dict[key] = [v * 2 if isinstance(v, (int, float)) else v for v in value]\n        elif isinstance(value, (int, float)):\n            my_dict[key] = value * 2\n        elif isinstance(value, str) and NUMBERS.match(value):\n            try:\n                my_dict[key] = int(value) * 2\n            except ValueError:\n                my_dict[key] = float(value) * 2\n\n    if all(not isinstance(v, list) for v in my_dict.values()):\n        df = pd.DataFrame([my_dict])\n    else:\n        df = pd.DataFrame(my_dict)\n\n    for col in df.columns:\n        converted_col = pd.to_numeric(df[col], errors=\"coerce\")\n        if not converted_col.isnull().any():\n            df[col] = converted_col\n\n    return df", "pass": false}
{"task_id": "459", "program": "import subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n\n    pass\nimport subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n    \"\"\"\n    Execute a list of bash scripts with a specified delay between each script.\n    The function should raise the exception for: ValueError: If the delay is negative or no scripts are provided.\n    The function should output with:\n        list: A list of timestamps indicating the start time of each script execution.\n    \"\"\"\n    if delay < 0:\n        raise ValueError(\"Delay must be non-negative\")\n    if not scripts:\n        raise ValueError(\"No scripts provided\")\n\n    start_times = []\n    for script in scripts:\n        start_time = datetime.now()\n        subprocess.run([\"bash\", os.path.join(script_dir, script)])\n        start_times.append(start_time)\n        time.sleep(delay)\n\n    return start_times\nscript_dir = \"path/to/scripts\"\nscripts = [\"script1.sh\", \"script2.sh\", \"script3.sh\"]\ndelay = 5", "problem": "Execute a list of bash scripts with a specified delay between each script.\nThe function should raise the exception for: ValueError: If the delay is negative or no scripts are provided.\nThe function should output with:\n    list: A list of timestamps indicating the start time of each script execution.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n```", "solution": "import subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n    if delay < 0:\n        raise ValueError(\"delay cannot be negative.\")\n    if not scripts:\n        raise ValueError(\"No scripts provided.\")\n    start_times = []\n    for script in scripts:\n        script_path = os.path.join(script_dir, script)\n        start_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        start_times.append(start_time)\n\n        result = subprocess.call(script_path, shell=True)\n        if result != 0:\n            raise FileNotFoundError(f\"Script not found: {script_path}\")\n\n        time.sleep(delay)\n    return start_times", "pass": false}
{"task_id": "460", "program": "import subprocess\nimport pandas as pd\ndef task_func(script_path, output_file_path):\n\n    pass\nimport subprocess\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(script_path, output_file_path):\n    # Run the script to produce a CSV\n    subprocess.run([script_path, output_file_path], check=True)\n\n    # Read the CSV into a DataFrame\n    df = pd.read_csv(output_file_path)\n\n    # Check that the CSV has exactly two columns\n    if len(df.columns) != 2:\n        raise ValueError(\"CSV must have exactly two columns\")\n\n    # Plot a bar graph from the data\n    ax = df.plot.bar()\n\n    return df, ax\nscript_path = \"script.py\"\noutput_file_path = \"output.csv\"", "problem": "Executes a script to produce a CSV, reads the CSV, and plots a bar graph from the data. This function runs the provided script, which should generate a CSV file at the specified output path. The CSV must have exactly two columns. It then reads this CSV into a DataFrame and plots a bar graph, setting the first column as the x-axis labels and the second column as the bar heights. It will raise ValueError if the script fails to execute, or if the produced CSV is not valid.\nThe function should raise the exception for: ValueError: If the script fails to execute, the CSV is invalid, or the CSV does not contain exactly 2 columns.\nThe function should output with:\n    df (pd.DataFrame): DataFrame containing the data from the CSV.\n    ax (matplotlib.axes._axes.Axes): Axes object of the plotted bar graph.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport pandas as pd\ndef task_func(script_path, output_file_path):\n```", "solution": "import subprocess\nimport pandas as pd\ndef task_func(script_path, output_file_path):\n    try:\n        subprocess.run([script_path], check=True)\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        raise ValueError(\n            \"Error occurred while executing the script or script not found\"\n        )\n\n    df = pd.read_csv(output_file_path)\n\n    if len(df.columns) != 2:\n        raise ValueError(\"CSV file must contain exactly 2 columns\")\n\n    ax = df.plot(kind=\"bar\", x=df.columns[0], legend=False)\n    ax.set_xlabel(df.columns[0])\n\n    return df, ax", "pass": false}
{"task_id": "461", "program": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n\n    pass\nimport subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes a given bash script and returns the CPU and memory usage of the script's process.\n    This function checks whether the script path exists, then it executes it in a subprocess and uses psutil to monitor the script's process for CPU and memory usage.\n    Note that: CPU usage is a cumulative measure of the script process's CPU demand over the execution period, not an average across cores. Memory usage is reported as the sum of RSS memory increments. The function aggregates these metrics until the script completes or the specified timeout is reached. It handles cases where the process becomes a zombie or is not found, and ensures the subprocess is terminated if it runs beyond the timeout.\n    The function should output with:\n        dict: A dictionary containing:\n        'CPU Usage': The accumulated CPU usage in percentage.\n        'Memory Usage': The accumulated memory usage in bytes.\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script path {script_path} does not exist\")\n\n    # Start the script in a subprocess\n    process = subprocess.Popen(script_path, shell=True)\n\n    # Wait for the process to start\n    time.sleep(0.1)\n\n    # Get the process ID\n    pid = process.pid\n\n    # Initialize the CPU and memory usage\n    cpu_usage = 0\n    memory_usage = 0\n\n    # Start the timer\n    start_time = time.time()\n\n    # Loop until the process completes or the timeout is reached\n    while process.poll() is None and time.time() - start_time < timeout:\n        # Get the CPU and memory usage\n        process_info = psutil.Process(pid)\n        cpu_usage += process_info.cpu_percent()\n        memory_usage += process_info.memory_info().rss\n\n        # Sleep for a short period\n        time.sleep(0.1)\n\n    # Terminate the process if it runs beyond the timeout\n    if process.poll() is None:\n        process.terminate()\n\n    # Return the CPU and memory usage\n    return {\n        \"CPU Usage\": cpu_usage,\n        \"Memory Usage\": memory_usage\n    }", "problem": "Executes a given bash script and returns the CPU and memory usage of the script's process. This function checks whether the script path exists, then it executes it in a subprocess and uses psutil to monitor the script's process for CPU and memory usage.\nNote that: CPU usage is a cumulative measure of the script process's CPU demand over the execution period, not an average across cores. Memory usage is reported as the sum of RSS memory increments. The function aggregates these metrics until the script completes or the specified timeout is reached. It handles cases where the process becomes a zombie or is not found, and ensures the subprocess is terminated if it runs beyond the timeout.\nThe function should output with:\n    dict: A dictionary containing:\n    'CPU Usage': The accumulated CPU usage in percentage.\n    'Memory Usage': The accumulated memory usage in bytes.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n```", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"'{script_path}' does not exist.\")\n\n    # Start the bash script process\n    p = subprocess.Popen([\"bash\", script_path])\n    pid = p.pid\n\n    # Initialize resources\n    total_cpu = 0.0\n    total_memory = 0\n\n    start_time = time.time()\n\n    try:\n        # Fetch the process using psutil\n        process = psutil.Process(pid)\n\n        # Continuously fetch the process statistics\n        while process.is_running():\n            # Get the CPU and memory usage\n            cpu_percent = process.cpu_percent(interval=0.05)\n            total_cpu += cpu_percent\n            total_memory += process.memory_info().rss\n            time.sleep(0.05)\n\n            # Check for timeout\n            if time.time() - start_time > timeout:\n                break\n    except (psutil.NoSuchProcess, psutil.ZombieProcess):\n        pass\n    finally:\n        if p.poll() is None:\n            p.terminate()\n            p.wait()\n\n    return {\"CPU Usage\": total_cpu, \"Memory Usage\": total_memory}", "pass": false}
{"task_id": "462", "program": "import pandas as pd\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n\n    pass\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly selected category from the provided categories list and a random integer between 1 and 100. The function also generates a bar chart visualizing the counts of each category in the DataFrame and returns both the DataFrame and the bar chart.\n    The function should raise the exception for: ValueError: If num_rows is less than 1.\n    The function should output with:\n        pd.DataFrame: A pandas DataFrame with randomly generated category data.\n        matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than or equal to 1\")\n\n    random.seed(random_seed)\n    data = {\"category\": [], \"value\": []}\n    for i in range(num_rows):\n        data[\"category\"].append(random.choice(categories))\n        data[\"value\"].append(random.randint(1, 100))\n\n    df = pd.DataFrame(data)\n    fig, ax = plt.subplots()\n    ax.bar(df[\"category\"], df[\"value\"])\n    ax.set_title(\"Category Counts\")\n    return df, ax", "problem": "Create a Pandas DataFrame with specified number of rows. Each row contains a randomly selected category from the provided categories list and a random integer between 1 and 100. The function also generates a bar chart visualizing the counts of each category in the DataFrame and returns both the DataFrame and the bar chart.\nThe function should raise the exception for: ValueError: If num_rows is less than 1.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n\n    random.seed(random_seed)\n\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n\n    return df, ax", "pass": false}
{"task_id": "463", "program": "import numpy as np\nimport pandas as pd\ndef task_func(data_str, separator=\",\", bins=20):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_str, separator=\",\", bins=20):\n    \"\"\"\n    Convert a string of numerical values separated by a specified separator into a pandas numerical series with int64, and then draw a histogram of the data.\n    The function raises a ValueError if data is empty or it fails to convert the data.\n    It plots the histogram with the following attributes:\n        - grid: True\n        - rwidth: 0.9\n        - color: '#607c8e'\n    The function should output with:\n        tuple: A tuple containing:\n        1. Series: A pandas Series of the data coonverted into integers.\n        2. Axes: The Axes object of the plotted histogram.\n    \"\"\"\n    # Convert the data string to a list of integers\n    data = [int(x) for x in data_str.split(separator)]\n\n    # Check if the data is empty\n    if not data:\n        raise ValueError(\"Data is empty\")\n\n    # Convert the data to a pandas Series\n    series = pd.Series(data, dtype=np.int64)\n\n    # Draw the histogram\n    fig, ax = plt.subplots()\n    ax.hist(series, bins=bins, grid=True, rwidth=0.9, color=\"#607c8e\")\n\n    return series, ax\ndata_str = \"1,2,3,4,5,6,7,8,9,10\"", "problem": "Convert a string of numerical values separated by a specified separator into a pandas numerical series with int64, and then draw a histogram of the data. The function raises a ValueError if data is empty or it fails to convert the data. It plots the histogram with the following attributes: - grid: True - rwidth: 0.9 - color: '#607c8e'\nThe function should output with:\n    tuple: A tuple containing:\n    1. Series: A pandas Series of the data coonverted into integers.\n    2. Axes: The Axes object of the plotted histogram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(data_str, separator=\",\", bins=20):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(data_str, separator=\",\", bins=20):\n\n    data = np.fromstring(data_str, sep=separator)\n    if data.size == 0:\n        raise ValueError(\"Failed to find valid data\")\n\n    data = pd.Series(data, dtype='int64')\n    ax = data.plot.hist(grid=True, bins=bins, rwidth=0.9, color=\"#607c8e\")\n    return data, ax", "pass": false}
{"task_id": "464", "program": "import json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n\n    pass\nimport json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n    def default(o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        if isinstance(o, Decimal):\n            return float(o)\n        raise TypeError(repr(o) + \" is not JSON serializable\")\n    return json.dumps(my_obj, default=default)", "problem": "Serializes an object to a JSON string, adding support for datetime and Decimal data types. Handle complex data types not natively supported by the json module's default encoder. The `My_class` parameter is reserved for future use and does not affect the current implementation. Serialize a simple dictionary: >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should output with:\n    str: A JSON-formatted string representing `my_obj`, with datetime and Decimal objects properly serialized.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n```", "solution": "import json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n    class DateTimeEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, datetime):\n                return obj.isoformat()\n            if isinstance(obj, Decimal):\n                return str(obj)\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=DateTimeEncoder)", "pass": true}
{"task_id": "465", "program": "import json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n\n    pass\nimport json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n    class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, datetime):\n                return o.isoformat()\n            if isinstance(o, np.ndarray):\n                return o.tolist()\n            if isinstance(o, Decimal):\n                return float(o)\n            return super().default(o)\n\n    return json.dumps(my_obj, cls=CustomJSONEncoder)", "problem": "Serializes an object to a JSON string, handling complex data types through a custom JSONEncoder. This function is capable of serializing data types such as datetime, numpy.ndarray, and Decimal which are not natively supported by the default JSON serialization mechanisms. Serialize a simple dictionary. >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should raise the exception for: TypeError: If an object of an unsupported type is encountered that cannot be serialized by both the custom and default JSON encoders. This ensures that users are made aware of serialization limitations for types not explicitly handled.\nThe function should output with:\n    str: The serialized JSON string of the object.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n```", "solution": "import json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n    \n    class ComplexEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, datetime):\n                return obj.isoformat()\n            elif isinstance(obj, np.ndarray):\n                return obj.tolist()\n            elif isinstance(obj, Decimal):\n                return str(obj)\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=ComplexEncoder)", "pass": true}
{"task_id": "466", "program": "import json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n\n    pass\nimport json\nfrom enum import Enum\ndef task_func(my_obj):\n    class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, Enum):\n                return o.name\n            return super().default(o)\n\n    return json.dumps(my_obj, cls=CustomJSONEncoder)", "problem": "Serializes an object into a JSON string with support for complex data types like Enum. The function uses a custom JSONEncoder to handle Enum types by converting them to their names or values. Serialize a simple dictionary. >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should output with:\n    str: The serialized JSON string of the object.\nYou should write self-contained code starting with:\n```\nimport json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n```", "solution": "import json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n    class EnumEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name  # or obj.value, depending on the requirement\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=EnumEncoder)", "pass": true}
{"task_id": "467", "program": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n    \"\"\"\n    Generates a simple scatter plot with 'n' points.\n    The function should output with:\n        plot (matplotlib.figure.Figure): The generated plot titled \"Scatter plot of random points\", with x-axis labeled \"X\" and y-axis labeled \"Y\".\n        points (list of tuples): List containing the (x, y) coordinates of the plotted points.\n    \"\"\"\n    np.random.seed(seed)\n    x = np.random.rand(n)\n    y = np.random.rand(n)\n    points = list(zip(x, y))\n    plt.scatter(x, y, label=\"Random points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.title(\"Scatter plot of random points\")\n    plt.legend()\n    plt.show()\n    return plt.gcf(), points", "problem": "Generates a simple scatter plot with 'n' points.\nThe function should output with:\n    plot (matplotlib.figure.Figure): The generated plot titled \"Scatter plot of random points\", with x-axis labeled \"X\" and y-axis labeled \"Y\".\n    points (list of tuples): List containing the (x, y) coordinates of the plotted points.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n    # Setting the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generating random points\n    x = np.random.rand(n)\n    y = np.random.rand(n)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_title(\"Scatter plot of random points\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\n    return fig, list(zip(x, y))", "pass": true}
{"task_id": "468", "program": "import pandas as pd\nimport numpy as np\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n    # Read the CSV file into a Pandas DataFrame\n    df = pd.read_csv(file_path)\n\n    # Convert numeric values into floats\n    df = df.apply(pd.to_numeric, errors='coerce')\n\n    # Draw a line chart of the data in the specified columns\n    fig, ax = plt.subplots()\n    ax.plot(df[columns])\n\n    # Compute the cube-root of the data\n    cube_root = df[columns].apply(np.cbrt)\n\n    return df, ax, cube_root", "problem": "Read a CSV file into a Pandas DataFrame, convert numeric values into floats,and draw a line chart of data in the specified columns. In addition, compute the cube-root of the data.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame of the data in the CSV file.\n    Axes: A matplotlib Axes object showing the plotted data.\n    Series: A pandas Series containing the cube-root of the data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n    df = pd.read_csv(file_path, dtype=float)\n    ax = df[columns].plot()\n    croot = np.cbrt(df[columns])\n    return df, ax, croot", "pass": false}
{"task_id": "469", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n    # Convert the list of student grades to a pandas DataFrame\n    df = pd.DataFrame(student_grades, columns=[\"Grade\"])\n\n    # Convert the grades to uppercase and remove any whitespace\n    df[\"Grade\"] = df[\"Grade\"].str.strip().str.upper()\n\n    # Filter out any grades that are not in the possible grades list\n    df = df[df[\"Grade\"].isin(possible_grades)]\n\n    # Count the number of students for each grade\n    grade_counts = df.groupby(\"Grade\").size().reset_index(name=\"Count\")\n\n    # Create a bar chart of the grade distribution\n    ax = grade_counts.plot.bar(x=\"Grade\", y=\"Count\", rot=0)\n\n    # Add a title and axis labels\n    ax.set_title(\"Grade Distribution\")\n    ax.set_xlabel(\"Grade\")\n    ax.set_ylabel(\"Number of Students\")\n\n    return grade_counts, ax\nstudent_grades = [\"A\", \"B\", \"C\", \"D\", \"F\", \"a\", \"b\", \"c\", \"d\", \"f\", \"A \", \"B \", \"C \", \"D \", \"F \"]", "problem": "Create a report on students' grades in a class, including a count of each grade out of all possible grades and a bar chart. Note: Grades are case-insensitive but whitespace-sensitive. Those not in possible grades are ignored.\nThe function should output with:\n    Tuple[DataFrame, Axes]:\n    A pandas DataFrame with 'Grade' as the named index and their 'Count' as values.\n    A bar chart plot (matplotlib's Axes object) visualizing 'Grade Distribution', with 'Grade' on the\n    x-axis and 'Number of Students' on the y-axis.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n    if not student_grades:\n        raise ValueError(\"student_grades cannot be empty\")\n    possible_grades = [*dict.fromkeys([g.upper() for g in possible_grades])]\n    grade_counts = dict(Counter([g.upper() for g in student_grades]))\n    report_data = {grade: grade_counts.get(grade, 0) for grade in possible_grades}\n    report_df = pd.DataFrame.from_dict(report_data, orient=\"index\", columns=[\"Count\"])\n    report_df.index.name = \"Grade\"\n\n    ax = report_df.plot(kind=\"bar\", legend=False, title=\"Grade Distribution\")\n    ax.set_ylabel(\"Number of Students\")\n    ax.set_xlabel(\"Grade\")\n\n    plt.tight_layout()\n\n    return report_df, ax", "pass": false}
{"task_id": "470", "program": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n    # Create a histogram of the values in myList\n    ax = plt.hist(myList, bins=np.arange(min(myList), max(myList)+1))\n\n    # Set the x-axis label\n    ax.set_xlabel('Value')\n\n    # Set the y-axis label\n    ax.set_ylabel('Frequency')\n\n    # Set the plot title\n    ax.set_title('Histogram of Values')\n\n    # Outline the histogram bars in black\n    ax.margins(x=0)\n    ax.tick_params(axis='x', which='major', length=0)\n    ax.tick_params(axis='y', which='major', length=0)\n\n    # Return the Axes object\n    return ax\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "problem": "Draws a histogram of the values in a list and returns the plot's Axes. For visualization: - Bin edges are adjusted to align with integer values in `myList`. - Histogram bars are outlined in black. - X-axis label: 'Value' - Y-axis label: 'Frequency' - Plot title: 'Histogram of Values'\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n    _, ax = plt.subplots()\n    ax.hist(\n        myList, bins=np.arange(min(myList), max(myList) + 2) - 0.5, edgecolor=\"black\"\n    )\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of Values\")\n    return ax", "pass": false}
{"task_id": "471", "program": "from collections import Counter\nimport pandas as pd\ndef task_func(myList):\n\n    pass\nfrom collections import Counter\nimport pandas as pd\ndef task_func(myList):\n    word_counts = Counter(myList)\n    df = pd.DataFrame.from_dict(word_counts, orient='index').reset_index()\n    df.columns = ['word', 'count']\n    return df\nmyList = ['hello', 'hello', 'world', 'hello', 'world', 'hello']", "problem": "Count the frequency of each word in a list and return a DataFrame of words and their number.\nThe function should output with:\n    DataFrame: A pandas DataFrame with words and their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport pandas as pd\ndef task_func(myList):\n```", "solution": "from collections import Counter\nimport pandas as pd\ndef task_func(myList):\n    words = [w.lower().strip() for w in myList]\n    word_counts = dict(Counter(words))\n    report_df = pd.DataFrame.from_dict(word_counts, orient=\"index\", columns=[\"Count\"])\n\n    return report_df", "pass": false}
{"task_id": "472", "program": "import matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(myList, n_clusters):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(myList, n_clusters):\n    \"\"\"\n    Cluster a list of 2D points using KMeans and visualize the clusters.\n\n    Parameters\n    ----------\n    myList : list\n        A list of 2D points represented as tuples or lists.\n    n_clusters : int\n        The number of clusters to form.\n\n    Returns\n    -------\n    matplotlib.axes._axes.Axes\n        Axes object with the plotted clusters.\n\n    Raises\n    ------\n    ValueError\n        If the input is not valid.\n    \"\"\"\n    # Convert the list of points to a numpy array\n    points = np.array(myList)\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    kmeans.fit(points)\n\n    # Get the cluster centers\n    centers = kmeans.cluster_centers_\n\n    # Plot the clusters\n    fig, ax = plt.subplots()\n    ax.scatter(points[:, 0], points[:, 1], c=kmeans.labels_)\n    ax.scatter(centers[:, 0], centers[:, 1], c='red', marker='x')\n    ax.set_title('KMeans Clustering')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    return ax\npoints = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nn_clusters = 3", "problem": "Cluster a list of 2D points using KMeans and visualize the clusters.\nNote that: This function raises ValueError if it encounters invalid inputs. KMeans is performed with random_state = 42 and n_init = 10. Scatterplot uses red 'x' markers for cluster centers.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object with the plotted clusters.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(myList, n_clusters):\n```", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(myList, n_clusters):\n    if not myList or n_clusters <= 0:\n        raise ValueError(\"Invalid inputs\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    kmeans.fit(myList)\n\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*myList), c=kmeans.labels_)\n    ax.scatter(*zip(*kmeans.cluster_centers_), marker=\"x\", color=\"red\")\n    return ax", "pass": true}
{"task_id": "473", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n    \"\"\"\n    Create and plot `n_walks` number of random walks, each with `n_steps` steps.\n    The function checks for valid n_walks and n_steps, then generates walks via numpy.\n    Each walk is plotted in a different color cycling through a predefined set of colors: ['b', 'g', 'r', 'c', 'm', 'y', 'k'].\n    The function should output with:\n        ax (plt.Axes): A Matplotlib Axes containing the plotted random walks.\n    \"\"\"\n    # Check if n_walks and n_steps are valid\n    if n_walks <= 0 or n_steps <= 0:\n        raise ValueError(\"n_walks and n_steps must be positive integers\")\n\n    # Set random seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Define the colors to cycle through\n    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\n\n    # Create the walks\n    walks = np.random.rand(n_walks, n_steps)\n\n    # Plot the walks\n    fig, ax = plt.subplots()\n    for i, walk in enumerate(walks):\n        ax.plot(walk, color=colors[i % len(colors)])\n\n    return ax\nn_walks = 10\nn_steps = 100", "problem": "Create and plot `n_walks` number of random walks, each with `n_steps` steps. The function checks for valid n_walks and n_steps, then generates walks via numpy. Each walk is plotted in a different color cycling through a predefined set of colors: ['b', 'g', 'r', 'c', 'm', 'y', 'k'].\nThe function should output with:\n    ax (plt.Axes): A Matplotlib Axes containing the plotted random walks.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n    if n_walks < 0 or n_steps < 0:\n        raise ValueError(\"Walks and steps cannot be negative.\")\n    np.random.seed(seed)\n    COLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n    color_cycle = itertools.cycle(COLORS)\n    fig, ax = plt.subplots()\n    for _ in range(n_walks):\n        walk = np.random.choice([-1, 1], size=n_steps)\n        walk = np.cumsum(walk)\n        ax.plot(walk, next(color_cycle))\n    return ax", "pass": false}
{"task_id": "474", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, density=True, bins=50, alpha=0.5, label='Histogram')\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    pdf = norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, 'r', linewidth=2, label='PDF')\n    ax.legend()\n    return ax, samples", "problem": "Generates a histogram and a probability density function (PDF) plot for a specified normal distribution. This function draws n_samples from a normal distribution defined by mean (mu) and standard deviation (sigma), plots a histogram of the samples, and overlays the PDF of the normal distribution. The histogram's density is normalized, and the PDF is plotted with a red line with linewidth=2.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the histogram and PDF plotted.\n    samples (numpy.ndarray): Generated sample data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n    if n_samples <= 0 or sigma <= 0:\n        raise ValueError(\"Invalid n_samples or sigma\")\n    np.random.seed(random_seed)\n    plt.figure()\n    samples = np.random.normal(mu, sigma, n_samples)\n    _, _, _ = plt.hist(samples, 30, density=True)\n    ax = plt.gca()\n    ax.plot(\n        np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000),\n        norm.pdf(np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000), mu, sigma),\n        linewidth=2,\n        color=\"r\",\n    )\n    return ax, samples", "pass": false}
{"task_id": "475", "program": "import pandas as pd\nfrom datetime import datetime\ndef task_func(data, date_format, country, country_codes=None):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(data, date_format, country, country_codes=None):\n    \"\"\"\n    Draw a histogram of the data from a DataFrame column of the pandas after converting the data into a specific format, and return the matplotlib Axes object.\n\n    Parameters:\n    data (pandas.DataFrame): The DataFrame to be plotted.\n    date_format (str): The format of the date column in the DataFrame.\n    country (str): The country to be plotted.\n    country_codes (dict): A dictionary of country codes.\n\n    Returns:\n    matplotlib.axes.Axes: The Axes object of the plotted histogram.\n\n    Raises:\n    ValueError: If 'data' is not a DataFrame, 'date_format' is not a string, 'country' is not in 'country_codes', or 'country_codes' is not a dictionary.\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(date_format, str):\n        raise ValueError(\"'date_format' must be a string.\")\n    if country not in country_codes:\n        raise ValueError(\"'country' must be in 'country_codes'.\")\n    if not isinstance(country_codes, dict):\n        raise ValueError(\"'country_codes' must be a dictionary.\")\n\n    # Convert the date column to datetime format\n    data[\"date\"] = pd.to_datetime(data[\"date\"], format=date_format)\n\n    # Filter the data by country\n    data = data[data[\"country\"] == country]\n\n    # Plot the histogram\n    ax = data[\"date\"].plot.hist(bins=50, figsize=(10, 6), title=\"Date Distribution\", ylabel=\"Frequency\")\n\n    return ax\ndata = pd.DataFrame({\"date\": [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"2022-01-04\", \"2022-01-05\"],\n                     \"country\": [\"USA\", \"USA\", \"USA\", \"Canada\", \"Canada\"]})\ncountry_codes = {\"USA\": \"US\", \"Canada\": \"CA\"}", "problem": "Draw a histogram of the data from a DataFrame column of the pandas after converting the data into a specific format, and return the matplotlib Axes object. Additional Notes: The title of the plot should be 'Date Distribution'. The y label should be named with 'Frequency'.\nThe function should raise the exception for: ValueError: If 'data' is not a DataFrame, 'date_format' is not a string, 'country' is not in 'country_codes', or 'country_codes' is not a dictionary.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(data, date_format, country, country_codes=None):\n```", "solution": "import pandas as pd\nfrom datetime import datetime\ndef task_func(data, date_format, country, country_codes=None):\n    default_country_codes = {\n        'Russia': 'ru_RU',\n        'Germany': 'de_DE',\n        'France': 'fr_FR',\n        'Spain': 'es_ES',\n        'Italy': 'it_IT'\n    }\n\n    if country_codes is None:\n        country_codes = default_country_codes\n\n    if not isinstance(data, pd.DataFrame) or not isinstance(date_format, str) or not isinstance(country_codes, dict):\n        raise ValueError(\"Invalid input types.\")\n    if country not in country_codes:\n        raise ValueError(f\"Country '{country}' not found in country codes.\")\n\n    try:\n        data['parsed_dates'] = data['dates'].apply(lambda x: datetime.strptime(x, date_format).date())\n    except ValueError:\n        raise ValueError(\"Date format mismatch.\")\n\n    ax = data['parsed_dates'].hist()\n    ax.set(title='Date Distribution', ylabel='Frequency')\n    return ax", "pass": false}
{"task_id": "476", "program": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n    # Define the quadratic function\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Perform curve fitting\n    popt, _ = curve_fit(func, X, Y)\n\n    # Extract the optimized parameters\n    a, b, c = popt\n\n    # Plot the data and the fit\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Fit')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n\n    return (popt, ax)\nX = [1, 2, 3, 4, 5]\nY = [1, 4, 9, 16, 25]", "problem": "Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\nThe function should output with:\n    tuple:\n    list: The optimized parameters of the quadratic function (a, b, c).\n    matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n```", "solution": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n\n    popt, pcov = curve_fit(func, X, Y)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n\n    return list(popt), ax", "pass": true}
{"task_id": "477", "program": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create a DataFrame with a given number of rows (N) and 3 columns: \"x\" and \"y\" with random values, and \"category\" with random categories from a given CATEGORIES list. Each category is guaranteed to appear at least once if N is greater than or equal to the number of categories, otherwise it is randomly sampled without replacement from CATEGORIES. Finally, draw a scatter plot of \"x\" vs \"y,\" colored by \"category\".\n\n    The function should output with:\n        tuple: A tuple containing:\n        DataFrame: The generated DataFrame.\n        Axes: The Axes object of the scatter plot.\n    \"\"\"\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random values for \"x\" and \"y\"\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n\n    # Generate random categories for \"category\"\n    if N >= len(CATEGORIES):\n        # If N is greater than or equal to the number of categories, ensure that each category appears at least once\n        category = np.random.choice(CATEGORIES, size=N, replace=False)\n    else:\n        # If N is less than the number of categories, randomly sample without replacement from CATEGORIES\n        category = np.random.choice(CATEGORIES, size=N, replace=False)\n\n    # Create a DataFrame with the generated data\n    df = pd.DataFrame({\"x\": x, \"y\": y, \"category\": category})\n\n    # Draw a scatter plot of \"x\" vs \"y,\" colored by \"category\"\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, c=category, cmap=\"viridis\")\n\n    return df, ax", "problem": "Create a DataFrame with a given number of rows (N) and 3 columns: \"x\" and \"y\" with random values, and \"category\" with random categories from a given CATEGORIES list. Each category is guaranteed to appear at least once if N is greater than or equal to the number of categories, otherwise it is randomly sampled without replacement from CATEGORIES. Finally, draw a scatter plot of \"x\" vs \"y,\" colored by \"category\".\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The generated DataFrame.\n    Axes: The Axes object of the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    np.random.seed(seed)\n\n    if N < len(CATEGORIES):\n        all_categories = np.random.choice(CATEGORIES, N, replace=False)\n    else:\n        guaranteed_categories = np.array(CATEGORIES)\n        remaining_categories = np.random.choice(CATEGORIES, N - len(CATEGORIES))\n        all_categories = np.concatenate([guaranteed_categories, remaining_categories])\n        np.random.shuffle(all_categories)\n\n    df = pd.DataFrame(\n        {\"x\": np.random.rand(N), \"y\": np.random.rand(N), \"category\": all_categories}\n    )\n\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        ax.scatter(\n            df[df[\"category\"] == category][\"x\"],\n            df[df[\"category\"] == category][\"y\"],\n            label=category,\n        )\n\n    return df, ax", "pass": false}
{"task_id": "478", "program": "import pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n\n    pass\nimport pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n    \"\"\"\n    Removes a random comma-separated value (treated as a \"substring\") from each string in a list and returns a pandas DataFrame containing the original and modified strings.\n    The function should output with:\n        DataFrame: A pandas DataFrame with columns 'Original String' and 'Modified String'.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a list of tuples containing the original and modified strings\n    data = [(s, re.sub(r',\\s*\\w+', '', s)) for s in data_list]\n\n    # Create a pandas DataFrame from the list of tuples\n    df = pd.DataFrame(data, columns=['Original String', 'Modified String'])\n\n    return df\ndata_list = ['apple, banana, cherry', 'orange, pear, grape', 'kiwi, mango, papaya']", "problem": "Removes a random comma-separated value (treated as a \"substring\") from each string in a list and returns a pandas DataFrame containing the original and modified strings.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Original String' and 'Modified String'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n```", "solution": "import pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame([s.strip() for s in data_list], columns=[\"Original String\"])\n\n    modified_strings = []\n    for s in data_list:\n        substrings = re.split(\", \", s)\n        random_substring = random.choice(substrings)\n        modified_s = (\n            s.replace(\", \" + random_substring, \"\")\n            if \", \" + random_substring in s\n            else s.replace(random_substring + \", \", \"\")\n        )\n        modified_strings.append(modified_s)\n\n    df[\"Modified String\"] = modified_strings\n\n    return df", "pass": false}
{"task_id": "479", "program": "import random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n\n    pass\nimport random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n    \"\"\"\n    Replace a random substring (a sequence of characters between two commas or at the beginning/end of the string) in a list of strings with a random string (comprising ascii lowercase characters) with the same length as the substituted characters.\n    The function should output with:\n        DataFrame: A pandas DataFrame with two columns - 'Original String' and 'Modified String'.\n        'Original String' contains the original strings from the input list, and 'Modified String'\n        contains the modified strings where a random substring has been replaced.\n    \"\"\"\n    random.seed(seed)\n    data_list = data_list.copy()\n    for i, s in enumerate(data_list):\n        # Find the start and end indices of the substring to replace\n        start_idx = random.randint(0, len(s))\n        end_idx = random.randint(start_idx, len(s))\n        # Generate a random string of the same length as the substring\n        replacement = ''.join(random.choice(string.ascii_lowercase) for _ in range(end_idx - start_idx))\n        # Replace the substring with the random string\n        data_list[i] = s[:start_idx] + replacement + s[end_idx:]\n    return pd.DataFrame({'Original String': data_list, 'Modified String': data_list})\ndata_list = ['hello, world', 'goodbye, world', 'hello, goodbye']", "problem": "Replace a random substring (a sequence of characters between two commas or at the beginning/end of the string) in a list of strings with a random string (comprising ascii lowercase characters) with the same length as the substituted characters.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns - 'Original String' and 'Modified String'.\n    'Original String' contains the original strings from the input list, and 'Modified String'\n    contains the modified strings where a random substring has been replaced.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n```", "solution": "import random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n    random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    modified_strings = []\n    for s in data_list:\n        s = s.strip()\n        if not s:\n            modified_strings.append(s)\n            continue\n        substrings = [ss.strip() for ss in s.split(\",\")]\n        replace_idx = random.randint(0, len(substrings) - 1)\n        random_string = \"\".join(\n            random.choices(string.ascii_lowercase, k=len(substrings[replace_idx]))\n        )\n        substrings[replace_idx] = random_string\n        modified_string = \", \".join(substrings)\n        modified_strings.append(modified_string)\n\n    df[\"Modified String\"] = modified_strings\n\n    return df", "pass": false}
{"task_id": "480", "program": "import re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n\n    pass\nimport re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n    \"\"\"\n    Shuffle the substrings within each string in a given list.\n    This function takes a list of comma-separated strings and splits each into substrings.\n    It extracts substrings based on commas, removing leading and trailing whitespaces from each.\n    Then, it shuffles these processed substrings within each string, and returns a pandas DataFrame with two columns: \"Original String\" and \"Shuffled String\".\n\n    Args:\n        data_list (list): A list of comma-separated strings.\n        seed (int, optional): A random seed for shuffling. Defaults to None.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame with columns 'Original String' and 'Shuffled String'.\n    \"\"\"\n    # Initialize the random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Split the strings into substrings\n    substrings = [re.split(r'\\s*,\\s*', s) for s in data_list]\n\n    # Shuffle the substrings within each string\n    shuffled_substrings = [[random.sample(s, len(s)) for s in substrings]]\n\n    # Create a pandas DataFrame with the original and shuffled strings\n    df = pd.DataFrame({'Original String': data_list, 'Shuffled String': shuffled_substrings})\n\n    return df\ndata_list = ['apple, banana, cherry', 'orange, pear, grape']", "problem": "Shuffle the substrings within each string in a given list. This function takes a list of comma-separated strings and splits each into substrings. It extracts substrings based on commas, removing leading and trailing whitespaces from each. Then, it shuffles these processed substrings within each string, and returns a pandas DataFrame with two columns: \"Original String\" and \"Shuffled String\".\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Original String' and 'Shuffled String'.\nYou should write self-contained code starting with:\n```\nimport re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n```", "solution": "import re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    shuffled_strings = []\n    for s in data_list:\n        substrings = re.split(\"\\s*,\\s*\", s)\n        random.shuffle(substrings)\n        shuffled_s = \", \".join(substrings)\n        shuffled_strings.append(shuffled_s)\n\n    df[\"Shuffled String\"] = shuffled_strings\n\n    return df", "pass": false}
{"task_id": "481", "program": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n\n    pass\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n    \"\"\"\n    Randomizes the order of comma-separated substrings within each string in a list, normalizing spaces to ensure a single space follows each comma using regex, then returns a DataFrame comparing original and randomized strings.\n\n    Parameters\n    ----------\n    data_list : list\n        A list of strings to be randomized.\n    seed : int, optional\n        The random seed to use for the randomization, by default 42.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with columns 'Original String' and 'Randomized String'.\n    \"\"\"\n    random.seed(seed)\n    data_list = [re.sub(r',\\s*', ', ', x) for x in data_list]\n    randomized_list = [random.sample(x.split(','), len(x.split(','))) for x in data_list]\n    randomized_list = [' '.join(x) for x in randomized_list]\n    return pd.DataFrame({'Original String': data_list, 'Randomized String': randomized_list})\ndata_list = ['apple, banana, cherry', 'orange, pear, grape']", "problem": "Randomizes the order of comma-separated substrings within each string in a list, normalizing spaces to ensure a single space follows each comma using regex, then returns a DataFrame comparing original and randomized strings.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'Original String' and 'Randomized String'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n```", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n    random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    randomized_strings = []\n    for s in data_list:\n        substrings = re.split(\"\\s*,\\s*\", s)\n        random_positions = random.sample(range(len(substrings)), len(substrings))\n        randomized_s = \", \".join([substrings[i] for i in random_positions])\n        randomized_strings.append(randomized_s)\n\n    df[\"Randomized String\"] = randomized_strings\n\n    return df", "pass": false}
{"task_id": "482", "program": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n\n    pass\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n    \"\"\"\n    Apply a random operation (remove, replace, shuffle, or randomize) to substrings in a list of strings.\n    This function processes a list of comma-separated strings by applying one of four random operations to their substrings: remove, replace, shuffle, or randomize.\n    Here, a substring refers to the individual items in the string that are separated by commas, sensitive to leading/trailing whitespace, i.e. 'apple' != 'apple ', and sensitive to case, i.e. 'APPLE' != 'aPPLE'.\n    The choice of operation and the substrings it affects are determined randomly.\n    The operations are:\n    - Remove: Randomly selects and removes a substring. If a string contains only one substring, no 'remove' operation is applied.\n    - Replace: Randomly selects a substring and replaces it with 'random_string'.\n    - Shuffle: Randomly shuffles the order of the substrings.\n    - Randomize: Assigns a new, random order to the substrings.\n    Finally, the function returns a DataFrame with column 'Original String' containing the input strings and the 'Modified String' column containing the strings after applying the random operation.\n\n    Args:\n        data_list (list): List of comma-separated strings.\n        seed (int, optional): Random seed for reproducibility. Defaults to None.\n\n    Returns:\n        pd.DataFrame: DataFrame containing original and modified strings.\n    \"\"\"\n    # Set random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize DataFrame\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    # Define operations\n    operations = [\"remove\", \"replace\", \"shuffle\", \"randomize\"]\n\n    # Apply operations to each string\n    for i, row in df.iterrows():\n        # Split string into substrings\n        substrings = row[\"Original String\"].split(\",\")\n\n        # Choose random operation\n        operation = random.choice(operations)\n\n        # Apply operation to substrings\n        if operation == \"remove\":\n            # Randomly select and remove a substring\n            if len(substrings) > 1:\n                substring_to_remove = random.choice(substrings)\n                substrings.remove(substring_to_remove)\n        elif operation == \"replace\":\n            # Randomly select a substring and replace it with 'random_string'\n            substring_to_replace = random.choice(substrings)\n            substrings[substrings.index(substring_to_replace)] = \"random_string\"\n        elif operation == \"shuffle\":\n            # Randomly shuffle the order of the substrings\n            random.shuffle(substrings)\n        elif operation == \"randomize\":\n            # Assign a new, random order to the substrings\n            random.shuffle(substrings)\n\n        # Join substrings into a string\n        modified_string = \",\".join(substrings)\n\n        # Add modified string to DataFrame\n        df.loc[i, \"Modified String\"] = modified_string\n\n    return df", "problem": "Apply a random operation (remove, replace, shuffle, or randomize) to substrings in a list of strings. This function processes a list of comma-separated strings by applying one of four random operations to their substrings: remove, replace, shuffle, or randomize. Here, a substring refers to the individual items in the string that are separated by commas, sensitive to leading/trailing whitespace, i.e. 'apple' != 'apple ', and sensitive to case, i.e. 'APPLE' != 'aPPLE'. The choice of operation and the substrings it affects are determined randomly. The operations are: - Remove: Randomly selects and removes a substring. If a string contains only one substring, no 'remove' operation is applied. - Replace: Randomly selects a substring and replaces it with 'random_string'. - Shuffle: Randomly shuffles the order of the substrings. - Randomize: Assigns a new, random order to the substrings. Finally, the function returns a DataFrame with column 'Original String' containing the input strings and the 'Modified String' column containing the strings after applying the random operation.\nThe function should output with:\n    df (pd.DataFrame): DataFrame containing original and modified strings.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n```", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n    random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    modified_strings = []\n    for s in data_list:\n        substrings = re.split(\", \", s)\n        operation = random.choice([\"remove\", \"replace\", \"shuffle\", \"randomize\"])\n        if operation == \"remove\":\n            if len(substrings) > 1:\n                random_substring = random.choice(substrings)\n                substrings.remove(random_substring)\n                modified_s = \", \".join(substrings)\n            else:\n                modified_s = s\n        elif operation == \"replace\":\n            random_substring_index = random.choice(range(len(substrings)))\n            substrings[random_substring_index] = \"random_string\"\n            modified_s = \", \".join(substrings)\n        elif operation == \"shuffle\":\n            random.shuffle(substrings)\n            modified_s = \", \".join(substrings)\n        elif operation == \"randomize\":\n            random_positions = random.sample(range(len(substrings)), len(substrings))\n            modified_s = \", \".join([substrings[i] for i in random_positions])\n        modified_strings.append(modified_s)\n\n    df[\"Modified String\"] = modified_strings\n\n    return df", "pass": false}
{"task_id": "483", "program": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n\n    pass\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words match a user-specified regular expression pattern, using a nested helper function. Words are considered to be whitespace-separated strings. This function maintains the original order of non-matching words.\n\n    Args:\n        df (pd.DataFrame): The pandas DataFrame to operate on.\n        column_name (str): The name of the column to operate on.\n        pattern (str): The regular expression pattern to match against.\n\n    Returns:\n        pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n        if they match the pattern, maintaining the original order of words that do not match,\n        and returning a copy of the unaltered DataFrame if the pattern is empty.\n    \"\"\"\n    if pattern == \"\":\n        return df.copy()\n\n    def reverse_words(text: str) -> str:\n        \"\"\"\n        Reverse the order of words in a string.\n\n        Args:\n            text (str): The string to operate on.\n\n        Returns:\n            str: The reversed string.\n        \"\"\"\n        return \" \".join(reversed(text.split()))\n\n    df[column_name] = df[column_name].apply(lambda x: reverse_words(x) if re.search(pattern, x) else x)\n    return df\ndf = pd.DataFrame({\"A\": [\"hello world\", \"goodbye moon\", \"hello sun\", \"goodbye stars\"]})", "problem": "Reverse the order of words in a specific column of a pandas DataFrame where the words match a user-specified regular expression pattern, using a nested helper function. Words are considered to be whitespace-separated strings. This function maintains the original order of non-matching words.\nThe function should output with:\n    pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n```", "solution": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "pass": false}
{"task_id": "484", "program": "import math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n\n    pass\nimport math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Create a list of timestamps\n    timestamps = pd.date_range(start=start_time, end=end_time, freq=step)\n\n    # Create a DataFrame with the specified columns\n    df = pd.DataFrame(index=timestamps, columns=columns)\n\n    # Generate sensor readings for Sensor1, Sensor2, and Sensor3\n    df[\"Sensor1\"] = np.sin(df.index.astype(np.int64) // 1000000000) + np.random.normal(0, 0.1, size=len(df))\n    df[\"Sensor2\"] = np.cos(df.index.astype(np.int64) // 1000000000) + np.random.normal(0, 0.1, size=len(df))\n    df[\"Sensor3\"] = np.tan(df.index.astype(np.int64) // 1000000000) + np.random.normal(0, 0.1, size=len(df))\n\n    # Generate sensor statuses\n    df[\"SensorStatus\"] = np.random.choice(sensor_statuses, size=len(df))\n\n    return df\nstart_time = datetime(2022, 1, 1)\nend_time = datetime(2022, 1, 2)\nstep = \"1s\"\ncolumns = [\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"]\nsensor_statuses = [\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"]\nrandom_seed = 42", "problem": "Generate a DataFrame with detailed artificial sensor readings for specified timestamps and sensor statuses from a predefined list. The function generates sensor readings for Sensor1, Sensor2, and Sensor3 (or their corresponding named columns in the supplied column list) using sine, cosine, and tan functions, respectively, of the timestamp (converted to seconds), with a small random noise added to simulate real sensor data variability. SensorStatus is randomly chosen from the provided statuses for each timestamp.\nThe function should output with:\n    pd.DataFrame: Generated sensor readings for the given timestamps.\nYou should write self-contained code starting with:\n```\nimport math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n```", "solution": "import math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n    np.random.seed(random_seed)\n\n    if start_time > end_time:\n        raise ValueError(\"start_time cannot be after end_time\")\n    if step < 0:\n        raise ValueError(\"step must be positive\")\n\n    timestamps = list(range(start_time, end_time, step))\n\n    data = []\n    for ts in timestamps:\n        dt = datetime.utcfromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        sensor1 = math.sin(ts / 1000) + np.random.normal(0, 0.1)\n        sensor2 = math.cos(ts / 1000) + np.random.normal(0, 0.1)\n        sensor3 = math.tan(ts / 1000) + np.random.normal(0, 0.1)\n        status = np.random.choice(sensor_statuses)\n        row = [dt, sensor1, sensor2, sensor3, status]\n        data.append(row)\n\n    return pd.DataFrame(data, columns=columns)", "pass": false}
{"task_id": "485", "program": "from datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n\n    pass\nfrom datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n    \"\"\"\n    Plots the hourly difference between UTC and specified global time zones across a date range.\n    This function visualizes the time difference in hours between UTC and predefined time zones for each day within the specified date range.\n    Predefined time zones include UTC, America/Los_Angeles, Europe/Paris, Asia/Kolkata, and Australia/Sydney.\n    The differences are plotted on a graph, using a distinct color for each time zone's time difference curve, selecting from [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"].\n    The function should output with:\n        matplotlib.axes.Axes: The Axes object with the plotted time differences in hours between UTC and\n        other time zones.\n    \"\"\"\n    # Define the time zones to be plotted\n    time_zones = [\"UTC\", \"America/Los_Angeles\", \"Europe/Paris\", \"Asia/Kolkata\", \"Australia/Sydney\"]\n\n    # Define the colors to be used for each time zone\n    colors = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Loop through each time zone and calculate the hourly difference between UTC and the time zone\n    for i, time_zone in enumerate(time_zones):\n        # Create a datetime object for the start and end times\n        start_dt = datetime.strptime(start_time, \"%Y-%m-%d %H:%M:%S\")\n        end_dt = datetime.strptime(end_time, \"%Y-%m-%d %H:%M:%S\")\n\n        # Create a timedelta object for the time difference between UTC and the time zone\n        time_diff = timedelta(hours=pytz.timezone(time_zone).utcoffset(start_dt).total_seconds() / 3600)\n\n        # Calculate the hourly difference between UTC and the time zone\n        hourly_diff = np.arange(start_dt, end_dt, timedelta(hours=1)) - time_diff\n\n        # Plot the hourly difference on the axis object\n        ax.plot(hourly_diff, label=time_zone, color=colors[i])\n\n    # Add a title and labels to the axis object\n    ax.set_title(\"Hourly Difference between UTC and Global Time Zones\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Hourly Difference (UTC - Time Zone)\")\n\n    # Add a legend to the axis object\n    ax.legend()\n\n    # Return the axis object\n    return ax\nstart_time = \"2022-01-01 00:00:00\"\nend_time = \"2022-01-02 00:00:00\"", "problem": "Plots the hourly difference between UTC and specified global time zones across a date range. This function visualizes the time difference in hours between UTC and predefined time zones for each day within the specified date range. Predefined time zones include UTC, America/Los_Angeles, Europe/Paris, Asia/Kolkata, and Australia/Sydney. The differences are plotted on a graph, using a distinct color for each time zone's time difference curve, selecting from [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"].\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the plotted time differences in hours between UTC and\n    other time zones.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n```", "solution": "from datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n    # Constants\n    TIMEZONES = [\n        \"UTC\",\n        \"America/Los_Angeles\",\n        \"Europe/Paris\",\n        \"Asia/Kolkata\",\n        \"Australia/Sydney\",\n    ]\n    COLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n\n    start_date = datetime.strptime(start_time, \"%Y-%m-%d\")\n    end_date = datetime.strptime(end_time, \"%Y-%m-%d\")\n    current_tz = pytz.timezone(\"UTC\")\n    dates = np.arange(start_date, end_date, timedelta(days=1)).astype(datetime)\n    differences = []\n    for tz in TIMEZONES:\n        other_tz = pytz.timezone(tz)\n        difference = [\n            (other_tz.localize(dt) - current_tz.localize(dt)).total_seconds() / 3600\n            for dt in dates\n        ]\n        differences.append(difference)\n    fig, ax = plt.subplots()\n    for i, difference in enumerate(differences):\n        ax.plot(dates, difference, color=COLORS[i % len(COLORS)], label=TIMEZONES[i])\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Time difference (hours)\")\n    ax.legend()\n    return ax", "pass": false}
{"task_id": "486", "program": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate a time series from a given epoch start time to end time with a specified step and trend.\n    The time series is plotted with timestamps on the x-axis ('Time') and values on the y-axis ('Value').\n    The values are generated from a normal distribution, and a linear trend is added based on the provided trend value.\n\n    Args:\n        start_time (int): The start time of the time series in epoch format.\n        end_time (int): The end time of the time series in epoch format.\n        step (int): The step size of the time series in seconds.\n        trend (float): The trend value to add to the time series.\n        seed (int, optional): The random seed to use for generating the time series. Defaults to 42.\n\n    Returns:\n        ax (matplotlib.pyplot.Axes): The Axes object of the generated plot, with the x-axis labeled 'Time' and y-axis labeled 'Value'.\n    \"\"\"\n    # Generate the time series\n    time_series = np.arange(start_time, end_time, step)\n\n    # Generate the values for the time series\n    values = np.random.normal(size=len(time_series), loc=0, scale=1, seed=seed)\n\n    # Add the trend to the time series\n    values += trend * np.arange(len(time_series))\n\n    # Create a DataFrame with the time series and values\n    df = pd.DataFrame({'Time': time_series, 'Value': values})\n\n    # Plot the time series\n    ax = df.plot(x='Time', y='Value', kind='line', figsize=(10, 6))\n\n    # Set the x-axis label\n    ax.set_xlabel('Time')\n\n    # Set the y-axis label\n    ax.set_ylabel('Value')\n\n    return ax\nstart_time = 1640995200\nend_time = 1641081600\nstep = 3600\ntrend = 0.1", "problem": "Generate a time series from a given epoch start time to end time with a specified step and trend. The time series is plotted with timestamps on the x-axis ('Time') and values on the y-axis ('Value'). The values are generated from a normal distribution, and a linear trend is added based on the provided trend value.\nThe function should output with:\n    ax (matplotlib.pyplot.Axes): The Axes object of the generated plot, with the x-axis labeled 'Time' and y-axis labeled 'Value'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n```", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n    if (start_time - end_time) > 0:\n        raise ValueError(\"Start time must be before end time\")\n    if step <= 0:\n        raise ValueError(\"Invalid step value.\")\n    np.random.seed(seed)\n\n    timestamps = np.arange(start_time, end_time, step)\n    df = pd.DataFrame(columns=[\"Time\", \"Value\"])\n    values = np.random.normal(size=len(timestamps))\n\n    for i, ts in enumerate(timestamps):\n        dt = datetime.fromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        value = values[i] + trend * i\n        df.loc[i] = [dt, value]\n\n    ax = df.plot(x=\"Time\", y=\"Value\")\n    ax.set_ylabel(\"Value\")\n    return ax", "pass": false}
{"task_id": "487", "program": "import os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n\n    pass\nimport os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n    \"\"\"\n    Parse a log file to extract log entries into a DataFrame.\n\n    This function reads a log file line by line. The log file is assumed to follow this format for each entry:\n    YYYY-MM-DD HH:MM:SS.ssssss - LEVEL - Message\n\n    The function matches each line against a predefined regular expression to extract timestamp, log level, and message,\n    ignoring lines where there is no match. It then aggregates the matched and extracted data into a pandas DataFrame with\n    columns: 'Timestamp', 'Level', and 'Message'. If the logs are empty or there is no extracted data, this function returns\n    an otherwise empty DataFrame containing the same expected columns.\n\n    Args:\n        file_path (str): The path to the log file.\n\n    Returns:\n        pd.DataFrame: A DataFrame with columns 'Timestamp', 'Level', and 'Message'.\n\n    Raises:\n        FileNotFoundError: If the specified log file does not exist.\n    \"\"\"\n    # Check if the log file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"Log file '{file_path}' does not exist.\")\n\n    # Define the regular expression to match log entries\n    log_entry_regex = r\"^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}) - (?P<level>\\w+) - (?P<message>.*)$\"\n\n    # Initialize an empty DataFrame to store the extracted data\n    data = pd.DataFrame(columns=[\"Timestamp\", \"Level\", \"Message\"])\n\n    # Read the log file line by line and extract the data using the regular expression\n    with open(file_path, \"r\") as f:\n        for line in f:\n            match = re.match(log_entry_regex, line)\n            if match:\n                data = data.append({\"Timestamp\": match.group(\"timestamp\"), \"Level\": match.group(\"level\"), \"Message\": match.group(\"message\")}, ignore_index=True)\n\n    return data", "problem": "Parse a log file to extract log entries into a DataFrame. This function reads a log file line by line. The log file is assumed to follow this format for each entry: YYYY-MM-DD HH:MM:SS.ssssss - LEVEL - Message The function matches each line against a predefined regular expression to extract timestamp, log level, and message, ignoring lines where there is no match. It then aggregates the matched and extracted data into a pandas DataFrame with columns: 'Timestamp', 'Level', and 'Message'. If the logs are empty or there is no extracted data, this function returns an otherwise empty DataFrame containing the same expected columns.\nThe function should raise the exception for: FileNotFoundError: If the specified log file does not exist.\nThe function should output with:\n    pd.DataFrame: A DataFrame with columns 'Timestamp', 'Level', and 'Message'.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n```", "solution": "import os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n    LOG_REGEX = r\"(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}) - (\\w+) - (.+)$\"\n\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n\n    logs = []\n    with open(file_path, \"r\") as f:\n        for line in f:\n            match = re.match(LOG_REGEX, line)\n            if match:\n                timestamp, level, message = match.groups()\n                logs.append([timestamp, level, message])\n\n    df = pd.DataFrame(logs, columns=[\"Timestamp\", \"Level\", \"Message\"])\n\n    if df.empty:\n        df = pd.DataFrame(columns=[\"Timestamp\", \"Level\", \"Message\"])\n\n    return df", "pass": false}
{"task_id": "488", "program": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n    \"\"\"\n    Generate a time series with a given seasonality from the start UTC time to the end UTC time with a given step, and plot the time series with the seasonality.\n    The function should output with:\n        matplotlib.pyplot.Axes: A plot of the generated 'Time Series with Seasonality',\n        with 'Timestamp' on x-axis and 'Value' on y-axis.\n    \"\"\"\n    # Generate a time series with a given seasonality\n    time_series = pd.date_range(start_time, end_time, freq=step)\n    np.random.seed(seed)\n    time_series = amplitude * np.sin(2 * np.pi * time_series.dayofyear / period) + np.random.normal(0, 0.1, len(time_series))\n\n    # Plot the time series with the seasonality\n    fig, ax = plt.subplots()\n    ax.plot(time_series.index, time_series)\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Value')\n    ax.set_title('Time Series with Seasonality')\n    return ax\nstart_time = datetime(2022, 1, 1)\nend_time = datetime(2022, 12, 31)\nstep = '1D'\namplitude = 10\nperiod = 365\nseed = 0", "problem": "Generate a time series with a given seasonality from the start UTC time to the end UTC time with a given step, and plot the time series with the seasonality.\nThe function should output with:\n    matplotlib.pyplot.Axes: A plot of the generated 'Time Series with Seasonality',\n    with 'Timestamp' on x-axis and 'Value' on y-axis.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n```", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n    np.random.seed(seed)\n\n    if period <= 0 or step < 1:\n        raise ValueError(\"Invalid input values\")\n\n    COLUMNS = [\"Timestamp\", \"Value\"]\n\n    timestamps = np.arange(start_time, end_time, step)\n    df = pd.DataFrame(columns=COLUMNS)\n\n    if amplitude == 0:\n        values = [0] * len(timestamps)\n    else:\n        values = np.random.normal(size=len(timestamps))\n\n    data = []\n    for i, ts in enumerate(timestamps):\n        dt = datetime.utcfromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        value = values[i] + amplitude * np.sin(2 * np.pi * ts / period)\n        data.append([dt, value])\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    ax = df.plot(x=\"Timestamp\", y=\"Value\", title=\"Time Series with Seasonality\")\n    ax.set_ylabel(\"Value\")\n    return ax", "pass": false}
{"task_id": "489", "program": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n    \"\"\"\n    Generate user activity logs from a given epoch time to the current time.\n    This function iterates from the starting epoch time to the current system time,\n    incrementally increasing the time by a random number of seconds (an integer in [1, 10])\n    between each log entry. Each log entry records a user performing an activity at a specific time.\n\n    Args:\n        epoch_milliseconds (int): The starting epoch time in milliseconds.\n        seed (int, optional): The random seed. Defaults to 0.\n\n    Raises:\n        ValueError: If the start time is after the current system time.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing logs of user activities, with columns:\n            'User': User names, randomly chosen from a predefined list of users,\n                ['user1', 'user2', 'user3', 'user4', 'user5'].\n            'Activity': Activities performed by the users, randomly chosen from a\n                predefined list of activities, ['login', 'logout', 'browse', 'search', 'purchase'].\n            'Time': The timestamp of when the activity occurred, incrementally\n                increasing from the starting epoch time to the current time.\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Define the list of users and activities\n    users = ['user1', 'user2', 'user3', 'user4', 'user5']\n    activities = ['login', 'logout', 'browse', 'search', 'purchase']\n\n    # Convert the epoch time to a datetime object\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Get the current system time\n    current_time = datetime.now()\n\n    # Check if the start time is after the current system time\n    if start_time > current_time:\n        raise ValueError(\"Start time is after the current system time\")\n\n    # Initialize the DataFrame\n    df = pd.DataFrame(columns=['User', 'Activity', 'Time'])\n\n    # Iterate from the start time to the current time, incrementing by a random number of seconds\n    while start_time <= current_time:\n        # Generate a random number of seconds between 1 and 10\n        seconds = random.randint(1, 10)\n\n        # Add a new row to the DataFrame\n        df = df.append({'User': random.choice(users), 'Activity': random.choice(activities), 'Time': start_time}, ignore_index=True)\n\n        # Increment the start time by the random number of seconds\n        start_time += timedelta(seconds=seconds)\n\n    return df", "problem": "Generate user activity logs from a given epoch time to the current time. This function iterates from the starting epoch time to the current system time, incrementally increasing the time by a random number of seconds (an integer in [1, 10]) between each log entry. Each log entry records a user performing an activity at a specific time.\nThe function should raise the exception for: ValueError: If the start time is after the current system time.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing logs of user activities, with columns:\n    'User':   User names, randomly chosen from a predefined list of users,\n    ['user1', 'user2', 'user3', 'user4', 'user5'].\n    'Activity': Activities performed by the users, randomly chosen from a\n    predefined list of activities, ['login', 'logout', 'browse',\n    'search', 'purchase'].\n    'Time': The timestamp of when the activity occurred, incrementally\n    increasing from the starting epoch time to the current time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n```", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n    random.seed(seed)\n\n    USERS = [\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]\n    ACTIVITIES = [\"login\", \"logout\", \"browse\", \"search\", \"purchase\"]\n\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_time = datetime.now()\n    if start_time >= end_time:\n        raise ValueError(\"Start time must be before current system time\")\n\n    logs = []\n    current_time = start_time\n    while current_time <= end_time:\n        user = random.choice(USERS)\n        activity = random.choice(ACTIVITIES)\n        logs.append([user, activity, current_time])\n        current_time += timedelta(seconds=random.randint(1, 10))\n    log_df = pd.DataFrame(logs, columns=[\"User\", \"Activity\", \"Time\"])\n    return log_df", "pass": false}
{"task_id": "490", "program": "import xmltodict\nimport json\ndef task_func(s, file_path):\n\n    pass\nimport xmltodict\nimport json\ndef task_func(s, file_path):\n    \"\"\"\n    Converts an XML string into a dictionary representation and saves it as a JSON file.\n\n    Args:\n        s (str): The XML string to convert.\n        file_path (str): The path to the JSON file to save the dictionary representation to.\n\n    Returns:\n        dict: A dictionary representation of the XML string.\n    \"\"\"\n    # Convert the XML string to a dictionary\n    xml_dict = xmltodict.parse(s)\n\n    # Save the dictionary to a JSON file\n    with open(file_path, \"w\") as f:\n        json.dump(xml_dict, f)\n\n    return xml_dict", "problem": "Converts an XML string into a dictionary representation and saves it as a JSON file. This is useful for easily accessing and persisting data stored in XML format.\nThe function should output with:\n    dict: A dictionary representation of the XML string.\nYou should write self-contained code starting with:\n```\nimport xmltodict\nimport json\ndef task_func(s, file_path):\n```", "solution": "import xmltodict\nimport json\ndef task_func(s, file_path):\n    my_dict = xmltodict.parse(s)\n    # Save the dictionary to a JSON file\n    with open(file_path, 'w') as json_file:\n        json.dump(my_dict, json_file, indent=4)\n\n    return my_dict", "pass": true}
{"task_id": "491", "program": "import random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n\n    pass\nimport random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n    \"\"\"\n    Generate and draw a sales trend for different categories from a particular epoch milliseconds to the current UTC time.\n    The function selects category from ['Electronics', 'Clothing', 'Home', 'Books', 'Sports'].\n    Each day's sales are randomly determined between 10 and 50 units for each category.\n    The plot's x-axis represents 'Days since (the start date)', and the y-axis represents 'Sales' units.\n    The function should raise the exception for: ValueError: If the start time is negative or after the current time.\n    The function should output with:\n        sales_data (dict): Sales data for different categories over days.\n        ax (plt.Axes): The plot depicting the sales trend.\n    \"\"\"\n    # Check if the start time is valid\n    if epoch_milliseconds < 0 or epoch_milliseconds > datetime.utcnow().timestamp() * 1000:\n        raise ValueError(\"Invalid start time\")\n\n    # Set the random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Define the categories and their sales ranges\n    categories = [\"Electronics\", \"Clothing\", \"Home\", \"Books\", \"Sports\"]\n    sales_ranges = [(10, 50) for _ in range(len(categories))]\n\n    # Generate the sales data for each category\n    sales_data = {category: [random.randint(low, high) for _ in range(int((datetime.utcnow().timestamp() * 1000 - epoch_milliseconds) / 86400000))] for category, (low, high) in zip(categories, sales_ranges)}\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    for category, sales in sales_data.items():\n        ax.plot(range(len(sales)), sales, label=category)\n    ax.set_xlabel(\"Days since \" + datetime.fromtimestamp(epoch_milliseconds / 1000).strftime(\"%Y-%m-%d\"))\n    ax.set_ylabel(\"Sales\")\n    ax.legend()\n\n    return sales_data, ax", "problem": "Generate and draw a sales trend for different categories from a particular epoch milliseconds to the current UTC time. The function selects category from ['Electronics', 'Clothing', 'Home', 'Books', 'Sports']. Each day's sales are randomly determined between 10 and 50 units for each category. The plot's x-axis represents 'Days since (the start date)', and the y-axis represents 'Sales' units.\nThe function should raise the exception for: ValueError: If the start time is negative or after the current time.\nThe function should output with:\n    sales_data (dict): Sales data for different categories over days.\n    ax (plt.Axes): The plot depicting the sales trend.\nYou should write self-contained code starting with:\n```\nimport random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n```", "solution": "import random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n    CATEGORIES = [\"Electronics\", \"Clothing\", \"Home\", \"Books\", \"Sports\"]\n\n    if seed is not None:\n        random.seed(seed)\n\n    if epoch_milliseconds < 0:\n        raise ValueError(\"Start time cannot be negative.\")\n\n    start_time = datetime.utcfromtimestamp(epoch_milliseconds / 1000.0)\n    current_time = datetime.utcnow()\n    days_diff = (current_time - start_time).days\n    if days_diff <= 0:\n        raise ValueError(\"Start date must be before current time.\")\n\n    sales_data = {category: [0] * days_diff for category in CATEGORIES}\n\n    for i in range(days_diff):\n        for category in CATEGORIES:\n            sales = random.randint(10, 50)\n            sales_data[category][i] += sales\n\n    fig, ax = plt.subplots()\n    for category, sales in sales_data.items():\n        ax.plot(range(days_diff), sales, label=category)\n\n    ax.set_xlabel(\"Days since \" + start_time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ax.set_ylabel(\"Sales\")\n    ax.legend()\n\n    return sales_data, ax", "pass": false}
{"task_id": "492", "program": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int):\n        raise ValueError(\"epoch_milliseconds must be an integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"random_seed must be an integer\")\n    if not isinstance(products, list):\n        raise ValueError(\"products must be a list\")\n\n    # Set random seed\n    random.seed(random_seed)\n\n    # Generate sales data for each day between the given epoch time and the current time\n    current_time = datetime.now()\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000)\n    days = (current_time - start_time).days\n    sales_data = []\n    for day in range(days):\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append({\"Product\": product, \"Date\": start_time + timedelta(days=day), \"Sales\": sales})\n\n    # Return sales data as a DataFrame\n    return pd.DataFrame(sales_data)", "problem": "Generate sales data for five products from a given epoch time up to the current time. This function checks input validity, then for each day between the date of the given epoch time to the date of the current time, generates random sales data for each of the 5 products.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing sales data with columns 'Product' (string), 'Date' (datetime),\n    and 'Sales' (integer). Sales quantity is randomly sampled from range [10, 50].\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n```", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    random.seed(random_seed)\n\n    products = list(set(products))\n    if len(products) != 5:\n        raise ValueError(\"Products must contain 5 unique items\")\n\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_date = datetime.now()\n    if start_date >= end_date:\n        raise ValueError(\"Start time must be before current system time\")\n\n    date_range = pd.date_range(start_date, end_date, freq=\"D\")\n    sales_data = []\n    for date in date_range:\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append([product, date, sales])\n\n    df = pd.DataFrame(sales_data, columns=[\"Product\", \"Date\", \"Sales\"])\n    return df", "pass": false}
{"task_id": "493", "program": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n\n    pass\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"], random_seed=0):\n    # Convert epoch milliseconds to datetime object\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000)\n\n    # Set random seed\n    random.seed(random_seed)\n\n    # Generate random performance data for each team\n    performance_data = {}\n    for team in teams:\n        performance_data[team] = []\n        for day in range((datetime.now() - start_date).days):\n            performance_data[team].append(random.uniform(0.1, 1))\n\n    # Plot performance trend for each team\n    fig, ax = plt.subplots()\n    for team, data in performance_data.items():\n        ax.plot(data, label=team)\n    ax.set_xlabel(\"Days since start date\")\n    ax.set_ylabel(\"Performance\")\n    ax.legend()\n\n    return performance_data, fig", "problem": "Generate and plot a performance trend for different teams from a given epoch timestamp to the current time. The performance data is generated by creating a series of random values for each day from the starting timestamp to the present day. Each team's performance is simulated as a random float between 0.1 and 1 for each day. The plot shows days since the start date on the x-axis and performance on the y-axis.\nThe function should output with:\n    dict: A dictionary containing performance data for each team, with days as indices and performance as float values.\n    matplotlib.figure.Figure: A figure object showing the performance trend of each team over the days.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n```", "solution": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n\n    random.seed(random_seed)\n\n    if (not isinstance(teams, list)) or (not all(isinstance(t, str) for t in teams)):\n        raise TypeError(\"Expected teams to be list of str\")\n\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    current_time = datetime.now()\n    days_diff = (current_time - start_time).days\n\n    if days_diff < 0:\n        raise ValueError(\"Input epoch timestamp is in the future!\")\n\n    performance_data = {team: [0] * days_diff for team in teams}\n\n    for i in range(days_diff):\n        for team in teams:\n            performance = random.uniform(0.1, 1)\n            performance_data[team][i] += performance\n\n    fig, ax = plt.subplots()\n    for team, performance in performance_data.items():\n        ax.plot(range(days_diff), performance, label=team)\n\n    ax.set_xlabel(\"Days since \" + start_time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ax.set_ylabel(\"Performance\")\n    ax.legend()\n\n    return performance_data, fig", "pass": false}
{"task_id": "494", "program": "from datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n\n    pass\nfrom datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n    \"\"\"\n    Create a dictionary with a fake event schedule given an event time.\n    The function converts a given epoch in milliseconds into a datetime object in the current system time's timezone.\n    It generates a fake event name using Faker.\n    Then, it uses pytz and regex to check if specified timezones are valid (i.e. in pytz.all_timezones or can be parsed using regex from UTC\u00b1HH:MM format), ignoring invalid ones.\n    If none is valid or if timezones were not specified, it selects UTC; otherwise, it randomly selects a valid one using Faker.\n    Finally, the function returns a dictionary with the fake event name as key and a list as value, where the list itself contains a schedule, i.e. a dictionary with keys 'date', 'time', 'timezone'.\n    The function should output with:\n        A dictionary containing event names as keys and a list of event details as values.\n        Event details include the date, time, and timezone of the event.\n    \"\"\"\n    # Convert epoch milliseconds to datetime object in current system timezone\n    dt = datetime.fromtimestamp(epoch_milliseconds / 1000, tz=pytz.timezone(\"UTC\"))\n\n    # Generate fake event name using Faker\n    fake = Faker()\n    event_name = fake.name()\n\n    # Check if specified timezones are valid\n    valid_timezones = []\n    for timezone in timezones:\n        if timezone in pytz.all_timezones or re.match(r\"^UTC[+-]\\d{2}:\\d{2}$\", timezone):\n            valid_timezones.append(timezone)\n\n    # If no valid timezones were specified, select UTC\n    if not valid_timezones:\n        timezone = \"UTC\"\n    # Otherwise, randomly select a valid timezone\n    else:\n        timezone = fake.random.choice(valid_timezones)\n\n    # Create a dictionary with the fake event name as key and a list as value\n    event_details = {\n        \"date\": dt.date(),\n        \"time\": dt.time(),\n        \"timezone\": timezone\n    }\n    return {event_name: [event_details]}", "problem": "Create a dictionary with a fake event schedule given an event time. The function converts a given epoch in milliseconds into a datetime object in the current system time's timezone. It generates a fake event name using Faker. Then, it uses pytz and regex to check if specified timezones are valid (i.e. in pytz.all_timezones or can be parsed using regex from UTC\u00b1HH:MM format), ignoring invalid ones. If none is valid or if timezones were not specified, it selects UTC; otherwise, it randomly selects a valid one using Faker. Finally, the function returns a dictionary with the fake event name as key and a list as value, where the list itself contains a schedule, i.e. a dictionary with keys 'date', 'time', 'timezone'.\nThe function should output with:\n    A dictionary containing event names as keys and a list of event details as values.\n    Event details include the date, time, and timezone of the event.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n```", "solution": "from datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n    Faker.seed(seed)\n\n    faker_instance = Faker()\n\n    event_datetime = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n\n    event_name = faker_instance.unique.first_name()\n\n    validated_timezones = []\n    utc_offset_regex = r\"^UTC([+-])(0[0-9]|1[0-4]):([0-5][0-9])$\"\n    for tz in timezones:\n        if (\n            (tz == \"UTC\")\n            or (re.match(utc_offset_regex, tz))\n            or (tz in pytz.all_timezones)\n        ):\n            validated_timezones.append(tz)\n    if not validated_timezones:\n        validated_timezones = [\"UTC\"]\n\n    timezone = faker_instance.random_element(elements=(validated_timezones))\n\n    event_schedule = {\n        event_name: [\n            {\n                \"date\": event_datetime.date(),\n                \"time\": event_datetime.time(),\n                \"timezone\": timezone,\n            }\n        ]\n    }\n\n    return event_schedule", "pass": false}
{"task_id": "495", "program": "import pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n    \"\"\"\n    Generates a spending report DataFrame for the given number of days.\n    This function takes a number of days as input and populates a pandas DataFrame with fake expenditure data indexed by date.\n    Each day on or after '2023-01-01' has its own row.\n    The DataFrame has five columns: Groceries, Entertainment, Rent, Utilities, and Miscellaneous, with their integer values independently randomly sampled from 0 to 100.\n\n    Parameters\n    ----------\n    days : int\n        Number of days for which to generate spending data.\n    random_seed : int, optional\n        Random seed for reproducibility, by default 0\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing spending details for specified days, with shape (num_days, 5).\n    \"\"\"\n    np.random.seed(random_seed)\n    dates = pd.date_range(start='2023-01-01', periods=days)\n    data = np.random.randint(0, 101, size=(days, 5))\n    df = pd.DataFrame(data, index=dates, columns=['Groceries', 'Entertainment', 'Rent', 'Utilities', 'Miscellaneous'])\n    return df", "problem": "Generates a spending report DataFrame for the given number of days. This function takes a number of days as input and populates a pandas DataFrame with fake expenditure data indexed by date. Each day on or after '2023-01-01' has its own row. The DataFrame has five columns: Groceries, Entertainment, Rent, Utilities, and Miscellaneous, with their integer values independently randomly sampled from 0 to 100.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing spending details for specified days,\n    with shape (num_days, 5).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n    np.random.seed(random_seed)\n    date_rng = pd.date_range(start=\"2023-01-01\", periods=days, freq=\"D\")\n    df = pd.DataFrame(date_rng, columns=[\"date\"])\n    df.set_index(\"date\", inplace=True)\n    categories = [\"Groceries\", \"Entertainment\", \"Rent\", \"Utilities\", \"Miscellaneous\"]\n    for category in categories:\n        df[category] = np.random.randint(0, 100, size=(days))\n\n    return df", "pass": true}
{"task_id": "496", "program": "from datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n\n    pass\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Draw a graph of temperature trends over the past week using randomly generated data.\n    This function generates random integer temperatures in Celcius with a low of 15 and high of 35.\n    To show temperature trend, it plots date on the x-axis and temperature on the y-axis.\n\n    Args:\n        days_in_past (int): Number of days in the past to generate data for.\n        random_seed (int): Random seed for generating random temperatures.\n\n    Raises:\n        ValueError: If days_in_past is less than 1.\n\n    Returns:\n        ax (matplotlib.axes._axes.Axes): Generated plot showing 'Temperature Trend'\n        with 'Date' on the x-axis and 'Temperature (\u00b0C)' on the y-axis.\n    \"\"\"\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than or equal to 1\")\n\n    # Generate random temperatures\n    np.random.seed(random_seed)\n    temperatures = np.random.randint(15, 35, days_in_past)\n\n    # Create a list of dates\n    dates = [datetime.today() - timedelta(days=i) for i in range(days_in_past)]\n\n    # Plot the temperature trend\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.set_title(\"Temperature Trend\")\n\n    return ax", "problem": "Draw a graph of temperature trends over the past week using randomly generated data. This function generates random integer temperatures in Celcius with a low of 15 and high of 35. To show temperature trend, it plots date on the x-axis and temperature on the y-axis.\nThe function should raise the exception for: ValueError: If days_in_past is less than 1.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Generated plot showing 'Temperature Trend'\n    with 'Date' on the a-xis and 'Temperature (\u00b0C)' on the y-axis.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n```", "solution": "from datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    np.random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be in the past\")\n\n    dates = [datetime.now().date() - timedelta(days=i) for i in range(days_in_past)]\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.set_title(\"Temperature Trend\")\n    return ax", "pass": true}
{"task_id": "497", "program": "from datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n\n    pass\nfrom datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n    if days_in_past < 0:\n        raise ValueError(\"days_in_past must be non-negative\")\n    target_date = datetime.now(tz=pytz.UTC) - timedelta(days=days_in_past)\n    weekday = calendar.day_name[target_date.weekday()]\n    return weekday", "problem": "Get the weekday of the date 'days_in_past' days ago from today. This function computes the date that is 'days_in_past' number of days ago from the current system time's date in UTC. It then determines the weekday of this target date using calendar and returns its name as a string.\nThe function should raise the exception for: ValueError: If 'days_in_past' is negative.\nThe function should output with:\n    weekday (str)     : The name of the weekday (e.g., 'Monday', 'Tuesday') for the computed date.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n```", "solution": "from datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n    if days_in_past < 0:\n        raise ValueError(\"Days in the past cannot be negative\")\n\n    date = datetime.now(pytz.UTC) - timedelta(days=days_in_past)\n    weekday = calendar.day_name[date.weekday()]\n\n    return weekday", "pass": true}
{"task_id": "498", "program": "import xmltodict\nimport json\ndef task_func(s, save_json, json_file_path):\n\n    pass\nimport xmltodict\nimport json\ndef task_func(s, save_json=False, json_file_path=None):\n    \"\"\"\n    Converts an XML string into a dictionary representation and optionally saves it as a JSON file.\n\n    Args:\n        s (str): The XML string to be converted.\n        save_json (bool, optional): Whether to save the parsed XML as a JSON file. Defaults to False.\n        json_file_path (str, optional): The path to the JSON file to be created. Defaults to None.\n\n    Returns:\n        dict: A dictionary representation of the XML string.\n\n    Raises:\n        ValueError: If the input XML string is empty or contains only whitespace.\n    \"\"\"\n    if not s.strip():\n        raise ValueError(\"Input XML string is empty or contains only whitespace.\")\n\n    xml_dict = xmltodict.parse(s)\n\n    if save_json:\n        with open(json_file_path, \"w\") as f:\n            json.dump(xml_dict, f, indent=4)\n\n    return xml_dict", "problem": "Converts an XML string into a dictionary representation and optionally saves it as a JSON file. This function is useful for easily accessing data stored in XML format and saving it for future use. Convert an XML string with nested elements. >>> result = task_func('<school><class><student>Emma</student></class></school>') >>> result['school']['class']['student'] 'Emma' Save the parsed XML as a JSON file. >>> task_func('<data><item>1</item><item>2</item></data>', save_json=True, json_file_path='data.json') # A JSON file 'data.json' will be created with the parsed XML data.\nThe function should raise the exception for: ValueError: If the input XML string is empty or contains only whitespace.\nThe function should output with:\n    dict: A dictionary representation of the XML string.\nYou should write self-contained code starting with:\n```\nimport xmltodict\nimport json\ndef task_func(s, save_json, json_file_path):\n```", "solution": "import xmltodict\nimport json\ndef task_func(s, save_json, json_file_path):\n    if not s.strip():  # Check for empty or whitespace-only string\n        raise ValueError(\"The input XML string is empty or contains only whitespace.\")\n    \n    my_dict = xmltodict.parse(s)\n\n    if save_json and json_file_path:\n        with open(json_file_path, 'w') as json_file:\n            json.dump(my_dict, json_file, indent=4)\n\n    return my_dict", "pass": true}
{"task_id": "499", "program": "import xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n\n    pass\nimport xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n    # Create a new Excel workbook\n    workbook = xlwt.Workbook()\n\n    # Create a new worksheet\n    worksheet = workbook.add_sheet('Sheet1')\n\n    # Write the CSV content to the worksheet\n    with io.StringIO(csv_content) as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            worksheet.write(0, 0, row[0])\n\n    # Save the workbook as an Excel file\n    workbook.save(filename)\n\n    # Return the absolute path of the created Excel file\n    return os.path.abspath(filename)\ncsv_content = 'Hello'\nfilename = 'single_cell.xls'", "problem": "Converts CSV content into an Excel file and saves it with the given filename. The function reads the CSV content, creates a new Excel workbook, writes the data into the workbook, and saves it as an Excel file. Create an Excel file with a single cell. >>> csv_content = 'Hello' >>> os.path.isfile(task_func(csv_content, 'single_cell.xls')) True\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n```", "solution": "import xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n    book = xlwt.Workbook()\n    sheet1 = book.add_sheet(\"sheet1\")\n\n    reader = csv.reader(io.StringIO(csv_content))\n    for row_index, row in enumerate(reader):\n        for col_index, col in enumerate(row):\n            sheet1.write(row_index, col_index, col)\n\n    book.save(filename)\n\n    return os.path.abspath(filename)", "pass": false}
{"task_id": "500", "program": "import xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n\n    pass\nimport xlwt\nimport os\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n    \"\"\"\n    Writes a list of OrderedDicts to an Excel file.\n    Each OrderedDict in the list represents a row in the Excel sheet,\n    and each key in the OrderedDict corresponds to a column defined in the FIELDS constant.\n    :param values: A list of OrderedDicts to write to the Excel file.\n    :param filename: The name of the Excel file to create.\n    :return: The absolute path of the created Excel file.\n    \"\"\"\n    # Create a new Excel workbook\n    workbook = xlwt.Workbook()\n\n    # Add a worksheet to the workbook\n    worksheet = workbook.add_sheet('Sheet1')\n\n    # Write the column headers\n    for i, field in enumerate(FIELDS):\n        worksheet.write(0, i, field)\n\n    # Write the data to the worksheet\n    for i, row in enumerate(values, start=1):\n        for j, field in enumerate(FIELDS):\n            worksheet.write(i, j, row[field])\n\n    # Save the workbook to a file\n    workbook.save(filename)\n\n    # Return the absolute path of the created Excel file\n    return os.path.abspath(filename)\nempty_data = []", "problem": "Writes a list of OrderedDicts to an Excel file. Each OrderedDict in the list represents a row in the Excel sheet, and each key in the OrderedDict corresponds to a column defined in the FIELDS constant comprising column names 'ID', 'Name', and 'Age'. Create an Excel file with no data. >>> empty_data = [] >>> path = task_func(empty_data, 'empty_data.xls') >>> os.path.exists(path) and 'empty_data.xls' in path True\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n```", "solution": "import xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n    book = xlwt.Workbook()\n    sheet1 = book.add_sheet(\"persons\")\n\n    # Write header\n    for col_index, col in enumerate(FIELDS):\n        sheet1.write(0, col_index, col)\n\n    # Write data rows\n    for row_index, row_values in enumerate(values, 1):\n        for col_index, col in enumerate(FIELDS):\n            value = row_values.get(col, \"\")\n            sheet1.write(row_index, col_index, value)\n\n    book.save(filename)\n\n    return os.path.abspath(filename)", "pass": false}
{"task_id": "501", "program": "import xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n\n    pass\nimport xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings to an Excel file, including handling empty JSON arrays.\n    This function takes a JSON string and converts it into an Excel file with the specified filename.\n    If the JSON string represents an empty array, the function creates an Excel file with no data rows.\n    The function should raise the exception for:\n        ValueError: If `json_str` is not valid JSON.\n        TypeError: If `json_str` is not a string, bytes, or bytearray.\n        Exception: For other general errors related to file writing.\n    The function should output with:\n        str: The absolute path of the created Excel file.\n    \"\"\"\n    # Check if the input is a valid JSON string\n    try:\n        json_data = json.loads(json_str)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n    # Check if the input is a string, bytes, or bytearray\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"Input must be a string, bytes, or bytearray\")\n\n    # Convert the JSON data to a pandas DataFrame\n    df = pd.DataFrame(json_data)\n\n    # Create a new Excel file with the specified filename\n    filepath = os.path.join(os.getcwd(), filename)\n    workbook = xlwt.Workbook()\n    worksheet = workbook.add_sheet(sheet_name)\n\n    # Write the DataFrame to the Excel file\n    for i, row in enumerate(df.values):\n        for j, col in enumerate(row):\n            worksheet.write(i, j, col)\n\n    # Save the Excel file\n    workbook.save(filepath)\n\n    return filepath", "problem": "Convert JSON strings to an Excel file, including handling empty JSON arrays. This function takes a JSON string and converts it into an Excel file with the specified filename. If the JSON string represents an empty array, the function creates an Excel file with no data rows.\nThe function should raise the exception for: ValueError: If `json_str` is not valid JSON. TypeError: If `json_str` is not a string, bytes, or bytearray. Exception: For other general errors related to file writing.\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n```", "solution": "import xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    \n    try:\n        data = pd.read_json(json_str)\n        \n        # Initialize Excel workbook and sheet\n        book = xlwt.Workbook()\n        sheet = book.add_sheet(sheet_name)\n        \n        # Check if DataFrame is empty and proceed accordingly\n        if not data.empty:\n            for col_index, col in enumerate(data.columns):\n                sheet.write(0, col_index, col)\n            for row_index, row in data.iterrows():\n                for col_index, col in enumerate(data.columns):\n                    sheet.write(row_index + 1, col_index, row[col])\n        book.save(filename)\n        return os.path.abspath(filename)\n    except ValueError as e:\n        raise ValueError(f\"Invalid JSON string: {e}\")\n    except Exception as e:\n        raise Exception(f\"Error in file writing: {e}\")", "pass": false}
{"task_id": "502", "program": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n\n    pass\nfrom datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates a graph of daily activity durations for a specified number of days in the past using randomly generated data for activities.\n    This function randomly generates acitivity durations from 0 to 120 for each activity from [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"].\n    A sample row from the returned DataFrame might look like:\n    Date        Activity  Duration YYYY-MM-DD  Running   45\n    :param days_in_past: Number of days in the past to generate data for.\n    :param random_seed: Random seed for generating random data.\n    :return: Tuple containing\n        ax (matplotlib.pyplot.Axes): DataFrame used for plotting.\n        df (pd.DataFrame): Seaborn lineplot with date on the x-axis, duration on the y-axis, and activity as hue.\n    \"\"\"\n    # Set random seed\n    random.seed(random_seed)\n\n    # Generate random activity durations\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    durations = [random.randint(0, 120) for _ in range(len(activities))]\n\n    # Generate dates\n    today = datetime.today()\n    dates = [today - timedelta(days=i) for i in range(days_in_past)]\n\n    # Create DataFrame\n    df = pd.DataFrame({\"Date\": dates, \"Activity\": activities, \"Duration\": durations})\n\n    # Plot data\n    ax = sns.lineplot(data=df, x=\"Date\", y=\"Duration\", hue=\"Activity\")\n\n    return ax, df\ndays_in_past = 10\nrandom_seed = 0", "problem": "Generates a graph of daily activity durations for a specified number of days in the past using randomly generated data for activities. This function randomly generates acitivity durations from 0 to 120 for each activity from [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]. A sample row from the returned DataFrame might look like: Date        Activity  Duration YYYY-MM-DD  Running   45\nThe function should output with:\n    Tuple containing\n    ax (matplotlib.pyplot.Axes): DataFrame used for plotting.\n    df (pd.DataFrame): Seaborn lineplot with date on the x-axis, duration on the y-axis, and activity as hue.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n```", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\ndef task_func(days_in_past=7, random_seed=0):\n\n    random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be in the past\")\n\n    ACTIVITIES = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n\n    data = []\n    for i in range(days_in_past):\n        date = datetime.now().date() - timedelta(days=i)\n        for activity in ACTIVITIES:\n            duration = random.randint(0, 120)\n            data.append([date, activity, duration])\n\n    df = pd.DataFrame(data, columns=[\"Date\", \"Activity\", \"Duration\"])\n    ax = sns.lineplot(data=df, x=\"Date\", y=\"Duration\", hue=\"Activity\")\n    return ax, df", "pass": false}
{"task_id": "503", "program": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0):\n    np.random.seed(random_seed)\n    today = datetime.today()\n    dates = pd.date_range(today - pd.Timedelta(days=days_in_past), today, freq=\"D\")\n    prices = np.random.rand(len(dates), len(stock_names))\n    df = pd.DataFrame(prices, index=dates, columns=stock_names)\n    return df", "problem": "Create a DataFrame of stock prices for a specified number of days in the past using random data.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing random stock prices for the specified number of days.\n    Prices are floats in [0.0,1.0).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    np.random.seed(random_seed)\n\n    if not isinstance(days_in_past, int) or days_in_past <= 0:\n        raise ValueError(\"days_in_past must be a positive integer.\")\n    if not stock_names or not all(isinstance(name, str) for name in stock_names):\n        raise ValueError(\"stock_names must be a list of strings and cannot be empty.\")\n\n    dates = pd.date_range(end=datetime.now().date(), periods=days_in_past)\n    prices = np.random.rand(days_in_past, len(stock_names)) * 100\n    df = pd.DataFrame(prices, columns=stock_names, index=dates)\n\n    return df", "pass": false}
{"task_id": "504", "program": "import hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n\n    pass\nimport hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n    \"\"\"\n    Generates a signed hash of a file's contents using RSA encryption.\n    The file's contents are hashed using SHA-256, and then the hash is signed with a private RSA key stored in 'private.pem'.\n    The signed hash is encoded in base64.\n\n    Args:\n        file_path (str): The path to the file to be hashed and signed.\n\n    Returns:\n        str: The base64 encoded signed hash of the file.\n    \"\"\"\n    # Load the private key\n    with open(\"private.pem\", \"rb\") as key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())\n\n    # Hash the file contents using SHA-256\n    with open(file_path, \"rb\") as file:\n        file_hash = hashlib.sha256(file.read()).digest()\n\n    # Sign the hash using the private key\n    signature = rsa.sign(file_hash, private_key, \"SHA-256\")\n\n    # Encode the signature in base64\n    base64_signature = base64.b64encode(signature).decode(\"utf-8\")\n\n    return base64_signature", "problem": "Generates a signed hash of a file's contents using RSA encryption. The file's contents are hashed using SHA-256, and then the hash is signed with a private RSA key stored in 'private.pem'. The signed hash is encoded in base64. Assuming 'empty.txt' is an empty file and a valid 'private.pem' is present, >>> len(task_func('empty.txt')) > 0 True\nThe function should output with:\n    str: The base64 encoded signed hash of the file.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n```", "solution": "import hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n    with open(file_path, 'rb') as f:\n        content = f.read()\n\n    hash_output = hashlib.sha256(content).digest()\n\n    with open('private.pem', 'rb') as key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())\n    signature = rsa.sign(hash_output, private_key, 'SHA-256')\n\n    return base64.b64encode(signature).decode('utf-8')", "pass": true}
{"task_id": "505", "program": "import hashlib\nimport hmac\ndef task_func(secret, message):\n\n    pass\nimport hashlib\nimport hmac\ndef task_func(secret, message):\n    \"\"\"\n    Generates an HMAC (Hash-based Message Authentication Code) signature for a given message using a secret key.\n    The function uses SHA-256 as the hash function to create the HMAC signature.\n\n    Args:\n        secret (str): The secret key to use for generating the HMAC signature.\n        message (str): The message to sign.\n\n    Returns:\n        str: The HMAC signature of the message, returned as a hexadecimal string.\n    \"\"\"\n    hmac_obj = hmac.new(secret.encode(), message.encode(), hashlib.sha256)\n    return hmac_obj.hexdigest()", "problem": "Generates an HMAC (Hash-based Message Authentication Code) signature for a given message using a secret key. The function uses SHA-256 as the hash function to create the HMAC signature. Generate an HMAC for a different message with the same key. >>> len(task_func('mysecretkey', 'Goodbye, world!')) == 64 True\nThe function should output with:\n    str: The HMAC signature of the message, returned as a hexadecimal string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport hmac\ndef task_func(secret, message):\n```", "solution": "import hashlib\nimport hmac\ndef task_func(secret, message):\n    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()", "pass": true}
{"task_id": "506", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    \"\"\"\n    Analyze and visualize statistical properties of a specified weather data column.\n\n    Parameters\n    ----------\n    column : str\n        The name of the column to analyze.\n    data : list of dict\n        A list of weather observations, where each observation is a dictionary with keys 'date', 'temperature', 'humidity', 'wind_speed', and 'precipitation'.\n\n    Returns\n    -------\n    result : dict\n        A dictionary containing:\n        'sum': Sum of the values in the specified column.\n        'mean': Mean of the values in the specified column.\n        'min': Minimum value in the specified column.\n        'max': Maximum value in the specified column.\n        'plot': A matplotlib BarContainer object of the histogram plot for the specified column.\n    \"\"\"\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate the sum, mean, minimum, and maximum values of the specified column\n    sum_val = df[column].sum()\n    mean_val = df[column].mean()\n    min_val = df[column].min()\n    max_val = df[column].max()\n\n    # Generate a histogram plot of the data in the specified column\n    fig, ax = plt.subplots()\n    ax.hist(df[column], bins=20)\n    ax.set_xlabel(column)\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of \" + column)\n    plot = ax.get_figure()\n\n    # Return the results\n    result = {\n        \"sum\": sum_val,\n        \"mean\": mean_val,\n        \"min\": min_val,\n        \"max\": max_val,\n        \"plot\": plot\n    }\n    return result\ndata = [\n    {\"date\": \"2022-01-01\", \"temperature\": 25, \"humidity\": 50, \"wind_speed\": 10, \"precipitation\": 0},\n    {\"date\": \"2022-01-02\", \"temperature\": 20, \"humidity\": 60, \"wind_speed\": 15, \"precipitation\": 0},\n    {\"date\": \"2022-01-03\", \"temperature\": 15, \"humidity\": 70, \"wind_speed\": 20, \"precipitation\": 0},\n    {\"date\": \"2022-01-04\", \"temperature\": 10, \"humidity\": 80, \"wind_speed\": 25, \"precipitation\": 0},\n    {\"date\": \"2022-01-05\", \"temperature\": 5, \"humidity\": 90, \"wind_speed\": 30, \"precipitation\": 0}\n]", "problem": "Analyze and visualize statistical properties of a specified weather data column. This function calculates the sum, mean, minimum, and maximum values of a specified column in the given data. It also generates a histogram plot of the data in the column. The dataset is expected to be a list of weather observations, where each observation includes date, temperature, humidity, wind speed, and precipitation values. If the provided data list is empty, resulting in an empty DataFrame, the function handles it by setting: - The 'mean' value to np.nan. - The 'min' value to np.inf. - The 'max' value to -np.inf.\nThe function should output with:\n    result (dict): A dictionary containing:\n    'sum': Sum of the values in the specified column.\n    'mean': Mean of the values in the specified column.\n    'min': Minimum value in the specified column.\n    'max': Maximum value in the specified column.\n    'plot': A matplotlib BarContainer object of the histogram plot for the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    COLUMNS = [\"Date\", \"Temperature\", \"Humidity\", \"Wind Speed\", \"Precipitation\"]\n    df = pd.DataFrame(data, columns=COLUMNS)\n    column_data = df[column]\n\n    result = {\n        \"sum\": np.sum(column_data),\n        \"mean\": np.nan if df.empty else np.mean(column_data),\n        \"min\": np.inf if df.empty else np.min(column_data),\n        \"max\": -np.inf if df.empty else np.max(column_data),\n    }\n\n    _, _, ax = plt.hist(column_data)\n    plt.title(f\"Histogram of {column}\")\n\n    result[\"plot\"] = ax\n\n    return result", "pass": false}
{"task_id": "507", "program": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    \"\"\"\n    Analyzes a list of stock data and calculates the sum, mean, minimum, and maximum values for a specified column.\n    The function should raise the exception for: ValueError: If the specified column name is not valid.\n    The function should output with:\n        dict: A dictionary containing the calculated 'sum', 'mean', 'min' (minimum), and 'max' (maximum)\n        for the specified column. If the input data is empty, 'sum' will be 0, and 'mean', 'min', and\n        'max' will be NaN.\n    \"\"\"\n    # Check if the column name is valid\n    if column not in data.columns:\n        raise ValueError(\"Invalid column name\")\n\n    # Calculate the sum, mean, minimum, and maximum values\n    sum_val = data[column].sum()\n    mean_val = data[column].mean()\n    min_val = data[column].min()\n    max_val = data[column].max()\n\n    # Return a dictionary with the calculated values\n    return {\"sum\": sum_val, \"mean\": mean_val, \"min\": min_val, \"max\": max_val}\ndata = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [6, 7, 8, 9, 10]})", "problem": "Analyzes a list of stock data and calculates the sum, mean, minimum, and maximum values for a specified column.\nThe function should raise the exception for: ValueError: If the specified column name is not valid.\nThe function should output with:\n    dict: A dictionary containing the calculated 'sum', 'mean', 'min' (minimum), and 'max' (maximum)\n    for the specified column. If the input data is empty, 'sum' will be 0, and 'mean', 'min', and\n    'max' will be NaN.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(column, data):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    valid_columns = [\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]\n    if column not in valid_columns:\n        raise ValueError(f\"Invalid column name.\")\n    if not isinstance(data, list) or (\n        len(data) > 0\n        and not all(\n            isinstance(row, list) and len(row) == len(valid_columns) for row in data\n        )\n    ):\n        raise ValueError(\n            \"Data must be a list of lists, with each inner list matching the length of the column names.\"\n        )\n\n    df = pd.DataFrame(data, columns=valid_columns)\n    column_data = df[column]\n\n    result = {\n        \"sum\": np.sum(column_data) if not column_data.empty else 0,\n        \"mean\": np.mean(column_data) if not column_data.empty else float(\"nan\"),\n        \"min\": np.min(column_data) if not column_data.empty else float(\"nan\"),\n        \"max\": np.max(column_data) if not column_data.empty else float(\"nan\"),\n    }\n\n    return result", "pass": false}
{"task_id": "508", "program": "import hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n\n    pass\nimport hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n    \"\"\"\n    Compares two files to determine if they are identical by computing and comparing their MD5 hash values.\n    This method is effective for checking if two files have exactly the same content.\n\n    Args:\n        file_path1 (str): The path to the first file.\n        file_path2 (str): The path to the second file.\n\n    Returns:\n        bool: Returns True if the MD5 hashes of the files match (indicating identical content), False otherwise.\n\n    Raises:\n        FileNotFoundError: If either file_path1 or file_path2 does not exist.\n    \"\"\"\n    if not os.path.exists(file_path1) or not os.path.exists(file_path2):\n        raise FileNotFoundError(\"Either file_path1 or file_path2 does not exist.\")\n\n    with open(file_path1, \"rb\") as f1, open(file_path2, \"rb\") as f2:\n        md5_hash1 = hashlib.md5(f1.read()).hexdigest()\n        md5_hash2 = hashlib.md5(f2.read()).hexdigest()\n\n    return md5_hash1 == md5_hash2", "problem": "Compares two files to determine if they are identical by computing and comparing their MD5 hash values. This method is effective for checking if two files have exactly the same content. Assuming 'file1.gz' and 'file3.txt' contain different content, >>> task_func('file1.gz', 'file3.txt') False\nThe function should raise the exception for: FileNotFoundError: if either file_path1 or file_path2 does not exist.\nThe function should output with:\n    bool: Returns True if the MD5 hashes of the files match (indicating identical content), False otherwise.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n```", "solution": "import hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n    if not os.path.exists(file_path1) or not os.path.exists(file_path2):\n        raise FileNotFoundError(\"File not found! Please specify a valid filepath\")\n\n    with io.open(file_path1, 'rb') as file1, io.open(file_path2, 'rb') as file2:\n        file1_hash = hashlib.md5(file1.read()).hexdigest()\n        file2_hash = hashlib.md5(file2.read()).hexdigest()\n\n    return file1_hash == file2_hash", "pass": true}
{"task_id": "509", "program": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n\n    pass\nimport pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV files and create a difference report.\n\n    This function compares two CSV files line by line and provides a detailed report of the differences.\n    It represents each difference with a line number, a status indicator, and the content of that line.\n\n    The function should raise the exception for:\n        FileNotFoundError: If either of the files cannot be found.\n        ValueError: If either of the files is empty.\n        Exception: For other IO related errors.\n\n    The function should output with:\n        DataFrame: A pandas DataFrame with the differences. The DataFrame contains the following columns:\n            'Line Number': The line number in the file where the difference occurs.\n            'Status': A character indicating the type of difference:\n                ' ': No change (line is the same in both files).\n                '-': Line present in the first file but not in the second.\n                '+': Line present in the second file but not in the first.\n                'Content': The actual text content of the line from either file.\n\n    Args:\n        file_path1 (str): The path to the first CSV file.\n        file_path2 (str): The path to the second CSV file.\n        delimiter (str, optional): The delimiter used in the CSV files. Defaults to ','.\n        quotechar (str, optional): The quote character used in the CSV files. Defaults to '\"'.\n\n    Returns:\n        DataFrame: A pandas DataFrame with the differences.\n    \"\"\"\n    # Check if the files exist\n    if not os.path.isfile(file_path1) or not os.path.isfile(file_path2):\n        raise FileNotFoundError(\"One or both of the files do not exist.\")\n\n    # Check if the files are empty\n    if os.stat(file_path1).st_size == 0 or os.stat(file_path2).st_size == 0:\n        raise ValueError(\"One or both of the files are empty.\")\n\n    # Read the files into pandas DataFrames\n    df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar)\n    df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar)\n\n    # Create a list of differences\n    diff_list = []\n    for i, (row1, row2) in enumerate(zip(df1.values, df2.values)):\n        if row1 != row2:\n            diff_list.append((i, row1, row2))\n\n    # Create a DataFrame with the differences\n    df_diff = pd.DataFrame(diff_list, columns=[\"Line Number\", \"Status\", \"Content\"])\n    df_diff[\"Status\"] = df_diff[\"Status\"].apply(lambda x: \" \" if x[0] == x[1] else \"-\" if x[0] == \"\" else \"+\")\n\n    return df_diff", "problem": "Compare two CSV files and create a difference report. This function compares two CSV files line by line and provides a detailed report of the differences. It represents each difference with a line number, a status indicator, and the content of that line.\nThe function should raise the exception for: FileNotFoundError: If either of the files cannot be found. ValueError: If either of the files is empty. Exception: For other IO related errors.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the differences. The DataFrame contains the following columns:\n    'Line Number': The line number in the file where the difference occurs.\n    'Status': A character indicating the type of difference:\n    ' ': No change (line is the same in both files).\n    '-': Line present in the first file but not in the second.\n    '+': Line present in the second file but not in the first.\n    'Content': The actual text content of the line from either file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n```", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n\n    def csv_to_list(file_path, delimiter=',', quotechar='\"'):\n        with open(file_path, 'r', newline='') as file:\n            reader = csv.reader(file, delimiter=delimiter, quotechar=quotechar)\n            content = [tuple(row) for row in reader]\n            if not content:  # This checks if the list is empty after iterating over the reader\n                raise ValueError(f\"The file '{file_path}' is empty.\")\n            return content\n\n    \n    try:\n        csv_content1 = csv_to_list(file_path1, delimiter, quotechar)\n        csv_content2 = csv_to_list(file_path2, delimiter, quotechar)\n        diff = ndiff(csv_content1, csv_content2)\n\n        headers = ['Line Number', 'Status', 'Content']\n        data = []\n\n        for i, line in enumerate(diff):\n            status, content = line[0], line[2:].strip()\n            data.append([i + 1, status, content])\n\n        df = pd.DataFrame(data, columns=headers)\n        return df\n    except FileNotFoundError as e:\n        raise FileNotFoundError(f\"File not found: {e}\")\n    except ValueError as e:\n    # Reraise ValueError to signal an empty file directly.\n        raise ValueError(f\"Error processing files: {e}\")\n    except Exception as e:\n        raise Exception(f\"Error processing files: {e}\")", "pass": false}
{"task_id": "510", "program": "import difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n\n    pass\nimport difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n    with gzip.open(file_path1, 'rb') as f1, gzip.open(file_path2, 'rb') as f2:\n        file1_content = f1.read()\n        file2_content = f2.read()\n    diff = difflib.unified_diff(file1_content, file2_content, fromfile=file_path1, tofile=file_path2)\n    return ''.join(diff)", "problem": "Compares the contents of two gzip files and returns a string describing the differences between them. It reads the contents of each file, then uses difflib to compute and return the differences. Only differences are returned, with an empty string indicating no differences. Assuming 'file1.gz' and 'file1.gz' are identical, >>> task_func('file1.gz', 'file1.gz') ''\nThe function should output with:\n    str: A string describing the differences between the two files' contents.\nYou should write self-contained code starting with:\n```\nimport difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n```", "solution": "import difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n    with gzip.open(file_path1, 'rt') as file1, gzip.open(file_path2, 'rt') as file2:\n        file1_content = file1.readlines()\n        file2_content = file2.readlines()\n        diff = difflib.ndiff(file1_content, file2_content)\n        diff = [line for line in diff if line.startswith('+ ') or line.startswith('- ')]\n\n    return ''.join(diff)", "pass": false}
{"task_id": "511", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list of employee data and calculate statistics for a given column.\n    If the data list is empty, the sum will be 0 and mean, min, and max values will be NaN.\n    The function also visualizes the data with a pie chart, using the Age column as labels.\n\n    Args:\n        column (str): The name of the column to analyze.\n        data (list): A list of employee data.\n\n    Returns:\n        tuple: A tuple containing:\n            dict: A dictionary with the 'sum', 'mean', 'min', and 'max' of the column.\n            Axes object: The pie chart visualizing the column data.\n    \"\"\"\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate the sum, mean, min, and max of the column\n    sum_ = df[column].sum()\n    mean = df[column].mean()\n    min_ = df[column].min()\n    max_ = df[column].max()\n\n    # Create a pie chart with the Age column as labels\n    plt.pie(df[column], labels=df['Age'], autopct='%1.1f%%')\n    plt.title(f'{column.title()} Distribution')\n    plt.show()\n\n    # Return the statistics and the pie chart\n    return ({'sum': sum_, 'mean': mean, 'min': min_, 'max': max_}, plt.gca())\ndata = [\n    {'Name': 'John', 'Age': 25, 'Salary': 50000},\n    {'Name': 'Jane', 'Age': 30, 'Salary': 60000},\n    {'Name': 'Bob', 'Age': 40, 'Salary': 70000},\n    {'Name': 'Alice', 'Age': 35, 'Salary': 55000}\n]", "problem": "Analyze a list of employee data and calculate statistics for a given column. If the data list is empty, the sum will be 0 and mean, min, and max values will be NaN. The function also visualizes the data with a pie chart, using the Age column as labels.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the 'sum', 'mean', 'min', and 'max' of the column.\n    Axes object: The pie chart visualizing the column data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Constants encapsulated within the function\n    COLUMNS = [\"Age\", \"Salary\", \"Experience\"]\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n    column_data = df[column]\n\n    # Handle empty data\n    if df.empty:\n        result = {\"sum\": 0, \"mean\": np.nan, \"min\": np.nan, \"max\": np.nan}\n    else:\n        result = {\n            \"sum\": np.sum(column_data),\n            \"mean\": np.mean(column_data),\n            \"min\": np.min(column_data),\n            \"max\": np.max(column_data),\n        }\n\n    fig, ax = plt.subplots()\n    ax.pie(column_data, labels=df[\"Age\"], autopct=\"%1.1f%%\")\n    ax.set_title(f\"Pie Chart of {column}\")\n\n    return result, ax", "pass": false}
{"task_id": "512", "program": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list of sales data, calculate the sum, the mean, the minimum, the maximum of a given column, and return the bar chart plot for the given column without displaying it.\n    The function should raise the exception for: ValueError: If the quantity sold or total sales is negative.\n    The function should output with:\n        tuple: A tuple containing:\n        dict: A dictionary with the sum, mean, min, max of the column.\n        matplotlib.axes.Axes: The Axes object of the plotted bar chart. The bar chart will have Product in its\n        x-axis and the title Bar Chart of (column).\n    \"\"\"\n    # Check if the column is valid\n    if column not in data.columns:\n        raise ValueError(f\"Invalid column: {column}\")\n    \n    # Calculate the sum, mean, min, max of the column\n    sum_ = data[column].sum()\n    mean = data[column].mean()\n    min_ = data[column].min()\n    max_ = data[column].max()\n    \n    # Create a bar chart of the column\n    fig, ax = plt.subplots()\n    ax.bar(data[column], label=column)\n    ax.set_xlabel(\"Product\")\n    ax.set_ylabel(\"Sales\")\n    ax.set_title(f\"Bar Chart of {column}\")\n    \n    # Return the tuple containing the dictionary and the Axes object\n    return ({\"sum\": sum_, \"mean\": mean, \"min\": min_, \"max\": max_}, ax)\ndata = pd.DataFrame({\"Product\": [\"A\", \"B\", \"C\", \"D\"], \"Sales\": [10, 20, 30, 40]})", "problem": "Analyze a list of sales data, calculate the sum, the mean, the minimum, the maximum of a given column, and return the bar chart plot for the given column without displaying it.\nThe function should raise the exception for: ValueError: If the quantity sold or total sales is negative.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the sum, mean, min, max of the column.\n    matplotlib.axes.Axes: The Axes object of the plotted bar chart. The bar chart will have Product in its\n    x-axis and the title Bar Chart of (column).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(column, data):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    COLUMNS = [\"Product\", \"Quantity Sold\", \"Total Sales\"]\n    df = pd.DataFrame(data, columns=COLUMNS)\n    if (df[\"Quantity Sold\"] < 0).any() or (df[\"Total Sales\"] < 0).any():\n        raise ValueError(\"Value must not be negative\")\n    column_data = df[column]\n\n    result = {\n        \"sum\": np.sum(column_data),\n        \"mean\": np.mean(column_data),\n        \"min\": np.min(column_data),\n        \"max\": np.max(column_data),\n    }\n\n    ax = df.plot.bar(x=\"Product\", y=column, title=f\"Bar Chart of {column}\")\n\n    return result, ax", "pass": false}
{"task_id": "513", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Check if the column is valid\n    if column not in data.columns:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # Check if the data list is empty\n    if len(data) == 0:\n        raise ValueError(\"Data list is empty\")\n\n    # Check if the numeric values for steps, calories burned, and distance walked are non-negative\n    for i in range(len(data)):\n        if data.iloc[i, 0] < 0 or data.iloc[i, 1] < 0 or data.iloc[i, 2] < 0:\n            raise ValueError(\"Negative value found\")\n\n    # Calculate the sum, mean, min, and max of the column\n    sum_val = data[column].sum()\n    mean_val = data[column].mean()\n    min_val = data[column].min()\n    max_val = data[column].max()\n\n    # Create a dictionary with the sum, mean, min, and max\n    summary = {\"sum\": sum_val, \"mean\": mean_val, \"min\": min_val, \"max\": max_val}\n\n    # Create a line chart with the column value on the y-axis and date on the x-axis\n    fig, ax = plt.subplots()\n    ax.plot(data[\"Date\"], data[column])\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(column)\n    ax.set_title(f\"Line Chart of {column}\")\n\n    return summary, ax\ndata = pd.DataFrame({\"Date\": [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\"], \"Steps\": [1000, 1200, 1400], \"Calories Burned\": [200, 250, 300], \"Distance Walked\": [3, 4, 5]})", "problem": "Analyze a list of fitness data, calculate the sum, the mean, the minimum, the maximum of a certain column and draw a line chart. Additionally, validate that the numeric values for steps, calories burned, and distance walked are non-negative.\nThe function should raise the exception for: KeyError: If the specified column is not valid. ValueError: If the data list is empty or if any of the numeric values for steps, calories burned, and distance walked are negative.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the sum, mean, min, max of the column.\n    matplotlib.axes.Axes: The Axes object of the plotted line chart. The line\n    chart will have Date on its x-axis, the column value\n    on its y-axis, and title Line Chart of (column).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    COLUMNS = [\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]\n    if column not in COLUMNS:\n        raise KeyError(f\"{column} is not a valid column. Choose from {COLUMNS}.\")\n\n    if not data:\n        raise ValueError(\"No data to plot.\")\n    df = pd.DataFrame(data, columns=COLUMNS)\n    if df[[\"Steps\", \"Calories Burned\", \"Distance Walked\"]].lt(0).any().any():\n        raise ValueError(\n            \"Numeric values for steps, calories burned, and distance walked must be non-negative.\"\n        )\n\n    column_data = df[column]\n    result = {\n        \"sum\": np.sum(column_data),\n        \"mean\": np.mean(column_data),\n        \"min\": np.min(column_data),\n        \"max\": np.max(column_data),\n    }\n\n    ax = df.plot.line(x=\"Date\", y=column)\n    ax.set_ylabel(column)\n    plt.title(f\"Line Chart of {column}\")\n\n    return result, ax", "pass": false}
{"task_id": "514", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n    # Create a Pandas DataFrame from the 2D list\n    df = pd.DataFrame(array, columns=['A', 'B', 'C', 'D', 'E'])\n\n    # Calculate the sum of each column\n    sums = df.sum(axis=0)\n\n    # Plot the sum of each column\n    fig, ax = plt.subplots()\n    ax.bar(sums.index, sums.values)\n    ax.set_title('Sum of each column')\n    ax.set_xlabel('Column')\n    ax.set_ylabel('Sum')\n\n    return df, ax\narray = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]", "problem": "Create a Pandas DataFrame from a 2D list and plot the sum of each column. Internal Constants: COLUMNS: List of column names used for the DataFrame ['A', 'B', 'C', 'D', 'E']\nThe function should output with:\n    DataFrame, Axes: A pandas DataFrame with the data and a matplotlib Axes object showing the sum of each column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n    # Internal Constants\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    sums = df.sum()\n\n    fig, ax = plt.subplots()\n    sums.plot(kind=\"bar\", ax=ax)\n\n    return df, ax", "pass": false}
{"task_id": "515", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(array):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(array):\n    \"\"\"\n    Generates a DataFrame and heatmap from a 2D list.\n\n    This function takes a 2D list and returns a pandas DataFrame and a seaborn heatmap representing the correlation matrix of the DataFrame.\n    Assumes sublists of length 5. Also assumes DataFrame columns: 'A', 'B', 'C', 'D', 'E'.\n\n    The function should raise the exception for:\n        ValueError: If the input array is empty or contains sublists of varying lengths.\n\n    The function should output with:\n        DataFrame: Constructed from the input 2D list.\n        heatmap: Seaborn heatmap of the DataFrame's correlation matrix.\n    \"\"\"\n    # Check if the input array is empty\n    if not array:\n        raise ValueError(\"Input array is empty\")\n\n    # Check if the sublists have varying lengths\n    if len(set(map(len, array))) != 1:\n        raise ValueError(\"Sublists have varying lengths\")\n\n    # Construct the DataFrame\n    df = pd.DataFrame(array, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\n    # Compute the correlation matrix\n    corr_matrix = df.corr()\n\n    # Generate the heatmap\n    heatmap = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    return df, heatmap\narray = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]", "problem": "Generates a DataFrame and heatmap from a 2D list. This function takes a 2D list and returns a pandas DataFrame and a seaborn heatmap representing the correlation matrix of the DataFrame. Assumes sublists of length 5. Also assumes DataFrame columns: 'A', 'B', 'C', 'D', 'E'.\nThe function should raise the exception for: ValueError: If the input array is empty or contains sublists of varying lengths.\nThe function should output with:\n    DataFrame: Constructed from the input 2D list.\n    heatmap: Seaborn heatmap of the DataFrame's correlation matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(array):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(array):\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    if not array or any(len(sublist) != 5 for sublist in array):\n        raise ValueError(\"array must be non-empty and all sublists must have a length of 5.\")\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    heatmap = sns.heatmap(df.corr(), annot=True)\n    return df, heatmap", "pass": true}
{"task_id": "516", "program": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(array: list, random_seed: int = 0) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters\n    ----------\n    array : list\n        A 2D list of data.\n    random_seed : int, optional\n        A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns\n    -------\n    df : pd.DataFrame\n        DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    results : statsmodels.RegressionResults\n        Results of the linear regression.\n    \"\"\"\n    # Validate input\n    if not isinstance(array, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise ValueError(\"Input must be a 2D list.\")\n    if not all(len(row) == 4 for row in array):\n        raise ValueError(\"Input must be a 2D list with 4 columns.\")\n\n    # Create DataFrame\n    df = pd.DataFrame(array, columns=[\"A\", \"B\", \"C\", \"D\"])\n\n    # Separate independent and dependent variables\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n\n    # Add constant to model\n    X = sm.add_constant(X)\n\n    # Fit linear regression\n    results = sm.OLS(y, X).fit(random_seed=random_seed)\n\n    return df, results\narray = [\n    [1, 2, 3, 4, 5],\n    [2, 4, 6, 8, 10],\n    [3, 6, 9, 12, 15],\n    [4, 8, 12, 16, 20],\n    [5, 10, 15, 20, 25],\n]", "problem": "Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression. The function first validates the input list, creates a DataFrame, separates independent and dependent variables, adds a constant to the model, and fits a linear regression using statsmodels. - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\nThe function should output with:\n    df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    results (statsmodels.RegressionResults): Results of the linear regression.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n\n    np.random.seed(random_seed)\n\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n\n    model = sm.OLS(y, X)\n    results = model.fit()\n\n    return df, results", "pass": false}
{"task_id": "517", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset to its two main components.\n    The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters\n    ----------\n    array : list\n        A 2D list of data.\n    random_seed : int, optional\n        The random seed to use for reproducibility, by default 42.\n\n    Returns\n    -------\n    pd.DataFrame\n        The original data in DataFrame format.\n    np.ndarray\n        The data after PCA transformation.\n    \"\"\"\n    # Convert the list to a DataFrame\n    df = pd.DataFrame(array)\n\n    # Apply PCA to reduce the dataset to its two main components\n    pca = PCA(n_components=2, random_state=random_seed)\n    pca_result = pca.fit_transform(df)\n\n    return df, pca_result\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction. This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset to its two main components. The function uses a fixed random seed to ensure reproducibility.\nThe function should output with:\n    pd.DataFrame: The original data in DataFrame format.\n    np.ndarray: The data after PCA transformation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    df = pd.DataFrame(array)\n\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n\n    return df, transformed_data", "pass": true}
{"task_id": "518", "program": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n\n    pass\nimport pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n    # Convert 2D list to DataFrame\n    df = pd.DataFrame(array)\n\n    # Assign alphabetical labels to columns\n    df.columns = [chr(ord('A') + i) for i in range(len(df.columns))]\n\n    # Compute Euclidean distance matrix\n    distance_matrix = squareform(pdist(df, 'euclidean'))\n\n    return df, distance_matrix\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Generate a Pandas DataFrame from a 2D list and calculate a distance matrix. This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'. It uses the `chr()` function, which converts an integer to its corresponding Unicode character, to dynamically assign alphabetical labels to each column based on their index. The function then computes the Euclidean distance matrix between rows.\nThe function should output with:\n    df (pd.DataFrame): data converted from 2D list.\n    distance_matrix (pd.DataFrame): output distance matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n```", "solution": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n\n    return df, distance_matrix", "pass": false}
{"task_id": "519", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Combine the list of dictionaries into a single pandas dataframe\n    df = pd.DataFrame(data)\n\n    # Fill NA/NaN values with 0\n    df = df.fillna(0)\n\n    # Generate a line chart of sales\n    ax = df.plot(kind='line', title='Fruit Sales over Time', x='Time', y='Sales Quantity')\n\n    # Return the Axes object\n    return ax\ndata = [\n    {'Fruit': 'Apple', 'Sales Quantity': 100, 'Time': '2022-01-01'},\n    {'Fruit': 'Banana', 'Sales Quantity': 200, 'Time': '2022-01-01'},\n    {'Fruit': 'Orange', 'Sales Quantity': 300, 'Time': '2022-01-01'},\n    {'Fruit': 'Apple', 'Sales Quantity': 150, 'Time': '2022-01-02'},\n    {'Fruit': 'Banana', 'Sales Quantity': 250, 'Time': '2022-01-02'},\n    {'Fruit': 'Orange', 'Sales Quantity': 350, 'Time': '2022-01-02'},\n]", "problem": "Combine a list of dictionaries with the same keys (fruit names) into a single pandas dataframe where NA/NaN values are filled with 0, then generate a line chart of sales. The chart should have title 'Fruit Sales over Time', x-axis 'Time', and y-axis 'Sales Quantity'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The generated plot's Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    df = pd.DataFrame(data)\n    df.fillna(0, inplace=True)\n    for fruit in df.columns:\n        plt.plot(df[fruit], label=fruit)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Sales Quantity\")\n    plt.title(\"Fruit Sales over Time\")\n    plt.legend()\n    return plt.gca()", "pass": false}
{"task_id": "520", "program": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    total_sales = {}\n    for d in data:\n        for k, v in d.items():\n            if k not in total_sales:\n                total_sales[k] = v\n            else:\n                total_sales[k] += v\n\n    colors = ['red', 'yellow', 'green', 'blue', 'purple']\n    ax = None\n    if total_sales:\n        ax = plt.bar(range(len(total_sales)), list(total_sales.values()), color=colors[:len(total_sales)])\n\n    return total_sales, ax\ndata = [\n    {'apple': 10, 'banana': 20, 'orange': 30},\n    {'apple': 5, 'banana': 10, 'orange': 15},\n    {'apple': 20, 'banana': 30, 'orange': 40},\n]", "problem": "Combine a list of dictionaries with the same keys (fruit names) into a single dictionary, calculate the total turnover for each fruit, and return a bar chart's axes with colors representing different fruits. The colors are selected from: 'red', 'yellow', 'green', 'blue', 'purple'. The function ensures that sales quantity must not be negative, throwing a ValueError if encountered.\nThe function should output with:\n    total_sales (dict): A dictionary containing the total sales for each fruit.\n    ax (matplotlib.container.BarContainer): A bar chart of total fruit sales, or None if data is empty\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return dict(), None\n\n    all_keys = set().union(*data)\n    for d in data:\n        for k, v in d.items():\n            if v < 0:\n                raise ValueError(\"Sales quantity must not be negative.\")\n\n    combined_dict = dict((k, [d.get(k, 0) for d in data]) for k in all_keys)\n    total_sales = {k: sum(v) for k, v in combined_dict.items()}\n    total_sales = dict(collections.OrderedDict(sorted(total_sales.items())))\n    labels, values = zip(*total_sales.items())\n\n    # Define colors dynamically to handle different numbers of fruit types\n    colors = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"] * (len(labels) // 5 + 1)\n\n    ax = plt.bar(labels, values, color=colors[: len(labels)])\n    plt.xlabel(\"Fruit\")\n    plt.ylabel(\"Total Sales\")\n    plt.title(\"Total Fruit Sales\")\n\n    return total_sales, ax", "pass": false}
{"task_id": "521", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(data_list)\n\n    # Set the index to the test number and the columns to the student names\n    df = df.set_index('test_number').T\n\n    # Plot the data as a line plot\n    ax = df.plot(kind='line')\n\n    # Return the Axes object\n    return ax\ndata_list = [\n    {'student1': 80, 'student2': 90, 'student3': 70, 'test_number': 1},\n    {'student1': 70, 'student2': 80, 'student3': 90, 'test_number': 2},\n    {'student1': 80, 'student2': 70, 'student3': 60, 'test_number': 3},\n    {'student1': 90, 'student2': 80, 'student3': 70, 'test_number': 4},\n    {'student1': 70, 'student2': 60, 'student3': 80, 'test_number': 5}\n]", "problem": "Visualizes the scores of students over multiple tests using a line plot. The function takes in a list of dictionaries. Each dictionary contains the name of a student (key) and their score (value). It combines these dictionaries into a pandas DataFrame and plots a line graph of student scores over tests, where the x-axis represents the test number and the y-axis represents the score. Each student's scores are plotted as separate lines. Missing scores are handled by not plotting those specific data points, allowing for discontinuous lines where data is missing.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n    df = pd.DataFrame(data_list)\n    fig, ax = plt.subplots()\n    for column in df:\n        ax.plot(df[column], label=column)\n    ax.set_title(\"Student Scores over Tests\")\n    ax.set_xlabel(\"Test Number\")\n    ax.set_ylabel(\"Score\")\n\n    return ax", "pass": false}
{"task_id": "522", "program": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Combine a list of dictionaries with possibly differing keys (student names) into a single dictionary, calculate the average score for each student, and return a bar chart of average student scores with student on the x-axis and average score on the y-axis. This function handles data with varying dictionary lengths and missing keys by averaging available scores, ignoring None. If there is any negative score, the function raises ValueError. Bar colors can be: 'red', 'yellow', 'green', 'blue', 'purple'.\n\n    Args:\n        data (list): A list of dictionaries with student names as keys and scores as values.\n\n    Returns:\n        ax (matplotlib.axes._axes.Axes or None): A bar chart showing the 'Average Student Scores', with\n        'Student' on the x-axis and 'Average Score' on the y-axis.\n        If data is empty, return None.\n    \"\"\"\n    # Initialize an empty dictionary to store the average scores\n    averages = {}\n\n    # Loop through each dictionary in the list\n    for d in data:\n        # Loop through each key in the dictionary\n        for k, v in d.items():\n            # If the key is not already in the averages dictionary, add it with a value of 0\n            if k not in averages:\n                averages[k] = 0\n            # Add the value to the average score\n            averages[k] += v\n\n    # Divide each average score by the number of dictionaries to get the average score\n    for k, v in averages.items():\n        averages[k] = v / len(data)\n\n    # Create a list of student names and average scores\n    students = [k for k in averages.keys()]\n    scores = [v for v in averages.values()]\n\n    # Create a bar chart of the average scores\n    ax = plt.bar(students, scores)\n\n    # Set the x-axis label\n    ax.set_xlabel('Student')\n\n    # Set the y-axis label\n    ax.set_ylabel('Average Score')\n\n    # Set the title\n    ax.set_title('Average Student Scores')\n\n    # Set the bar colors\n    ax.bar_label(ax.containers[0], labels=[f'{v:.2f}' for v in scores], label_type='center')\n\n    # Return the bar chart\n    return ax\ndata = [\n    {'John': 80, 'Jane': 90, 'Jim': 70},\n    {'John': 85, 'Jane': 95, 'Jim': 80},\n    {'John': 90, 'Jane': 100, 'Jim': 90},\n    {'John': 80, 'Jane': 90, 'Jim': 70},\n    {'John': 85, 'Jane': 95, 'Jim': 80},\n    {'John': 90, 'Jane': 100, 'Jim': 90},\n]", "problem": "Combine a list of dictionaries with possibly differing keys (student names) into a single dictionary, calculate the average score for each student, and return a bar chart of average student scores with student on the x-axis and average score on the y-axis. This function handles data with varying dictionary lengths and missing keys by averaging available scores, ignoring None. If there is any negative score, the function raises ValueError. Bar colors can be: 'red', 'yellow', 'green', 'blue', 'purple'.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes or None): A bar chart showing the 'Average Student Scores', with\n    'Student' on the x-axis and 'Average Score' on the y-axis.\n    If data is empty, return None.\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n\n    combined_dict = {}\n    for d in data:\n        for k, v in d.items():\n            if v is None:\n                continue\n            elif v < 0:\n                raise ValueError(\"Scores must be non-negative.\")\n            if k in combined_dict:\n                combined_dict[k].append(v)\n            else:\n                combined_dict[k] = [v]\n\n    avg_scores = {k: sum(v) / len(v) for k, v in combined_dict.items()}\n    avg_scores = collections.OrderedDict(sorted(avg_scores.items()))\n    labels, values = zip(*avg_scores.items())\n\n    fig, ax = plt.subplots()\n    ax.bar(labels, values, color=[\"red\", \"yellow\", \"green\", \"blue\", \"purple\"])\n    ax.set_title(\"Average Student Scores\")\n    ax.set_xlabel(\"Student\")\n    ax.set_ylabel(\"Average Score\")\n\n    return ax", "pass": false}
{"task_id": "523", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n\n    # Combine the list of dictionaries into a single dictionary\n    combined_data = {}\n    for d in data:\n        for k, v in d.items():\n            if k not in combined_data:\n                combined_data[k] = []\n            combined_data[k].append(v)\n\n    # Convert the combined data to a Pandas DataFrame\n    df = pd.DataFrame(combined_data)\n\n    # Create a line plot of the data\n    ax = df.plot(kind='line', x='Time', y='Data Points')\n\n    return ax\ndata = [\n    {'Time': 1, 'Data Points': 10},\n    {'Time': 2, 'Data Points': 20},\n    {'Time': 3, 'Data Points': 30},\n    {'Time': 4, 'Data Points': 40},\n    {'Time': 5, 'Data Points': 50},\n]", "problem": "Combine a list of dictionaries with the same keys into a single dictionary, turn it into a Pandas DataFrame and create a line plot of the data.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: Axes object of the plot showing 'Data over Time',\n    with 'Time' on the x-axis and 'Data Points' on the y-axis.\n    If data is empty, return None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n    df = pd.DataFrame(data)\n    plt.figure()\n    for label in df.columns:\n        plt.plot(df[label], label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Data Points\")\n    plt.title(\"Data over Time\")\n    return plt.gca()", "pass": false}
{"task_id": "524", "program": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nfrom collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries\")\n    if not all(isinstance(v, (int, float)) for d in data.values() for v in d.values()):\n        raise TypeError(\"Dictionary values are not numeric\")\n\n    means = defaultdict(list)\n    stds = defaultdict(list)\n    for d in data:\n        for k, v in d.items():\n            means[k].append(v)\n            stds[k].append(v)\n\n    means = {k: np.mean(v) for k, v in means.items()}\n    stds = {k: np.std(v) for k, v in stds.items()}\n\n    fig, axs = plt.subplots(len(means), 1, figsize=(10, 6))\n    for i, (k, v) in enumerate(means.items()):\n        axs[i].bar(k, v, yerr=stds[k])\n        axs[i].set_title(f\"Mean and Standard Deviation of {k}\")\n        axs[i].set_xlabel(\"Key\")\n        axs[i].set_ylabel(\"Value\")\n\n    return means, axs\ndata = [{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}, {\"a\": 5, \"b\": 6}]", "problem": "Calculate statistical measurements (mean and standard deviation) of the values associated with each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\nThe function should raise the exception for: ValueError: If the input data is empty. TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\nThe function should output with:\n    tuple:\n    dict: A dictionary with keys and their corresponding mean and standard deviation.\n    list: A list of matplotlib Axes objects for each key's visualization.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n\n    return result, axes", "pass": false}
{"task_id": "525", "program": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n\n    pass\nimport json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n    # Read the JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize the result dictionary\n    result = defaultdict(dict)\n\n    # Calculate the mean and median for each key\n    for key in data[0].keys():\n        values = [d[key] for d in data]\n        result[key]['mean'] = np.mean(values)\n        result[key]['median'] = np.median(values)\n\n    # Visualize the mean and median using bar charts\n    fig, axs = plt.subplots(len(result), 1, figsize=(10, 10))\n    for i, (key, values) in enumerate(result.items()):\n        axs[i].bar(x=['mean', 'median'], height=[values['mean'], values['median']])\n        axs[i].set_title(key)\n        axs[i].set_xlabel('Statistics')\n        axs[i].set_ylabel('Value')\n\n    return result, axs\ninput_file = 'data.json'", "problem": "Reads a JSON file containing a list of dictionaries. For each key across all dictionaries, calculates the mean and median of its values using numpy. Visualizes the mean and median using bar charts. Returns the results and plots.\nThe function should output with:\n    result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n    value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n    plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n    each key in the dictionaries, visualizing the mean and median values.\nYou should write self-contained code starting with:\n```\nimport json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n```", "solution": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "pass": false}
{"task_id": "526", "program": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n\n    pass\nimport json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    # Read the JSON file\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Create a dictionary to store the results\n    results = defaultdict(list)\n\n    # Iterate over the list of dictionaries\n    for d in data:\n        # Iterate over the keys in each dictionary\n        for k, v in d.items():\n            # Check if the value is numeric and not missing\n            if isinstance(v, (int, float)) and not np.isnan(v):\n                # Add the value to the list for the corresponding key\n                results[k].append(v)\n\n    # Calculate the mean and median for each key\n    means = {k: np.mean(v) for k, v in results.items()}\n    medians = {k: np.median(v) for k, v in results.items()}\n\n    # Create a Pandas DataFrame with the results\n    df = pd.DataFrame({\"mean\": means, \"median\": medians})\n\n    # Sort and index the DataFrame by the variable names\n    df = df.sort_index().set_index(\"mean\")\n\n    return df\ndata = [{\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 4, \"b\": 5, \"c\": 6}, {\"a\": 7, \"b\": 8, \"c\": 9}]", "problem": "Read a list of dictionaries from a JSON file, calculate the mean and median for each key (ignoring non-numeric or missing values), and convert the results into a Pandas DataFrame.\nThe function should output with:\n    df (pd.DataFrame): A DataFrame indexed and sorted by the variable names (keys) from the\n    input data, containing columns 'mean' and 'median'.\nYou should write self-contained code starting with:\n```\nimport json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n```", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    all_keys = set().union(*(d.keys() for d in data))\n    stats = defaultdict(list)\n    for d in data:\n        for key in all_keys:\n            value = d.get(key, np.nan)\n            if isinstance(value, (int, float)):\n                stats[key].append(value)\n            else:\n                stats[key].append(np.nan)\n\n    result = {\n        k: {\"mean\": np.nanmean(v), \"median\": np.nanmedian(v)} for k, v in stats.items()\n    }\n    df = pd.DataFrame(result).transpose().sort_index()\n\n    return df", "pass": false}
{"task_id": "527", "program": "import json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n\n    pass\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n    \"\"\"\n    Read a list of dictionaries from a JSON file, calculate the results (mean and median for each key) via numpy, convert the input data into a pandas DataFrame with the keys as \"X\" and values as \"Y\" for visualization with a seaborn box plot, then return the results and box plot.\n    The function should output with:\n        results (dict): Dictionary where each key is a unique key from the original input, and each\n        value is a corresponding dict, with keys 'mean' and 'median' and the statistics\n        as values.\n        ax (plt.Axes): The box plot of aggregated 'Values for Each Key' in the input data.\n    \"\"\"\n    # Read the JSON file\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Calculate the mean and median for each key\n    results = defaultdict(dict)\n    for key in data[0].keys():\n        values = [d[key] for d in data]\n        results[key][\"mean\"] = np.mean(values)\n        results[key][\"median\"] = np.median(values)\n\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Create a box plot of the data\n    ax = sns.boxplot(x=\"X\", y=\"Y\", data=df)\n\n    return results, ax\ninput_file = \"data.json\"", "problem": "Read a list of dictionaries from a JSON file, calculate the results (mean and median for each key) via numpy, convert the input data into a pandas DataFrame with the keys as \"X\" and values as \"Y\" for visualization with a seaborn box plot, then return the results and box plot.\nThe function should output with:\n    results (dict): Dictionary where each key is a unique key from the original input, and each\n    value is a corresponding dict, with keys 'mean' and 'median' and the statistics\n    as values.\n    ax (plt.Axes): The box plot of aggregated 'Values for Each Key' in the input data.\nYou should write self-contained code starting with:\n```\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n```", "solution": "import json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    results = {\n        k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()\n    }\n\n    data = pd.DataFrame(data).melt(var_name=\"X\", value_name=\"Y\")\n    ax = sns.boxplot(data=data, x=\"X\", y=\"Y\")\n    ax.set_title(\"Boxplot of Values for Each Key\")\n    return results, ax", "pass": false}
{"task_id": "528", "program": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n\n    pass\nimport csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows from a CSV file using the csv library, convert duplicated rows into a pandas DataFrame, then plot using matplotlib.\n    Note that: Ensure the CSV file is in proper format and has a .csv extension. Other file formats will raise a ValueError.\n    The function should output with:\n        dict: A dictionary with duplicate rows as keys and their counts as values.\n        Axes: A matplotlib Axes object with the bar chart of duplicate rows.\n    \"\"\"\n    # Check if the file path is valid\n    if not file_path.endswith('.csv'):\n        raise ValueError('Invalid file format. The file must be a CSV file.')\n\n    # Read the CSV file\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        data = list(reader)\n\n    # Identify duplicate rows\n    duplicates = [row for row in data if data.count(row) > 1]\n\n    # Convert duplicates to a pandas DataFrame\n    duplicates_df = pd.DataFrame(duplicates)\n\n    # Count the number of duplicates\n    duplicates_count = Counter(duplicates)\n\n    # Plot the bar chart of duplicate rows\n    fig, ax = plt.subplots()\n    ax.bar(duplicates_count.keys(), duplicates_count.values())\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates_count, ax", "problem": "Identifies duplicate rows from a CSV file using the csv library, convert duplicated rows into a pandas DataFrame, then plot using matplotlib.\nNote that: Ensure the CSV file is in proper format and has a .csv extension. Other file formats will raise a ValueError.\nThe function should output with:\n    dict: A dictionary with duplicate rows as keys and their counts as values.\n    Axes: A matplotlib Axes object with the bar chart of duplicate rows.\nYou should write self-contained code starting with:\n```\nimport csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n```", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Strip the file_path and then check its extension\n    file_path = file_path.strip()\n    if not file_path.lower().endswith(\".csv\"):\n        raise ValueError(\"Invalid file format. Only .csv files are accepted.\")\n\n    # Read the CSV file\n    with open(file_path, \"r\") as f:\n        reader = csv.reader(f)\n        rows = list(reader)\n\n    # Use Counter to get duplicates\n    duplicates = Counter(tuple(row) for row in rows if rows.count(row) > 1)\n\n    # Plot the duplicates using matplotlib\n    ax = None\n    if duplicates:\n        df = pd.DataFrame(duplicates.values(), duplicates.keys())\n        ax = df.plot(kind=\"bar\", legend=False, title=\"Duplicate Entries\")\n        ax.set_ylabel(\"Count\")\n        plt.tight_layout()\n\n    return duplicates, ax", "pass": false}
{"task_id": "529", "program": "from collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n\n    pass\nfrom collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n    \"\"\"\n    Simulate rolling a certain number of a standard six-sided dice several times, then identify and display the distribution of the sums of the dice rolls in a bar plot.\n\n    Args:\n        num_rolls (int): The number of times to roll the dice.\n        num_dice (int): The number of dice to roll.\n        plot_path (str, optional): The path to save the plot to. Defaults to None.\n        random_seed (int, optional): The random seed to use for the simulation. Defaults to 0.\n\n    Returns:\n        tuple: A tuple containing the following elements:\n            Counter: A Counter object with the count of each possible sum.\n            Axes: A matplotlib Axes object representing the bar plot of the Distribution of Dice Roll Sums,\n            with Sum of Dice Roll on the x-axis and count on the y-axis.\n    \"\"\"\n    random.seed(random_seed)\n    sums = []\n    for _ in range(num_rolls):\n        rolls = [random.randint(1, 6) for _ in range(num_dice)]\n        sums.append(sum(rolls))\n    counts = Counter(sums)\n    fig, ax = plt.subplots()\n    ax.bar(counts.keys(), counts.values())\n    ax.set_xlabel(\"Sum of Dice Roll\")\n    ax.set_ylabel(\"Count\")\n    ax.set_title(\"Distribution of Dice Roll Sums\")\n    if plot_path:\n        plt.savefig(plot_path)\n    return counts, ax", "problem": "Simulate rolling a certain number of a standard six-sided dice several times, then identify and display the distribution of the sums of the dice rolls in a bar plot.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    Counter: A Counter object with the count of each possible sum.\n    Axes: A matplotlib Axes object representing the bar plot of the Distribution of Dice Roll Sums,\n    with Sum of Dice Roll on the x-axis and count on the y-axis.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n```", "solution": "from collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n    POSSIBLE_VALUES = list(range(1, 7))\n\n    random.seed(random_seed)\n\n    sums = []\n    for _ in range(num_rolls):\n        roll = [random.choice(POSSIBLE_VALUES) for _ in range(num_dice)]\n        sums.append(sum(roll))\n\n    sums_counter = Counter(sums)\n\n    labels, values = zip(*sums_counter.items())\n\n    plt.bar(labels, values)\n    plt.xlabel(\"Sum of Dice Roll\")\n    plt.ylabel(\"Count\")\n    plt.title(\"Distribution of Dice Roll Sums\")\n    ax = plt.gca()\n    if plot_path:\n        plt.savefig(plot_path)\n\n    return sums_counter, ax", "pass": true}
{"task_id": "530", "program": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in a DataFrame and record the age distribution for the duplicate names.\n    This function takes a DataFrame with 'name' and 'age' columns. If age is provided as floats, they will be rounded down to the nearest integer.\n    Age must not be negative, otherwise the function raises ValueError.\n    Then, the function identifies duplicate names and records the age distribution.\n    It returns a Counter object with the age distribution and a histogram plot showing the distribution of ages for duplicate names,\n    with age on the x-axis and count on the y-axis.\n    Bins are calculated based on the minimum and maximum ages found among the duplicates, adjusted by .5 to ensure that integer ages fall squarely within bins.\n    The function should raise the exception for: ValueError: If the DataFrame is empty or if age is negative.\n    The function should output with:\n        Counter: Age distribution among duplicate names.\n        plt.Axes or None: Histogram plot displaying age distribution, or None if there are no duplicates.\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if df[\"age\"].min() < 0:\n        raise ValueError(\"Age must not be negative\")\n\n    # Identify duplicate names\n    duplicates = df[df.duplicated(subset=[\"name\"], keep=False)]\n\n    # Calculate age distribution for duplicate names\n    age_distribution = Counter(duplicates[\"age\"].astype(int))\n\n    # Create histogram plot\n    if len(age_distribution) > 0:\n        fig, ax = plt.subplots()\n        sns.histplot(data=duplicates, x=\"age\", hue=\"name\", ax=ax)\n        ax.set_xlabel(\"Age\")\n        ax.set_ylabel(\"Count\")\n        ax.set_title(\"Age Distribution for Duplicate Names\")\n        return age_distribution, ax\n    else:\n        return age_distribution, None\ndf = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\"], \"age\": [25, 30, 35, 25, 30]})", "problem": "Identify duplicate entries in a DataFrame and record the age distribution for the duplicate names. This function takes a DataFrame with 'name' and 'age' columns. If age is provided as floats, they will be rounded down to the nearest integer. Age must not be negative, otherwise the function raises ValueError. Then, the function identifies duplicate names and records the age distribution. It returns a Counter object with the age distribution and a histogram plot showing the distribution of ages for duplicate names, with age on the x-axis and count on the y-axis. Bins are calculated based on the minimum and maximum ages found among the duplicates, adjusted by .5 to ensure that integer ages fall squarely within bins.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if age is negative.\nThe function should output with:\n    Counter: Age distribution among duplicate names.\n    plt.Axes or None: Histogram plot displaying age distribution, or None if there are no duplicates.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    if df.empty:\n        raise ValueError(\"Input data cannot be empty.\")\n    if any(df[\"age\"] < 0):\n        raise ValueError(\"Invalid age: age cannot be less than 0.\")\n\n    df[\"age\"] = df[\"age\"].apply(np.floor).astype(int)\n\n    duplicate_names = (\n        df[\"name\"].value_counts()[df[\"name\"].value_counts() > 1].index.tolist()\n    )\n    duplicates_df = df[df[\"name\"].isin(duplicate_names)]\n    duplicates_counter = Counter(duplicates_df[\"age\"])\n\n    if duplicates_counter:\n        min_age = duplicates_df[\"age\"].min() - 0.5\n        max_age = duplicates_df[\"age\"].max() + 0.5\n        bins = np.arange(min_age, max_age + 1)\n        ax = sns.histplot(duplicates_df[\"age\"], bins=bins)\n        plt.xlabel(\"Age\")\n        plt.ylabel(\"Count\")\n        plt.title(\"Distribution of Ages for Duplicate Names\")\n    else:\n        ax = None\n\n    return duplicates_counter, ax", "pass": true}
{"task_id": "531", "program": "from collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n\n    pass\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n    # Identify duplicate points in the DataFrame\n    duplicates = df.duplicated()\n    unique_df = df[~duplicates]\n\n    # Perform KMeans clustering on the unique points\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(unique_df)\n\n    # Record the clusters\n    unique_df['cluster'] = kmeans.labels_\n\n    # Create a scatter plot of the clustered data\n    plt.scatter(unique_df['x'], unique_df['y'], c=unique_df['cluster'])\n    plt.title('Clustered Data')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()\n\n    # Return a tuple containing the Counter object with the count of duplicate points and the DataFrame with the cluster assignments\n    return Counter(duplicates), unique_df\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})", "problem": "Identify duplicate points in a DataFrame, perform KMeans clustering on the unique points, and record the clusters.\nThe function should output with:\n    tuple: A tuple containing:\n    Counter: A Counter object with the count of duplicate points.\n    pd.DataFrame: A DataFrame with an additional column 'cluster' representing cluster assignments for unique points.\n    Axes: A scatter plot of the clustered data.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n```", "solution": "from collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n    # Identify duplicates\n    duplicates = df[df.duplicated(subset=[\"x\", \"y\"], keep=False)]\n    duplicates_counter = Counter(map(tuple, duplicates[[\"x\", \"y\"]].values))\n\n    # Remove duplicates and perform KMeans clustering on unique points\n    unique_df = df.drop_duplicates(subset=[\"x\", \"y\"]).copy()\n\n    # Adjust n_clusters if unique data points are fewer than desired clusters\n    n_clusters = min(n_clusters, len(unique_df))\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    unique_df[\"cluster\"] = kmeans.fit_predict(unique_df[[\"x\", \"y\"]])\n\n    # Plot clustered data\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(unique_df[\"x\"], unique_df[\"y\"], c=unique_df[\"cluster\"])\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_title(\"KMeans Clusters\")\n\n    return duplicates_counter, unique_df, ax", "pass": false}
{"task_id": "532", "program": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n\n    pass\nimport numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify and count duplicate values in a DataFrame's 'value' column.\n    This function also plots a histogram for all values in the 'value' column\n    and overlays a normal distribution curve on the histogram.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to analyze.\n    bins : int, optional\n        The number of bins to use in the histogram.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n        Counter: A Counter object with the count of each duplicate value.\n        Axes: A matplotlib.axes.Axes object that represents the plot\n        of the histogram with the 'value' column data. If applicable,\n        a normal distribution curve fitted to the data is overlaid. The\n        histogram's bars are green with 60% opacity, and the normal\n        distribution curve is black with a linewidth of 2. The plot is\n        titled \"Distribution\", with \"Value\" as the x-axis label and\n        \"Frequency\" as the y-axis label.\n    \"\"\"\n    # Count the number of duplicates in the 'value' column\n    counter = Counter(df['value'])\n\n    # Create a histogram of the 'value' column\n    ax = df['value'].hist(bins=bins, alpha=0.6, color='green')\n\n    # Fit a normal distribution to the data and plot it on the histogram\n    x = np.linspace(df['value'].min(), df['value'].max(), 1000)\n    y = norm.pdf(x, df['value'].mean(), df['value'].std())\n    ax.plot(x, y, color='black', linewidth=2)\n\n    # Set the plot title, x-axis label, and y-axis label\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    return counter, ax", "problem": "Identify and count duplicate values in a DataFrame's 'value' column. This function also plots a histogram for all values in the 'value' column and overlays a normal distribution curve on the histogram.\nThe function should output with:\n    tuple: A tuple containing:\n    Counter: A Counter object with the count of each duplicate value.\n    Axes: A matplotlib.axes.Axes object that represents the plot\n    of the histogram with the 'value' column data. If applicable,\n    a normal distribution curve fitted to the data is overlaid. The\n    histogram's bars are green with 60% opacity, and the normal\n    distribution curve is black with a linewidth of 2. The plot is\n    titled \"Distribution\", with \"Value\" as the x-axis label and\n    \"Frequency\" as the y-axis label.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n```", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    # Filter only duplicate values\n    duplicates = df[df[\"value\"].duplicated(keep=False)]\n    duplicates_counter = Counter(duplicates[\"value\"])\n\n    # Check if data is empty or constant\n    if df.empty or df[\"value\"].nunique() == 1:\n        mu, std = None, None\n    else:\n        mu, std = norm.fit(df[\"value\"])\n\n    fig, ax = plt.subplots()\n    ax.hist(df[\"value\"], bins=bins, density=True, alpha=0.6, color=\"g\")\n    if mu is not None and std is not None:\n        xmin, xmax = plt.xlim()\n        x = np.linspace(xmin, xmax, 100)\n        p = norm.pdf(x, mu, std)\n        ax.plot(x, p, \"k\", linewidth=2)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Distribution\")\n\n    return duplicates_counter, ax", "pass": false}
{"task_id": "533", "program": "import numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n\n    pass\nimport numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n    \"\"\"\n    Converts a number from one base to another, adds a random salt, hashes the result using SHA-256, and then encodes the hash in base64 using a custom alphabet. The function also returns the used salt.\n\n    Args:\n        num (str): The number to convert.\n        from_base (int): The base of the number to convert.\n        to_base (int): The base to convert the number to.\n        alphabet (str): The custom alphabet to use for base64 encoding.\n\n    Returns:\n        tuple: A tuple containing the base64-encoded hash of the converted number and the used salt.\n\n    Raises:\n        ValueError: If `from_base` or `to_base` is less than 2, indicating an invalid base for conversion.\n        ValueError: If the `num` string contains characters not valid in the `from_base` specified, indicating an invalid number format for conversion.\n    \"\"\"\n    if from_base < 2 or to_base < 2:\n        raise ValueError(\"Invalid base for conversion\")\n\n    # Convert the number to the target base\n    num_list = [int(x) for x in num]\n    converted_num = np.base_repr(num_list, from_base, to_base)\n\n    # Add a random salt\n    salt = secrets.token_hex(8)\n    salted_num = converted_num + salt\n\n    # Hash the salted number using SHA-256\n    hashed_num = hashlib.sha256(salted_num.encode()).hexdigest()\n\n    # Encode the hash in base64 using the custom alphabet\n    encoded_hash = base64.b64encode(hashed_num.encode(), alphabet=alphabet).decode()\n\n    return encoded_hash, salt\nalphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"", "problem": "Converts a number from one base to another, adds a random salt, hashes the result using SHA-256, and then encodes the hash in base64 using a custom alphabet. The function also returns the used salt. Verify that different invocations produce different results due to the random salt. >>> result1, salt1 = task_func('FF', 16, 8, alphabet) >>> result2, salt2 = task_func('FF', 16, 8, alphabet) >>> result1 != result2 True\nThe function should raise the exception for: ValueError: If `from_base` or `to_base` is less than 2, indicating an invalid base for conversion. ValueError: If the `num` string contains characters not valid in the `from_base` specified, indicating an invalid number format for conversion.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded hash of the converted number and the used salt.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n```", "solution": "import numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n    base64_table = np.array(list(alphabet))\n    n = int(num, from_base)\n    new_num = ''\n\n    if to_base < 2:\n        raise ValueError(\"to_base must be >= 2.\")\n\n    while n > 0:\n        n, m = divmod(n, to_base)\n        new_num += base64_table[m]\n\n    num = new_num[::-1]\n    salt = secrets.token_hex(16)\n    hashed_num = hashlib.pbkdf2_hmac('sha256', bytes(num, 'utf-8'), bytes(salt, 'utf-8'), 100000)\n    base64_encoded = base64.b64encode(hashed_num)\n\n    return base64_encoded.decode(), salt", "pass": false}
{"task_id": "534", "program": "import numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n\n    pass\nimport numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n    # Convert the number from the source base to the target base\n    converted_num = int(num, from_base)\n    converted_num = converted_num.to_bytes((converted_num.bit_length() + 7) // 8, 'big')\n    # Sign the converted number with the private key\n    signature = private_key.sign(\n        converted_num,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    # Encode the signed number in base64 using the custom alphabet\n    encoded_num = base64.b64encode(signature, alphabet=alphabet)\n    return encoded_num.decode('utf-8')\nprivate_key = ...\nalphabet = ...\nnum = 123456789\nfrom_base = 10\nto_base = 16", "problem": "Converts a number from one base to another, signs it with a private RSA key, and encodes the signed number in base64 using a custom alphabet.\nNote that: The function assumes that the provided number can be successfully converted from the specified source base to the target base. The RSA private key must be generated and provided to sign the converted number. The custom alphabet for base64 encoding allows for flexibility in encoding schemes.\nThe function should output with:\n    str: The base64-encoded signed number.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n```", "solution": "import numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n    base64_table = np.array(list(alphabet))\n    n = int(num, from_base)\n    \n    new_num = ''\n    while n > 0:\n        n, m = divmod(n, to_base)\n        new_num += base64_table[m]\n\n    num = new_num[::-1]\n    data = bytes(num, 'utf-8')\n    signed_num = private_key.sign(\n        data,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    base64_encoded = base64.b64encode(signed_num)\n\n    return base64_encoded.decode()", "pass": false}
{"task_id": "535", "program": "import sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n\n    pass\nimport sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n    \"\"\"\n    Insert random data into an SQLite3 table that contains random names, ages, and heights.\n    If the table does not exist, it will be created.\n    This function uses the following constants:\n        - NAMES: List of possible names ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia'].\n        - AGES: Range of possible ages from 18 to 64.\n        - HEIGHTS: Range of possible heights from 150cm to 199cm.\n\n    The function should raise the exception for:\n        ValueError: If num_entries is negative.\n\n    The function should output with:\n        int: The number of rows inserted.\n    \"\"\"\n    if num_entries < 0:\n        raise ValueError(\"num_entries must be non-negative\")\n\n    # Set the random seed\n    if random_seed is not None:\n        seed(random_seed)\n\n    # Define the constants\n    NAMES = ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\n    AGES = np.arange(18, 65)\n    HEIGHTS = np.arange(150, 200)\n\n    # Connect to the database\n    conn = sqlite3.connect(db_path)\n    cur = conn.cursor()\n\n    # Create the table if it doesn't exist\n    cur.execute(f\"CREATE TABLE IF NOT EXISTS {table_name} (name TEXT, age INTEGER, height INTEGER)\")\n\n    # Insert the data\n    for i in range(num_entries):\n        name = choice(NAMES)\n        age = choice(AGES)\n        height = choice(HEIGHTS)\n        cur.execute(f\"INSERT INTO {table_name} VALUES ('{name}', {age}, {height})\")\n\n    # Commit the changes and close the connection\n    conn.commit()\n    conn.close()\n\n    return num_entries", "problem": "Insert random data into an SQLite3 table that contains random names, ages, and heights. If the table does not exist, it will be created. This function uses the following constants: - NAMES: List of possible names ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']. - AGES: Range of possible ages from 18 to 64. - HEIGHTS: Range of possible heights from 150cm to 199cm.\nThe function should raise the exception for: ValueError: If num_entries is negative.\nThe function should output with:\n    int: The number of rows inserted.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n```", "solution": "import sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n    # Setting the random seed if provided\n    if random_seed is not None:\n        seed(random_seed)\n        np.random.seed(random_seed)\n\n    if num_entries < 0:\n        raise ValueError(\"num_entries cannot be negative.\")\n\n    NAMES = [\"John\", \"Jane\", \"Steve\", \"Emma\", \"Liam\", \"Olivia\"]\n    AGES = list(range(18, 65))\n    HEIGHTS = list(range(150, 200))\n\n    conn = sqlite3.connect(db_path)\n    cur = conn.cursor()\n\n    table_creation_sql = (\n        \"CREATE TABLE IF NOT EXISTS {} (name TEXT, age INTEGER, height INTEGER)\".format(\n            table_name\n        )\n    )\n    cur.execute(table_creation_sql)\n\n    inserted_rows = 0\n    for _ in range(num_entries):\n        name = choice(NAMES)\n        age = choice(AGES)\n        height = choice(HEIGHTS)\n        insertion_sql = \"INSERT INTO {} VALUES (?, ?, ?)\".format(table_name)\n        cur.execute(insertion_sql, (name, age, height))\n        inserted_rows += cur.rowcount\n\n    conn.commit()\n\n    return inserted_rows", "pass": false}
{"task_id": "536", "program": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n\n    pass\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n    \"\"\"\n    Read SQLite3 table via pandas and export to a CSV file.\n    The function should output with:\n        str: The absolute path of the exported CSV file.\n    \"\"\"\n    # Connect to the SQLite3 database\n    conn = sqlite3.connect(db_name)\n    # Read the table into a pandas DataFrame\n    df = pd.read_sql_table(table_name, conn)\n    # Export the DataFrame to a CSV file\n    df.to_csv(csv_path, index=False)\n    # Close the connection to the SQLite3 database\n    conn.close()\n    # Return the absolute path of the exported CSV file\n    return os.path.abspath(csv_path)", "problem": "Read SQLite3 table via pandas and export to a CSV file.\nThe function should output with:\n    str: The absolute path of the exported CSV file.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n```", "solution": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n    try:\n        conn = sqlite3.connect(db_name)\n        df = pd.read_sql_query(f\"SELECT * from {table_name}\", conn)\n        df.to_csv(csv_path, index=False)\n        return os.path.abspath(csv_path)\n    finally:\n        conn.close()", "pass": false}
{"task_id": "537", "program": "import sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n\n    pass\nimport sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n    \"\"\"\n    Draw the age distribution of the persons in an SQLite3 table and returns the Axes object of the plot.\n    Raises a ValueError if the loaded data contains negative age values.\n    The function should raise the exception for: ValueError: If the data contains negative age values.\n    The function should output with:\n        matplotlib.axes._axes.Axes: Axes object representing the age distribution plot,\n        with x-axis showing 'age' and a default of bins of 30, and kde set to True.\n    \"\"\"\n    # Connect to the SQLite3 database\n    conn = sqlite3.connect(db_name)\n    # Create a pandas DataFrame from the table\n    df = pd.read_sql_table(table_name, conn)\n    # Check if the data contains negative age values\n    if df[\"age\"].min() < 0:\n        raise ValueError(\"The data contains negative age values.\")\n    # Draw the age distribution plot\n    ax = sns.distplot(df[\"age\"], bins=30, kde=True)\n    # Set the x-axis label\n    ax.set_xlabel(\"age\")\n    # Return the Axes object\n    return ax\ndf = pd.DataFrame({\"age\": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]})", "problem": "Draw the age distribution of the persons in an SQLite3 table and returns the Axes object of the plot. Raises a ValueError if the loaded data contains negative age values.\nThe function should raise the exception for: ValueError: If the data contains negative age values.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object representing the age distribution plot,\n    with x-axis showing 'age' and a default of bins of 30, and kde set to True.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n```", "solution": "import sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n    conn = sqlite3.connect(db_name)\n    df = pd.read_sql_query(f\"SELECT age from {table_name}\", conn)\n\n    if (df[\"age\"] < 0).any():\n        raise ValueError(\"Data contains negative age values.\")\n\n    ax = sns.histplot(data=df, x=\"age\", bins=30, kde=True)\n    ax.set_xlabel(\"age\")\n    return ax", "pass": false}
{"task_id": "538", "program": "import sqlite3\nimport pandas as pd\ndef task_func(db_name, table_name):\n\n    pass\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(db_name, table_name):\n    \"\"\"\n    Plot the relationship between the first and second numerical columns of an SQLite3 table, after excluding 'id' column.\n    The function should raise the exception for: ValueError: If the table has less than two numerical columns.\n    The function should output with:\n        matplotlib.axes._axes.Axes: Scatterplot with column name labeled on their respective axes.\n    \"\"\"\n    # Connect to the SQLite3 database\n    conn = sqlite3.connect(db_name)\n    c = conn.cursor()\n\n    # Get the table schema\n    c.execute(f\"PRAGMA table_info({table_name})\")\n    table_info = c.fetchall()\n\n    # Check if the table has at least two numerical columns\n    num_columns = 0\n    for column in table_info:\n        if column[2] == \"INTEGER\" or column[2] == \"REAL\":\n            num_columns += 1\n    if num_columns < 2:\n        raise ValueError(\"The table has less than two numerical columns.\")\n\n    # Get the data from the table\n    c.execute(f\"SELECT * FROM {table_name}\")\n    data = c.fetchall()\n\n    # Create a pandas DataFrame from the data\n    df = pd.DataFrame(data, columns=[column[1] for column in table_info])\n\n    # Drop the 'id' column\n    df = df.drop(\"id\", axis=1)\n\n    # Plot the relationship between the first and second numerical columns\n    plt.scatter(df.iloc[:, 0], df.iloc[:, 1])\n    plt.xlabel(df.columns[0])\n    plt.ylabel(df.columns[1])\n    plt.title(f\"Relationship between {df.columns[0]} and {df.columns[1]}\")\n    plt.show()\n\n    return plt.gca()", "problem": "Plot the relationship between the first and second numerical columns of an SQLite3 table, after excluding 'id' column.\nThe function should raise the exception for: ValueError: If the table has less than two numerical columns.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Scatterplot with column name labeled on their respective axes.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\ndef task_func(db_name, table_name):\n```", "solution": "import sqlite3\nimport pandas as pd\ndef task_func(db_name, table_name):\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_name)\n\n    # Dynamically get the first two numerical columns from the table (excluding 'id')\n    df = pd.read_sql_query(f\"SELECT * from {table_name}\", conn)\n    numerical_columns = df.select_dtypes(include=[\"float64\", \"int64\"]).columns.tolist()\n    if \"id\" in numerical_columns:\n        numerical_columns.remove(\"id\")\n    if len(numerical_columns) < 2:\n        raise ValueError(\"The table must have at least two numerical columns to plot.\")\n\n    # Plot the relationship between the two columns\n    ax = df.plot.scatter(x=numerical_columns[0], y=numerical_columns[1])\n    return ax", "pass": false}
{"task_id": "539", "program": "import sqlite3\nfrom random import choice, seed\nimport os\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n\n    pass\nimport sqlite3\nfrom random import choice, seed\nimport os\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n    \"\"\"\n    Create an SQLite3 table and fill it with random data using the provided database and table names.\n    The function populates the table with columns 'name', 'age', 'height' using random data from the following constants:\n    - NAMES: List of names ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\n    - AGES: Range of ages from 18 to 65.\n    - HEIGHTS: Range of heights from 150cm to 200cm.\n\n    The function should raise the exception for:\n    ValueError: If num_entries is negative.\n\n    The function should output with:\n        str: The absolute path of the SQLite3 database file.\n    \"\"\"\n    if num_entries < 0:\n        raise ValueError(\"num_entries must be non-negative\")\n\n    # Set the random seed\n    if random_seed is not None:\n        seed(random_seed)\n\n    # Create the SQLite3 database and table\n    db_path = os.path.join(os.getcwd(), db_name)\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute(f\"CREATE TABLE {table_name} (name TEXT, age INTEGER, height REAL)\")\n\n    # Populate the table with random data\n    for i in range(num_entries):\n        name = choice([\"John\", \"Jane\", \"Steve\", \"Emma\", \"Liam\", \"Olivia\"])\n        age = randint(18, 65)\n        height = randint(150, 200)\n        c.execute(f\"INSERT INTO {table_name} VALUES ('{name}', {age}, {height})\")\n\n    # Commit the changes and close the connection\n    conn.commit()\n    conn.close()\n\n    return db_path", "problem": "Create an SQLite3 table and fill it with random data using the provided database and table names. The function populates the table with columns 'name', 'age', 'height' using random data from the following constants: - NAMES: List of names ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia'] - AGES: Range of ages from 18 to 65. - HEIGHTS: Range of heights from 150cm to 200cm.\nThe function should raise the exception for: ValueError: If num_entries is negative.\nThe function should output with:\n    str: The absolute path of the SQLite3 database file.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nfrom random import choice, seed\nimport os\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n```", "solution": "import sqlite3\nfrom random import choice, seed\nimport os\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n    NAMES = [\"John\", \"Jane\", \"Steve\", \"Emma\", \"Liam\", \"Olivia\"]\n    AGES = range(18, 65)\n    HEIGHTS = range(150, 200)\n\n    if random_seed:\n        seed(random_seed)\n\n    if num_entries < 0:\n        raise ValueError(\"num_entries must not be negative\")\n\n    conn = sqlite3.connect(db_name)\n    cur = conn.cursor()\n    cur.execute(f\"CREATE TABLE {table_name} (name TEXT, age INTEGER, height INTEGER)\")\n\n    for _ in range(num_entries):\n        name = choice(NAMES)\n        age = choice(AGES)\n        height = choice(HEIGHTS)\n        cur.execute(f\"INSERT INTO {table_name} VALUES (?, ?, ?)\", (name, age, height))\n\n    conn.commit()\n    return os.path.abspath(db_name)", "pass": false}
{"task_id": "540", "program": "from collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n\n    pass\nfrom collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n    # Flatten the list of menu items\n    flat_list = list(itertools.chain.from_iterable(list_of_menuitems))\n\n    # Count the occurrences of each item\n    counter = Counter(flat_list)\n\n    # Create a list of tuples with the item and its frequency\n    data = [(item, counter[item]) for item in counter]\n\n    # Sort the list by the item name\n    data.sort(key=lambda x: x[0])\n\n    # Create a list of the item names\n    labels = [item[0] for item in data]\n\n    # Create a list of the item frequencies\n    values = [item[1] for item in data]\n\n    # Create a bar plot with the item names on the x-axis and the item frequencies on the y-axis\n    ax = plt.bar(labels, values, color=color, width=width)\n\n    # Set the title and labels for the plot\n    ax.set_title(title)\n    ax.set_xlabel(\"Menu Items\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax\nmenu_items = [\n    [\"Pizza\", \"Pizza\", \"Pizza\", \"Pizza\", \"Pizza\"],\n    [\"Sandwich\", \"Sandwich\", \"Sandwich\", \"Sandwich\"],\n    [\"Salad\", \"Salad\", \"Salad\", \"Salad\", \"Salad\", \"Salad\"],\n    [\"Soup\", \"Soup\", \"Soup\", \"Soup\", \"Soup\", \"Soup\", \"Soup\"],\n    [\"Burger\", \"Burger\", \"Burger\", \"Burger\", \"Burger\", \"Burger\", \"Burger\", \"Burger\"],\n]", "problem": "Given a nested list of menu items, flatten the list using itertool chain, count the occurrences of each item, then plot a histogram with an alphabetically sorted x-axis labeled as \"Menu Items\" and y-axis as \"Frequency\".\nThe function should output with:\n    ax (object): An Axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n```", "solution": "from collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n    # Flatten the list\n    flat_list = list(itertools.chain(*list_of_menuitems))\n\n    # Count the occurrences of each menu item\n    counter = Counter(flat_list)\n    labels, values = zip(*sorted(counter.items(), key=lambda x: x[0]))\n    indexes = np.arange(len(labels))\n\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.bar(indexes, values, width, color=color)\n    ax.set_xticklabels(labels)\n    ax.set_xlabel(\"Menu Items\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(title)\n\n    return ax", "pass": false}
{"task_id": "541", "program": "import os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n\n    pass\nimport os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n    \"\"\"\n    Adds all modules of a specified package to the system path.\n    This function is useful for dynamically importing modules from a package that might not be on the standard path.\n    :param package_name: The name of the package to add to the system path.\n    :return: A list of module names that were added to the system path.\n    \"\"\"\n    try:\n        package = importlib.import_module(package_name)\n    except ImportError:\n        raise ImportError(f\"Package {package_name} not found. Please install it using 'pip install {package_name}'\")\n\n    modules = [name for _, name, _ in iter_modules([package.__path__[0]])]\n    for module in modules:\n        sys.path.append(os.path.join(package.__path__[0], module))\n\n    return modules", "problem": "Adds all modules of a specified package to the system path. This function is useful for dynamically importing modules from a package that might not be on the standard path. >>> len(task_func('pandas')) >= 2 True Verify that 'numpy' (a common package) modules are added to the path, >>> 'random' in task_func('numpy') True\nThe function should raise the exception for: ImportError: If the package is not installed or cannot be found. The exception message should contain the instruction to install the package (i.e., f\"pip install {package_name}\").\nThe function should output with:\n    list: A list of module names that were added to the system path.\nYou should write self-contained code starting with:\n```\nimport os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n```", "solution": "import os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n    added_modules = []\n    try:\n        package = importlib.import_module(package_name)\n    except ImportError:\n        raise ImportError(f\"The package '{package_name}' is not installed! Please install the package first using 'pip install {package_name}'\")\n\n    for _, module_name, _ in iter_modules(package.__path__):\n        module_path = os.path.join(package.__path__[0], module_name)\n        if module_path not in sys.path:\n            sys.path.append(module_path)\n            added_modules.append(module_name)\n\n    return added_modules", "pass": false}
{"task_id": "542", "program": "import hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n\n    pass\nimport hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n    \"\"\"\n    Given a list of hexadecimal string keys, this function selects one at random, converts it into a floating-point number, and then computes its MD5 hash. An optional seed parameter allows for deterministic random choices for testing purposes.\n    The function should raise the exception for: ValueError: If contains invalid hexadecimal strings.\n    The function should output with:\n        str: The MD5 hash of the floating-point number derived from the randomly selected hexadecimal string.\n    \"\"\"\n    if not all(key.isalnum() and len(key) == 8 for key in hex_keys):\n        raise ValueError(\"Invalid hexadecimal string\")\n\n    random.seed(seed)\n    key = random.choice(hex_keys)\n    float_num = struct.unpack('!f', bytes.fromhex(key))[0]\n    md5_hash = hashlib.md5(struct.pack('!f', float_num)).hexdigest()\n\n    return md5_hash", "problem": "Given a list of hexadecimal string keys, this function selects one at random, converts it into a floating-point number, and then computes its MD5 hash. An optional seed parameter allows for deterministic random choices for testing purposes.\nThe function should raise the exception for: ValueError: If contains invalid hexadecimal strings.\nThe function should output with:\n    str: The MD5 hash of the floating-point number derived from the randomly selected hexadecimal string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n```", "solution": "import hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n\n    random.seed(seed)\n    hex_key = random.choice(hex_keys)\n\n    try:\n        float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    except ValueError as e:\n        raise ValueError(\"Invalid hexadecimal string in hex_keys.\") from e\n\n    hashed_float = hashlib.md5(str(float_num).encode()).hexdigest()\n    return hashed_float", "pass": true}
{"task_id": "543", "program": "import base64\nimport os\ndef task_func():\n\n    pass\nimport base64\nimport os\ndef task_func():\n    # Generate a random float number\n    random_float = random.random()\n\n    # Convert the float to a hexadecimal string\n    hex_string = hex(random_float)\n\n    # Encode the hexadecimal string in base64\n    base64_encoded_string = base64.b64encode(hex_string.encode(\"utf-8\"))\n\n    # Return the base64 encoded string\n    return base64_encoded_string.decode(\"utf-8\")", "problem": "Generates a random float number, converts it to a hexadecimal string, and then encodes this hexadecimal representation in base64.\nThe function should output with:\n    str: The base64 encoded string of the hexadecimal representation of a random float.\nYou should write self-contained code starting with:\n```\nimport base64\nimport os\ndef task_func():\n```", "solution": "import base64\nimport os\ndef task_func():\n    float_bytes = os.urandom(4)\n    encoded_str = base64.b64encode(float_bytes)\n\n    return encoded_str.decode()", "pass": false}
{"task_id": "544", "program": "import struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n\n    pass\nimport struct\nimport zlib\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n    # Convert hex string to float\n    float_num = struct.unpack('<f', bytes.fromhex(hex_string))[0]\n\n    # Compress float number\n    compressed_bytes = zlib.compress(struct.pack('<f', float_num))\n\n    return compressed_bytes", "problem": "Converts a given hex string to a float number and then compresses the binary32 float number.\nThe function should output with:\n    bytes: The compressed float number.\nYou should write self-contained code starting with:\n```\nimport struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n```", "solution": "import struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n    binary_float = struct.pack('!f', int(hex_string, 16))\n    compressed_data = zlib.compress(binary_float)\n    return compressed_data", "pass": true}
{"task_id": "545", "program": "import codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n\n    pass\nimport codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n    # Generate a random float number from a list of hex strings\n    hex_key = random.choice(hex_keys)\n    float_num = struct.unpack('<f', bytes.fromhex(hex_key))[0]\n\n    # Encode the float number in utf-8\n    utf8_bytes = codecs.encode(float_num, 'utf-8')\n\n    return utf8_bytes", "problem": "Generate a random float number from a list of hex strings and then encode the float number in utf-8.\nThe function should output with:\n    bytes: The utf-8 encoded float number.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n```", "solution": "import codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n    hex_key = random.choice(hex_keys)\n    float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    encoded_float = codecs.encode(str(float_num), 'utf-8')\n\n    return encoded_float", "pass": false}
{"task_id": "546", "program": "from collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n\n    pass\nfrom collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n    \"\"\"\n    Sorts a given dictionary by its keys in ascending order and returns a PrettyTable object displaying the sorted items with the names 'Key' and 'Value'.\n    \"\"\"\n    # Create an empty PrettyTable object\n    table = PrettyTable()\n\n    # Add column names\n    table.field_names = [\"Key\", \"Value\"]\n\n    # Sort the dictionary by its keys\n    sorted_dict = OrderedDict(sorted(my_dict.items(), key=lambda x: x[0]))\n\n    # Add the sorted items to the PrettyTable object\n    for key, value in sorted_dict.items():\n        table.add_row([key, value])\n\n    return table\nmy_dict = {\"c\": 3, \"a\": 1, \"b\": 2}", "problem": "Sorts a given dictionary by its keys in ascending order and returns a PrettyTable object displaying the sorted items with the names 'Key' and 'Value'. Display an empty dictionary. >>> str(task_func({})).startswith('+') True\nThe function should output with:\n    PrettyTable: A PrettyTable object representing the sorted dictionary.\nYou should write self-contained code starting with:\n```\nfrom collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n```", "solution": "from collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n    ordered_dict = OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))\n    table = PrettyTable(['Key', 'Value'])\n\n    for key, value in ordered_dict.items():\n        table.add_row([key, value])\n\n    return table", "pass": true}
{"task_id": "547", "program": "import hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n\n    pass\nimport hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n    \"\"\"\n    Encrypt a password using Salt and SHA-256, then encode the result in base64.\n\n    Args:\n        password (str): The password to encrypt.\n        salt_length (int, optional): The length of the salt to use. Defaults to 8.\n\n    Returns:\n        str: The encrypted password in base64 format.\n    \"\"\"\n    salt = os.urandom(salt_length)\n    hashed_password = hashlib.sha256(salt + password.encode()).hexdigest()\n    return base64.b64encode(hashed_password.encode()).decode()\npassword = \"my_password\"\nsalt_length = 8", "problem": "Encrypt a password using Salt and SHA-256, then encode the result in base64.\nThe function should output with:\n    str: The encrypted password in base64 format.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n```", "solution": "import hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n    # Generate a random salt\n    salt = os.urandom(salt_length)\n    # Use the salt and the password to create a SHA-256 hash\n    hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)\n    # Combine the salt and the hash\n    salted_hash = salt + hash\n    # Encode the salted hash in base64\n    encrypted_password = base64.b64encode(salted_hash)\n\n    return encrypted_password.decode('utf-8')", "pass": true}
{"task_id": "548", "program": "import random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n\n    pass\nimport random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n    \"\"\"\n    Create a random string of a specified length with uppercase letters and digits, compress it with zlib, and then encode the compressed string in base64.\n    The function should output with:\n        str: The compressed string in base64.\n    \"\"\"\n    # Generate a random string with uppercase letters and digits\n    random_string = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(string_length))\n\n    # Compress the string with zlib\n    compressed_string = zlib.compress(random_string.encode())\n\n    # Encode the compressed string in base64\n    base64_string = base64.b64encode(compressed_string).decode()\n\n    return base64_string", "problem": "Create a random string of a specified length with uppercase letters and digits, compress it with zlib, and then encode the compressed string in base64.\nThe function should output with:\n    str: The compressed string in base64.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n```", "solution": "import random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n    # Generate a random string\n    random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=string_length))\n    \n    # Compress the string\n    compressed_string = zlib.compress(random_string.encode('utf-8'))\n    \n    # Encode the compressed string in base64\n    encoded_compressed_string = base64.b64encode(compressed_string)\n\n    return encoded_compressed_string.decode('utf-8')", "pass": false}
{"task_id": "549", "program": "import base64\nimport pandas as pd\ndef task_func(df):\n\n    pass\nimport base64\nimport pandas as pd\ndef task_func(df):\n    # Convert the dict to a Pandas DataFrame\n    df = pd.DataFrame(df)\n\n    # Convert the DataFrame to CSV format\n    csv_string = df.to_csv(index=False)\n\n    # Encode the CSV string to bytes\n    csv_bytes = csv_string.encode('utf-8')\n\n    # Encode the bytes to a Base64 string\n    base64_string = base64.b64encode(csv_bytes).decode('utf-8')\n\n    return base64_string\ndf = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}", "problem": "Encodes a dict of list as a Base64 string. The dict is first converted to a Pandas DataFrame. Then convert the data franme to CSV format and encoded to bytes, finally encoded it to a Base64 string.\nThe function should output with:\n    str: The Base64 encoded string of the DataFrame's CSV representation.\nYou should write self-contained code starting with:\n```\nimport base64\nimport pandas as pd\ndef task_func(df):\n```", "solution": "import base64\nimport pandas as pd\ndef task_func(df):\n    df = pd.DataFrame(df)\n    csv = df.to_csv(index=False)\n    csv_bytes = csv.encode('utf-8')\n    base64_bytes = base64.b64encode(csv_bytes)\n    base64_string = base64_bytes.decode('utf-8')\n\n    return base64_string", "pass": true}
{"task_id": "550", "program": "from collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n\n    pass\nfrom collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n    # Flatten the list of menu items\n    flattened_list = [item for sublist in list_of_menuitems for item in sublist]\n\n    # Count the frequency of each menu item\n    counter = Counter(flattened_list)\n\n    # Create a Pandas DataFrame with the menu items as indices and the count of each item as values\n    df = pd.DataFrame.from_dict(counter, orient='index', columns=['Count'])\n    df.index.name = 'MenuItem'\n\n    return df\nlist_of_menuitems = [['Pizza', 'Pasta', 'Salad'], ['Pizza', 'Pasta', 'Pizza', 'Pasta'], ['Salad', 'Pasta', 'Pizza']]", "problem": "Given a nested list of menu items, this function flattens the list and returns a Pandas DataFrame detailing the count of each individual menu item with index name 'MenuItem'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with menu items as indices and a 'Count' column showing the count of each menu item.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n```", "solution": "from collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n    # Flattening the list using list comprehension\n    flat_list = [item for sublist in list_of_menuitems for item in sublist]\n    counter = Counter(flat_list)\n\n    # Creating the DataFrame\n    df = pd.DataFrame.from_dict(counter, orient='index', columns=['Count'])\n    df.index.name = 'MenuItem'\n\n    return df", "pass": true}
{"task_id": "551", "program": "from collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n\n    pass\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n    # Flatten the list of menu items\n    flattened_list = [item for sublist in list_of_menuitems for item in sublist]\n\n    # Count the frequency of each menu item\n    counter = Counter(flattened_list)\n\n    # Create a DataFrame from the counter\n    df = pd.DataFrame.from_dict(counter, orient='index', columns=['Frequency'])\n\n    # Plot the barplot\n    ax = sns.barplot(x='Frequency', y=df.index, data=df)\n\n    # Set the title and labels\n    ax.set_title('Frequency of Menu Items')\n    ax.set_xlabel('Frequency')\n    ax.set_ylabel('Menu Item')\n\n    # Return the Axes object\n    return ax\nlist_of_menuitems = [['Pizza', 'Pasta', 'Salad'], ['Pizza', 'Pasta', 'Salad'], ['Pizza', 'Pasta', 'Salad']]", "problem": "Given a nested list of menu items, this function flattens the list and visualizes the frequency of each menu item using a seaborn barplot.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object representing the visualization, or None if there are no items to plot.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n```", "solution": "from collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n    if not list_of_menuitems or not any(list_of_menuitems):\n        print(\"No items to plot.\")\n        return None\n\n    # Flatten the nested list into a single list of items\n    flat_list = [item for sublist in list_of_menuitems for item in sublist]\n    if not flat_list:\n        print(\"No items to plot.\")\n        return None\n\n    # Count the occurrence of each item\n    counter = Counter(flat_list)\n\n    # Convert the counter to a DataFrame\n    df = pd.DataFrame(counter.items(), columns=['Item', 'Count'])\n\n    # Ensure there is data to plot\n    if df.empty:\n        print(\"No items to plot.\")\n        return None\n\n    # Create a seaborn barplot\n    sns.set(style=\"whitegrid\")\n    ax = sns.barplot(x=\"Count\", y=\"Item\", data=df, palette=\"viridis\")\n\n    plt.tight_layout()  # Adjust the layout to make room for the item labels\n    return ax", "pass": false}
{"task_id": "552", "program": "import collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n\n    pass\nimport collections\nimport itertools\nimport matplotlib.pyplot as plt\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n    \"\"\"Combine two lists and record the frequency of predefined items in the combined list.\n\n    Args:\n        a (list): First list.\n        b (list): Second list.\n        items (list, optional): Predefined items to record frequency for. Defaults to ITEMS.\n\n    Returns:\n        matplotlib.axes.Axes: A bar chart showing the frequency of predefined items in the combined list.\n    \"\"\"\n    # Combine the two lists\n    combined = a + b\n\n    # Count the frequency of each item in the combined list\n    counter = collections.Counter(combined)\n\n    # Create a dictionary with the frequency of each item\n    freq = {item: counter[item] for item in items}\n\n    # Plot the bar chart\n    ax = plt.bar(items, freq.values())\n\n    # Set the x-axis labels\n    ax.set_xticklabels(freq.keys())\n\n    return ax\na = ['apple', 'banana', 'apple']\nb = ['banana', 'apple', 'banana']", "problem": "Combine two lists and record the frequency of predefined items in the combined list.\nThe function should output with:\n    matplotlib.axes.Axes: A bar chart showing the frequency of predefined items in the combined list.\nYou should write self-contained code starting with:\n```\nimport collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n```", "solution": "import collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n    # Combine lists\n    combined = list(itertools.chain(a, b))\n    # Count occurrences of each item\n    counter = collections.Counter(combined)\n    # Get counts for predefined items\n    item_counts = [counter.get(item, 0) for item in items]\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(items, item_counts, color='skyblue')\n    ax.set_xlabel('Items')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Item Frequency in Combined List')\n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust layout to make room for item labels\n\n    return ax", "pass": false}
{"task_id": "553", "program": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    # Generate random values for the DataFrame\n    data = np.random.randint(0, 100, size=(len(a), len(b)))\n\n    # Create a pandas DataFrame with the generated values\n    df = pd.DataFrame(data, index=a, columns=COLUMNS[:len(b)])\n\n    # Plot the DataFrame as a bar chart\n    ax = df.plot.bar()\n\n    return ax\na = ['a', 'b', 'c']\nb = [1, 2, 3, 4, 5]", "problem": "Generate a pandas DataFrame with random values based on lists 'a' and 'b', and plot it as a bar chart. List 'a' sets the DataFrame's row indices, while the length of list 'b' determines the number of columns using predefined names from the 'COLUMNS = ['A', 'B', 'C', 'D', 'E']' list. Data Structure: - Uses pandas DataFrame to structure the data.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    if not a or not b:  # Check if either list is empty\n        fig, ax = plt.subplots()  # Creates a blank plot\n        plt.close(fig)  # Close the plot window to prevent it from showing empty plots\n        return ax\n\n    # Use np.random.seed for reproducibility if needed\n    np.random.seed(0)\n    # Ensure column names from b are used only up to the length of b\n    selected_columns = COLUMNS[:len(b)]\n    df = pd.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns)\n    ax = df.plot(kind='bar')\n    plt.show()\n    return ax", "pass": false}
{"task_id": "554", "program": "import numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n\n    pass\nimport numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n    \"\"\"\n    Generates a palindrome sentence using random words from a specified pool.\n    The sentence's length is randomly chosen between a minimum (MIN_WORDS) and maximum (MAX_WORDS) number of words.\n    The function ensures that the sentence reads the same forwards and backwards.\n    Check if the generated sentence length is within the specified range.\n    \"\"\"\n    # Generate a random sentence length between MIN_WORDS and MAX_WORDS\n    sentence_length = np.random.randint(MIN_WORDS, MAX_WORDS)\n\n    # Generate a random list of words from the pool\n    words = random.sample(WORDS_POOL, sentence_length)\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the list of words into a sentence\n    sentence = \" \".join(words)\n\n    # Check if the sentence is a palindrome\n    if sentence == \" \".join(reversed_words):\n        return sentence\n    else:\n        # If the sentence is not a palindrome, generate a new sentence\n        return task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\nMIN_WORDS = 3\nMAX_WORDS = 5\nWORDS_POOL = [\"apple\", \"banana\", \"cherry\", \"date\", \"elephant\"]", "problem": "Generates a palindrome sentence using random words from a specified pool. The sentence's length is randomly chosen between a minimum (MIN_WORDS) and maximum (MAX_WORDS) number of words. The function ensures that the sentence reads the same forwards and backwards. Check if the generated sentence length is within the specified range. >>> sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL) >>> MIN_WORDS <= len(sentence.split()) <= MAX_WORDS True\nThe function should output with:\n    str: The generated palindrome sentence.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n```", "solution": "import numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n    sentence_length = np.random.randint(MIN_WORDS, MAX_WORDS + 1)\n    first_half = [random.choice(WORDS_POOL) for _ in range(sentence_length // 2)]\n\n    # For odd-length sentences, add a middle word\n    if sentence_length % 2 == 1:\n        middle_word = [random.choice(WORDS_POOL)]\n        second_half = first_half[::-1]\n        sentence = first_half + middle_word + second_half\n    else:\n        second_half = first_half[::-1]\n        sentence = first_half + second_half\n\n    return ' '.join(sentence)", "pass": false}
{"task_id": "555", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n    # Calculate the Pearson correlation coefficient\n    r, p = stats.pearsonr(a, b)\n\n    # Generate a Pandas DataFrame from the lists\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Draw a scatter plot with a regression line\n    fig, ax = plt.subplots()\n    ax.scatter(df['a'], df['b'])\n    ax.plot(df['a'], df['a'] * r + df['b'].mean() - r * df['a'].mean(), color='red')\n\n    return r, ax\na = [1, 2, 3, 4, 5]\nb = [2, 4, 6, 8, 10]", "problem": "Calculate the Pearson correlation coefficient of two lists, generate a Pandas DataFrame from these lists, and then draw a scatter plot with a regression line.\nThe function should output with:\n    tuple: Contains two elements:\n    float: The Pearson correlation coefficient.\n    matplotlib.axes.Axes: The Axes object of the plotted scatter plot with a regression line.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n    correlation, _ = stats.pearsonr(a, b)\n    df = pd.DataFrame({'A': a, 'B': b})\n\n    plt.scatter(df['A'], df['B'])\n    plt.plot(np.unique(df['A']), np.poly1d(np.polyfit(df['A'], df['B'], 1))(np.unique(df['A'])), color='red')\n    plt.show()\n    return correlation, plt.gca()", "pass": true}
{"task_id": "556", "program": "import numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n\n    pass\nimport numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n    \"\"\"\n    Generates a random string of length between `min_length` and `max_length`, inclusive, using characters from `letters`, and evaluates its similarity to the provided string `s`. A similarity score of 0.5 or higher considered 'similar'.\n    The function should output with:\n        tuple: A tuple containing the generated string and a boolean indicating whether it's\n        considered similar to `s` based on the similarity threshold.\n    \"\"\"\n    # Generate a random string of length between min_length and max_length\n    random_string = ''.join(random.choice(letters) for _ in range(random.randint(min_length, max_length)))\n\n    # Calculate the similarity score between the random string and the provided string\n    similarity_score = SequenceMatcher(None, random_string, s).ratio()\n\n    # Check if the similarity score is above the threshold\n    is_similar = similarity_score >= 0.5\n\n    return random_string, is_similar\ns = \"hello\"\nmin_length = 3\nmax_length = 5\nletters = \"abcdefghijklmnopqrstuvwxyz\"", "problem": "Generates a random string of length between `min_length` and `max_length`, inclusive, using characters from `letters`, and evaluates its similarity to the provided string `s`. A similarity score of 0.5 or higher considered 'similar'.\nThe function should output with:\n    tuple: A tuple containing the generated string and a boolean indicating whether it's\n    considered similar to `s` based on the similarity threshold.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n```", "solution": "import numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n    string_length = np.random.randint(min_length, max_length+1)\n    generated_s = ''.join(random.choice(letters) for _ in range(string_length))\n\n    # Check similarity\n    similarity = SequenceMatcher(None, s, generated_s).ratio()\n    is_similar = similarity >= 0.5\n\n    return generated_s, is_similar", "pass": true}
{"task_id": "557", "program": "import numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n\n    pass\nimport numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n    \"\"\"\n    Analyze and plot the average similarity scores of strings in a list.\n    This function calculates the average similarity score of each string compared to all other strings in the list using the SequenceMatcher ratio.\n    If a plot path is provided, it saves the plot of these scores; otherwise, it just returns the scores.\n    The function should raise the exception for:\n        ValueError: If `s_list` is not a list of strings.\n        Return numpy.nan if the list contains a single element\n    The function should output with:\n        list: List of average similarity scores for each string in `s_list`.\n    \"\"\"\n    if not isinstance(s_list, list):\n        raise ValueError(\"s_list must be a list of strings\")\n    if len(s_list) == 1:\n        return np.nan\n\n    # Calculate the average similarity score for each string\n    scores = []\n    for s in s_list:\n        score = 0\n        for t in s_list:\n            if s != t:\n                score += SequenceMatcher(None, s, t).ratio()\n        score /= len(s_list) - 1\n        scores.append(score)\n\n    # Plot the scores if a plot path is provided\n    if plot_path is not None:\n        plt.plot(scores)\n        plt.xlabel(\"String index\")\n        plt.ylabel(\"Average similarity score\")\n        plt.title(\"Average similarity scores of strings in the list\")\n        plt.savefig(plot_path)\n\n    return scores\ns_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "problem": "Analyze and plot the average similarity scores of strings in a list. This function calculates the average similarity score of each string compared to all other strings in the list using the SequenceMatcher ratio. If a plot path is provided, it saves the plot of these scores; otherwise, it just returns the scores.\nThe function should raise the exception for: ValueError: If `s_list` is not a list of strings. Return numpy.nan if the list contains a single element\nThe function should output with:\n    list: List of average similarity scores for each string in `s_list`.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n```", "solution": "import numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n    if not all(isinstance(item, str) for item in s_list):\n        raise ValueError(\"All items in s_list must be strings.\")\n\n    avg_scores = []\n    for s in s_list:\n        scores = [SequenceMatcher(None, s, other_s).ratio() for other_s in s_list if s != other_s]\n        avg_score = np.mean(scores)\n        avg_scores.append(avg_score)\n\n    if plot_path:\n        plt.bar(s_list, avg_scores)\n        plt.savefig(plot_path)\n    \n    return avg_scores", "pass": false}
{"task_id": "558", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n    \"\"\"\n    Standardize two lists of numbers using the StandardScaler from sklearn and visualize the standardized values using a bar plot.\n\n    Parameters\n    ----------\n    a : list\n        First list of numbers to be standardized.\n    b : list\n        Second list of numbers to be standardized.\n    columns : list of str, optional\n        Names of the columns in the resulting DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the standardized values.\n    matplotlib.axes.Axes\n        Axes object of the displayed bar plot.\n    \"\"\"\n    # Concatenate the two lists into a single array\n    data = np.concatenate((a, b), axis=0)\n\n    # Create a DataFrame with the standardized values\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n    df = pd.DataFrame(standardized_data, columns=columns)\n\n    # Create a bar plot of the standardized values\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df[columns[0]], label=columns[0])\n    ax.bar(df.index, df[columns[1]], bottom=df[columns[0]], label=columns[1])\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Standardized Value')\n    ax.set_title('Standardized Values')\n    ax.legend()\n\n    return df, ax\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]", "problem": "Standardize two lists of numbers using the StandardScaler from sklearn and visualize the standardized values using a bar plot.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the standardized values.\n    matplotlib.axes.Axes: Axes object of the displayed bar plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n    # Handle empty input lists by returning an empty DataFrame and Axes object\n    if len(a) == 0 or len(b) == 0:\n        fig, ax = plt.subplots()\n        plt.close(fig)  # Prevent empty plot from displaying\n        return pd.DataFrame(), ax\n\n    scaler = StandardScaler()\n    standardized_values = scaler.fit_transform(np.array([a, b]).T)\n    df = pd.DataFrame(standardized_values, columns=columns)\n\n    ax = df.plot(kind='bar')\n    plt.show()\n    return df, ax", "pass": false}
{"task_id": "559", "program": "import pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n\n    pass\nimport pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n    # Calculate the Euclidean distance between the two lists\n    dist = distance.euclidean(a, b)\n\n    # Create a Pandas DataFrame from the two lists with indices 'A' and 'B'\n    df = pd.DataFrame({'A': a, 'B': b})\n\n    # Draw the values with a line displaying the Euclidean distance\n    fig, ax = plt.subplots()\n    ax.plot(df['A'], df['B'], label=f'Euclidean distance: {dist:.2f}')\n    ax.set_xlabel('A')\n    ax.set_ylabel('B')\n    ax.legend()\n\n    return dist, df, ax\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]", "problem": "Calculate the Euclidean distance between two lists, create a Pandas DataFrame from these lists with indices 'A' and 'B', and then draw the values with a line displaying the Euclidean distance.\nThe function should output with:\n    float: The computed Euclidean distance between the two lists.\n    pd.DataFrame: A DataFrame containing the two lists as columns.\n    matplotlib.axes.Axes: The generated plot's Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n```", "solution": "import pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n    # Calculate the Euclidean distance\n    euclidean_distance = distance.euclidean(a, b)\n\n    # Create a DataFrame\n    df = pd.DataFrame({'A': a, 'B': b})\n\n    # Plot the values\n    fig, ax = plt.subplots()\n    ax.plot(df['A'], df['B'])\n    ax.plot([df['A'].iloc[0], df['B'].iloc[0]], [df['A'].iloc[-1], df['B'].iloc[-1]], 'ro-')\n    \n    return euclidean_distance, df, ax", "pass": true}
{"task_id": "560", "program": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n\n    pass\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    # Convert the data to a pandas dataframe\n    df = pd.DataFrame(data)\n\n    # Set the index to the month column\n    df.set_index('month', inplace=True)\n\n    # Plot the data as a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n\n    # Set the title, x label, and y label\n    ax.set_title(f'Monthly Data for {datetime.now().year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n\n    # Return the Axes object\n    return ax", "problem": "This function plots a bar chart of monthly data values for a single year, with 'month' on the x-axis and 'value' on the y-axis.\nThe function should output with:\n    Axes object: A matplotlib.axes.Axes object representing the plot, with the title formatted as 'Monthly Data for yyyy', x label as 'Month', and y label as 'Value'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n```", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    # Handle empty data\n    if not data.strip():\n        raise ValueError(\"The provided data string is empty.\")\n\n    data_entries = data.split(',')\n    months_data = [d.split('-')[1] for d in data_entries]\n    unique_years = {d.split('-')[0] for d in data_entries}\n\n    # Check if the data is from the same year\n    if len(unique_years) != 1:\n        raise ValueError(\"The provided data contains entries from multiple years.\")\n\n    # Extract data and convert to DataFrame\n    data = [d.rsplit('-', 1) for d in data_entries]\n    data = [(datetime.strptime(d[0], '%Y-%m').strftime('%B'), int(d[1])) for d in data]\n    df = pd.DataFrame(data, columns=['Month', 'Value'])\n    df = df.set_index('Month')\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(df.index, df['Value'])\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Monthly Data for {list(unique_years)[0]}\")\n    plt.xticks(rotation='vertical')\n    plt.close(fig)  # Close the figure to prevent it from being displayed here\n    \n    return ax", "pass": false}
{"task_id": "561", "program": "import pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n\n    pass\nimport pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Converts a date time from one timezone to another.\n    The function should output with:\n        str: The converted datetime string in \"yyyy-mm-dd hh:mm:ss\" format.\n    \"\"\"\n    date = parser.parse(date_str)\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    date = from_tz.localize(date)\n    date = date.astimezone(to_tz)\n    return date.strftime(\"%Y-%m-%d %H:%M:%S\")", "problem": "Converts a date time from one timezone to another.\nThe function should output with:\n    str: The converted datetime string in \"yyyy-mm-dd hh:mm:ss\" format.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n```", "solution": "import pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    date = parser.parse(date_str).replace(tzinfo=from_tz)\n    date = date.astimezone(to_tz)\n\n    return date.strftime('%Y-%m-%d %H:%M:%S')", "pass": true}
{"task_id": "562", "program": "import os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n\n    pass\nimport os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n    \"\"\"\n    Loads a DLL file specified by the given filepath, then retrieves and prints system information including system name, node name, release, version, machine, Python version, and PIP version.\n    This function demonstrates the use of various system-related libraries in Python.\n    The format of the printed message is:\n    System: <system-name-here>\n    Node Name: <node-name-here>\n    Release: <release-here>\n    Version: <version-here>\n    Machine: <type-of-the-machine-here>\n    Python Version: <python-version-here>\n    PIP Version: <pip-version-here>\n    The function should raise the exception for:\n        OSError: if the input filepath is invalid or empty\n        TypeError: if the input filepath is not a string\n    The function should output with:\n        str: The name of the loaded DLL file.\n    \"\"\"\n    if not isinstance(filepath, str):\n        raise TypeError(\"filepath must be a string\")\n    if not filepath:\n        raise ValueError(\"filepath cannot be empty\")\n\n    # Load the DLL file\n    dll = ctypes.cdll.LoadLibrary(filepath)\n\n    # Get system information\n    system_name = os.uname().sysname\n    node_name = os.uname().nodename\n    release = os.uname().release\n    version = os.uname().version\n    machine = os.uname().machine\n\n    # Get Python and PIP version\n    python_version = sys.version.split()[0]\n    pip_version = subprocess.check_output([\"pip\", \"--version\"]).decode().split()[1]\n\n    # Print the system information\n    print(f\"System: {system_name}\\nNode Name: {node_name}\\nRelease: {release}\\nVersion: {version}\\nMachine: {machine}\\nPython Version: {python_version}\\nPIP Version: {pip_version}\")\n\n    return dll.name", "problem": "Loads a DLL file specified by the given filepath, then retrieves and prints system information including system name, node name, release, version, machine, Python version, and PIP version. This function demonstrates the use of various system-related libraries in Python. The format of the printed message is: System: <system-name-here> Node Name: <node-name-here> Release: <release-here> Version: <version-here> Machine: <type-of-the-machine-here> Python Version: <python-version-here> PIP Version: <pip-version-here>\nThe function should raise the exception for: OSError: if the input filepath is invalid or empty TypeError: if the input filepath is not a string\nThe function should output with:\n    str: The name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n```", "solution": "import os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n    if not isinstance(filepath, str):\n        raise TypeError(\"Invalid filepath type\")\n    elif filepath == \"\" or not os.path.exists(filepath):\n        raise OSError(\"Invalid filepath\")\n    else:\n        lib = ctypes.CDLL(filepath)\n\n    uname = os.uname()\n    print(f'System: {uname.sysname}')\n    print(f'Node Name: {uname.nodename}')\n    print(f'Release: {uname.release}')\n    print(f'Version: {uname.version}')\n    print(f'Machine: {uname.machine}')\n\n    python_version = sys.version\n    print(f'Python Version: {python_version}')\n\n    pip_version = subprocess.check_output(['pip', '--version'])\n    print(f'PIP Version: {pip_version.decode(\"utf-8\")}')\n    return lib._name", "pass": false}
{"task_id": "563", "program": "import ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n\n    pass\nimport ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n    # Load the DLL file\n    dll = ctypes.cdll.LoadLibrary(filepath)\n    # Get the name of the loaded DLL file\n    dll_name = os.path.basename(filepath)\n    # Get all DLL files in the same directory as the loaded DLL file\n    dll_files = glob.glob(os.path.join(os.path.dirname(filepath), \"*.dll\"))\n    # Move all DLL files to the destination directory\n    for dll_file in dll_files:\n        shutil.move(dll_file, destination_dir)\n    return dll_name\nfilepath = \"C:\\\\path\\\\to\\\\dll.dll\"\ndestination_dir = \"C:\\\\path\\\\to\\\\destination\"", "problem": "Loads a DLL file specified by the given filepath and moves all DLL files in the same directory to another specified directory. This function demonstrates file operations including DLL loading, file path manipulation, and file moving using ctypes, os, shutil, and glob modules.\nThe function should output with:\n    str: The name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n```", "solution": "import ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n    lib = ctypes.CDLL(filepath)\n\n    dll_dir = os.path.dirname(filepath)\n    dll_files = glob.glob(os.path.join(dll_dir, '*.dll'))\n\n    for dll_file in dll_files:\n        shutil.move(dll_file, destination_dir)\n\n    return lib._name", "pass": false}
{"task_id": "564", "program": "import os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n\n    pass\nimport os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n    # Load the DLL file\n    dll = ctypes.cdll.LoadLibrary(filepath)\n\n    # Get the file metadata\n    file_info = os.stat(filepath)\n\n    # Convert the creation and modification times to UTC format\n    creation_time = datetime.utcfromtimestamp(file_info.st_ctime).strftime('%Y-%m-%d %H:%M:%S')\n    modification_time = datetime.utcfromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S')\n\n    # Return the metadata as a dictionary\n    return {\n        'Name': dll.name,\n        'Creation Time': creation_time,\n        'Modification Time': modification_time,\n        'Size': file_info.st_size\n    }", "problem": "Loads a DLL file from the specified filepath and returns its metadata, including creation time, modification time, and file size. The times are displayed in UTC format. This function demonstrates the use of ctypes for loading DLLs and os module for accessing file metadata.\nThe function should output with:\n    str: The name of the loaded DLL file.\n    dict: A dictionary containing the metadata of the DLL file, including the keys 'Creation Time', 'Modification Time', and 'Size'.\nYou should write self-contained code starting with:\n```\nimport os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n```", "solution": "import os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n    metadata = dict()\n    lib = ctypes.CDLL(filepath)\n\n    file_stat = os.stat(filepath)\n\n    creation_time = datetime.fromtimestamp(file_stat.st_ctime, pytz.UTC)\n    \n    modification_time = datetime.fromtimestamp(file_stat.st_mtime, pytz.UTC)\n\n    file_size = file_stat.st_size\n    metadata['Creation Time'] = creation_time\n    metadata['Modification Time'] = modification_time\n    metadata['Size'] = file_size\n    \n    return lib._name, metadata", "pass": false}
{"task_id": "565", "program": "import ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n\n    pass\nimport ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n    # Load the DLL file\n    dll = ctypes.cdll.LoadLibrary(filepath)\n\n    # Calculate the MD5 and SHA256 hashes of the DLL file\n    md5 = hashlib.md5(dll.read()).hexdigest()\n    sha256 = hashlib.sha256(dll.read()).hexdigest()\n\n    # Print the hashes in hexadecimal format\n    print(f\"MD5: {md5}\")\n    print(f\"SHA256: {sha256}\")\n\n    # Return the actual name of the loaded DLL file\n    return dll.name", "problem": "Loads a DLL file from a given filepath, calculates its MD5 and SHA256 hashes, and prints these hashes in hexadecimal format. This function is a demonstration of file handling, usage of the hashlib library for hash calculations, and binascii for hexadecimal conversion. Note that the actual operations performed on the loaded DLL are limited to hash calculation.\nThe function should output with:\n    str: The actual name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n```", "solution": "import ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n    lib = ctypes.CDLL(filepath)\n\n    with open(filepath, 'rb') as f:\n        data = f.read()\n\n    md5_hash = hashlib.md5(data).digest()\n    print(f'MD5 Hash: {binascii.hexlify(md5_hash).decode()}')\n\n    sha256_hash = hashlib.sha256(data).digest()\n    print(f'SHA256 Hash: {binascii.hexlify(sha256_hash).decode()}')\n\n    return lib._name", "pass": false}
{"task_id": "566", "program": "import inspect\nimport types\ndef task_func(f):\n\n    pass\nimport inspect\nimport types\ndef task_func(f):\n    \"\"\"\n    Inspects a given function 'f' and returns its specifications, including the function's name, whether it is a lambda function, its arguments, defaults, and annotations.\n    This method utilizes the inspect and types modules to introspect function properties.\n\n    Args:\n        f (function): The function to inspect.\n\n    Returns:\n        dict: A dictionary containing details about the function, such as its name, if it's a lambda function,\n        arguments, default values, and annotations.\n    \"\"\"\n    # Get the function's name\n    name = f.__name__\n\n    # Check if the function is a lambda function\n    is_lambda = isinstance(f, types.LambdaType)\n\n    # Get the function's arguments\n    args = inspect.signature(f).parameters\n\n    # Get the function's default values\n    defaults = inspect.signature(f).defaults\n\n    # Get the function's annotations\n    annotations = inspect.signature(f).annotations\n\n    # Create a dictionary to store the function's specifications\n    specs = {\n        \"name\": name,\n        \"is_lambda\": is_lambda,\n        \"args\": args,\n        \"defaults\": defaults,\n        \"annotations\": annotations\n    }\n\n    return specs", "problem": "Inspects a given function 'f' and returns its specifications, including the function's name, whether it is a lambda function, its arguments, defaults, and annotations. This method utilizes the inspect and types modules to introspect function properties.\nThe function should output with:\n    dict: A dictionary containing details about the function, such as its name, if it's a lambda function,\n    arguments, default values, and annotations.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport types\ndef task_func(f):\n```", "solution": "import inspect\nimport types\ndef task_func(f):\n    spec = inspect.getfullargspec(f)\n\n    return {\n        'function_name': f.__name__,\n        'is_lambda': isinstance(f, types.LambdaType),\n        'args': spec.args,\n        'defaults': spec.defaults,\n        'annotations': spec.annotations\n    }", "pass": false}
{"task_id": "567", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    This function draws a histogram to visualize the frequency distribution of numeric values provided in a string format, with 'Value' on the x-axis, 'Frequency' on the y-axis and 'Histogram of Values' as the title.\n    Note that:\n        - The histogram uses bins calculated as `np.arange(data.min(), data.max()+2) - 0.5`.\n        - The function should output with:\n            - ax (matplotlib.axes._axes.Axes): The Axes object of the created histogram.\n    \"\"\"\n    # Convert the data to a numpy array\n    data = np.array(data)\n\n    # Calculate the histogram bins\n    bins = np.arange(data.min(), data.max()+2) - 0.5\n\n    # Create the histogram\n    ax = plt.hist(data, bins=bins, alpha=0.5, label='Histogram of Values')\n\n    # Set the title and labels\n    ax.set_title('Histogram of Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    # Show the plot\n    plt.show()\n\n    return ax", "problem": "This function draws a histogram to visualize the frequency distribution of numeric values provided in a string format, with 'Value' on the x-axis, 'Frequency' on the y-axis and 'Histogram of Values' as the title.\nNote that: Notes: The histogram uses bins calculated as `np.arange(data.min(), data.max()+2) - 0.5`.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object of the created histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    data = data.split('-')\n    data = [int(d) for d in data]\n    df = pd.DataFrame(data, columns=['Values'])\n    \n    plt.figure(figsize=(10, 6))\n    ax = plt.gca()  # Get current Axes\n    ax.hist(df['Values'], bins=np.arange(df['Values'].min(), df['Values'].max()+2) - 0.5, edgecolor='black')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    ax.set_xticks(sorted(list(set(data))))  # Set x-ticks based on unique data values\n    plt.show()\n    \n    return ax", "pass": false}
{"task_id": "568", "program": "import inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n\n    pass\nimport inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n    \"\"\"\n    Analyzes a list of functions and draws a bar chart showing the number of arguments for each function.\n    The function names are listed along the x-axis, and the number of arguments are represented as bars.\n    This method showcases the integration of function introspection, data frame creation, and data visualization.\n\n    Args:\n        f_list (list): A list of functions to analyze.\n\n    Raises:\n        ValueError: If the input contains lambda function.\n\n    Returns:\n        pandas.DataFrame: Returns a DataFrame containing the function names and their respective number of arguments.\n    \"\"\"\n    # Check if the input contains lambda function", "problem": "Analyzes a list of functions and draws a bar chart showing the number of arguments for each function. The function names are listed along the x-axis, and the number of arguments are represented as bars. This method showcases the integration of function introspection, data frame creation, and data visualization.\nThe function should raise the exception for: ValueError: if the input contains lambda function\nThe function should output with:\n    pandas.DataFrame: Returns a DataFrame containing the function names and their respective number of arguments.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n```", "solution": "import inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n    func_info = []\n    for f in f_list:\n        if f.__name__ == \"<lambda>\":\n            raise ValueError(\"The function should not be a lambda function.\")\n        spec = inspect.getfullargspec(f)\n        func_info.append([f.__name__, len(spec.args)])\n\n    df = pd.DataFrame(func_info, columns=['Function Name', 'Number of Arguments'])\n    df.set_index('Function Name', inplace=True)\n    df.plot(kind='bar')  # Uncomment to visualize the bar chart\n    plt.show()  # Uncomment to display the plot\n    return df", "pass": false}
{"task_id": "569", "program": "import inspect\nimport types\nimport math\ndef task_func(f):\n\n    pass\nimport inspect\nimport types\nimport math\ndef task_func(f):\n    # Get the function's name\n    name = f.__name__\n\n    # Get the number of arguments\n    num_args = len(inspect.signature(f).parameters)\n\n    # Get the default values of the arguments\n    default_values = [param.default for param in inspect.signature(f).parameters.values()]\n\n    # Count the number of lambda functions in the default values\n    num_lambdas = sum(1 for value in default_values if isinstance(value, types.LambdaType))\n\n    # Calculate the square root of the number of arguments\n    sqrt_num_args = math.sqrt(num_args)\n\n    # Return a dictionary with the function's name, the square root of the number of arguments, and the count of lambda functions in the default values\n    return {\n        \"name\": name,\n        \"sqrt_num_args\": sqrt_num_args,\n        \"num_lambdas\": num_lambdas\n    }", "problem": "Analyzes a given function 'f' and returns a dictionary containing its name, the square root of the number of arguments, and the count of lambda functions present in its default values. This function demonstrates introspection of Python functions and the use of mathematical operations on the introspected data.\nThe function should output with:\n    dict: A dictionary containing the function's name, the square root of the number of arguments,\n    and the count of lambda functions in default values.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport types\nimport math\ndef task_func(f):\n```", "solution": "import inspect\nimport types\nimport math\ndef task_func(f):\n    spec = inspect.getfullargspec(f)\n\n    info = {\n        'function_name': f.__name__,\n        'sqrt_args': math.sqrt(len(spec.args)),\n    }\n\n    if spec.defaults:\n        info['lambda_in_defaults'] = sum(1 for d in spec.defaults if isinstance(d, types.LambdaType))\n    else:\n        info['lambda_in_defaults'] = 0\n\n    return info", "pass": false}
{"task_id": "570", "program": "import inspect\nimport types\nimport json\ndef task_func(f):\n\n    pass\nimport inspect\nimport types\nimport json\ndef task_func(f):\n    \"\"\"\n    Inspects the given function 'f' and returns its specifications as a JSON string.\n    This includes the function's name, arguments, default values, annotations in a string format, and a boolean indicating if it's a lambda function.\n    The function should output with:\n        str: A JSON string containing the function's specifications.\n    \"\"\"\n    # Get the function's name\n    name = f.__name__\n\n    # Get the function's arguments\n    args = inspect.signature(f).parameters\n\n    # Get the function's default values\n    defaults = inspect.signature(f).defaults\n\n    # Get the function's annotations\n    annotations = inspect.signature(f).annotations\n\n    # Check if the function is a lambda function\n    is_lambda = isinstance(f, types.LambdaType)\n\n    # Create a dictionary with the function's specifications\n    specs = {\n        \"name\": name,\n        \"args\": args,\n        \"defaults\": defaults,\n        \"annotations\": annotations,\n        \"is_lambda\": is_lambda\n    }\n\n    # Convert the dictionary to a JSON string\n    json_str = json.dumps(specs)\n\n    return json_str", "problem": "Inspects the given function 'f' and returns its specifications as a JSON string. This includes the function's name, arguments, default values, annotations in a string format, and a boolean indicating if it's a lambda function.\nThe function should output with:\n    str: A JSON string containing the function's specifications.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport types\nimport json\ndef task_func(f):\n```", "solution": "import inspect\nimport types\nimport json\ndef task_func(f):\n    spec = inspect.getfullargspec(f)\n    annotations = {k: v.__name__ if isinstance(v, type) else str(v) for k, v in spec.annotations.items()}\n\n    info = {\n        'function_name': f.__name__,\n        'args': spec.args,\n        'defaults': spec.defaults,\n        'annotations': annotations,\n        'is_lambda': isinstance(f, types.LambdaType)\n    }\n\n    return json.dumps(info)", "pass": false}
{"task_id": "571", "program": "import inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n\n    pass\nimport inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n    \"\"\"\n    Exports the specifications of functions in 'f_list' to a CSV file at 'file_path'.\n    The CSV file columns are as follows:\n        - 'Function Name': The name of the function.\n        - 'Number of Arguments': The number of arguments the function takes.\n        - 'Defaults': Default values for the function's arguments, if any.\n        - 'Annotations': Type annotations of the function's arguments and return value, if any.\n        - 'Is Lambda': Boolean value indicating whether the function is a lambda function.\n    Each row in the CSV file corresponds to a function in 'f_list'.\n    The function should raise the exception for:\n        ValueError: If 'f_list' is not a list of functions, 'f_list' is empty, or 'file_path' is not a valid path.\n        IOError: If there's an error in writing to the specified file path.\n    The function should output with:\n        None\n    \"\"\"\n    # Check if f_list is a list of functions\n    if not isinstance(f_list, list):\n        raise ValueError(\"f_list must be a list of functions\")\n    # Check if f_list is not empty\n    if not f_list:\n        raise ValueError(\"f_list cannot be empty\")\n    # Check if file_path is a valid path\n    if not isinstance(file_path, str):\n        raise ValueError(\"file_path must be a valid path\")\n\n    # Create a list of dictionaries to store the function specifications\n    specs = []\n\n    # Iterate over the functions in f_list\n    for func in f_list:\n        # Get the function's name, number of arguments, and default values\n        name = func.__name__\n        num_args = func.__code__.co_argcount\n        defaults = func.__defaults__\n\n        # Get the function's annotations\n        annotations = func.__annotations__\n\n        # Check if the function is a lambda function\n        is_lambda = isinstance(func, type(lambda: None))\n\n        # Create a dictionary to store the function's specifications\n        spec = {\n            \"Function Name\": name,\n            \"Number of Arguments\": num_args,\n            \"Defaults\": defaults,\n            \"Annotations\": annotations,\n            \"Is Lambda\": is_lambda\n        }\n\n        # Add the dictionary to the list of specifications\n        specs.append(spec)\n\n    # Create a Pandas DataFrame from the list of specifications\n    df = pd.DataFrame(specs)\n\n    # Write the DataFrame to a CSV file\n    df.to_csv(file_path, index=False)\n\n    # Return None\n    return None", "problem": "Exports the specifications of functions in 'f_list' to a CSV file at 'file_path'. The CSV file columns are as follows: - 'Function Name': The name of the function. - 'Number of Arguments': The number of arguments the function takes. - 'Defaults': Default values for the function's arguments, if any. - 'Annotations': Type annotations of the function's arguments and return value, if any. - 'Is Lambda': Boolean value indicating whether the function is a lambda function. Each row in the CSV file corresponds to a function in 'f_list'.\nThe function should raise the exception for: ValueError: If 'f_list' is not a list of functions, 'f_list' is empty, or 'file_path' is not a valid path. IOError: If there's an error in writing to the specified file path.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n```", "solution": "import inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n    \n    if not all(callable(f) for f in f_list):\n        raise ValueError(\"All elements in f_list must be callable functions.\")\n    if not f_list:\n        raise ValueError(\"f_list should not be empty.\")\n    if not isinstance(file_path, str):\n        raise ValueError(\"file_path must be a string.\")\n\n\n    func_info = []\n    for f in f_list:\n        spec = inspect.getfullargspec(f)\n        is_lambda = lambda x: x.__name__ == (lambda: None).__name__\n        func_info.append([\n            f.__name__, \n            len(spec.args), \n            spec.defaults, \n            spec.annotations, \n            is_lambda(f)\n        ])\n\n    df = pd.DataFrame(func_info, columns=['Function Name', 'Number of Arguments', 'Defaults', 'Annotations', 'Is Lambda'])\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Error writing to file: {e}\")", "pass": false}
{"task_id": "572", "program": "from random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n\n    pass\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n    # Generate two arrays of random integers\n    array1 = np.random.randint(0, 100, size=array_length)\n    array2 = np.random.randint(0, 100, size=array_length)\n\n    # Find the maximum values of the respective elements of the two arrays\n    max_values = np.maximum(array1, array2)\n\n    # Plot the maximum values on a line diagram\n    fig, ax = plt.subplots()\n    ax.plot(max_values)\n    ax.set_ylabel('Maximum Values')\n    ax.set_xlabel('Index')\n    ax.set_title('Maximum Values of Arrays')\n\n    return ax", "problem": "Generate two arrays of random integers and draw a line diagram with the maximum values of the respective elements of the two arrays. Set 'Maximum Values' on its y-axis.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the plot.\nYou should write self-contained code starting with:\n```\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n```", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n    array1 = np.array([randint(1, 100) for _ in range(array_length)])\n    array2 = np.array([randint(1, 100) for _ in range(array_length)])\n\n    max_values = np.maximum(array1, array2)\n\n    fig, ax = plt.subplots()\n    ax.plot(max_values)\n    ax.set_ylabel('Maximum Values')\n    \n    return ax", "pass": true}
{"task_id": "573", "program": "import numpy as np\nimport pandas as pd\ndef task_func(array_length=100):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array_length=100):\n    # Generate two arrays of random numbers\n    array1 = np.random.rand(array_length)\n    array2 = np.random.rand(array_length)\n\n    # Calculate the mean, median, and standard deviation of each array\n    mean1 = np.mean(array1)\n    median1 = np.median(array1)\n    std1 = np.std(array1)\n    mean2 = np.mean(array2)\n    median2 = np.median(array2)\n    std2 = np.std(array2)\n\n    # Store the statistics in a Pandas DataFrame\n    statistics = pd.DataFrame({'Array1': [mean1, median1, std1], 'Array2': [mean2, median2, std2]}, index=['Mean', 'Median', 'Standard Deviation'])\n\n    # Draw a bar chart to compare the statistics\n    fig, ax = plt.subplots()\n    ax.bar(statistics.index, statistics['Array1'], label='Array 1')\n    ax.bar(statistics.index, statistics['Array2'], label='Array 2')\n    ax.set_ylabel('Statistics')\n    ax.set_title('Comparison of Array Statistics')\n    ax.legend()\n\n    return statistics, ax", "problem": "Generate two arrays of random numbers of a given length, calculate their mean, median, and standard deviation, then store these results in a Panda DataFrame 'statistics' with keys 'Array1' and 'Array2'. Draw a bar chart to compare these statistics with indices 'Mean', 'Median', and 'Standard Deviation'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the statistics of the arrays.\n    Axes: The bar chart plot comparing the statistics.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(array_length=100):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(array_length=100):\n    array1 = np.random.rand(array_length)\n    array2 = np.random.rand(array_length)\n\n    statistics = {\n        'Array1': [np.mean(array1), np.median(array1), np.std(array1)],\n        'Array2': [np.mean(array2), np.median(array2), np.std(array2)]\n    }\n\n    df = pd.DataFrame(statistics, index=['Mean', 'Median', 'Standard Deviation'])\n    ax = df.plot(kind='bar')\n\n    return df, ax", "pass": true}
{"task_id": "574", "program": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n\n    pass\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Generate a noisy sine wave\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + np.random.normal(0, noise_level, array_length)\n\n    # Define the function to fit the data\n    def func(x, a, b, c):\n        return a * np.sin(b * x + c)\n\n    # Perform curve fitting\n    popt, _ = curve_fit(func, x, y)\n\n    # Plot the data and the fitted curve\n    plt.plot(x, y, 'bo', label='Original data')\n    plt.plot(x, func(x, *popt), 'r', label='Fitted curve')\n    plt.legend()\n    plt.show()\n\n    return plt.gca()", "problem": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    x = np.linspace(0, 4*np.pi, array_length)\n    y = np.sin(x) + noise_level * np.random.rand(array_length)\n\n    def func(x, a, b):\n        return a * np.sin(b * x)\n\n    popt, pcov = curve_fit(func, x, y, p0=[1, 1])\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='data')\n    ax.plot(x, func(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f' % tuple(popt))\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    \n    return ax", "pass": false}
{"task_id": "575", "program": "from random import shuffle\nimport pandas as pd\nimport numpy as np\n# Constants\ndef task_func(l, n_groups = 5):\n\n    pass\nfrom random import shuffle\nimport pandas as pd\nimport numpy as np\ndef task_func(l, n_groups = 5):\n    \"\"\"\n    Given a list `l`, this function shuffles the list, constructs a dataframe using the shuffled list, and then for each row in the dataframe, moves the first n_groups elements to the end of the same row.\n    The function should output with:\n        DataFrame: A modified DataFrame constructed from the shuffled list.\n    \"\"\"\n    # Shuffle the list\n    shuffle(l)\n\n    # Construct a dataframe from the shuffled list\n    df = pd.DataFrame(l)\n\n    # Move the first n_groups elements to the end of each row\n    for i in range(n_groups):\n        df.iloc[:, i] = df.iloc[:, i].shift(-i)\n\n    return df\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn_groups = 3", "problem": "Given a list `l`, this function shuffles the list, constructs a dataframe using the shuffled list, and then for each row in the dataframe, moves the first n_groups elements to the end of the same row.\nThe function should output with:\n    DataFrame: A modified DataFrame constructed from the shuffled list.\nYou should write self-contained code starting with:\n```\nfrom random import shuffle\nimport pandas as pd\nimport numpy as np\n# Constants\ndef task_func(l, n_groups = 5):\n```", "solution": "from random import shuffle\nimport pandas as pd\nimport numpy as np\n# Constants\ndef task_func(l, n_groups = 5):\n    if not l:\n        return pd.DataFrame()\n\n    shuffle(l)\n    df = pd.DataFrame([l for _ in range(n_groups)])\n    # Ensure rolling does not aggregate rows into lists\n    df = df.apply(lambda row: np.roll(row, -n_groups), axis=1, result_type='expand')\n\n    return df", "pass": false}
{"task_id": "576", "program": "from random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n\n    pass\nfrom random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n    \"\"\"\n    Generate a Series from a list \"l\". The function shuffles the list, then creates a longer series by cycling through the shuffled list. For each element in the series, it randomly selects n_groups characters from the start of the string and moves them to the end.\n    The function should output with:\n        pd.Series: A Series where each element is modified by moving \"n\"\n        characters from the start to the end.\n    \"\"\"\n    # Shuffle the list\n    shuffle(l)\n    # Create a longer series by cycling through the shuffled list\n    series = pd.Series(l * 2)\n    # For each element in the series, randomly select n_groups characters from the start of the string and move them to the end\n    for i in range(len(series)):\n        series.iloc[i] = series.iloc[i][n_groups:] + series.iloc[i][:n_groups]\n    return series\nl = ['apple', 'banana', 'orange', 'grape', 'pear']\nn_groups = 3", "problem": "Generate a Series from a list \"l\". The function shuffles the list, then creates a longer series by cycling through the shuffled list. For each element in the series, it randomly selects n_groups characters from the start of the string and moves them to the end.\nThe function should output with:\n    pd.Series: A Series where each element is modified by moving \"n\"\n    characters from the start to the end.\nYou should write self-contained code starting with:\n```\nfrom random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n```", "solution": "from random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n    if not l:\n        return pd.Series()\n\n    # Shuffle list once\n    shuffle(l)\n    # Precompute random indices for each element to avoid calling randint excessively\n    random_shifts = [(randint(1, max(1, len(x) - 1)), randint(1, max(1, len(x) - 1))) for x in l]\n\n    # Create the full list by applying the precomputed shifts\n    modified_elements = []\n    for _ in range(n_groups):\n        for element, (start, end) in zip(l, random_shifts):\n            new_element = element[start:] + element[:end] if len(element) > 1 else element\n            modified_elements.append(new_element)\n\n    # Convert the list to a Series\n    return pd.Series(modified_elements)", "pass": false}
{"task_id": "577", "program": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n\n    pass\nimport os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII, calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where each key is the normalized file name and each value is another dictionary with the file's size and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Args:\n        directory (str): The directory to process.\n\n    Returns:\n        dict: A dictionary where each key is a normalized file name, and the value is a dictionary containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n    \"\"\"\n    file_dict = {}\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            file_dict[unicodedata.normalize('NFKD', file).encode('ascii', 'ignore').decode()] = {\n                'Size': os.path.getsize(file_path),\n                'MD5 Hash': md5(open(file_path, 'rb').read()).hexdigest()\n            }\n    return file_dict\ndirectory = 'path/to/directory'", "problem": "Processes all files within the specified directory, normalizes their filenames to ASCII, calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where each key is the normalized file name and each value is another dictionary with the file's size and MD5 hash. This method is useful for file integrity checks and file organization tasks.\nThe function should output with:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n    containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n```", "solution": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n    files_info = {}\n\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n\n    return files_info", "pass": true}
{"task_id": "578", "program": "import unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n\n    pass\nimport unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n    \"\"\"Retrieves user information from the GitHub API for a given username, normalizes all string data to ASCII, and returns a dictionary of the normalized data.\n\n    Args:\n        username (str): The GitHub username to retrieve information for.\n\n    Returns:\n        dict: A dictionary with the user's data, where all string values are normalized to ASCII.\n\n    Raises:\n        requests.exceptions.HTTPError: For any HTTP response indicating an error.\n    \"\"\"\n    response = requests.get(f'{URL}{username}')\n    response.raise_for_status()\n    data = response.json()\n\n    normalized_data = {}\n    for key, value in data.items():\n        if isinstance(value, str):\n            normalized_data[key] = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n        else:\n            normalized_data[key] = value\n\n    return normalized_data\nusername = 'octocat'", "problem": "Retrieves user information from the GitHub API for a given username, normalizes all string data to ASCII, and returns a dictionary of the normalized data. This function demonstrates data retrieval from a web API and handling of Unicode data normalization.\nThe function should raise the exception for: requests.exceptions.HTTPError: For any HTTP response indicating an error.\nThe function should output with:\n    dict: A dictionary with the user's data, where all string values are normalized to ASCII.\nYou should write self-contained code starting with:\n```\nimport unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n```", "solution": "import unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n    response = requests.get(URL + username)\n    try:\n        response.raise_for_status()  # This will raise an HTTPError if the response was an error\n        user_data = response.json()\n    except requests.exceptions.HTTPError as e:\n        # Optionally, log the error or handle it according to your needs\n        error_msg = f\"Failed to fetch user data for '{username}'. HTTP status: {e.response.status_code} - {e.response.reason}.\"\n        raise Exception(error_msg) from e\n\n    normalized_user_data = {}\n    for key, value in user_data.items():\n        if isinstance(value, str):\n            normalized_value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode()\n            normalized_user_data[key] = normalized_value\n        else:\n            normalized_user_data[key] = value\n\n    return normalized_user_data", "pass": true}
{"task_id": "579", "program": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n\n    pass\nimport unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    \"\"\"\n    Reads a CSV file, normalizes the text in it to ASCII, counts the words, and returns the 10 most common words along with their frequencies as a matplotlib bar plot and a list of tuples.\n    The function assumes that the CSV file contains text data and that the file is properly formatted.\n    The function should raise the exception for:\n        FileNotFoundError: If the CSV file cannot be found at the specified path.\n        IOError: If there is an error in reading the file.\n    The function should output with:\n        tuple: A tuple containing matplotlib.axes.Axes object for the bar plot and a list of the 10 most common words with their frequencies.\n    \"\"\"\n    try:\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            text = [row[0] for row in reader]\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The specified CSV file cannot be found.\")\n    except IOError:\n        raise IOError(\"There was an error in reading the CSV file.\")\n\n    # Normalize text to ASCII\n    text = [unicodedata.normalize('NFKD', line).encode('ascii', 'ignore').decode('utf-8') for line in text]\n\n    # Count words\n    word_counts = Counter()\n    for line in text:\n        words = line.split()\n        for word in words:\n            word_counts[word] += 1\n\n    # Get the 10 most common words\n    top_words = word_counts.most_common(10)\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(range(len(top_words)), [word[1] for word in top_words])\n    ax.set_xticks(range(len(top_words)))\n    ax.set_xticklabels([word[0] for word in top_words], rotation=90)\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"10 Most Common Words\")\n\n    return fig, top_words", "problem": "Reads a CSV file, normalizes the text in it to ASCII, counts the words, and returns the 10 most common words along with their frequencies as a matplotlib bar plot and a list of tuples.\nNote that: The function assumes that the CSV file contains text data and that the file is properly formatted.\nThe function should raise the exception for: FileNotFoundError: If the CSV file cannot be found at the specified path. IOError: If there is an error in reading the file.\nThe function should output with:\n    tuple: A tuple containing matplotlib.axes.Axes object for the bar plot and a list of the 10 most common words\n    with their frequencies.\nYou should write self-contained code starting with:\n```\nimport unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n```", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    try:\n        words = []\n        with open(csv_file, 'r') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                for word in row:\n                    normalized_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode()\n                    words.append(normalized_word)\n\n        word_counter = Counter(words)\n        most_common_words = word_counter.most_common(10)\n        labels, values = zip(*most_common_words)\n        fig, ax = plt.subplots()\n        ax.bar(labels, values)\n        return ax, most_common_words\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {csv_file} was not found.\")\n    except IOError:\n        raise IOError(f\"There was an error reading the file {csv_file}.\")", "pass": false}
{"task_id": "580", "program": "import pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n\n    pass\nimport pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\nRANGE = 10000\nSIZE = 1000\nBIN_WIDTH = 100\ndef task_func():\n    # Generate random numbers\n    random_numbers = [random.randint(0, RANGE) for _ in range(SIZE)]\n\n    # Calculate moving average\n    moving_average = [statistics.mean(random_numbers[i-5:i]) for i in range(5, len(random_numbers))]\n\n    # Create DataFrame\n    df = pd.DataFrame({\"Random Numbers\": random_numbers, \"Moving Average\": moving_average})\n\n    # Plot histogram\n    plt.hist(df[\"Random Numbers\"], bins=int(BIN_WIDTH))\n    plt.xlabel(\"Random Numbers\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Random Numbers\")\n    plt.show()\n\n    return df", "problem": "Generates a pandas DataFrame with two columns, \"Random Numbers\" and \"Moving Average,\" filled with random integers and their moving average, respectively. Additionally, this function plots a histogram of the \"Random Numbers\" column. No Parameters.\nThe function should output with:\n    pd.DataFrame: A DataFrame with two columns:\n    \"Random Numbers\": Contains a list of randomly generated integers.\n    \"Moving Average\": Contains the moving average of the random integers,\n    calculated over a window that includes the current\n    and previous 5 integers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n```", "solution": "import pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n    numbers = [random.randint(0, RANGE) for _ in range(SIZE)]\n    moving_avg = [statistics.mean(numbers[max(0, i - 5):i + 1]) for i in range(SIZE)]\n\n    df = pd.DataFrame({\n        'Random Numbers': numbers,\n        'Moving Average': moving_avg\n    })\n\n    plt.hist(df['Random Numbers'],\n             bins=np.arange(min(df['Random Numbers']), max(df['Random Numbers']) + BIN_WIDTH, BIN_WIDTH))\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Random Numbers')\n    plt.ylabel('Frequency')\n    plt.show()\n\n    return df", "pass": false}
{"task_id": "581", "program": "import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n\n    pass\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n    \"\"\"\n    Create a list of random sinusoidal values and plot them in a graph.\n\n    Args:\n        size (int): The number of values to generate.\n        frequency (int): The frequency of the sinusoidal wave.\n\n    Returns:\n        Axes object: The plot of the sinusoidal wave.\n    \"\"\"\n    # Generate random values\n    values = [random.uniform(-RANGE, RANGE) for _ in range(size)]\n\n    # Create a sinusoidal wave\n    wave = [math.sin(2 * PI * frequency * value / RANGE) for value in values]\n\n    # Plot the wave\n    fig, ax = plt.subplots()\n    ax.plot(values, wave)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Sinusoidal Wave\")\n    ax.set_title(\"Sinusoidal Wave with Random Values\")\n    return ax", "problem": "Create a list of random sinusoidal values and plot them in a graph.\nThe function should output with:\n    Axes object: The plot of the sinusoidal wave.\nYou should write self-contained code starting with:\n```\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n```", "solution": "import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n    x_values = np.arange(0, size)\n    y_values = [math.sin((2 * PI / RANGE) * (x + int(RANGE * random.random()) * frequency)) for x in range(size)]\n    \n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values)\n    \n    return ax", "pass": true}
{"task_id": "582", "program": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    # Generate normally distributed random numbers\n    x = np.random.normal(size=size)\n\n    # Create a figure object\n    fig = plt.figure()\n\n    # Plot the histogram\n    plt.hist(x, bins=50, density=True, alpha=0.5, label='Histogram')\n\n    # Plot the PDF\n    x_pdf = np.linspace(x.min(), x.max(), 1000)\n    y_pdf = stats.norm.pdf(x_pdf, loc=x.mean(), scale=x.std())\n    plt.plot(x_pdf, y_pdf, label='PDF')\n\n    # Add a title and labels\n    plt.title('Histogram and PDF of Normally Distributed Random Numbers')\n    plt.xlabel('Value')\n    plt.ylabel('Probability')\n\n    # Add a legend\n    plt.legend()\n\n    # Return the figure object\n    return fig", "problem": "Create a list of normally distributed random numbers and plot their histogram and probability density function (PDF).\nThe function should output with:\n    matplotlib.figure.Figure: A figure object containing the histogram and PDF plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n```", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    data = np.random.randn(size)\n    mu, std = stats.norm.fit(data)\n\n    bin_edges = np.histogram_bin_edges(data, bins='auto')\n    number_of_bins = len(bin_edges) - 1\n    \n    fig, ax = plt.subplots()\n    ax.hist(data, bins=number_of_bins, density=True, alpha=0.6, color='g')\n    \n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, size)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    return fig", "pass": false}
{"task_id": "583", "program": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n\n    pass\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate an RSA key pair\n    key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n\n    # Generate a random password for encryption\n    password = get_random_bytes(32)\n\n    # Generate a random nonce for encryption\n    nonce = get_random_bytes(16)\n\n    # Encrypt the private key with AES encryption\n    cipher = AES.new(password, AES.MODE_GCM, nonce=nonce)\n    encrypted_private_key = cipher.encrypt(key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.TraditionalOpenSSL,\n        encryption_algorithm=serialization.NoEncryption()\n    ))\n\n    # Save the encrypted private key to a file\n    filename = f\"private_key_{b64encode(nonce).decode('utf-8')}.txt\"\n    with open(filename, \"wb\") as f:\n        f.write(encrypted_private_key)\n\n    # Return the public key, filename, password, and nonce\n    return key.public_key(), filename, password, nonce", "problem": "Generates an RSA public and private key pair and saves the private key in a file after encrypting it with a password using AES encryption. Returns the public key and the filename of the encrypted private key, along with encryption details for testing. The name of the output file is a in the format of \"private_key_<number>.txt\", where <number> is a the hex representation of the 8 randomly generated bytes.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename where the encrypted private key is stored.\n    bytes: The encryption password, for testing decryption.\n    bytes: The encryption nonce, for testing decryption.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n```", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    (pub_key, priv_key) = rsa.newkeys(512)\n    password = get_random_bytes(16)\n\n    cipher = AES.new(password, AES.MODE_EAX)\n    nonce = cipher.nonce\n    priv_key_encrypted, tag = cipher.encrypt_and_digest(priv_key.save_pkcs1())\n\n    priv_key_encrypted = b64encode(priv_key_encrypted).decode('utf-8')\n\n    filename = f'private_key_{os.urandom(8).hex()}.txt'\n    with open(filename, 'w') as f:\n        f.write(priv_key_encrypted)\n\n    return pub_key, filename, password, nonce", "pass": false}
{"task_id": "584", "program": "import rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n\n    pass\nimport rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Retrieve the content from the specified URL\n    try:\n        response = urllib.request.urlopen(url)\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Error reaching the server: {e}\")\n\n    # Calculate the SHA256 hash of the URL content\n    content = response.read()\n    hash = sha256(content).hexdigest()\n\n    # Sign the hash with the RSA private key\n    try:\n        signature = rsa.sign(hash.encode(), private_key, \"SHA-256\")\n    except rsa.pkcs1.VerificationError as e:\n        raise ValueError(f\"Error signing the hash with the RSA private key: {e}\")\n\n    # Return the public key, signed hash, and hashed URL content\n    return (public_key, signature.hex(), content)\nurl = \"https://www.example.com\"", "problem": "Generates RSA public and private keys, retrieves the content from the specified URL, calculates its SHA256 hash, and signs the hash with the private key. Returns the public key and the signed hash as a hexadecimal string.\nThe function should raise the exception for: ValueError: If there's an issue reaching the server (e.g., network error, invalid URL) or if the server returns an HTTP error. rsa.pkcs1.VerificationError: If there's a failure in signing the hash with the RSA private key. urllib.error.URLError: If the server is not reachable\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The hexadecimal string of the signed SHA256 hash of the URL content.\n    bytes: The hashed URL content, for verification purpose\nYou should write self-contained code starting with:\n```\nimport rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n```", "solution": "import rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n    try:\n        (pub_key, priv_key) = rsa.newkeys(512)\n\n        response = urllib.request.urlopen(url)\n        content = response.read()\n        hash_value = sha256(content).digest()\n        \n        signed_hash = rsa.sign(hash_value, priv_key, 'SHA-256').hex()\n\n        return pub_key, signed_hash, hash_value\n    except urllib.error.HTTPError as e:\n        raise ValueError(f\"Server returned an HTTP error: {e.code} {e.reason}\") from e\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(f\"Failed to reach the server. URL might be invalid: {e}\") from e\n    except rsa.pkcs1.VerificationError as e:\n        raise rsa.pkcs1.VerificationError(f\"Failed to sign the hash: {e}\") from e    ", "pass": false}
{"task_id": "585", "program": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n\n    pass\nimport rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n    # Generate RSA public and private keys\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Encrypt all files in the specified directory using the public key\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), \"rb\") as f:\n            encrypted_data = rsa.encrypt(f.read(), public_key)\n        with open(os.path.join(directory, filename + \".enc\"), \"wb\") as f:\n            f.write(encrypted_data)\n\n    # Create a zip file containing the encrypted files\n    zip_filename = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zip_filename, \"w\") as zip_file:\n        for filename in os.listdir(directory):\n            if filename.endswith(\".enc\"):\n                zip_file.write(os.path.join(directory, filename))\n\n    # Return the public key and the name of the zip file\n    return (public_key, zip_filename)", "problem": "Generates RSA public and private keys, encrypts all files in the specified directory using the public key, and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\nNote that: This method directly encrypts file data with RSA, which is not recommended for large files or production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to encrypt the actual data.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n```", "solution": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n\n    return pub_key, zipfile_name", "pass": false}
{"task_id": "586", "program": "import rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n\n    pass\nimport rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    private_key, public_key = rsa.newkeys(2048)\n\n    # Read the contents of the file\n    with open(file_path, \"rb\") as f:\n        file_contents = f.read()\n\n    # Generate a Fernet key\n    fernet_key = Fernet.generate_key()\n\n    # Encrypt the file contents with the Fernet key\n    fernet = Fernet(fernet_key)\n    encrypted_file_contents = fernet.encrypt(file_contents)\n\n    # Encrypt the Fernet key with the RSA public key\n    encrypted_fernet_key = rsa.encrypt(fernet_key, public_key)\n\n    # Save the encrypted file contents and Fernet key to separate files\n    with open(\"encrypted_file.bin\", \"wb\") as f:\n        f.write(encrypted_file_contents)\n    with open(\"encrypted_fernet_key.bin\", \"wb\") as f:\n        f.write(encrypted_fernet_key)\n\n    return public_key, \"encrypted_file.bin\", \"encrypted_fernet_key.bin\"", "problem": "Generates RSA public and private keys and uses Fernet symmetric encryption to encrypt the contents of a specified file. The Fernet key is then encrypted with the public RSA key. The encrypted file contents and the encrypted Fernet key are saved in separate files. This method demonstrates a hybrid encryption approach where symmetric encryption is used for the file contents and asymmetric encryption for the encryption key.\nThe function should output with:\n    PublicKey: The RSA public key.\n    str: The filename of the encrypted file.\n    str: The filename of the file containing the encrypted Fernet key.\nYou should write self-contained code starting with:\n```\nimport rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n```", "solution": "import rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    fernet_key = Fernet.generate_key()\n    fernet = Fernet(fernet_key)\n\n    with open(file_path, 'rb') as f:\n        data = f.read()\n        encrypted_data = fernet.encrypt(data)\n\n    encrypted_file = file_path + '.encrypted'\n    with open(encrypted_file, 'wb') as f:\n        f.write(encrypted_data)\n\n    encrypted_fernet_key = rsa.encrypt(fernet_key, pub_key)\n    encrypted_key_file = 'fernet_key.encrypted'\n    with open(encrypted_key_file, 'wb') as f:\n        f.write(b64encode(encrypted_fernet_key))\n\n    return pub_key, encrypted_file, encrypted_key_file", "pass": false}
{"task_id": "587", "program": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n\n    pass\nimport rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA public and private keys\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    public_key = private_key.public_key()\n\n    # Encrypt the file using AES encryption\n    with open(file_path, \"rb\") as f_in:\n        file_data = f_in.read()\n    aes_key = os.urandom(32)\n    aes_iv = os.urandom(16)\n    aes_cipher = Cipher(\n        algorithms.AES(aes_key),\n        modes.CBC(aes_iv),\n        backend=default_backend()\n    )\n    encryptor = aes_cipher.encryptor()\n    ciphertext = encryptor.update(file_data) + encryptor.finalize()\n\n    # Encrypt the AES key with the public RSA key\n    encrypted_aes_key = public_key.encrypt(\n        aes_key,\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n\n    # Save the encrypted file and the encrypted AES key\n    encrypted_file_path = file_path + \".enc\"\n    with open(encrypted_file_path, \"wb\") as f_out:\n        f_out.write(ciphertext)\n    encrypted_aes_key_path = file_path + \".aeskey\"\n    with open(encrypted_aes_key_path, \"wb\") as f_out:\n        f_out.write(encrypted_aes_key)\n\n    return public_key, encrypted_file_path, encrypted_aes_key_path", "problem": "Generates RSA public and private keys, encrypts a file using AES encryption, and then encrypts the AES key with the public RSA key. The encrypted file and the encrypted AES key are saved in separate new files. This method demonstrates a hybrid encryption approach.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the encrypted file.\n    str: The filename of the file containing the encrypted AES key.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n```", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    aes_key = os.urandom(32)\n    iv = os.urandom(16)\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n\n    with open(file_path, 'rb') as f:\n        data = f.read()\n        padder = padding.PKCS7(128).padder()\n        padded_data = padder.update(data) + padder.finalize()\n        encryptor = cipher.encryptor()\n        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    encrypted_file = file_path + '.encrypted'\n    with open(encrypted_file, 'wb') as f:\n        f.write(encrypted_data)\n\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n    encrypted_key_file = 'aes_key.encrypted'\n    with open(encrypted_key_file, 'wb') as f:\n        f.write(b64encode(encrypted_aes_key))\n\n    return pub_key, encrypted_file, encrypted_key_file", "pass": false}
{"task_id": "588", "program": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nRANGE = 100\nSIZE = 1000\ndef task_func():\n    # Generate random integers within the specified range\n    x = np.random.randint(0, RANGE, size=SIZE)\n    y = np.random.randint(0, RANGE, size=SIZE)\n\n    # Create a DataFrame with the generated integers\n    df = pd.DataFrame({'X': x, 'Y': y})\n\n    # Plot the DataFrame using a scatter plot\n    sns.scatterplot(data=df, x='X', y='Y')\n    plt.show()\n\n    return df", "problem": "Generates a DataFrame with two columns, 'X' and 'Y', each filled with random integers within a specified range, and plots these points using a scatter plot. The visualization is created using Seaborn on top of Matplotlib. The function is designed to be parameter-free for simplicity, utilizing constants for configuration. No Parameters.\nThe function should output with:\n    pd.DataFrame: A DataFrame with 'X' and 'Y' columns containing the generated random integers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n```", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n    # Generate the DataFrame with random integers within the specified range [0, RANGE)\n    df = pd.DataFrame({\n        'X': np.random.randint(0, RANGE, SIZE),\n        'Y': np.random.randint(0, RANGE, SIZE)\n    })\n\n    # Draw a scatter plot using Seaborn for a more refined visual output\n    sns.scatterplot(data=df, x='X', y='Y')\n    plt.show()\n\n    return df", "pass": true}
{"task_id": "589", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n    # Generate random points within a specified range and size\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Apply KMeans clustering to the points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the clustered points with each cluster displayed in a different color\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n\n    # Highlight the centroids of the clusters\n    centroids = kmeans.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], c='black', s=200, alpha=0.5)\n\n    plt.show()\n\n    return data, kmeans", "problem": "Generates a set of 2D random points within a specified range and size, applies KMeans clustering to these points, and plots the results with cluster centroids. The function creates a scatter plot of the clustered points with each cluster displayed in a different color and the centroids of these clusters highlighted.\nThe function should output with:\n    A tuple containing the numpy array of data points and the fitted KMeans model.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n\n    return data, kmeans", "pass": true}
{"task_id": "590", "program": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n\n    pass\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    \"\"\"\n    Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\n    Note that: The function requires internet connectivity to fetch HTML content.\n    The function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\n    The function should output with:\n        pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n        corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n        the text and the hyperlink reference of the anchor tag, respectively.\n        'fetch_time' contains the timestamp of when the data was fetched in the format\n        'YYYY-MM-DD HH:MM:SS'.\n    \"\"\"\n    if not url:\n        raise ValueError(\"URL is empty or invalid\")\n\n    try:\n        response = urllib.request.urlopen(url)\n    except urllib.error.URLError as e:\n        raise URLError(f\"Error fetching URL: {e}\")\n\n    html = response.read()\n    doc = pq(html)\n    anchors = doc(\"a\")\n\n    data = []\n    for anchor in anchors:\n        data.append({\n            \"text\": anchor.text,\n            \"href\": anchor.attrib[\"href\"],\n            \"fetch_time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        })\n\n    df = pd.DataFrame(data)\n    return df\nurl = \"https://www.example.com\"", "problem": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n\n    if not url:\n        raise ValueError(\"URL must not be empty.\")\n\n    try:\n        with urllib.request.urlopen(url) as res:\n            html = res.read().decode()\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(f\"Error fetching URL {url}: {e}\")\n\n    d = pq(html)\n    anchors = [(a.text, a.get('href')) for a in d('a')]\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    df = pd.DataFrame(anchors, columns=['text', 'href'])\n    df['fetch_time'] = fetch_time\n    return df", "pass": false}
{"task_id": "591", "program": "from datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n\n    pass\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n    \"\"\"\n    Generate temperature data for the specified number of hours, save it in a CSV file, and plot the data using matplotlib.\n    Data Structure: The function uses a dictionary to manage the generated temperature data with keys: 'Time', 'Temperature', and 'Category'.\n    The function should output with:\n        tuple:\n            str: The path of the generated CSV file.\n            Axes: The plot object for further manipulation or saving.\n    \"\"\"\n    # Generate temperature data\n    data = {'Time': [], 'Temperature': [], 'Category': []}\n    for i in range(hours):\n        temp = randint(0, 100)\n        category = TEMP_CATEGORIES[0] if temp < 30 else (TEMP_CATEGORIES[1] if temp < 60 else TEMP_CATEGORIES[2])\n        data['Time'].append(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n        data['Temperature'].append(temp)\n        data['Category'].append(category)\n\n    # Save data to CSV file\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\n\n    # Plot data\n    fig, ax = plt.subplots()\n    ax.plot(data['Time'], data['Temperature'], label='Temperature')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.set_title('Temperature Data')\n    ax.legend()\n\n    return file_path, ax\nhours = 10", "problem": "Generate temperature data for the specified number of hours, save it in a CSV file, and plot the data using matplotlib. Data Structure: The function uses a dictionary to manage the generated temperature data with keys: 'Time', 'Temperature', and 'Category'.\nThe function should output with:\n    tuple:\n    str: The path of the generated CSV file.\n    Axes: The plot object for further manipulation or saving.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n```", "solution": "from datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n\n    data = {'Time': [], 'Temperature': [], 'Category': []}\n    for i in range(hours):\n        temp = randint(-10, 40)  # random temperature between -10 and 40\n        data['Time'].append(datetime.now().strftime('%H:%M:%S.%f'))\n        data['Temperature'].append(temp)\n        if temp < 0:\n            data['Category'].append(TEMP_CATEGORIES[0])\n        elif temp > 25:\n            data['Category'].append(TEMP_CATEGORIES[2])\n        else:\n            data['Category'].append(TEMP_CATEGORIES[1])\n\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\n    \n    ax = df.plot(x = 'Time', y = 'Temperature', kind = 'line', title=\"Temperature Data Over Time\")\n    plt.show()\n\n    return file_path, ax", "pass": true}
{"task_id": "592", "program": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n\n    pass\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number of hours and save it in a CSV file with columns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\n\n    Args:\n        hours (int): Number of hours to generate data for.\n        output_dir (str): Output directory for the CSV file.\n    \"\"\"\n    # Create a CSV file with the specified output directory and name\n    csv_file = os.path.join(output_dir, f'sensor_data_{hours}h.csv')\n    with open(csv_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n\n        # Write the header row\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n\n        # Generate data for the specified number of hours\n        for i in range(hours):\n            # Generate random data for each sensor\n            temperature = randint(10, 30)\n            humidity = randint(20, 80)\n            pressure = randint(900, 1100)\n\n            # Write the data to the CSV file\n            writer.writerow([datetime.now().strftime('%Y-%m-%d %H:%M:%S'), temperature, humidity, pressure])\n\n    print(f'Sensor data for {hours} hours saved to {csv_file}')", "problem": "Create sensor data for the specified number of hours and save it in a CSV file with coloumns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\nThe function should output with:\n    hours (int): Number of hours to generate data for.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    FILE_PATH = os.path.join(output_dir, 'sensor_data.csv')\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    data = [['Time'] + SENSORS]\n    for i in range(hours):\n        row = [datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')] + [randint(0, 100) for _ in SENSORS]\n        data.append(row)\n\n    with open(FILE_PATH, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n\n    return FILE_PATH", "pass": false}
{"task_id": "593", "program": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n\n    pass\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle types over a specified number of hours,\n    saves the data to a CSV file with columns 'Time', 'Car', 'Bus', 'Truck', and 'Bike',\n    and plots the data in a line chart with 'Time' on x-axis and 'Vehicle Count' on y-axis.\n\n    The function should output with:\n        tuple: Path to the CSV file and the matplotlib axes object of the line plot.\n    \"\"\"\n    # Create a dictionary to store the vehicle counts for each type\n    vehicle_counts = {vehicle_type: 0 for vehicle_type in VEHICLE_TYPES}\n\n    # Create a list to store the time data\n    time_data = []\n\n    # Generate traffic data for the specified number of hours\n    for hour in range(hours):\n        # Generate a random number of vehicles for each type\n        for vehicle_type in VEHICLE_TYPES:\n            vehicle_counts[vehicle_type] += randint(0, 10)\n\n        # Add the time data to the list\n        time_data.append(datetime.now().strftime('%H:%M:%S'))\n\n    # Create a pandas DataFrame from the vehicle counts and time data\n    df = pd.DataFrame(vehicle_counts, index=time_data)\n\n    # Save the DataFrame to a CSV file\n    csv_file = os.path.join(output_dir, f'traffic_data_{hours}h.csv')\n    df.to_csv(csv_file, index_label='Time')\n\n    # Plot the data in a line chart\n    fig, ax = plt.subplots()\n    df.plot(ax=ax, kind='line', x='Time', y=VEHICLE_TYPES)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title(f'Traffic Data for {hours} Hours')\n\n    # Return the path to the CSV file and the matplotlib axes object\n    return csv_file, ax", "problem": "Generates traffic data for different vehicle types over a specified number of hours, saves the data to a CSV file with coloumns 'Time', 'Car', 'Bus', 'Truck', and 'Bike', and plots the data in a line chart with 'Time' on x-axis and 'Vehicle Count' on y-axis.\nThe function should output with:\n    tuple: Path to the CSV file and the matplotlib axes object of the line plot.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    FILE_PATH = os.path.join(output_dir, 'traffic_data.csv')\n    data = [['Time'] + VEHICLE_TYPES]\n    for i in range(hours):\n        row = [datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')] + [randint(0, 50) for _ in VEHICLE_TYPES]\n        data.append(row)\n\n    with open(FILE_PATH, 'w+', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n\n    df = pd.read_csv(FILE_PATH)\n\n    if df.empty:\n        return FILE_PATH, None\n\n    ax = df.plot(x='Time', y=VEHICLE_TYPES, kind='line', title='Traffic Data Over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Vehicle Count')\n    plt.tight_layout()\n    plt.show()\n\n    return FILE_PATH, ax", "pass": false}
{"task_id": "594", "program": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n\n    pass\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number of hours, save it in a CSV file with columns 'Time' and 'Condition' and back up the file to a backup directory.\n    The function should output with:\n        str: The path of the generated CSV file.\n    \"\"\"\n    # Create a new CSV file\n    csv_file = os.path.join(output_dir, f'weather_data_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv')\n    with open(csv_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Time', 'Condition'])\n\n        # Generate weather data for the specified number of hours\n        for i in range(hours):\n            time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n            writer.writerow([time, condition])\n\n    # Back up the CSV file to a backup directory\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    shutil.copy(csv_file, backup_dir)\n\n    return csv_file", "problem": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    FILE_PATH = os.path.join(output_dir, 'weather_data.csv')\n    BACKUP_PATH = os.path.join(output_dir, 'backup/')\n    data = [['Time', 'Condition']]\n    for i in range(hours):\n        row = [datetime.now().strftime('%H:%M:%S.%f'), WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS)-1)]]\n        data.append(row)\n\n    with open(FILE_PATH, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n    \n    if not os.path.exists(BACKUP_PATH):\n        os.makedirs(BACKUP_PATH)\n    shutil.copy(FILE_PATH, BACKUP_PATH)\n\n    return FILE_PATH", "pass": false}
{"task_id": "595", "program": "import random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n\n    pass\nimport random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n    # Generate 'n' random integer numbers\n    numbers = [random.randint(0, total) for _ in range(n)]\n\n    # Sort the numbers\n    numbers.sort()\n\n    # Determine the insertion position for a new number\n    new_number = random.randint(0, total)\n    insertion_position = bisect.bisect_left(numbers, new_number)\n\n    # Return the sorted numbers and the insertion position\n    return numbers, insertion_position", "problem": "Generates 'n' random integer numbers such that their sum equals 'total', sorts these numbers, and determines the position where a new random number can be inserted to maintain the sorted order. The function uses a retry mechanism to ensure the generated numbers sum up to 'total'.\nThe function should output with:\n    tuple: A tuple containing the sorted numbers as an array and the insertion position for a new number.\nYou should write self-contained code starting with:\n```\nimport random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n```", "solution": "import random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n    nums = []\n    while sum(nums) != total:\n        nums = [random.randint(0, total) for _ in range(n)]\n\n    nums.sort()\n    nums = array('i', nums)\n\n    new_num = random.randint(0, total)\n    pos = bisect.bisect(nums, new_num)\n\n    return (nums, pos)", "pass": false}
{"task_id": "596", "program": "import time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n\n    pass\nimport time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n    start_time = time.time()\n    timestamps = []\n    values = []\n    while time.time() - start_time < duration:\n        timestamps.append(datetime.now().strftime('%H:%M:%S.%f'))\n        values.append(randint(0, 100))\n        time.sleep(0.1)\n    return (timestamps, values)\nduration = 5", "problem": "Generate and draw random data in real time for the specified duration.\nThe function should output with:\n    tuple: A tuple containing two lists.\n    The first list contains timestamps (as strings) in the format '%H:%M:%S.%f'.\n    The second list contains the generated random values.\nYou should write self-contained code starting with:\n```\nimport time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n```", "solution": "import time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n    # Constants\n    VALUES_RANGE = (0, 100)\n    PLOT_INTERVAL = 0.1\n\n    plt.ion()\n    x_data = []\n    y_data = []\n\n    end_time = time.time() + duration\n    while time.time() < end_time:\n        x_data.append(datetime.now().strftime('%H:%M:%S.%f'))\n        y_data.append(randint(*VALUES_RANGE))\n\n        plt.clf()\n        plt.plot(x_data, y_data)\n        plt.draw()\n        plt.pause(PLOT_INTERVAL)\n\n    plt.ioff()\n    plt.show()\n\n    return x_data, y_data", "pass": true}
{"task_id": "597", "program": "import pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n\n    pass\nimport pandas as pd\nimport time\ndef task_func(data, letter):\n    \"\"\"\n    Filters rows in a dictionary where the 'Name' column values start with a specified letter.\n    First, convert the dict to a DataFrame and then filter rows in this DataFrame.\n    The function should output with:\n        pd.Series: A Series of filtered 'Name' column.\n    \"\"\"\n    # Convert the dict to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Filter rows where the 'Name' column values start with the specified letter\n    filtered_df = df[df['Name'].str.startswith(letter)]\n\n    # Return the filtered 'Name' column as a Series\n    return filtered_df['Name']\ndata = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n        'Age': [25, 30, 35, 40, 20]}", "problem": "Filters rows in a dictionary where the 'Name' column values start with a specified letter. First, convert the dict to a DataFrame and then filter rows in this DataFrame.\nThe function should output with:\n    pd.Series: A Series of filtered 'Name' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n```", "solution": "import pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n    df = pd.DataFrame(data)\n    start_time = time.time()\n    regex = f'^{letter}'\n    filtered_df = df[df['Name'].str.contains(regex, case=False, regex=True)]\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return filtered_df['Name'].value_counts()", "pass": false}
{"task_id": "598", "program": "import pandas as pd\nimport time\ndef task_func(df, letter):\n\n    pass\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n    \"\"\"\n    The function filters rows in a dict of list in which the values of the 'Word' column begin with a specified letter. It first converts the dict to Dataframe, then calculates the length of the words in the filtered column and returns a dictionary of word lengths and their respective counts.\n    The function should output with:\n        dict: A dictionary of word lengths and their counts.\n    \"\"\"\n    # Convert the dict to a DataFrame\n    df = pd.DataFrame(df)\n\n    # Filter the rows where the 'Word' column begins with the specified letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the length of the words in the filtered column\n    word_lengths = filtered_df['Word'].str.len()\n\n    # Return a dictionary of word lengths and their counts\n    return word_lengths.value_counts().to_dict()\ndf = {'Word': ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']}\nletter = 'c'", "problem": "The function filters rows in a dict of list in which the values of the 'Word' column begin with a specified letter. It first convert the dict to Datafrome, then calculates the length of the words in the filtered column and returns a dictionary of word lengths and their respective counts.\nThe function should output with:\n    dict: A dictionary of word lengths and their counts.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n```", "solution": "import pandas as pd\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    count_dict = word_lengths.value_counts().to_dict()\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n\n    return count_dict", "pass": true}
{"task_id": "599", "program": "import pandas as pd\nimport time\ndef task_func(df, letter):\n\n    pass\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a specified letter, calculates the lengths of these words, and returns a histogram plot of the word lengths.\n    The function should output with:\n        Axes: A histogram plot of word lengths for words starting with the specified letter.\n    \"\"\"\n    # Convert the input dictionary to a DataFrame\n    df = pd.DataFrame(df)\n\n    # Filter rows where 'Word' column values start with the specified letter\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the lengths of the filtered words\n    df['Length'] = df['Word'].str.len()\n\n    # Create a histogram plot of the word lengths\n    ax = df['Length'].hist(bins=10)\n\n    # Return the histogram plot\n    return ax\ndf = {'Word': ['apple', 'banana', 'cherry', 'date', 'elephant'],\n      'Length': [5, 6, 6, 4, 8]}\nletter = 'c'", "problem": "This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a specified letter, calculates the lengths of these words, and returns returns a histogram plot of the word lengths.\nThe function should output with:\n    Axes: A histogram plot of word lengths for words starting with the specified letter.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n```", "solution": "import pandas as pd\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n\n    # Check if filtered_df is empty to handle scenario with no words starting with specified letter\n    if filtered_df.empty:\n        print(f\"No words start with the letter '{letter}'.\")\n        return None  # Return None to indicate no data for plotting\n\n    # Proceed with plotting only if data is available\n    ax = word_lengths.hist(bins=range(1, int(word_lengths.max()) + 2), alpha=0.7, edgecolor='black')\n    ax.set_title(f\"Histogram of Word Lengths starting with '{letter}'\")\n    ax.set_xlabel(\"Word Length\")\n    ax.set_ylabel(\"Frequency\")\n\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return ax", "pass": false}
{"task_id": "600", "program": "import numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n    # Convert the input dictionary to a DataFrame\n    df = pd.DataFrame(df)\n\n    # Filter rows where 'Word' column values start with the specified letter\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the lengths of the words\n    df['Length'] = df['Word'].str.len()\n\n    # Calculate basic statistics of the word lengths\n    mean = df['Length'].mean()\n    median = df['Length'].median()\n    mode = df['Length'].mode()[0]\n\n    # Return a dictionary of the statistics\n    return {'mean': mean, 'median': median, 'mode': mode}\ndf = {'Word': ['apple', 'banana', 'cherry', 'date', 'elephant']}", "problem": "This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the word lengths.\nThe function should output with:\n    dict: A dictionary of mean, median, and mode of word lengths.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n\n    return statistics", "pass": true}
{"task_id": "601", "program": "import seaborn as sns\nimport time\ndef task_func(df, letter):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport time\ndef task_func(df, letter):\n    \"\"\"\n    Filters rows in a DataFrame based on the starting letter of the values in the 'Word' column.\n    It then calculates the lengths of these words and returns a box plot representing the distribution of these lengths.\n    The function should output with:\n        Axes: A box plot visualizing the distribution of the word lengths for words starting\n        with the specified letter. If the DataFrame is empty or the 'Word' column is missing,\n        returns None.\n    \"\"\"\n    # Check if the DataFrame is empty or the 'Word' column is missing\n    if df.empty or 'Word' not in df.columns:\n        return None\n\n    # Filter the DataFrame to only include words starting with the specified letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the lengths of the filtered words\n    lengths = filtered_df['Word'].str.len()\n\n    # Create a box plot of the lengths\n    ax = sns.boxplot(x=lengths)\n\n    # Return the box plot\n    return ax\ndf = pd.DataFrame({'Word': ['apple', 'banana', 'cherry', 'date', 'elephant']})", "problem": "Filters rows in a DataFrame based on the starting letter of the values in the 'Word' column. It then calculates the lengths of these words and returns a box plot representing the distribution of these lengths.\nThe function should output with:\n    Axes: A box plot visualizing the distribution of the word lengths for words starting\n    with the specified letter. If the DataFrame is empty or the 'Word' column is missing,\n    returns None.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport time\ndef task_func(df, letter):\n```", "solution": "import seaborn as sns\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    # Validate if 'Word' column exists in df\n    if 'Word' not in df.columns:\n        raise ValueError(\"The DataFrame should contain a 'Word' column.\")\n\n    # Handle empty DataFrame\n    if df.empty:\n        print(\"The DataFrame is empty.\")\n        return None\n\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    if filtered_df.empty:\n        print(f\"No words start with the letter '{letter}'.\")\n        return None\n\n    word_lengths = filtered_df['Word'].str.len()\n    ax = sns.boxplot(x=word_lengths)\n    ax.set_title(f\"Word Lengths Distribution for Words Starting with '{letter}'\")\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return ax", "pass": false}
{"task_id": "602", "program": "import numpy as np\nimport pandas as pd\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport os\nimport pandas as pd\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create a CSV file containing a 2D matrix populated exclusively with random lowercase letters.\n\n    Parameters\n    ----------\n    file_path : str\n        The path to the output CSV file.\n    output_dir : str, optional\n        The directory where the output CSV file will be written.\n        Defaults to './output'.\n\n    Returns\n    -------\n    None\n        Writes a CSV file to the specified path.\n    \"\"\"\n    # Generate a 2D matrix of random lowercase letters\n    matrix = np.random.choice(LETTERS, size=(10, 10))\n\n    # Convert the matrix to a Pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    # Write the DataFrame to a CSV file\n    df.to_csv(file_path, index=False)\nfile_path = 'test.csv'\ndf = pd.read_csv(file_path)", "problem": "Create a CSV file containing a 2D matrix populated exclusively with random lowercase letters.\nThe function should output with:\n    None: Writes a CSV file to the specified path.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n```", "solution": "import numpy as np\nimport pandas as pd\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.mkdir(output_dir)\n    matrix = pd.DataFrame(np.random.choice(LETTERS, (10, 10)))\n    matrix.to_csv(file_path, sep='\\t', header=False, index=False)\n\n    return None", "pass": false}
{"task_id": "603", "program": "import numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n    \"\"\"\n    Connects two 2D numeric arrays (matrices) along the second axis (columns), converts them into a Pandas DataFrame, and returns a string representation of the DataFrame.\n    The function should output with:\n        str: The string representation of the DataFrame without the index and header.\n    \"\"\"\n    # Concatenate the two matrices along the second axis (columns)\n    concatenated_matrix = np.concatenate((matrix1, matrix2), axis=1)\n\n    # Convert the concatenated matrix into a Pandas DataFrame\n    df = pd.DataFrame(concatenated_matrix)\n\n    # Return the string representation of the DataFrame without the index and header\n    return df.to_string(index=False, header=False)", "problem": "Connects two 2D numeric arrays (matrices) along the second axis (columns), converts them into a Pandas DataFrame, and returns a string representation of the DataFrame.\nThe function should output with:\n    str: The string representation of the DataFrame without the index and header.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n    combined_matrix = np.concatenate((matrix1, matrix2), axis=1)\n    df = pd.DataFrame(combined_matrix)\n    return df.to_string(index=False, header=False)", "pass": true}
{"task_id": "604", "program": "import subprocess\nimport logging\ndef task_func(filepath):\n\n    pass\nimport subprocess\nimport logging\ndef task_func(filepath):\n    \"\"\"\n    Attempts to compile a existing C++ file specified by 'filepath'. The output of the compilation process is logged, indicating whether the compilation was successful or not. This function is useful for automating the compilation of C++ code and tracking compilation results. The log should indicate whether the compilation was successful or if an error occurred.\n    The function should raise the exception for:\n        subprocess.CalledProcessError: If the compilation process fails.\n        FileNotFoundError: If the compiler is not found or the specified file does not exist.\n    The function should output with:\n        None: This function does not return anything but logs the outcome of the compilation process.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO)\n    logging.info(\"Compiling C++ file: %s\", filepath)\n    try:\n        subprocess.run([\"g++\", filepath], check=True)\n        logging.info(\"Compilation successful\")\n    except subprocess.CalledProcessError as e:\n        logging.error(\"Compilation failed with error: %s\", e)\n    except FileNotFoundError as e:\n        logging.error(\"File not found: %s\", e)", "problem": "Attempts to compile a existing C++ file specified by 'filepath'. The output of the compilation process is logged, indicating whether the compilation was successful or not. This function is useful for automating the compilation of C++ code and tracking compilation results. The log should indicate whether the compilation was successful or if an error occurred.\nThe function should raise the exception for: subprocess.CalledProcessError: If the compilation process fails. FileNotFoundError: If the compiler is not found or the specified file does not exist.\nThe function should output with:\n    None: This function does not return anything but logs the outcome of the compilation process.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport logging\ndef task_func(filepath):\n```", "solution": "import subprocess\nimport logging\ndef task_func(filepath):\n    # Configure logging\n    logging.basicConfig(level=logging.INFO)\n\n    # Try to compile the C++ file\n    try:\n        subprocess.check_call(['g++', filepath, '-o', filepath.split('.')[0]])\n        logging.info('Successfully compiled %s', filepath)\n    except subprocess.CalledProcessError as e:\n        logging.error('Failed to compile %s: %s', filepath, e)\n\n    except FileNotFoundError as e:\n        logging.error('Compiler not found or file does not exist: %s', e)", "pass": false}
{"task_id": "605", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    \"\"\"\n    Visualize a 2D numeric array (matrix) as a heatmap using matplotlib, specifying a cmap for the color mapping and interpolation to control the pixel rendering.\n    The function should output with:\n        ax (matplotlib.axes._axes.Axes): The Axes object with the heatmap of the 'hot' colormap.\n    \"\"\"\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Set the colormap and interpolation\n    cmap = 'hot'\n    interpolation = 'nearest'\n\n    # Plot the heatmap\n    im = ax.imshow(matrix, cmap=cmap, interpolation=interpolation)\n\n    # Set the colorbar\n    cbar = fig.colorbar(im, ax=ax)\n\n    # Set the title and labels\n    ax.set_title('Heatmap')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n\n    # Return the Axes object\n    return ax\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Visualize a 2D numeric array (matrix) as a heatmap using matplotlib, specifying a cmap for the color mapping and interpolation to control the pixel rendering.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object with the heatmap of th 'hot' colormap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    df = pd.DataFrame(matrix)\n\n    fig, ax = plt.subplots()\n    ax.imshow(df, cmap='hot', interpolation='nearest')\n\n    return ax", "pass": true}
{"task_id": "606", "program": "import pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n\n    pass\nimport pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    The function should output with:\n        DataFrame: The normalized DataFrame.\n    \"\"\"\n    # Calculate the mean and standard deviation of each column\n    mean = matrix.mean(axis=0)\n    std = matrix.std(axis=0)\n\n    # Normalize the data using the Z score\n    normalized_data = (matrix - mean) / std\n\n    # Create a DataFrame with the normalized data\n    normalized_df = pd.DataFrame(normalized_data, columns=matrix.columns, index=matrix.index)\n\n    return normalized_df\nmatrix = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})", "problem": "Normalizes a 2D numeric array (matrix) using the Z score.\nThe function should output with:\n    DataFrame: The normalized DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n```", "solution": "import pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "pass": false}
{"task_id": "607", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    \"\"\"\n    Remove rows from a dataframe based on column values and generate random scatter plots.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The input dataframe.\n    tuples : list\n        A list of tuples containing the column names and the values to remove.\n    n_plots : int\n        The number of scatter plots to generate.\n\n    Returns\n    -------\n    pd.DataFrame\n        The DataFrame after removal of specified rows.\n    list\n        A list containing matplotlib Axes objects of the generated plots.\n    \"\"\"\n    # Remove rows based on column values\n    for col, val in tuples:\n        df = df[df[col] != val]\n\n    # Generate random scatter plots\n    fig, axs = plt.subplots(n_plots, figsize=(10, 10))\n    for i, col in enumerate(sample(COLUMNS, n_plots)):\n        axs[i].scatter(df[col], df['E'])\n        axs[i].set_xlabel(col)\n        axs[i].set_ylabel('E')\n        axs[i].set_title(f'Scatter plot of {col} vs E')\n\n    return df, axs\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4, 5],\n    'B': [6, 7, 8, 9, 10],\n    'C': [11, 12, 13, 14, 15],\n    'D': [16, 17, 18, 19, 20],\n    'E': [21, 22, 23, 24, 25]\n})\ntuples = [('A', 1), ('B', 7)]\nn_plots = 3", "problem": "Remove rows from a dataframe based on column values and generate random scatter plots.\nThe function should output with:\n    pd.DataFrame: The DataFrame after removal of specified rows.\n    list: A list containing matplotlib Axes objects of the generated plots.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n\n    # Ensure tuple elements match DataFrame columns for removal\n    df = df[~df.apply(tuple, axis=1).isin(tuples)]\n\n    # Generate random plots\n    plots = []\n    for _ in range(n_plots):\n        selected_columns = sample(COLUMNS, 2)\n        ax = df.plot(x=selected_columns[0], y=selected_columns[1], kind='scatter')\n        plots.append(ax)\n\n    plt.show()\n\n    return df, plots", "pass": false}
{"task_id": "608", "program": "import seaborn as sns\nfrom random import sample\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nfrom random import sample\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    # Remove rows from the DataFrame based on the values of multiple columns\n    df = df.drop(df[df[tuples].isin([0, 0, 0, 0, 0]).all(axis=1)].index)\n\n    # Create n random pairs of two columns against each other\n    pairs = sample(COLUMNS, n_plots)\n    pair_plots = []\n    for i in range(n_plots):\n        pair_plots.append(sns.pairplot(df, x_vars=pairs[i], y_vars=pairs[i+1]))\n\n    return df, pair_plots\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 3, 4, 5, 6], 'C': [3, 4, 5, 6, 7], 'D': [4, 5, 6, 7, 8], 'E': [5, 6, 7, 8, 9]})\ntuples = [('A', 'B'), ('C', 'D'), ('E', 'A')]\nn_plots = 3", "problem": "Remove rows from a dataframe based on values of multiple columns, and then create n random pairs of two columns against each other to generate pairplots.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The modified DataFrame after removing specified rows.\n    list of Axes: A list containing the generated pairplots.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nfrom random import sample\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n```", "solution": "import seaborn as sns\nfrom random import sample\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    if not df.empty:\n        df = df[~df.apply(tuple, axis=1).isin(tuples)]\n\n    plots = []\n    if n_plots > 0 and not df.empty:\n        available_columns = df.columns.tolist()\n        for _ in range(min(n_plots, len(available_columns) // 2)):  # Ensure we have enough columns\n            # Randomly select two columns for pairplot\n            selected_columns = sample(available_columns, 2)\n            plot = sns.pairplot(df, vars=selected_columns)\n            plots.append(plot)\n\n    return df, plots", "pass": false}
{"task_id": "609", "program": "from itertools import combinations\nfrom random import sample\ndef task_func(df, tuples, n_plots):\n\n    pass\nfrom itertools import combinations\nfrom random import sample\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, tuples, n_plots):\n    # Remove rows from the DataFrame based on the tuples\n    df = df.drop(tuples)\n\n    # Generate up to n_plots scatter plots for random combinations of two columns\n    cols = df.columns.tolist()\n    plots = []\n    for i in range(n_plots):\n        col1, col2 = sample(cols, 2)\n        plots.append((col1, col2, df.plot.scatter(x=col1, y=col2)))\n\n    return df, plots\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 4, 6, 8, 10], 'C': [3, 6, 9, 12, 15]})\ntuples = [(1, 2), (3, 4)]\nn_plots = 3", "problem": "Removes rows from a DataFrame based on a list of tuples, each representing row values to match and remove. Generates up to 'n_plots' scatter plots for random combinations of two columns from the remaining DataFrame.\nThe function should output with:\n    pd.DataFrame: The DataFrame after specified rows have been removed.\n    list: A list of tuples, each containing a pair of column names used for the plot and the corresponding plot object.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nfrom random import sample\ndef task_func(df, tuples, n_plots):\n```", "solution": "from itertools import combinations\nfrom random import sample\ndef task_func(df, tuples, n_plots):\n    COLUMNS = ['A', 'B', 'C', 'D', 'E']\n    df = df.set_index(list('ABCDE')).drop(tuples, errors='ignore').reset_index()\n    plots = []\n    possible_combinations = list(combinations(COLUMNS, 2))\n    for _ in range(min(n_plots, len(possible_combinations))):\n        selected_columns = sample(possible_combinations, 1)[0]\n        possible_combinations.remove(selected_columns)\n        ax = df.plot.scatter(x=selected_columns[0], y=selected_columns[1])\n        plots.append((selected_columns, ax))\n    return df, plots", "pass": false}
{"task_id": "610", "program": "from random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n\n    pass\nfrom random import sample\nimport seaborn as sns\nimport pandas as pd\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    \"\"\"\n    Remove rows from a dataframe based on values of multiple columns, and then create n random joint plots of two columns against each other if the DataFrame is not empty.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The input DataFrame.\n    tuples : list\n        A list of tuples, where each tuple contains the column name and the value to remove.\n    n_plots : int\n        The number of joint plots to generate.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n        DataFrame: The modified DataFrame.\n        list: A list of generated joint plots (sns.JointGrid objects) if the DataFrame is not empty, otherwise an empty list.\n    \"\"\"\n    # Remove rows based on values of multiple columns\n    for col, val in tuples:\n        df = df[df[col] != val]\n\n    # Create n random joint plots of two columns against each other\n    joint_plots = []\n    if not df.empty:\n        for _ in range(n_plots):\n            cols = sample(COLUMNS, 2)\n            joint_plot = sns.jointplot(x=cols[0], y=cols[1], data=df)\n            joint_plots.append(joint_plot)\n\n    return df, joint_plots\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [1, 2, 3, 4, 5], 'C': [1, 2, 3, 4, 5], 'D': [1, 2, 3, 4, 5], 'E': [1, 2, 3, 4, 5]})\ntuples = [('A', 1), ('B', 2)]\nn_plots = 3", "problem": "Remove rows from a dataframe based on values of multiple columns, and then create n random joint plots of two columns against each other if the DataFrame is not empty.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The modified DataFrame.\n    list: A list of generated joint plots (sns.JointGrid objects) if the DataFrame is not empty, otherwise an empty list.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n```", "solution": "from random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    \n    # Drop rows based on tuples\n    df = df.set_index(list('ABCDE')).drop(tuples, errors='ignore').reset_index()\n    \n    plots = []\n    # Generate plots only if DataFrame is not empty\n    if not df.empty:\n        for _ in range(n_plots):\n            selected_columns = sample(COLUMNS, 2)\n            plot = sns.jointplot(data=df, x=selected_columns[0], y=selected_columns[1])\n            plots.append(plot)\n    \n    return df, plots", "pass": false}
{"task_id": "611", "program": "from random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n\n    pass\nfrom random import sample\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    \"\"\"\n    Removes rows from a DataFrame based on values of multiple columns, and then create n random line plots of two columns against each other.\n    The function should output with:\n        (pd.DataFrame, list): A tuple containing the modified DataFrame and a list of plot details.\n        Each entry in the plot details list is a tuple containing the two columns plotted against each other.\n    \"\"\"\n    # Remove rows based on values of multiple columns\n    df = df.drop(df[df[tuples[0][0]] == tuples[0][1]].index)\n    for i in range(1, len(tuples)):\n        df = df.drop(df[df[tuples[i][0]] == tuples[i][1]].index)\n\n    # Create n random line plots of two columns against each other\n    plot_details = []\n    for i in range(n_plots):\n        col1 = sample(COLUMNS, 1)[0]\n        col2 = sample(COLUMNS, 1)[0]\n        while col1 == col2:\n            col2 = sample(COLUMNS, 1)[0]\n        plot_details.append((col1, col2))\n        plt.plot(df[col1], df[col2], label=f'{col1} vs {col2}')\n        plt.legend()\n        plt.show()\n\n    return df, plot_details", "problem": "Removes rows from a DataFrame based on values of multiple columns, and then create n random line plots of two columns against each other.\nThe function should output with:\n    (pd.DataFrame, list): A tuple containing the modified DataFrame and a list of plot details.\n    Each entry in the plot details list is a tuple containing the two columns plotted against each other.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n```", "solution": "from random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    mask = df.apply(tuple, axis=1).isin(tuples)\n    df = df[~mask]\n\n    plot_details = []\n    for _ in range(min(n_plots, len(df))):\n        selected_columns = sample(COLUMNS, 2)\n        df.plot(x=selected_columns[0], y=selected_columns[1], kind='line')\n        plot_details.append((selected_columns[0], selected_columns[1]))\n\n    plt.show()\n\n    return df, plot_details", "pass": false}
{"task_id": "612", "program": "from random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n\n    pass\nfrom random import choice\nimport numpy as np\nimport pandas as pd\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n    \"\"\"\n    Generates a performance report DataFrame for teams, detailing goals and penalties.\n    For each team, the function fetches goal and penalty counts, calculates 'Penalties Cost'\n    using a random multiplier from a predefined list, and computes a 'Performance Score'\n    as the non-negative difference between goals and penalties.\n    Return a Dataframe with colomns 'Team', 'Goals', 'Penalties', 'Penalties Cost',\n    and 'Performance Score'.\n    \"\"\"\n    # Initialize an empty DataFrame\n    df = pd.DataFrame(columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n\n    # Iterate over the teams\n    for team in teams:\n        # Fetch goal and penalty counts\n        goals = np.random.randint(1, 10)\n        penalties = np.random.randint(1, 10)\n\n        # Calculate 'Penalties Cost' using a random multiplier from the predefined list\n        penalties_cost = np.random.choice(penalties_costs)\n\n        # Compute 'Performance Score' as the non-negative difference between goals and penalties\n        performance_score = np.abs(goals - penalties)\n\n        # Add a new row to the DataFrame\n        df = df.append({'Team': team, 'Goals': goals, 'Penalties': penalties,\n                        'Penalties Cost': penalties_cost, 'Performance Score': performance_score},\n                       ignore_index=True)\n\n    return df", "problem": "Generates a performance report DataFrame for teams, detailing goals and penalties. For each team, the function fetches goal and penalty counts, calculates 'Penalties Cost' using a random multiplier from a predefined list, and computes a 'Performance Score' as the non-negative difference between goals and penalties. Return a Dataframe with colomns 'Team', 'Goals', 'Penalties', 'Penalties Cost' and 'Performance Score'.\nThe function should output with:\n    pd.DataFrame: DataFrame with Team, Goals, Penalties, Penalties Cost, Performance Score.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n```", "solution": "from random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n    report_data = []\n    for team in teams:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        penalties_cost = team_penalties * choice(penalties_costs)\n        performance_score = np.max([0, team_goals - team_penalties])\n        report_data.append({\n            'Team': team,\n            'Goals': team_goals,\n            'Penalties': team_penalties,\n            'Penalties Cost': penalties_cost,\n            'Performance Score': performance_score\n        })\n\n    report_df = pd.DataFrame(report_data)\n    return report_df", "pass": false}
{"task_id": "613", "program": "import pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n\n    pass\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n    \"\"\"\n    Calculates net scores for teams ('Team A' to 'Team E') by subtracting penalties from goals and clips scores to stay within -10 to 10.\n    Visualizes results with a bar chart showing each team's adjusted scores 'Team' on the x-axis and score values 'Score' on the y-axis.\n    The function should output with:\n        DataFrame: A pandas DataFrame with columns 'Team' and 'Score', representing each team's net score.\n    \"\"\"\n    # Create a DataFrame with the given goals and penalties\n    df = pd.DataFrame({'Team': TEAMS, 'Goals': goals, 'Penalties': penalties})\n\n    # Calculate the net scores for each team\n    df['Net Score'] = df['Goals'] - df['Penalties']\n\n    # Clip the net scores to stay within the given range\n    df['Net Score'] = df['Net Score'].clip(GOALS_RANGE[0], GOALS_RANGE[1])\n\n    # Create a bar chart to visualize the results\n    ax = df.plot.bar(x='Team', y='Net Score', rot=0)\n    ax.set_ylabel('Net Score')\n    ax.set_xlabel('Team')\n    ax.set_title('Net Scores for Teams')\n\n    # Return the DataFrame with the net scores\n    return df\ngoals = [10, 5, 15, 20, 25]\npenalties = [5, 10, 15, 20, 25]", "problem": "Calculates net scores for teams ('Team A' to 'Team E') by subtracting penalties from goals and clips scores to stay within -10 to 10. Visualizes results with a bar chart showing each team's adjusted scores 'Team' on the x-axis and score values 'Score' on the y-axis.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Team' and 'Score', representing each team's net score.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n```", "solution": "import pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n\n    scores_data = []\n\n    for team in TEAMS:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        score = team_goals - team_penalties\n        scores_data.append([team, score])\n\n    scores_df = pd.DataFrame(scores_data, columns=['Team', 'Score'])\n    scores_df['Score'] = scores_df['Score'].clip(*GOALS_RANGE)\n\n    #Plotting (commented out for testing)\n    plt.figure(figsize=(10, 6))\n    plt.bar(scores_df['Team'], scores_df['Score'], color='skyblue')\n    plt.xlabel('Team')\n    plt.ylabel('Score')\n    plt.title('Team Scores Distribution')\n    plt.ylim(GOALS_RANGE[0] - 1, GOALS_RANGE[1] + 1)\n    plt.grid(axis='y', linestyle='--')\n    plt.show()\n\n    return scores_df", "pass": false}
{"task_id": "614", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n    # Create a DataFrame with the goals and penalties for each team\n    df = pd.DataFrame({'Team': goals.index, 'Goals': goals, 'Penalties': penalties})\n\n    # Visualize the distribution of goals and penalties for each team\n    ax = sns.pairplot(df, x_vars=['Goals', 'Penalties'], y_vars=['Team'], kind='scatter')\n\n    return df, ax\ngoals = pd.Series({'Team A': 10, 'Team B': 15, 'Team C': 20})\npenalties = pd.Series({'Team A': 5, 'Team B': 10, 'Team C': 15})", "problem": "Visualize the distribution of goals and penalties for a number of teams and return the data as a DataFrame with colomns 'Team', 'Goals' and 'Penalties'.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with the goals and penalties for the teams.\n    Axes: A seaborn pairplot visualization of goals and penalties distribution for the teams.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n    # Constants\n    TEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\n\n    data = []\n    for team in TEAMS:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        data.append([team, team_goals, team_penalties])\n\n    df = pd.DataFrame(data, columns=['Team', 'Goals', 'Penalties'])\n\n    plot = sns.pairplot(df, hue='Team')\n\n    return df, plot", "pass": false}
{"task_id": "615", "program": "from random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n\n    pass\nfrom random import randint, seed\nimport pandas as pd\ndef task_func(goals, penalties, rng_seed=None):\n    \"\"\"\n    Generate a Pandas DataFrame with columns 'Team' and 'Match Result' of the results of football matches for multiple teams, incorporating random goals and penalties. Penalties are converted into fines using a predefined cost.\n\n    Parameters\n    ----------\n    goals : int\n        Number of goals to generate for each team.\n    penalties : int\n        Number of penalties to generate for each team.\n    rng_seed : int, optional\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    pd.DataFrame\n        A pandas DataFrame with columns ['Team', 'Match Result'], detailing each team's goals and accumulated fines.\n    \"\"\"\n    # Set random seed for reproducibility\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Initialize DataFrame\n    df = pd.DataFrame(columns=['Team', 'Match Result'])\n\n    # Generate random goals and penalties\n    for i in range(goals):\n        team = randint(1, 2)\n        df = df.append({'Team': team, 'Match Result': 'Goal'}, ignore_index=True)\n    for i in range(penalties):\n        team = randint(1, 2)\n        df = df.append({'Team': team, 'Match Result': 'Penalty'}, ignore_index=True)\n\n    # Convert penalties into fines\n    df['Fine'] = df['Match Result'].apply(lambda x: 100 if x == 'Penalty' else 0)\n\n    # Calculate total fines for each team\n    df['Total Fine'] = df.groupby('Team')['Fine'].transform('sum')\n\n    return df", "problem": "Generate a Pandas DataFrame with colomns 'Team' and 'Match Result' of the results of football matches for multiple teams, incorporating random goals and penalties. Penalties are converted into fines using a predefined cost.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with columns ['Team', 'Match Result'], detailing each team's goals and accumulated fines.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n```", "solution": "from random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n    # Constants\n    TEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\n    PENALTY_COST = 1000  # in dollars\n\n    if rng_seed is not None:\n        seed(rng_seed)  # Set seed for reproducibility\n\n    match_results = []\n    for team in TEAMS:\n        team_goals = randint(0, abs(goals))\n        team_penalties = randint(0, abs(penalties))\n        penalty_cost = PENALTY_COST * team_penalties\n        result_string = f\"({team_goals} goals, ${penalty_cost})\"\n        match_results.append([team, result_string])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Match Result'])\n\n    return results_df", "pass": false}
{"task_id": "616", "program": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n\n    pass\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n    # Set the random seed\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Generate the data\n    data = {'team': teams, 'goals': goals, 'penalties': penalties}\n    df = pd.DataFrame(data)\n\n    # Convert penalties into fines\n    df['fines'] = df['penalties'] * penalty_cost\n\n    # Create the bar plot\n    fig, ax = plt.subplots()\n    ax.bar(df['team'], df['goals'], label='Goals')\n    ax.bar(df['team'], df['fines'], label='Fines')\n    ax.set_ylabel('Goals and Fines')\n    ax.set_title('Football Match Results')\n    ax.legend()\n\n    return df, ax\ngoals = [randint(0, 5) for _ in range(5)]\npenalties = [randint(0, 3) for _ in range(5)]", "problem": "Generate a Dataframe to show the football match results of teams 'Team' with random goals 'Goals' and penalties 'Penalty Cost', and create a bar plot of the results. Penalties are converted into fines according to the penalty costs.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing columns for teams, their goals, and penalty costs.\n    Axes: A matplotlib Axes object representing the bar plot of the results.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n```", "solution": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Ensure goals and penalties are treated as positive\n    goals = abs(goals)\n    penalties = abs(penalties)\n\n    match_results = []\n    for team in teams:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        team_penalty_cost = penalty_cost * team_penalties\n        match_results.append([team, team_goals, team_penalty_cost])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])\n    ax = results_df.plot(kind='bar', x='Team', y=['Goals', 'Penalty Cost'], stacked=True)\n    plt.ylabel('Results')\n\n    return results_df, ax", "pass": false}
{"task_id": "617", "program": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport re\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n\n    pass\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport re\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n    \"\"\"\n    Generate and analyze a Pandas DataFrame of football match results for multiple teams, incorporating random goals and penalties, then visualize the analyzed data with columns 'Team', 'Goals', and 'Penalty Cost'. Penalties are converted into fines based on a predetermined penalty cost.\n\n    Parameters\n    ----------\n    goals : int\n        Number of goals to generate for each team.\n    penalties : int\n        Number of penalties to generate for each team.\n    rng_seed : int, optional\n        Random seed for reproducibility.\n    teams : list of str, optional\n        List of team names.\n\n    Returns\n    -------\n    DataFrame\n        A pandas DataFrame containing teams, their goals, and penalty costs, along with the original match results.\n    \"\"\"\n    # Set random seed for reproducibility\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Initialize DataFrame\n    df = pd.DataFrame(columns=['Team', 'Goals', 'Penalty Cost'])\n\n    # Generate random goals and penalties\n    for team in teams:\n        df = df.append({'Team': team, 'Goals': randint(0, goals), 'Penalty Cost': randint(0, penalties) * PENALTY_COST}, ignore_index=True)\n\n    # Convert penalties into fines\n    df['Penalty Cost'] = df['Penalty Cost'].apply(lambda x: x if x == 0 else -x)\n\n    # Visualize data\n    plt.figure(figsize=(10, 6))\n    plt.bar(df['Team'], df['Goals'], color='#333333')\n    plt.bar(df['Team'], df['Penalty Cost'], color='#FF0000')\n    plt.title('Football Match Results')\n    plt.xlabel('Team')\n    plt.ylabel('Goals and Penalty Cost')\n    plt.show()\n\n    return df", "problem": "Generate and analyze a Pandas DataFrame of football match results for multiple teams, incorporating random goals and penalties, then visualize the analyzed data with colomns 'Team', 'Goals', and 'Penalty Cost'. Penalties are converted into fines based on a predetermined penalty cost.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing teams, their goals, and penalty costs, along with the original match results.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport re\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n```", "solution": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport re\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    match_results = []\n\n    for team in teams:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        penalty_cost = PENALTY_COST * team_penalties\n        result_string = f\"({team_goals} goals, ${penalty_cost})\"\n        match_results.append([team, result_string])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Match Result'])\n\n    if not results_df.empty:\n    # Extract goals and penalty cost from the result string\n        results_df['Goals'] = results_df['Match Result'].apply(lambda x: int(re.search(r'\\((\\d+) goals', x).group(1)))\n        results_df['Penalty Cost'] = results_df['Match Result'].apply(lambda x: int(re.search(r'\\$(\\d+)', x).group(1)))\n\n        # Visualization - this part will not be tested directly in unit tests\n        ax = results_df.set_index('Team')[['Goals', 'Penalty Cost']].plot(kind='bar', stacked=True)\n        plt.ylabel('Counts')\n        plt.title('Football Match Results Analysis')\n        plt.tight_layout()\n        plt.show()\n\n    return results_df", "pass": false}
{"task_id": "618", "program": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties):\n\n    pass\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\ndef task_func(goals, penalties):\n    # Generate a Pandas DataFrame of the results of football matches for multiple teams\n    df = pd.DataFrame({'Team': TEAMS, 'Goals': goals, 'Penalty Cost': penalties})\n\n    # Convert penalties into fines according to penalty costs\n    df['Fines'] = df['Penalty Cost'] * df['Penalty Cost']\n\n    # Visualize the results\n    goals_ax = sns.barplot(x='Team', y='Goals', data=df)\n    fines_ax = sns.barplot(x='Team', y='Fines', data=df)\n\n    return df, [goals_ax, fines_ax]\ngoals = [randint(0, 10) for _ in range(len(TEAMS))]\npenalties = [randint(0, 5) for _ in range(len(TEAMS))]", "problem": "Generate and visualize a Pandas DataFrame of the results of football matches for multiple teams 'Team' with random goals 'Goals' and penalties 'Penalty Cost'. Penalties are converted into fines according to penalty costs.\nThe function should output with:\n    pd.DataFrame: A dataframe containing match results.\n    list: A list containing two seaborn plot objects (Axes) for goals and penalty costs.\nYou should write self-contained code starting with:\n```\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties):\n```", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties):\n    match_results = []\n\n    for team in TEAMS:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        penalty_cost = PENALTY_COST * team_penalties\n        match_results.append([team, team_goals, penalty_cost])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])\n\n    plot1 = sns.barplot(x='Team', y='Goals', data=results_df, palette='viridis')\n    plt.close()  # Close the plot to prevent it from displaying here\n    plot2 = sns.barplot(x='Team', y='Penalty Cost', data=results_df, palette='viridis')\n    plt.close()  # Close the plot to prevent it from displaying here\n\n    return results_df, [plot1, plot2]", "pass": false}
{"task_id": "619", "program": "from random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None):\n\n    pass\nfrom random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\ndef task_func(goals, penalties, rng_seed=None):\n    \"\"\"\n    Simulates football match results with random goals and penalties for multiple teams,\n    and trains a linear regression model to predict penalty costs from goals.\n\n    Parameters\n    ----------\n    goals : int\n        Number of goals scored in the match.\n    penalties : int\n        Number of penalties taken in the match.\n    rng_seed : int, optional\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    tuple\n        (pd.DataFrame, LinearRegression)\n        Contains 'Team', 'Goals', and 'Penalty Cost' columns.\n        Trained model to predict 'Penalty Cost' based on 'Goals'.\n    \"\"\"\n    # Set random seed for reproducibility\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Simulate match results\n    match_results = []\n    for team in TEAMS:\n        goals_scored = randint(0, goals)\n        penalties_taken = randint(0, penalties)\n        match_results.append((team, goals_scored, penalties_taken))\n\n    # Create DataFrame\n    df = pd.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])\n\n    # Train linear regression model\n    X = df['Goals']\n    y = df['Penalty Cost']\n    model = LinearRegression().fit(X, y)\n\n    return df, model\ngoals = 5\npenalties = 3", "problem": "Simulates football match results with random goals and penalties for multiple teams, and trains a linear regression model to predict penalty costs from goals.\nThe function should output with:\n    tuple:\n    pd.DataFrame: Contains 'Team', 'Goals', and 'Penalty Cost' columns.\n    LinearRegression: Trained model to predict 'Penalty Cost' based on 'Goals'.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None):\n```", "solution": "from random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, rng_seed=None):\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Generate match results\n    match_results = []\n    for team in TEAMS:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        penalty_cost = PENALTY_COST * team_penalties\n        match_results.append([team, team_goals, penalty_cost])\n\n    # Create DataFrame\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])\n\n    # Train Linear Regression Model\n    X = results_df[['Goals']]\n    y = results_df['Penalty Cost']\n    model = LinearRegression().fit(X, y)\n\n    return results_df, model", "pass": false}
{"task_id": "620", "program": "import numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n\n    pass\nimport numpy as np\nimport pandas as pd\nRANGE = (1, 100)\ndef task_func(L):\n    \"\"\"\n    Generates a DataFrame filled with random integers. The dimensions of the DataFrame (number of rows and columns) are determined by multiplying pairs of integers from nested lists within the input list of lists 'L'.\n    The function should output with:\n        DataFrame: A pandas DataFrame with random integers.\n    \"\"\"\n    # Initialize an empty list to store the DataFrame values\n    values = []\n\n    # Iterate over the input list of lists\n    for row in L:\n        # Initialize an empty list to store the values for the current row\n        row_values = []\n\n        # Iterate over the current row\n        for col in row:\n            # Generate a random integer within the specified range\n            value = np.random.randint(RANGE[0], RANGE[1])\n\n            # Add the value to the current row\n            row_values.append(value)\n\n        # Add the current row to the list of values\n        values.append(row_values)\n\n    # Create a DataFrame from the list of values\n    df = pd.DataFrame(values)\n\n    # Return the DataFrame\n    return df\nL = [[1, 2], [3, 4], [5, 6]]", "problem": "Generates a DataFrame filled with random integers. The dimensions of the DataFrame (number of rows and columns) are determined by multiplying pairs of integers from nested lists within the input list of lists 'L'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random integers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n```", "solution": "import numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n    rows, columns = L[0][0] * L[0][1], L[1][0] * L[1][1]\n    random_array = np.random.randint(RANGE[0], RANGE[1], size=(rows, columns))\n    df = pd.DataFrame(random_array)\n    \n    return df", "pass": false}
{"task_id": "621", "program": "from itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n\n    pass\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(L))\n\n    # Standardize the integers\n    scaler = StandardScaler()\n    standardized_list = scaler.fit_transform(flat_list)\n\n    # Plot the standardized values\n    plt.plot(standardized_list)\n    plt.xlabel('Index')\n    plt.ylabel('Standardized Value')\n    plt.title('Standardized Values')\n    plt.show()\n\n    return plt.gca()\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Convert a list of lists 'L' into a single list of integers, standardize the integers, and plot the standardized values.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A plot displaying the standardized values.\nYou should write self-contained code starting with:\n```\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n```", "solution": "from itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    data = list(chain(*L))\n    data = np.array(data).reshape(-1, 1)\n\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    ax.plot(standardized_data)\n    plt.close(fig)\n    return ax", "pass": false}
{"task_id": "622", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n    # Flatten the list of lists\n    flat_list = list(chain.from_iterable(L))\n\n    # Convert the flattened list to a numpy array\n    flat_array = np.array(flat_list)\n\n    # Fit a normal distribution to the data\n    mu, sigma = norm.fit(flat_array)\n\n    # Plot the histogram with the fitted normal distribution overlay\n    fig, ax = plt.subplots()\n    ax.hist(flat_array, bins=50, density=True, alpha=0.5, label='Data')\n    x = np.linspace(flat_array.min(), flat_array.max(), 1000)\n    ax.plot(x, norm.pdf(x, mu, sigma), label='Fitted normal distribution')\n    ax.legend()\n    return ax\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Convert a list of lists 'L' into a flattened list of integers, then fit a normal distribution to the data and plot a histogram with the fitted normal distribution overlay.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object with the plotted histogram and normal distribution overlay.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n    data = list(chain(*L))\n    mu, std = norm.fit(data)\n\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Fit results: mu = %.2f,  std = %.2f\" % (mu, std)\n    ax.set_title(title)\n\n    return ax", "pass": true}
{"task_id": "623", "program": "from itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n\n    pass\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    # Convert list of lists to list of integers\n    data = list(chain.from_iterable(L))\n    data = np.array(data)\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=3, random_state=0).fit(data)\n\n    # Create scatter plot with data points color-coded by their cluster\n    fig, ax = plt.subplots()\n    ax.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n\n    return ax\nL = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]", "problem": "Convert a list of lists into a list of integers, apply the KMeans clustering, and return a scatter plot 'matplotlib.axes.Axes' with data points color-coded by their cluster.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object representing the scatter plot.\nYou should write self-contained code starting with:\n```\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n```", "solution": "from itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n    # Constants\n    N_CLUSTERS = 3\n\n    data = list(chain(*L))\n    data = np.array(data).reshape(-1, 1)\n\n    kmeans = KMeans(n_clusters=N_CLUSTERS).fit(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(data, [0]*len(data), c=kmeans.labels_.astype(float))\n    \n    return ax", "pass": false}
{"task_id": "624", "program": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n\n    pass\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\nN_COMPONENTS = 2\ndef task_func(L):\n    # Convert list of lists to 2D numpy array\n    X = np.array(L)\n\n    # Apply PCA to the array\n    pca = PCA(n_components=N_COMPONENTS)\n    X_pca = pca.fit_transform(X)\n\n    # Create a scatter plot of the PCA result\n    fig, ax = plt.subplots()\n    ax.scatter(X_pca[:, 0], X_pca[:, 1])\n\n    return X_pca, ax", "problem": "Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\nThe function should output with:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\nYou should write self-contained code starting with:\n```\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n```", "solution": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n    data = np.array(L)\n\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n\n    return pca_result, ax", "pass": true}
{"task_id": "625", "program": "import math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n\n    pass\nimport math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n    # Generate population data for each city\n    population_data = []\n    for city in cities_list:\n        population = math.ceil(randint(1000, 1000000) / 1000) * 1000\n        population_data.append((city, population))\n\n    # Create a DataFrame with the population data\n    df = pd.DataFrame(population_data, columns=['City', 'Population'])\n\n    return df\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose']", "problem": "Generate a DataFrame with population data for a list of cities. The population is generated randomly and rounded up to the next thousand.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'City' and 'Population', containing population data for the cities.\nYou should write self-contained code starting with:\n```\nimport math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n```", "solution": "import math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n    population_data = []\n\n    for city in cities_list:\n        population = math.ceil(randint(1000000, 20000000) / 1000.0) * 1000\n        population_data.append([city, population])\n\n    population_df = pd.DataFrame(population_data, columns=['City', 'Population'])\n\n    return population_df", "pass": true}
{"task_id": "626", "program": "from random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n\n    pass\nfrom random import choice\nimport pytz\nfrom dateutil.parser import parse\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n    # Convert the date string to a datetime object\n    date = parse(date_str)\n\n    # Convert the datetime object to the given timezone\n    date = date.astimezone(pytz.timezone(from_tz))\n\n    # Choose a random timezone from the list of TIMEZONES\n    to_tz = choice(TIMEZONES)\n\n    # Convert the datetime object to the random timezone\n    date = date.astimezone(pytz.timezone(to_tz))\n\n    # Return the converted datetime string and the random timezone\n    return (date.strftime('%Y-%m-%d %H:%M:%S %Z%z'), to_tz)\ndate_str = '2023-02-28 12:34:56'\nfrom_tz = 'America/New_York'", "problem": "Converts a datetime string from a given timezone to a datetime string in a randomly chosen timezone.\nThe function should output with:\n    tuple: A tuple containing the converted datetime string and the randomly chosen timezone.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n```", "solution": "from random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(choice(TIMEZONES))\n    given_date = parse(date_str).replace(tzinfo=from_tz)\n    converted_date = given_date.astimezone(to_tz)\n\n    return converted_date.strftime('%Y-%m-%d %H:%M:%S'), to_tz.zone", "pass": false}
{"task_id": "627", "program": "from random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n\n    pass\nfrom random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n    # Create a dictionary to store the sales data for each product\n    sales_data = {}\n\n    # Loop through each product in the list\n    for product in products_list:\n        # Generate random sales data for each product over a period of 12 months\n        sales = [randint(10, 100) for _ in range(12)]\n\n        # Calculate the average sales for each product\n        average_sales = mean(sales)\n\n        # Add the sales data and average sales to the dictionary\n        sales_data[product] = {'Sales': sales, 'Average Sales': average_sales}\n\n    # Create a pandas DataFrame from the sales data dictionary\n    df = pd.DataFrame.from_dict(sales_data, orient='index')\n\n    # Rename the columns to match the desired output\n    df.columns = ['Product', 'Month 1', 'Month 2', 'Month 3', 'Month 4', 'Month 5', 'Month 6', 'Month 7', 'Month 8', 'Month 9', 'Month 10', 'Month 11', 'Month 12', 'Average Sales']\n\n    # Return the DataFrame\n    return df\nproducts_list = ['Product A', 'Product B', 'Product C']", "problem": "This function takes in a list of product names and generates random sales data for each product over a period of 12 months. It then calculates the average sales for each product and returns the results as a pandas DataFrame with columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'..\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'.\nYou should write self-contained code starting with:\n```\nfrom random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n```", "solution": "from random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n    sales_data = []\n\n    for product in products_list:\n        sales = [randint(100, 500) for _ in range(12)]\n        avg_sales = mean(sales)\n        sales.append(avg_sales)\n        sales_data.append([product] + sales)\n\n    sales_df = pd.DataFrame(sales_data, columns=['Product'] + [f'Month {i+1}' for i in range(12)] + ['Average Sales'])\n\n    return sales_df", "pass": false}
{"task_id": "628", "program": "import math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n\n    pass\nimport math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate random frequency, amplitude, and phase shift\n    freq = randint(1, 10)\n    amp = randint(1, 10)\n    phase = randint(0, 360)\n\n    # Create a list of x-axis values\n    x = [i / freq for i in range(100)]\n\n    # Create a list of y-axis values\n    y = [amp * math.sin(2 * math.pi * freq * i / 100 + phase) for i in x]\n\n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n\n    return ax", "problem": "Create and draw a sine wave with random frequency, amplitude and phase shift. The return ax object has 'Random Sine Wave' title, 'Time' on the x axis and 'Amplitude' on the y axis.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The axis object of the generated sine wave plot.\nYou should write self-contained code starting with:\n```\nimport math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n```", "solution": "import math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = [i/100 for i in range(1000)]\n    frequency = randint(1, 5)\n    amplitude = randint(1, 5)\n    phase_shift = randint(0, 360)\n\n    y = [amplitude * math.sin(2 * math.pi * frequency * (xi + phase_shift)) for xi in x]\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.grid(True)\n    \n    return ax  # Return the axis object for testing", "pass": true}
{"task_id": "629", "program": "import os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n\n    pass\nimport os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Writes multiple Pandas DataFrames to a single CSV file, separating each DataFrame by a line of hyphens (\"------\").\n    The function should output with:\n        None: The function writes the DataFrames to a CSV file but does not return any value.\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    output_file = os.path.join(output_dir, filename)\n    with open(output_file, 'w') as f:\n        for df in dataset:\n            df.to_csv(f, index=False, header=False)\n            f.write('------\\n')", "problem": "Writes multiple Pandas DataFrames to a single CSV file, separating each DataFrame by a line of hyphens (\"------\").\nThe function should output with:\n    None: The function writes the DataFrames to a CSV file but does not return any value.\nYou should write self-contained code starting with:\n```\nimport os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n```", "solution": "import os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n    start_time = time.time()\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, 'w', newline='') as f:\n        for i, df in enumerate(dataset):\n            if i > 0:\n                # Write the separator with a newline at the end only\n                f.write('------\\n')\n            # Avoid writing the index and ensure no extra newline is added at the end of the DataFrame\n            df.to_csv(f, index=False, header=True, mode='a')\n            if i < len(dataset) - 1:\n                # Add a newline after the DataFrame content, except after the last DataFrame\n                f.write('\\n')\n\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"", "pass": true}
{"task_id": "630", "program": "import pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n\n    pass\nimport pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Save a Pandas DataFrame to a JSON file in a specified directory.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to save.\n    filename : str\n        The name of the file to save the DataFrame to.\n    output_dir : str, optional\n        The directory to save the file to. Defaults to './output'.\n\n    Returns\n    -------\n    str\n        The full file path where the DataFrame is saved.\n    \"\"\"\n    filepath = os.path.join(output_dir, filename)\n    df.to_json(filepath, orient='records')\n    return filepath", "problem": "Save a Pandas DataFrame to a JSON file in a specified directory.\nNote that: The function manipulates a Pandas DataFrame and saves it as a JSON file.\nThe function should output with:\n    str: The full file path where the DataFrame is saved.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n```", "solution": "import pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    file_path = os.path.join(output_dir, filename)\n    df_clean = df.where(pd.notnull(df), None)\n    with open(file_path, 'w') as f:\n        df_clean.to_json(f, orient='records')\n    return file_path", "pass": true}
{"task_id": "631", "program": "import csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n\n    pass\nimport csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Save a Pandas DataFrame to a CSV file in a specified directory.\n\n    Parameters\n    ----------\n    df : Pandas DataFrame\n        The DataFrame to save.\n    filename : str\n        The name of the CSV file to save.\n    output_dir : str, optional\n        The directory to save the CSV file in.\n        Defaults to './output'.\n\n    Returns\n    -------\n    str\n        The absolute path of the saved CSV file.\n    \"\"\"\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Save the DataFrame to a CSV file\n    filepath = os.path.join(output_dir, filename)\n    df.to_csv(filepath, index=False)\n\n    return filepath", "problem": "Save a Pandas DataFrame to a CSV file in a specified directory. This function takes a Pandas DataFrame and a filename as input and saves the DataFrame to a CSV file. The CSV file will be saved in the 'data' directory relative to the parent directory of this script.\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n```", "solution": "import csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    # Ensure the data directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, filename)\n    df.to_csv(file_path, index=False, quoting=csv.QUOTE_NONNUMERIC)\n    return os.path.abspath(file_path)", "pass": false}
{"task_id": "632", "program": "import pandas as pd\nimport time\nOUTPUT_DIR = './output'\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n\n    pass\nimport pandas as pd\nimport time\nimport json\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n    \"\"\"\n    Write a Pandas DataFrame into a JSON Lines file and save it in a specified directory.\n    The function should output with:\n        str: The full path where the JSON Lines file was saved.\n    \"\"\"\n    # Create the output directory if it doesn't exist\n    if not os.path.exists(OUTPUT_DIR):\n        os.makedirs(OUTPUT_DIR)\n\n    # Create a unique filename for the JSON Lines file\n    filepath = os.path.join(OUTPUT_DIR, filename + '.jsonl')\n\n    # Write the DataFrame to the JSON Lines file\n    with open(filepath, 'w') as f:\n        for _, row in df.iterrows():\n            f.write(json.dumps(row.to_dict()) + '\\n')\n\n    return filepath\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})", "problem": "Write a Pandas DataFrame into a JSON Lines file and save it in a specified directory.\nThe function should output with:\n    str: The full path where the JSON Lines file was saved.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\nOUTPUT_DIR = './output'\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n```", "solution": "import pandas as pd\nimport time\nOUTPUT_DIR = './output'\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n    start_time = time.time()\n    # Ensure the data directory exists\n    if not os.path.exists(OUTPUT_DIR):\n        os.makedirs(OUTPUT_DIR)\n\n    file_path = os.path.join(OUTPUT_DIR, filename)\n\n    # Save DataFrame as JSON Lines\n    with open(file_path, 'w') as file:\n        for record in df.to_dict(orient='records'):\n            json.dump(record, file)\n            file.write('\\n')\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return os.path.abspath(file_path)", "pass": true}
{"task_id": "633", "program": "import re\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n\n    pass\nimport re\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    \"\"\"\n    Analyzes a given text string by removing duplicate words and stopwords defined by nltk.corpus, and then returns a frequency distribution of the remaining words.\n\n    Args:\n        text (str): The text string to analyze.\n\n    Returns:\n        dict: The frequency distribution of the words in the text after filtering.\n    \"\"\"\n    # Remove duplicate words\n    words = re.split(r'\\W+', text.lower())\n    words = set(words)\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    words = [word for word in words if word not in stop_words]\n\n    # Create a frequency distribution\n    freq_dist = {}\n    for word in words:\n        if word not in freq_dist:\n            freq_dist[word] = 1\n        else:\n            freq_dist[word] += 1\n\n    return freq_dist\ntext = \"hello hello world\"", "problem": "Analyzes a given text string by removing duplicate words and stopwords defined by nltk.corpus , and then returns a frequency distribution of the remaining words. >>> task_func(\"hello hello world\") {'hello': 1, 'world': 1}\nNote that: A manually defined set of common English stopwords is used for filtering.\nThe function should output with:\n    dict: The frequency distribution of the words in the text after filtering.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n```", "solution": "import re\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    # Remove duplicate words\n    stop_words = set(stopwords.words('english'))\n    text = ' '.join(sorted(set(text.split()), key=text.index))\n    # Tokenize and remove stopwords\n    words = [word for word in re.findall(r'\\b\\w+\\b', text.lower()) if word not in stop_words]\n    \n    # Create frequency distribution\n    freq_dist = {}\n    for word in words:\n        freq_dist[word] = freq_dist.get(word, 0) + 1\n    \n    return freq_dist", "pass": false}
{"task_id": "634", "program": "import itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n\n    pass\nimport itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n    \"\"\"\n    Calculate the mode of a list of elements with multiple repetitions of the original list.\n\n    Parameters\n    ----------\n    input_list : list\n        The list of elements to calculate the mode of.\n    repetitions : int\n        The number of repetitions of the original list.\n\n    Returns\n    -------\n    scipy.stats.ModeResult\n        An object containing the mode(s) and count(s) of the most frequently occurring element(s) in the flattened list.\n    \"\"\"\n    # Flatten the list with multiple repetitions\n    flattened_list = list(itertools.chain.from_iterable(itertools.repeat(input_list, repetitions)))\n\n    # Calculate the mode of the flattened list\n    mode_result = stats.mode(flattened_list)\n\n    return mode_result\ninput_list = [1, 2, 3]\nrepetitions = 5", "problem": "Calculate the mode of a list of elements with multiple repetitions of the original list. Functionality: - Takes a list and a repetition count as input. - Flattens the list with multiple repetitions. - Calculates the mode of the flattened list. >>> task_func([1, 2, 3], 5) ModeResult(mode=array([1]), count=array([5]))\nThe function should output with:\n    scipy.stats.ModeResult: An object containing the mode(s) and count(s) of the most frequently occurring element(s) in the flattened list.\nYou should write self-contained code starting with:\n```\nimport itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n```", "solution": "import itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n    # Flattening the list with multiple repetitions\n    flattened_list = np.array(list(itertools.chain(*[input_list for _ in range(repetitions)])))\n    \n    # Calculating the mode\n    mode = stats.mode(flattened_list)\n    \n    return mode", "pass": true}
{"task_id": "635", "program": "# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n\n    pass\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n    # Remove duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)\\s+(\\1)\\b', r'\\1', text)\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    text = ' '.join([word for word in text.split() if word.lower() not in stop_words])\n\n    # Generate a square co-occurrence matrix of words\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    X = vectorizer.fit_transform(text)\n    co_occurrence_matrix = X.T @ X\n\n    # Plot the co-occurrence matrix\n    fig, ax = plt.subplots()\n    ax.imshow(co_occurrence_matrix, cmap='gray')\n    ax.set_title('Co-occurrence Matrix')\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Word')\n    plt.show()\n\n    return co_occurrence_matrix, ax\ntext = \"This is a sample text for demonstration purposes. It contains some duplicate words and stopwords.\"", "problem": "Analyzes a text string, removing duplicate consecutive words and stopwords defined by nltk.corpus, generates a square co-occurrence matrix of words, and plots this matrix.\nThe function should output with:\n    tuple:\n    pd.DataFrame: Square co-occurrence matrix of words.\n    matplotlib.axes.Axes: Plot object of the co-occurrence matrix.\nYou should write self-contained code starting with:\n```\n# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n```", "solution": "# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n    # Pre-processing the text\n    # Remove duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n    stop_words = set(stopwords.words('english'))\n    # Remove stopwords\n    words_filtered = ' '.join([word for word in text.lower().split() if word not in stop_words])\n\n    # If words_filtered is empty after removing stopwords, return an empty DataFrame\n    if not words_filtered.strip():\n        empty_df = pd.DataFrame()\n        fig, ax = plt.subplots()\n        return empty_df, ax\n\n    # Generating co-occurrence matrix and plotting as before\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    X = vectorizer.fit_transform([words_filtered])  # Ensure input is treated as a single document\n    matrix = (X.T * X).todense()\n    np.fill_diagonal(matrix, 0)\n    feature_names = vectorizer.get_feature_names_out() if hasattr(vectorizer,\n                                                                  'get_feature_names_out') else vectorizer.get_feature_names()\n    matrix_df = pd.DataFrame(matrix, index=feature_names, columns=feature_names)\n\n    fig, ax = plt.subplots()\n    cax = ax.matshow(matrix_df, cmap='hot')\n    fig.colorbar(cax)\n    ax.set_xticks(np.arange(len(matrix_df.columns)))\n    ax.set_yticks(np.arange(len(matrix_df.index)))\n    ax.set_xticklabels(matrix_df.columns, rotation=90)\n    ax.set_yticklabels(matrix_df.index)\n\n    return matrix_df, ax", "pass": false}
{"task_id": "636", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    # Generate random integer values between 0 and 9 for a given number of rows\n    data = np.random.randint(0, 10, size=(rows, len(COLUMNS)))\n\n    # Create a Pandas DataFrame with the generated data\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Count the non-zero values in each column\n    non_zero_counts = df.count(axis=0)\n\n    # Visualize the non-zero counts using a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(non_zero_counts.index, non_zero_counts.values)\n    ax.set_title('Non-Zero Counts')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Non-Zero Counts')\n\n    return df, ax\nrows = 10", "problem": "Create a Pandas DataFrame with random integer values between 0 and 9 for a given number of rows. Count the non-zero values in each column and visualize this information using a bar plot.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    DataFrame: The generated DataFrame with random integer values.\n    Axes: The matplotlib Axes object containing the bar plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    plt.close('all')  # Clear previous plots\n    \n    # Create an empty DataFrame and Axes object for negative or zero rows\n    if rows <= 0:\n        empty_ax = plt.gca()\n        empty_ax.set_title('Non-Zero Value Counts')\n        return pd.DataFrame(columns=COLUMNS), empty_ax\n    \n    # Generate random data and create DataFrame\n    data = np.random.randint(10, size=(rows, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    # Count non-zero values in each column\n    counts = df.astype(bool).sum(axis=0)\n    \n    # Create bar plot for non-zero counts\n    ax = counts.plot(kind='bar')\n    ax.set_title('Non-Zero Value Counts')\n    \n    return df, ax", "pass": false}
{"task_id": "637", "program": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n\n    pass\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n    # Generate random grades for each student in multiple courses\n    grades = np.random.randint(0, 100, size=(num_students, 5))\n\n    # Create a DataFrame with the grades\n    df = pd.DataFrame(grades, columns=['Course 1', 'Course 2', 'Course 3', 'Course 4', 'Course 5'])\n\n    # Calculate the average grade in each course\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    df['Passing'] = df['Average'] >= 60\n\n    # Visualize the data using a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df['Average'], yerr=df['Passing'], capsize=10)\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_xlabel('Course')\n    ax.set_ylabel('Average Grade')\n    ax.set_ylim(0, 100)\n\n    return df, ax\nnum_students = 10", "problem": "Generate a Pandas DataFrame that displays the grades of a randomly selected group of students in multiple courses. Calculate the average grade in each course, the number of students with a passing grade (>= 60), and visualize this information using a bar plot with title 'Course-wise Average and Passing Grade Counts'.\nThe function should output with:\n    Tuple[pd.DataFrame, plt.Axes]: A tuple containing the generated DataFrame and the bar plot's Axes object.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n```", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n    # Generate sample students and grades\n\n    # Constants\n    STUDENTS = ['Student' + str(i) for i in range(1, 101)]\n    COURSES = ['Course' + str(i) for i in range(1, 6)]\n\n    students_sample = sample(STUDENTS, num_students)\n    grades = np.random.randint(40, 101, size=(num_students, len(COURSES)))\n\n    # Create DataFrame\n    df = pd.DataFrame(grades, index=students_sample, columns=COURSES)\n\n    # Create plot\n    fig, ax = plt.subplots()\n    df.mean().plot(kind='bar', ax=ax, position=1, width=0.4, color='b', label='Average Grade')\n    df[df >= 60].count().plot(kind='bar', ax=ax, position=0, width=0.4, color='g', label='Passing Grade Counts')\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.legend()\n\n    return df, ax", "pass": false}
{"task_id": "638", "program": "import numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n    # Generate random scores for each team in each game\n    scores = np.random.randint(0, 100, size=(num_teams, num_games))\n\n    # Create a DataFrame with index=teams, columns=games\n    df = pd.DataFrame(scores, index=range(num_teams), columns=range(num_games))\n\n    return df", "problem": "Create a Pandas DataFrame that displays the random scores of different teams in multiple games. The function generates random scores for each game played by each team and populates them in a DataFrame with index=teams, columns=games.\nThe function should output with:\n    DataFrame: The generated DataFrame containing random scores for each team in each game.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n    scores = np.random.randint(0, 101, size=(num_teams, num_games))\n    teams = ['Team' + str(i) for i in range(1, num_teams + 1)]\n    games = ['Game' + str(i) for i in range(1, num_games + 1)]\n    df = pd.DataFrame(scores, index=teams, columns=games)\n    return df", "pass": false}
{"task_id": "639", "program": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n    # Generate random data\n    data = np.random.rand(num_samples, num_features)\n    df = pd.DataFrame(data, columns=['feature_' + str(i) for i in range(num_features)])\n\n    # Calculate correlation matrix\n    corr_matrix = df.corr()\n\n    # Visualize correlation matrix using heatmap\n    ax = sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n\n    return df, ax", "problem": "Generate a Pandas DataFrame with random values, representing a dataset with multiple features. Calculate the correlation between the features and visualize this information using a heatmap.\nThe function should output with:\n    DataFrame: The generated DataFrame with random values.\n    Axes: The heatmap visualization of the correlation matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n    FEATURES = ['Feature' + str(i) for i in range(1, num_features + 1)]\n    SAMPLES = ['Sample' + str(i) for i in range(1, num_samples + 1)]\n    \n    data = np.random.rand(len(SAMPLES), len(FEATURES))\n    df = pd.DataFrame(data, index=SAMPLES, columns=FEATURES)\n    \n    corr_matrix = df.corr()\n    ax = sns.heatmap(corr_matrix, annot=True)\n    \n    return df, ax", "pass": true}
{"task_id": "640", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n    # Generate random sales figures for each product over 12 months\n    sales_data = np.random.randint(0, 100, size=(12, 5))\n    sales_df = pd.DataFrame(sales_data, columns=PRODUCTS, index=MONTHS)\n\n    # Plot total sales per product\n    sales_df.plot(kind='line', title='Total Sales per Product')\n    plt.show()\n\n    # Plot sales figures across products and months\n    sns.heatmap(sales_df, annot=True, cmap='YlGnBu', fmt='d')\n    plt.show()\n\n    return sales_df", "problem": "Generate a DataFrame representing monthly sales of products and visualize the total sales. The function creates a DataFrame where each row represents a month, each column represents a product, and cell values represent sales figures. It then plots the total sales per product across all months using both a line plot and a heatmap for visualization. The function also displays: - A line plot showing the total sales per product. - A heatmap visualizing sales figures across products and months.\nThe function should output with:\n    pd.DataFrame: A DataFrame with randomly generated sales figures for each product over 12 months.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n    sales = np.random.randint(100, 1001, size=(len(MONTHS), len(PRODUCTS)))\n    df = pd.DataFrame(sales, index=MONTHS, columns=PRODUCTS)\n\n    # Visualizations\n    total_sales = df.sum()\n    plt.figure(figsize=(10, 5))\n    total_sales.plot(kind='line', title='Total Sales per Product')\n    plt.ylabel('Total Sales')\n    plt.show()\n\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(df, annot=True, fmt=\"d\", cmap='viridis')\n    plt.title('Monthly Sales per Product')\n    plt.show()\n\n    return df", "pass": false}
{"task_id": "641", "program": "import os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n\n    pass\nimport os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n    \"\"\"\n    Searches for files in the specified directory that match a given regex pattern.\n    This function walks through the directory, matches filenames against the pattern,\n    and saves the matched file paths to a CSV file. It returns a DataFrame of these paths\n    with a single column 'File Path'.\n\n    Args:\n        pattern (str): The regex pattern to match against.\n        directory (str): The directory to search in.\n        output_csv (str): The path to the output CSV file.\n\n    Returns:\n        pd.DataFrame: DataFrame with a single column 'File Path' of matched paths.\n    \"\"\"\n    # Initialize an empty list to store the matched file paths\n    matched_paths = []\n\n    # Walk through the directory and its subdirectories\n    for root, dirs, files in os.walk(directory):\n        # Iterate over the files in the current directory\n        for file in files:\n            # Check if the file matches the pattern\n            if re.match(pattern, file):\n                # If it matches, add the file path to the list\n                matched_paths.append(os.path.join(root, file))\n\n    # Create a DataFrame with the matched file paths\n    df = pd.DataFrame({'File Path': matched_paths})\n\n    # Save the DataFrame to a CSV file\n    df.to_csv(output_csv, index=False)\n\n    return df", "problem": "Searches for files in the specified directory that match a given regex pattern. This function walks through the directory, matches filenames against the pattern, and saves the matched file paths to a CSV file. It returns a DataFrame of these paths with colomn 'File Path'.\nThe function should output with:\n    pd.DataFrame: DataFrame with a single column 'File Path' of matched paths.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n```", "solution": "import os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n    matched_paths = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                matched_paths.append(os.path.join(root, file))\n\n    df = pd.DataFrame(matched_paths, columns=['File Path'])\n    df.to_csv(output_csv, index=False)\n\n    return df", "pass": true}
{"task_id": "642", "program": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n\n    pass\nimport binascii\nimport hashlib\nimport re\nimport os\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern and computes a SHA256 hash of each file's content.\n    The function should output with:\n        dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n    \"\"\"\n    # Create a dictionary to store the file paths and their hashes\n    file_hashes = {}\n\n    # Iterate over all files in the directory\n    for root, _, files in os.walk(directory):\n        for file in files:\n            # Check if the file matches the pattern\n            if re.match(pattern, file):\n                # Get the file path\n                file_path = os.path.join(root, file)\n\n                # Open the file and read its contents\n                with open(file_path, \"rb\") as f:\n                    file_content = f.read()\n\n                # Compute the SHA256 hash of the file content\n                file_hash = hashlib.sha256(file_content).hexdigest()\n\n                # Add the file path and hash to the dictionary\n                file_hashes[file_path] = file_hash\n\n    return file_hashes\ndirectory = \"./test_dir\"\npattern = r\"(?<!Distillr)\\\\AcroTray\\.exe\"", "problem": "Searches for files within the specified directory matching a given regex pattern and computes a SHA256 hash of each file's content.\nThe function should output with:\n    dict: A dictionary with file paths as keys and their SHA256 hashes as values.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n```", "solution": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "pass": true}
{"task_id": "643", "program": "import re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n\n    pass\nimport re\nimport pandas as pd\nimport numpy as np\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n    \"\"\"\n    Extract numeric data from a Pandas DataFrame based on a specific pattern.\n    The function searches each cell for occurrences of the regex pattern '>number<number>' (e.g., '>1.23<') and replaces the cell content with the extracted numeric value. If no match is found, the cell is replaced with NaN.\n    The function should output with:\n        pd.DataFrame: A modified DataFrame with cells containing the extracted numeric values or NaN.\n    \"\"\"\n    # Initialize the output DataFrame\n    output_df = pd.DataFrame(index=dataframe.index, columns=dataframe.columns)\n\n    # Iterate over each column in the input DataFrame\n    for col in dataframe.columns:\n        # Iterate over each row in the input DataFrame\n        for i in range(len(dataframe)):\n            # Extract the numeric value from the cell content using the regex pattern\n            match = re.search(data_pattern, dataframe.iloc[i, col])\n            if match:\n                # Replace the cell content with the extracted numeric value\n                output_df.iloc[i, col] = float(match.group(0)[1:-1])\n            else:\n                # Replace the cell content with NaN\n                output_df.iloc[i, col] = np.nan\n\n    return output_df\ndf = pd.DataFrame({'A': ['>1.23<', '>4.56<', '>7.89<'], 'B': ['>10.11<', '>12.13<', '>14.15<']})", "problem": "Extract numeric data from a Pandas DataFrame based on a specific pattern. The function searches each cell for occurrences of the regex pattern '>number<number>' (e.g., '>1.23<') and replaces the cell content with the extracted numeric value. If no match is found, the cell is replaced with NaN.\nThe function should output with:\n    pd.DataFrame: A modified DataFrame with cells containing the extracted numeric values or NaN.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n```", "solution": "import re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n    for col in dataframe.columns:\n        dataframe[col] = dataframe[col].apply(lambda x: float(re.search(data_pattern, x).group(0)[1:-1])\n                                              if pd.notnull(x) and re.search(data_pattern, x) else np.nan)\n    return dataframe", "pass": false}
{"task_id": "644", "program": "import hashlib\nimport base64\ndef task_func(filename, data, password):\n\n    pass\nimport hashlib\nimport base64\ndef task_func(filename, data, password):\n    \"\"\"\n    Encrypt a string with a password, then write the encrypted string to a file.\n    If the file or directory does not exist, create it.\n    The function should output with:\n        str: The encrypted string.\n    \"\"\"\n    # Hash the password using SHA-256\n    hashed_password = hashlib.sha256(password.encode()).hexdigest()\n\n    # Create a cipher using AES-256 with the hashed password as the key\n    cipher = AES.new(hashed_password, AES.MODE_EAX)\n\n    # Encrypt the data using the cipher\n    encrypted_data = cipher.encrypt(data.encode())\n\n    # Write the encrypted data to a file\n    with open(filename, \"wb\") as f:\n        f.write(encrypted_data)\n\n    # Return the encrypted data as a string\n    return encrypted_data.decode()", "problem": "Encrypt a string with a password, then write the encrypted string to a file. If the file or directory does not exist, create it.\nThe function should output with:\n    str: The encrypted string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport base64\ndef task_func(filename, data, password):\n```", "solution": "import hashlib\nimport base64\ndef task_func(filename, data, password):\n    # Ensure the file exists\n    directory = os.path.dirname(filename)\n    os.makedirs(directory, exist_ok=True)\n    if not os.path.exists(filename):\n        open(filename, 'a').close()\n\n    # Encrypt the data using simple XOR operation with password hash as key\n    key = hashlib.sha256(password.encode()).digest()\n    encrypted_bytes = [byte ^ key[i % len(key)] for i, byte in enumerate(data.encode())]\n    encrypted = base64.b64encode(bytes(encrypted_bytes)).decode()\n\n    # Write to the file\n    with open(filename, 'w') as f:\n        f.write(encrypted)\n\n    return encrypted", "pass": false}
{"task_id": "645", "program": "import os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n\n    pass\nimport os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n    \"\"\"\n    Read a CSV file into a Pandas DataFrame and then delete the entire contents of the original file.\n    The function should raise the exception for: FileNotFoundError: If the CSV file does not exist.\n    The function should output with:\n        DataFrame: The contents of the CSV file as a pandas DataFrame.\n    \"\"\"\n    if not os.path.exists(filename):\n        raise FileNotFoundError(f\"File {filename} does not exist.\")\n\n    df = pd.read_csv(filename)\n    os.remove(filename)\n    return df", "problem": "Read a CSV file into a Pandas DataFrame and then delete the entire contents of the original file.\nThe function should raise the exception for: FileNotFoundError: If the CSV file does not exist.\nThe function should output with:\n    DataFrame: The contents of the CSV file as a pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n```", "solution": "import os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n    if not os.path.exists(filename):\n        raise FileNotFoundError(f\"No such file: '{filename}'\")\n\n    if os.stat(filename).st_size == 0:\n        # File is empty, return an empty DataFrame with no columns.\n        return pd.DataFrame()\n\n    df = pd.read_csv(filename)\n\n    # Erase the original file's content using a context manager to handle the file properly\n    with open(filename, 'w') as file:\n        file.truncate()\n\n    return df", "pass": false}
{"task_id": "646", "program": "import os\nimport pandas as pd\nfrom dateutil.parser import parse\nOUTPUT_DIR = './output'\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n\n    pass\nimport os\nimport pandas as pd\nfrom dateutil.parser import parse\nOUTPUT_DIR = './output'\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n    \"\"\"\n    Read a CSV file, convert a column of date strings into datetime objects, and draw a histogram of the year distribution of these dates.\n    The function should output with:\n        matplotlib.axes._axes.Axes: A histogram plot object showing the distribution of years.\n    \"\"\"\n    # Read the CSV file\n    df = pd.read_csv(csv_path)\n\n    # Convert the date column to datetime objects\n    df[date_column] = pd.to_datetime(df[date_column])\n\n    # Extract the year from the datetime objects\n    years = df[date_column].dt.year\n\n    # Draw a histogram of the year distribution\n    fig, ax = plt.subplots()\n    ax.hist(years, bins=range(min(years), max(years)+1))\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Count')\n    ax.set_title('Year Distribution')\n\n    return ax", "problem": "Read a CSV file, convert a column of date strings into datetime objects, and draw a histogram of the year distribution of these dates.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A histogram plot object showing the distribution of years.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nfrom dateutil.parser import parse\nOUTPUT_DIR = './output'\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n```", "solution": "import os\nimport pandas as pd\nfrom dateutil.parser import parse\nOUTPUT_DIR = './output'\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n\n    if not os.path.isfile(csv_path):\n        raise FileNotFoundError(f\"{csv_path} does not exist\")\n\n    df = pd.read_csv(csv_path)\n    df[date_column] = df[date_column].apply(lambda x: parse(x))\n\n    return df[date_column].dt.year.hist()", "pass": true}
{"task_id": "647", "program": "import pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n\n    pass\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Convert a date string from one time zone to another and return the time difference in seconds to the current time in the destination time zone.\n    :param date_str: A date string in the format \"YYYY-MM-DD HH:MM:SS\"\n    :param from_tz: The time zone of the date string\n    :param to_tz: The time zone to convert the date string to\n    :return: The time difference in seconds between the date string and the current time in the destination time zone\n    \"\"\"\n    # Parse the date string\n    date = parse(date_str)\n\n    # Convert the date to the source time zone\n    date_in_from_tz = date.astimezone(pytz.timezone(from_tz))\n\n    # Convert the date to the destination time zone\n    date_in_to_tz = date_in_from_tz.astimezone(pytz.timezone(to_tz))\n\n    # Get the current time in the destination time zone\n    now_in_to_tz = datetime.now(pytz.timezone(to_tz))\n\n    # Calculate the time difference in seconds\n    time_diff = (now_in_to_tz - date_in_to_tz).total_seconds()\n\n    return time_diff", "problem": "Convert a date string from one time zone to another and return the time difference in seconds to the current time in the destination time zone.\nThe function should output with:\n    int: The time difference in seconds.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n```", "solution": "import pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n    # Get timezone objects for the source and destination timezones\n    from_tz_obj = pytz.timezone(from_tz)\n    to_tz_obj = pytz.timezone(to_tz)\n\n    # Parse the given date string and localize it to the source timezone\n    given_date_naive = parse(date_str)\n    given_date = from_tz_obj.localize(given_date_naive)\n\n    # Convert the given date to the destination timezone\n    given_date_in_to_tz = given_date.astimezone(to_tz_obj)\n\n    # Get the current time in the destination timezone\n    current_date_in_to_tz = datetime.now(pytz.utc).astimezone(to_tz_obj)\n\n    # Calculate the time difference in seconds\n    time_difference = current_date_in_to_tz - given_date_in_to_tz\n\n    return int(time_difference.total_seconds())", "pass": false}
{"task_id": "648", "program": "from dateutil.parser import parse\nfrom datetime import timedelta\ndef task_func(date_str):\n\n    pass\nfrom dateutil.parser import parse\nfrom datetime import timedelta\ndef task_func(date_str):\n    date = parse(date_str)\n    next_day = date + timedelta(days=1)\n    while next_day.weekday() > 4:\n        next_day += timedelta(days=1)\n    return next_day", "problem": "Get the next business day (Mon-Fri) after a certain date string. Implemented by dateutil.parser and datetime.\nThe function should output with:\n    datetime: The datetime object of the next business day.\nYou should write self-contained code starting with:\n```\nfrom dateutil.parser import parse\nfrom datetime import timedelta\ndef task_func(date_str):\n```", "solution": "from dateutil.parser import parse\nfrom datetime import timedelta\ndef task_func(date_str):\n    given_date = parse(date_str)\n    next_day = given_date\n\n    while True:\n        next_day = next_day + timedelta(days=1)\n\n        # Monday to Friday are business days\n        if 0 <= next_day.weekday() < 5:\n            break\n\n    return next_day", "pass": true}
{"task_id": "649", "program": "import numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n    # Convert the list of date strings to a list of datetime objects\n    dates = [parse(date_str) for date_str in dates_str_list]\n\n    # Create a dictionary to store the weekday counts\n    weekday_counts = {}\n\n    # Iterate over the list of datetime objects and increment the count for each weekday\n    for date in dates:\n        weekday = date.weekday()\n        if weekday not in weekday_counts:\n            weekday_counts[weekday] = 0\n        weekday_counts[weekday] += 1\n\n    # Create a pandas Series from the weekday counts\n    series = pd.Series(weekday_counts)\n\n    # Set the index of the series to the weekdays\n    series.index = pd.Index([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"])\n\n    return series\ndates_str_list = [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"2022-01-04\", \"2022-01-05\", \"2022-01-06\", \"2022-01-07\"]", "problem": "Analyze the weekday distribution in a list of date strings. Implemented by dateutil.parser. This function takes a list of date strings in \"yyyy-mm-dd\" format, calculates the weekday for each date, and returns a distribution of the weekdays.\nThe function should output with:\n    Series: A pandas Series of the weekday distribution, where the index represents\n    the weekdays (from Monday to Sunday) and the values represent the counts\n    of each weekday in the provided list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n    DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    weekdays = [parse(date_str).weekday() for date_str in dates_str_list]\n    weekday_counts = np.bincount(weekdays, minlength=7)\n    \n    distribution = pd.Series(weekday_counts, index=DAYS_OF_WEEK)\n\n    return distribution", "pass": false}
{"task_id": "650", "program": "from datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n\n    pass\nfrom datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n    \"\"\"\n    Determine the time in seconds until the next turn of the year in a certain time zone from a given date string.\n    The function should output with:\n        int: The time in seconds until the next New Year in the specified timezone.\n    \"\"\"\n    # Parse the date string and convert it to a datetime object\n    date = parse(date_str)\n\n    # Convert the datetime object to the specified timezone\n    tz = pytz.timezone(tz_str)\n    date_tz = tz.localize(date)\n\n    # Get the current year and the next year\n    current_year = date_tz.year\n    next_year = current_year + 1\n\n    # Get the current time and the time of the next New Year\n    current_time = date_tz.time()\n    next_new_year_time = datetime(next_year, 1, 1, 0, 0, 0, tzinfo=tz)\n\n    # Calculate the time difference between the current time and the next New Year\n    time_diff = next_new_year_time - current_time\n\n    # Return the time difference in seconds\n    return time_diff.total_seconds()\ndate_str = \"2022-01-01 12:00:00\"\ntz_str = \"America/New_York\"", "problem": "Determine the time in seconds until the next turn of the year in a certain time zone from a given date string.\nThe function should output with:\n    int: The time in seconds until the next New Year in the specified timezone.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n```", "solution": "from datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n    tz = pytz.timezone(tz_str)\n    given_date = parse(date_str).astimezone(tz)  # Correctly handle timezone conversion\n\n    next_year = given_date.year + 1\n    new_year = tz.localize(datetime(next_year, 1, 1, 0, 0, 0))  # Correctly create the New Year moment in the specified timezone\n\n    time_until_new_year = new_year - given_date\n\n    return int(time_until_new_year.total_seconds())", "pass": false}
{"task_id": "651", "program": "import pandas as pd\nimport time\ndef task_func(df, target_value):\n\n    pass\nimport pandas as pd\nimport time\ndef task_func(df, target_value):\n    \"\"\"\n    Convert the input dic of list to DataFrame and searcher in this DataFrame for rows with cells equal to the provided target_value. It then plots the count of such rows per column.\n    The function should output with:\n        tuple: A tuple containing:\n        A pandas Series with counts of the target value per column.\n        A matplotlib Axes object representing the plot (None if dataframe is empty).\n    \"\"\"\n    # Convert the input dictionary of lists to a pandas DataFrame\n    df = pd.DataFrame(df)\n\n    # Search for rows with cells equal to the target value\n    target_rows = df[df == target_value]\n\n    # Count the number of rows with the target value per column\n    counts = target_rows.count(axis=0)\n\n    # Plot the counts per column\n    fig, ax = plt.subplots()\n    ax.bar(counts.index, counts.values)\n\n    return counts, ax", "problem": "Convert the input dic of list to DataFrame and searcher in this DataFrame for rows with cells equal to the provided target_value. It then plots the count of such rows per column.\nThe function should output with:\n    tuple: A tuple containing:\n    A pandas Series with counts of the target value per column.\n    A matplotlib Axes object representing the plot (None if dataframe is empty).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, target_value):\n```", "solution": "import pandas as pd\nimport time\ndef task_func(df, target_value):\n    start_time = time.time()\n    # Convert dataframe to string type for uniform comparison\n    dataframe = pd.DataFrame(df)\n    dataframe = dataframe.astype(str)\n    \n    counts = dataframe.apply(lambda x: (x == target_value).sum())\n\n    # Check if DataFrame is empty\n    if not dataframe.empty:\n        ax = counts.plot(kind='bar')\n    else:\n        ax = None\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return counts, ax", "pass": false}
{"task_id": "652", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n    # Find the row indices where the first cell matches the target value\n    indices = np.where(array[:, 0] == target_value)[0]\n\n    # Perform statistical analysis on the indices\n    if len(indices) > 0:\n        mean = np.mean(indices)\n        variance = np.var(indices)\n        skewness = stats.skew(indices)\n        kurtosis = stats.kurtosis(indices)\n        return (mean, variance, skewness, kurtosis)\n    else:\n        return 'N/A'", "problem": "Finds the row indices in a numpy array where the first cell matches target_value \"332\" Performs statistical analysis on these indices and plots their distribution. Return 'N/A' for all stats if no target value found.\nThe function should output with:\n    tuple: A tuple with mean, variance, skewness, and kurtosis of the indices, or\n    'N/A' if statistical analysis cannot be performed.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n    indices = np.where(array[:, 0] == target_value)[0]\n\n    # Check if statistical analysis is possible\n    if len(indices) < 2:\n        # Not enough data for meaningful statistical analysis\n        plt.hist(indices, bins='auto')  # Plotting can still occur\n        plt.show()\n        return (np.mean(indices), 'N/A', 'N/A', 'N/A') if indices.size else ('N/A', 'N/A', 'N/A', 'N/A')\n\n    # Perform statistical analysis\n    mean = np.mean(indices)\n    variance = np.var(indices)\n    skewness = stats.skew(indices)\n    kurtosis = stats.kurtosis(indices)\n\n    # Plot the distribution\n    plt.hist(indices, bins='auto')\n    plt.title('Distribution of Indices')\n    plt.xlabel('Indices')\n    plt.ylabel('Frequency')\n    plt.show()\n\n    return mean, variance, skewness, kurtosis", "pass": false}
{"task_id": "653", "program": "import matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(dataframe, target_value='332'):\n\n    pass\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(dataframe, target_value='332'):\n    \"\"\"\n    Searches a given DataFrame for occurrences of a specified target value and visualizes these occurrences using a heatmap.\n\n    Args:\n        dataframe (pd.DataFrame): The DataFrame to search.\n        target_value (str): The target value to search for.\n\n    Returns:\n        tuple: A tuple containing:\n            pd.DataFrame: A DataFrame with Boolean values indicating the presence of the target value in the input DataFrame.\n            matplotlib.axes._axes.Axes: The Axes object of the heatmap.\n    \"\"\"\n    # Create a new DataFrame with Boolean values indicating the presence of the target value\n    result_df = dataframe.applymap(lambda x: x == target_value)\n\n    # Create a heatmap of the result DataFrame\n    ax = sns.heatmap(result_df, annot=True, cmap=\"YlGnBu\")\n\n    return result_df, ax", "problem": "Searches a given DataFrame for occurrences of a specified target value and visualizes these occurrences using a heatmap.\nThe function should output with:\n    tuple: A tuple containing:\n    pd.DataFrame: A DataFrame with Boolean values indicating the presence of the target value in the input DataFrame.\n    matplotlib.axes._axes.Axes: The Axes object of the heatmap.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(dataframe, target_value='332'):\n```", "solution": "import matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(dataframe, target_value='332'):\n    mask = dataframe.applymap(lambda x: x == target_value)\n\n    # Plot the heatmap\n    plt.figure(figsize=(8, 6))\n    ax = sns.heatmap(mask, cmap='Blues', cbar=False)  # Adjusted to not display color bar for clarity in Boolean visualization\n    plt.show()\n\n    return mask, ax", "pass": true}
{"task_id": "654", "program": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n\n    pass\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Define the function to be fitted\n    def func(x, a, b):\n        return a * np.exp(-b * x)\n\n    # Define the initial guess for the parameters\n    p0 = [1, 0.1]\n\n    # Define the bounds for the parameters\n    bounds = [(0, None), (0, None)]\n\n    # Define the function to be minimized\n    def error(p):\n        return np.sum((func(array[:, 0], *p) - array[:, 1]) ** 2)\n\n    # Perform the minimization\n    popt, _ = optimize.curve_fit(error, p0, bounds=bounds)\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the data\n    ax.plot(array[:, 0], array[:, 1], 'bo')\n\n    # Plot the fitted function\n    ax.plot(array[:, 0], func(array[:, 0], *popt), 'r-')\n\n    # Set the title and labels\n    ax.set_title('Exponential Decay Fit')\n    ax.set_xlabel('Indices')\n    ax.set_ylabel('Values')\n\n    # Return the optimized parameters and the axis object\n    return popt, ax\narray = np.array([[1, 1], [2, 0.5], [3, 0.25], [4, 0.125], [5, 0.0625]])", "problem": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    indices = np.where(array[:, 0] == target_value)[0]\n    if indices.size < 3:\n        raise ValueError(\"Not enough points to perform the fitting.\")\n\n    x_data = np.arange(len(indices))\n    y_data = indices\n\n    # Provide an initial guess for the parameters\n    initial_guess = [1, 0.1, min(y_data)]\n\n    # Fit the function with an increased maxfev\n    popt, _ = optimize.curve_fit(func, x_data, y_data, p0=initial_guess, maxfev=10000)\n\n    # Plot the fitting function\n    x_fit = np.linspace(min(x_data), max(x_data), 500)\n    plt.figure()\n    plt.plot(x_data, y_data, 'bo', label='Data')\n    plt.plot(x_fit, func(x_fit, *popt), 'r-', label='Fit')\n    plt.legend()\n    plt.show()\n\n    return popt, plt.gca()", "pass": false}
{"task_id": "655", "program": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts, num_topics):\n\n    pass\nimport re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from a collection of text documents using Non-Negative Matrix Factorization (NMF).\n    This function first preprocesses the input texts by removing non-alphanumeric characters (excluding spaces),\n    converting all characters to lowercase, and removing stopwords. It then vectorizes the processed texts using TF-IDF\n    and applies NMF to extract the specified number of topics. Each topic is represented as a list of its most\n    significant words based on the NMF component weights.\n\n    Args:\n        texts (list of str): A list of text documents to be processed.\n        num_topics (int): The number of topics to extract.\n\n    Returns:\n        list of list of str: A list where each element is a list of words representing a topic.\n    \"\"\"\n    # Preprocess the texts\n    texts = [re.sub(ALPHANUMERIC, ' ', text.lower()) for text in texts]\n    texts = [text.split() for text in texts]\n    texts = [[word for word in text if word not in STOPWORDS] for text in texts]\n\n    # Vectorize the texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    vectors = vectorizer.fit_transform(texts)\n\n    # Apply NMF to extract topics\n    nmf = NMF(n_components=num_topics)\n    topics = nmf.fit_transform(vectors)\n\n    # Get the most significant words for each topic\n    topic_words = [vectorizer.get_feature_names()[topics[i].argsort()[-5:]] for i in range(num_topics)]\n\n    return topic_words\ntexts = ['This is a sample text document.', 'This is another sample text document.']", "problem": "Performs topic extraction from a collection of text documents using Non-Negative Matrix Factorization (NMF). This function first preprocesses the input texts by removing non-alphanumeric characters (excluding spaces), converting all characters to lowercase, and removing stopwords. It then vectorizes the processed texts using TF-IDF and applies NMF to extract the specified number of topics. Each topic is represented as a list of its most significant words based on the NMF component weights.\nNote that: The exact output may vary depending on the TF-IDF vectorization and NMF initialization.\nThe function should output with:\n    list of list of str: A list where each element is a list of words representing a topic.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts, num_topics):\n```", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts, num_topics):\n\n    if not texts:\n        return [], None  # Adjusted to return a tuple similar to the main return type\n\n    cleaned_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    tokenized_texts = [' '.join(word for word in text.split() if word not in STOPWORDS) for text in cleaned_texts]\n\n    # Handle case where all texts might result in being empty after removing stopwords\n    if not any(tokenized_texts):\n        return [], None  # Or another appropriate return value indicating no topics were extracted\n\n    vectorizer = TfidfVectorizer(max_df=1.0, min_df=1, stop_words='english')\n    tfidf = vectorizer.fit_transform(tokenized_texts)\n\n    nmf = NMF(n_components=num_topics, random_state=1).fit(tfidf)\n    feature_names = vectorizer.get_feature_names_out() if hasattr(vectorizer,\n                                                                  'get_feature_names_out') else vectorizer.get_feature_names()\n\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        # Collect the top words for this topic, ensuring the result is a list\n        topic_keywords = [feature_names[i] for i in topic.argsort()[:-num_topics - 1:-1]]\n        topics.append(topic_keywords)  # Append a list of keywords\n\n    return topics  # Assuming plt.gca() or similar plotting calls are handled separately if needed", "pass": false}
{"task_id": "656", "program": "import re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n\n    pass\nimport re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n    \"\"\"\n    Analyze the sentiment of a text using the provided SentimentIntensityAnalyzer.\n    The text is first cleaned by:\n    - Removing all non-alphanumeric characters except spaces.\n    - Converting to lowercase.\n    - Removing punctuation.\n    The function should output with:\n        dict: A dictionary with sentiment scores. The dictionary contains four scores:\n        'compound': The overall sentiment score.\n        'neg': Negative sentiment score.\n        'neu': Neutral sentiment score.\n        'pos': Positive sentiment score.\n    \"\"\"\n    # Clean the text\n    text = text.lower()\n    text = ALPHANUMERIC.sub(' ', text)\n    text = ''.join([c for c in text if c not in PUNCTUATIONS])\n\n    # Analyze the sentiment\n    sentiment = sia.polarity_scores(text)\n\n    return sentiment\nsia = SentimentIntensityAnalyzer()\ntext = \"This is a very positive text with a compound score of 0.8.\"", "problem": "Analyze the sentiment of a text using the provided SentimentIntensityAnalyzer. The text is first cleaned by: - Removing all non-alphanumeric characters except spaces. - Converting to lowercase. - Removing punctuation.\nThe function should output with:\n    dict: A dictionary with sentiment scores. The dictionary contains four scores:\n    'compound': The overall sentiment score.\n    'neg': Negative sentiment score.\n    'neu': Neutral sentiment score.\n    'pos': Positive sentiment score.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n```", "solution": "import re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n    text = ALPHANUMERIC.sub(' ', text).lower()\n    text = text.translate(str.maketrans('', '', PUNCTUATIONS))\n    sentiment_scores = sia.polarity_scores(text)\n    return sentiment_scores", "pass": true}
{"task_id": "657", "program": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n\n    pass\nimport re\nimport nltk\nfrom gensim.models import Word2Vec\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from a list of texts using the gensim Word2Vec model and nltk.corpus.stopwords.\n    The texts are first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words are removed.\n    The function should output with:\n        Word2Vec: A trained Word2Vec model.\n    \"\"\"\n    # Clean the texts\n    clean_texts = []\n    for text in texts:\n        text = ALPHANUMERIC.sub(' ', text).lower()\n        if stopwords is not None:\n            text = ' '.join([word for word in text.split() if word not in stopwords])\n        clean_texts.append(text)\n\n    # Train the Word2Vec model\n    model = Word2Vec(clean_texts, min_count=1)\n\n    return model\ntexts = ['This is a sample text.', 'This is another sample text.']\nstopwords = set(nltk.corpus.stopwords.words('english'))", "problem": "Generate word vectors from a list of texts using the gensim Word2Vec model and nltk.corpus.stopwords. The texts are first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words are removed.\nThe function should output with:\n    Word2Vec: A trained Word2Vec model.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n```", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n        \n    cleaned_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    tokenized_texts = [[word for word in text.split() if word not in stopwords] for text in cleaned_texts]\n    \n    # Handle empty texts input by returning an untrained Word2Vec model\n    if not tokenized_texts:\n        return Word2Vec(vector_size=100)\n\n    model = Word2Vec(sentences=tokenized_texts, vector_size=100, window=5, min_count=1, workers=4)\n\n    return model", "pass": false}
{"task_id": "658", "program": "import re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n\n    pass\nimport re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n    \"\"\"\n    Creates a document-term matrix (DTM) from a list of text documents using CountVectorizer from Scikit-learn.\n    Texts are preprocessed by removing non-alphanumeric characters (excluding spaces), converting to lowercase, and excluding English stop words defined in NLTK.\n\n    Parameters\n    ----------\n    texts : list of str\n        A list of text documents.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame where rows represent documents and columns represent unique terms;\n        cell values indicate the frequency of a term in a document.\n    \"\"\"\n    # Preprocess text documents\n    texts = [re.sub(ALPHANUMERIC, ' ', text.lower()) for text in texts]\n    texts = [text.split() for text in texts]\n    texts = [text for text in texts if text not in STOPWORDS]\n\n    # Create a CountVectorizer object\n    vectorizer = CountVectorizer()\n\n    # Fit the vectorizer to the preprocessed text documents\n    vectorizer.fit(texts)\n\n    # Transform the text documents into a document-term matrix\n    dtm = vectorizer.transform(texts)\n\n    # Convert the document-term matrix into a DataFrame\n    dtm = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names())\n\n    return dtm\ntexts = ['This is a sample text document.', 'This is another sample text document.']", "problem": "Creates a document-term matrix (DTM) from a list of text documents using CountVectorizer from Scikit-learn. Texts are preprocessed by removing non-alphanumeric characters (excluding spaces), converting to lowercase, and excluding English stop words defined in NLTK.\nThe function should output with:\n    pd.DataFrame: A DataFrame where rows represent documents and columns represent unique terms;\n    cell values indicate the frequency of a term in a document.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n```", "solution": "import re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n    cleaned_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    tokenized_texts = [' '.join(word for word in text.split() if word not in STOPWORDS) for text in cleaned_texts]\n\n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(tokenized_texts)\n    dtm_df = pd.DataFrame(dtm.toarray(), columns= vectorizer.get_feature_names_out() if hasattr(vectorizer,\n                                                                  'get_feature_names_out') else vectorizer.get_feature_names())\n\n    return dtm_df", "pass": false}
{"task_id": "659", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n    \"\"\"\n    Draw normal distributions for multiple 'x' and 'y' arrays with labels.\n    Each pair (x, y) represents a different chemical compound in the 'labels' list.\n    The function should output with:\n        fig: Matplotlib figure object.\n    \"\"\"\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Loop through each pair of x and y arrays\n    for i, (x_i, y_i) in enumerate(zip(x, y)):\n        # Draw a normal distribution for each pair\n        ax.plot(x_i, y_i, label=labels[i])\n\n    # Add a legend to the plot\n    ax.legend()\n\n    # Return the figure\n    return fig\nx = [np.random.normal(0, 1, 100), np.random.normal(1, 1, 100)]\ny = [np.random.normal(0, 1, 100), np.random.normal(1, 1, 100)]\nlabels = ['Compound 1', 'Compound 2']", "problem": "Draw normal distributions for multiple 'x' and 'y' arrays with labels. Each pair (x, y) represents a different chemical compound in the 'labels' list.\nThe function should output with:\n    fig: Matplotlib figure object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        mu = np.mean(y[i])\n        sigma = np.std(y[i])\n        pdf = stats.norm.pdf(x[i], mu, sigma)\n        ax.plot(x[i], pdf, label=labels[i])\n    \n    ax.legend()\n    \n    return fig", "pass": true}
{"task_id": "660", "program": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n\n    pass\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n    \"\"\"\n    Scale the \"x\" and \"y\" arrays using the standard scaler of sklearn and plot them with given labels.\n    Each pair of x and y arrays are scaled independently and plotted as a separate series with a label.\n\n    Parameters\n    ----------\n    x : array-like\n        The x-values to be scaled and plotted.\n    y : array-like\n        The y-values to be scaled and plotted.\n    labels : list of str\n        The labels for each series.\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        The figure object containing the plot.\n    \"\"\"\n    # Scale the x and y arrays using the standard scaler\n    scaler = StandardScaler()\n    x_scaled = scaler.fit_transform(x)\n    y_scaled = scaler.fit_transform(y)\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the scaled x and y arrays with the given labels\n    for i in range(len(x_scaled)):\n        ax.plot(x_scaled[i], y_scaled[i], label=labels[i])\n\n    # Add a legend to the plot\n    ax.legend()\n\n    return fig\nx = np.array([[1, 2, 3], [4, 5, 6]])\ny = np.array([[10, 20, 30], [40, 50, 60]])\nlabels = ['Series 1', 'Series 2']", "problem": "Scale the \"x\" and \"y\" arrays using the standard scaler of sklearn and plot them with given labels. Each pair of x and y arrays are scaled independently and plotted as a separate series with a label.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n```", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n    scaler = StandardScaler()\n\n    fig, ax = plt.subplots()\n\n    # Iterate over the datasets, scale each, and plot\n    for i in range(len(x)):\n        # Combine x and y values and scale them\n        xy = np.vstack((x[i], y[i])).T  # Transpose to get correct shape for scaling\n        xy_scaled = scaler.fit_transform(xy)  # Scale data\n\n        # Plot scaled data\n        ax.plot(xy_scaled[:, 0], xy_scaled[:, 1], label=labels[i])\n\n    ax.legend()  # Add a legend to the plot\n\n    return fig  # Return the figure object containing the plot", "pass": true}
{"task_id": "661", "program": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n    # Create a dataframe with the x and y values\n    df = pd.DataFrame({'x': x, 'y': y})\n\n    # Create a heatmap using seaborn\n    ax = sns.heatmap(df, annot=True, cmap='YlGnBu', cbar=False)\n\n    # Add labels to the heatmap\n    ax.set_xticklabels(labels)\n    ax.set_yticklabels(labels)\n\n    return ax, df\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 4, 5]\nlabels = LABELS", "problem": "Create a heatmap using the seaborn library for \"x\" as x-values and \"y\" as y-values with labels.\nThe function should output with:\n    ax (Axes): A seaborn heatmap object.\n    df (DataFrame): The dataframe used to create the heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n    data = []\n\n    for i in range(len(x)):\n        data.append(np.concatenate((x[i], y[i])))\n\n    df = pd.DataFrame(data, index=labels)\n    ax = sns.heatmap(df, cmap='coolwarm')\n    \n    return ax, df", "pass": false}
{"task_id": "662", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n    # Perform PCA on the data\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(np.array([x, y]).T)\n\n    # Plot the results\n    fig, ax = plt.subplots()\n    ax.scatter(principal_components[:, 0], principal_components[:, 1], c=labels)\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA of x and y')\n\n    return fig\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 4, 6, 8, 10])\nlabels = np.array(['A', 'B', 'C', 'D', 'E'])", "problem": "Perform Principal Component Analysis (PCA) on \"x\" as x-values and \"y\" as y-values and record the results with labels.\nThe function should output with:\n    fig: Matplotlib figure object.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n    pca = PCA(n_components=2)\n\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        xy = np.vstack((x[i], y[i])).T\n        xy_transformed = pca.fit_transform(xy)\n        ax.plot(xy_transformed[:, 0], xy_transformed[:, 1], label=labels[i])\n    \n    ax.legend()\n    \n    return fig", "pass": false}
{"task_id": "663", "program": "import numpy as np\nfrom scipy.optimize import curve_fit\ndef task_func(x, y, labels):\n\n    pass\nimport numpy as np\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c to the provided x and y data points for each set of data and plots the fitted curves with the corresponding labels on a single matplotlib figure.\n\n    Parameters\n    ----------\n    x : array_like\n        The x-coordinates of the data points.\n    y : array_like\n        The y-coordinates of the data points.\n    labels : list of str\n        The labels for each set of data points.\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        The figure object that contains the plotted curves.\n    \"\"\"\n    # Define the exponential function\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Initialize the figure\n    fig, ax = plt.subplots()\n\n    # Loop over the data points and fit the exponential curve\n    for i, (x_i, y_i, label_i) in enumerate(zip(x, y, labels)):\n        # Fit the exponential curve to the data points\n        popt, _ = curve_fit(exp_func, x_i, y_i)\n\n        # Plot the fitted curve with the corresponding label\n        ax.plot(x_i, exp_func(x_i, *popt), label=label_i)\n\n    # Add a legend to the plot\n    ax.legend()\n\n    return fig\nx = [np.linspace(0, 10, 100), np.linspace(10, 20, 100)]\ny = [np.exp(-x_i) + np.random.normal(0, 0.1, size=len(x_i)) for x_i in x]\nlabels = ['Data 1', 'Data 2']", "problem": "Fit an exponential curve to given data points and plot the curves with labels. It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c to the provided x and y data points for each set of data and plots the fitted curves with the corresponding labels on a single matplotlib figure.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object that contains the plotted curves.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.optimize import curve_fit\ndef task_func(x, y, labels):\n```", "solution": "import numpy as np\nfrom scipy.optimize import curve_fit\ndef task_func(x, y, labels):\n\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n\n    ax.legend()\n\n    return fig", "pass": false}
{"task_id": "664", "program": "import statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n\n    pass\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n    \"\"\"\n    Plot sales trends for five products over a year, highlighting variability with standard deviation shading with 'Month' on x-axis and 'Sales' on y-axis.\n\n    Args:\n        sales_data (list): List of sales data for five products over a year.\n\n    Returns:\n        ax (matplotlib.axes.Axes): Axes object with the sales trends plot.\n    \"\"\"\n    # Calculate the mean and standard deviation for each product\n    means = [statistics.mean(sales) for sales in sales_data]\n    stds = [statistics.stdev(sales) for sales in sales_data]\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the mean sales for each product\n    ax.plot(means, label='Mean Sales')\n\n    # Shade the standard deviation for each product\n    ax.fill_between(range(len(sales_data[0])), [mean - std for mean, std in zip(means, stds)], [mean + std for mean, std in zip(means, stds)], alpha=0.2)\n\n    # Set the x-axis label\n    ax.set_xlabel('Month')\n\n    # Set the y-axis label\n    ax.set_ylabel('Sales')\n\n    # Add a title\n    ax.set_title('Sales Trends')\n\n    # Show the plot\n    plt.show()\n\n    return ax\nsales_data = [[100, 120, 150, 180, 200], [120, 140, 170, 200, 220], [150, 180, 200, 220, 250], [180, 200, 220, 250, 280], [200, 220, 250, 280, 300]]", "problem": "Plot sales trends for five products over a year, highlighting variability with standard deviation shading with 'Month' on x-axis and 'Sales' on y-axis.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object with the sales trends plot.\nYou should write self-contained code starting with:\n```\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n```", "solution": "import statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n    fig, ax = plt.subplots()\n    for label in sales_data.columns[1:]:  # Skipping 'Month' column\n        monthly_sales = sales_data[label]\n        std_dev = statistics.stdev(monthly_sales)\n\n        ax.plot(sales_data['Month'], monthly_sales, label=label)\n        ax.fill_between(sales_data['Month'],\n                        monthly_sales - std_dev,\n                        monthly_sales + std_dev,\n                        alpha=0.2)\n\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Sales')\n    ax.set_title('Monthly Sales Trends with Standard Deviation')\n    ax.legend()\n\n    # Set x-ticks to be explicit months from the DataFrame\n    ax.set_xticks(sales_data['Month'])\n\n    return ax", "pass": false}
{"task_id": "665", "program": "import shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n\n    pass\nimport shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n    \"\"\"\n    Copy all files from 'src_dir' to 'dst_dir' that match any pattern in ['*.txt', '*.docx'].\n    The function should output with:\n        str: The destination directory.\n    \"\"\"\n    # Create the destination directory if it does not exist\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    # Get a list of all files in the source directory\n    files = os.listdir(src_dir)\n\n    # Filter the files to only include those that match the desired patterns\n    filtered_files = [f for f in files if any(fnmatch.fnmatch(f, pattern) for pattern in ['*.txt', '*.docx'])]\n\n    # Copy the filtered files to the destination directory\n    for file in filtered_files:\n        shutil.copy(os.path.join(src_dir, file), dst_dir)\n\n    return dst_dir\nsrc_dir = 'path/to/source/directory'\ndst_dir = 'path/to/destination/directory'", "problem": "Copy all files from 'src_dir' to 'dst_dir' that match any pattern in ['*.txt', '*.docx'].\nThe function should output with:\n    str: The destination directory.\nYou should write self-contained code starting with:\n```\nimport shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n```", "solution": "import shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n    FILE_PATTERNS = ['*.txt', '*.docx']\n    # Find all matching files\n    matching_files = list(itertools.chain.from_iterable(\n        fnmatch.filter(os.listdir(src_dir), pattern) for pattern in FILE_PATTERNS))\n\n    for filename in matching_files:\n        shutil.copy2(os.path.join(src_dir, filename), dst_dir)\n\n    return dst_dir", "pass": true}
{"task_id": "666", "program": "from itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n\n    pass\nfrom itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n    \"\"\"\n    Find the subsequence in a string that has the maximum total weight based on the weights given for each character.\n    The weights are assigned randomly and a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n    The function should output with:\n        str: The subsequence with the highest weight.\n    \"\"\"\n    # Initialize the maximum weight and the corresponding subsequence\n    max_weight = 0\n    max_subsequence = \"\"\n\n    # Iterate over all possible substrings of the input sequence\n    for i in range(len(seq)):\n        for j in range(i, len(seq)):\n            # Extract the substring and calculate its weight\n            subsequence = seq[i:j+1]\n            weight = sum(letter_weight_dict[letter] for letter in subsequence)\n\n            # If the weight is greater than the current maximum weight, update the maximum weight and the corresponding subsequence\n            if weight > max_weight:\n                max_weight = weight\n                max_subsequence = subsequence\n\n    return max_subsequence\nletter_weight_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nseq = \"abcde\"", "problem": "Find the subsequence in a string that has the maximum total weight based on the weights given for each character. The weights are assigned randomly and a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\nThe function should output with:\n    str: The subsequence with the highest weight.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n```", "solution": "from itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n    max_weight = -math.inf\n    max_subseq = ''\n\n    for r in range(1, len(seq) + 1):\n        for subseq in combinations(seq, r):\n            weight = sum(letter_weight_dict[c] for c in subseq)\n            if weight > max_weight:\n                max_weight = weight\n                max_subseq = ''.join(subseq)\n\n    return max_subseq", "pass": false}
{"task_id": "667", "program": "import heapq\nimport collections\ndef task_func(x, n):\n\n    pass\nimport heapq\nimport collections\ndef task_func(x, n):\n    \"\"\"\n    Find the n most common letters in a dictionary, x, where the key letters and the values are their frequencies.\n    The function should output with:\n        list: The n most frequent letters.\n    \"\"\"\n    # Create a list of tuples containing the letter and its frequency\n    letter_freq = [(letter, freq) for letter, freq in x.items()]\n\n    # Sort the list of tuples by frequency in descending order\n    letter_freq.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the top n most frequent letters\n    return [letter for letter, freq in letter_freq[:n]]\nx = {'a': 2, 'b': 3, 'c': 4, 'd': 5, 'e': 6, 'f': 7, 'g': 8, 'h': 9, 'i': 10}", "problem": "Find the n most common letters in a dictionary, x, where the key letters and the values are their frequencies.\nThe function should output with:\n    list: The n most frequent letters.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport collections\ndef task_func(x, n):\n```", "solution": "import heapq\nimport collections\ndef task_func(x, n):\n    counter = collections.Counter(x)\n    most_frequent = heapq.nlargest(n, counter.keys(), key=counter.get)\n\n    return most_frequent", "pass": true}
{"task_id": "668", "program": "import itertools\nimport math\ndef task_func(x):\n\n    pass\nimport itertools\nimport math\ndef task_func(x):\n    # Initialize variables\n    min_length = math.inf\n    min_subsequence = []\n\n    # Iterate through all possible sub-sequences of x\n    for subsequence in itertools.combinations(x, len(x)):\n        # Calculate the total length of the sub-sequence\n        total_length = sum(x[key] for key in subsequence)\n\n        # If the total length is less than the current minimum, update the minimum and the sub-sequence\n        if total_length < min_length:\n            min_length = total_length\n            min_subsequence = subsequence\n\n    # Return the sub-sequence with the minimum total length\n    return list(min_subsequence)\nx = {'a': 2, 'b': 3, 'c': 4, 'd': 5}", "problem": "Find the sub-sequence of a dictionary, x, with the minimum total length, where the keys are letters and the values are their lengths.\nThe function should output with:\n    list: The subsequence with the minimum total length.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport math\ndef task_func(x):\n```", "solution": "import itertools\nimport math\ndef task_func(x):\n    min_length = math.inf\n    min_subseq = []\n\n    for r in range(1, len(x) + 1):\n        for subseq in itertools.combinations(x.items(), r):\n            length = sum(length for letter, length in subseq)\n            if length < min_length:\n                min_length = length\n                min_subseq = [letter for letter, length in subseq]\n\n    return min_subseq", "pass": false}
{"task_id": "669", "program": "import itertools\nimport math\ndef task_func(x):\n\n    pass\nimport itertools\nimport math\ndef task_func(x):\n    # Calculate the cosine of each value in the dictionary\n    cosines = {key: math.cos(value) for key, value in x.items()}\n\n    # Find the pair of keys with the highest sum of the cosines\n    max_sum = -1\n    max_keys = None\n    for keys in itertools.combinations(cosines.keys(), 2):\n        sum_cosines = sum(cosines[key] for key in keys)\n        if sum_cosines > max_sum:\n            max_sum = sum_cosines\n            max_keys = keys\n\n    return max_keys\nx = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "problem": "Find the key pair in a dictionary, x, which has the highest sum of the cosine of each of its values.\nThe function should output with:\n    tuple: The pair of keys with the highest sum of the cosine of their values.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport math\ndef task_func(x):\n```", "solution": "import itertools\nimport math\ndef task_func(x):\n    pairs = list(itertools.combinations(x.keys(), 2))\n    max_pair = max(pairs, key=lambda pair: math.cos(x[pair[0]]) + math.cos(x[pair[1]]))\n    print(max_pair)\n\n    return max_pair", "pass": true}
{"task_id": "670", "program": "from itertools import combinations\nimport math\ndef task_func(x, w):\n\n    pass\nfrom itertools import combinations\nimport math\ndef task_func(x, w):\n    \"\"\"\n    Find the continuous substring of x, which has the maximum total weight, given a dictionary where the keys are characters and the values are their weights.\n\n    Args:\n        x (str): The input string.\n        w (dict): The dictionary of weights, where the keys are characters and the values are their weights.\n\n    Returns:\n        max_substr (str): The continuous substring with the highest weight.\n    \"\"\"\n    # Initialize the maximum weight and the corresponding substring\n    max_weight = 0\n    max_substr = \"\"\n\n    # Iterate over all possible substrings of x\n    for i in range(len(x)):\n        for j in range(i, len(x)):\n            # Calculate the weight of the current substring\n            substr = x[i:j+1]\n            weight = sum(w[c] for c in substr)\n\n            # Update the maximum weight and the corresponding substring\n            if weight > max_weight:\n                max_weight = weight\n                max_substr = substr\n\n    return max_substr\nx = \"abcd\"\nw = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}", "problem": "Find the continuous substring of x, which has the maximum total weight, given a dictionary where the keys are characters and the values are their weights.\nThe function should output with:\n    max_substr (str): The continuous substring with the highest weight.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nimport math\ndef task_func(x, w):\n```", "solution": "from itertools import combinations\nimport math\ndef task_func(x, w):\n    max_weight = -math.inf\n    max_substr = ''\n\n    for start, end in combinations(range(len(x) + 1), 2):\n        substr = x[start:end]\n        weight = sum(w.get(c, 0) for c in substr)\n        if weight > max_weight:\n            max_weight = weight\n            max_substr = substr\n\n    return max_substr", "pass": true}
{"task_id": "671", "program": "import os\nimport random\nimport json\ndef task_func(directory, n):\n\n    pass\nimport os\nimport random\nimport json\ndef task_func(directory, n):\n    \"\"\"\n    Create n random files in a directory with json content with the key 'number' and a random integer value between 1 and 100, and then reset the cursor to the beginning of each file.\n    The function should output with:\n        directory (str): The directory in which the files were generated.\n    \"\"\"\n    # Create a list of random integers between 1 and 100\n    numbers = [random.randint(1, 100) for _ in range(n)]\n\n    # Create a dictionary with the key 'number' and the corresponding random integer value\n    data = {\n        'number': numbers\n    }\n\n    # Write the dictionary to a json file in the specified directory\n    for i, number in enumerate(numbers):\n        with open(os.path.join(directory, f'file{i}.json'), 'w') as f:\n            json.dump(data, f)\n\n    # Reset the cursor to the beginning of each file\n    for i in range(n):\n        with open(os.path.join(directory, f'file{i}.json'), 'r') as f:\n            f.seek(0)\n\n    return directory", "problem": "Create n random files in a directory with json content with the key 'number' and a random integer value between 1 and 100, and then reset the cursor to the beginning of each file.\nThe function should output with:\n    directory (str): The directory in which the files were generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\nimport json\ndef task_func(directory, n):\n```", "solution": "import os\nimport random\nimport json\ndef task_func(directory, n):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n):\n        filename = str(i) + \".json\"\n        filepath = os.path.join(directory, filename)\n\n        with open(filepath, 'w') as file:\n            json.dump({'number': random.randint(1, 100)}, file)\n            file.seek(0)\n\n    return directory", "pass": false}
{"task_id": "672", "program": "import csv\nimport sys\ndef task_func(filename):\n\n    pass\nimport csv\nimport sys\ndef task_func(filename):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        lines.reverse()\n        with open(filename, 'w') as f:\n            f.writelines(lines)\n        f.seek(0)\n        return f", "problem": "Read a CSV file, inverse the order of the lines and write the inverted lines back into the file. Then reset the cursor to the beginning of the file.\nThe function should output with:\n    filename (str): The name of the CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport sys\ndef task_func(filename):\n```", "solution": "import csv\nimport sys\ndef task_func(filename):\n    try:\n        with open(filename, 'r+') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            file.seek(0)\n            file.truncate()\n\n            writer = csv.writer(file)\n            writer.writerows(reversed(rows))\n\n            file.seek(0)\n    except Exception as e:\n        print(f\"An error occurred: {e}\", file=sys.stderr)\n\n    return filename", "pass": false}
{"task_id": "673", "program": "import os\nimport random\ndef task_func(directory, n_files):\n\n    pass\nimport os\nimport random\ndef task_func(directory, n_files):\n    \"\"\"\n    Create n random txt files in a specific directory, write only a single digit random integer into each file, and then reset the cursor to the beginning of each file. The file names start from 'file_1.txt' and increment by 1 for each file.\n    The function should output with:\n        n_files (int): The number of files generated.\n    \"\"\"\n    # Create a list to store the file names\n    file_names = []\n    # Loop through the number of files to be generated\n    for i in range(n_files):\n        # Generate a random integer\n        random_int = random.randint(0, 9)\n        # Create a file name\n        file_name = f\"file_{i+1}.txt\"\n        # Add the file name to the list\n        file_names.append(file_name)\n        # Open the file in write mode\n        with open(os.path.join(directory, file_name), \"w\") as f:\n            # Write the random integer to the file\n            f.write(str(random_int))\n            # Reset the cursor to the beginning of the file\n            f.seek(0)\n    # Return the number of files generated\n    return n_files", "problem": "Create n random txt files in a specific directory, write only a single digit random integer into each file, and then reset the cursor to the beginning of each file. The file names start from 'file_1.txt' and increment by 1 for each file.\nThe function should output with:\n    n_files (int): The number of files generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\ndef task_func(directory, n_files):\n```", "solution": "import os\nimport random\ndef task_func(directory, n_files):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n_files):\n        filename = os.path.join(directory, f\"file_{i+1}.txt\")\n\n        with open(filename, 'w') as file:\n            file.write(str(random.randint(0, 9)))\n            file.seek(0)\n\n    return n_files", "pass": true}
{"task_id": "674", "program": "import pandas as pd\nimport os\ndef task_func(filename):\n\n    pass\nimport pandas as pd\nimport os\ndef task_func(filename):\n    # Read the CSV file\n    df = pd.read_csv(filename)\n\n    # Reverse the order of the lines\n    df = df[::-1]\n\n    # Write the inverted lines back into the file\n    df.to_csv(filename, index=False)\n\n    # Move the cursor back to the beginning of the file\n    os.lseek(filename, 0, os.SEEK_SET)\n\n    return filename\nfilename = \"example.csv\"", "problem": "Read a CSV file of pandas, reverse the order of the lines and write the inverted lines back into the file. Then move the cursor back to the beginning of the file. The header should not be inverted and the file may be empty.\nThe function should output with:\n    filename (str): The name of the CSV file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(filename):\n```", "solution": "import pandas as pd\nimport os\ndef task_func(filename):\n    if not os.path.exists(filename):\n        return filename\n\n    # Check if empty\n    with open(filename, 'r') as file:\n        if not file.read(1):\n            return filename\n\n    df = pd.read_csv(filename)\n    df = df.iloc[::-1]\n    df.to_csv(filename, index=False)\n\n    with open(filename, 'r+') as file:\n        file.seek(0)\n\n    return filename", "pass": false}
{"task_id": "675", "program": "import os\nimport random\ndef task_func(directory, n_files):\n\n    pass\nimport os\nimport random\ndef task_func(directory, n_files):\n    \"\"\"\n    Create n random text files in a specific directory, write a random string to each file, and then reset the cursor to the beginning of each file.\n    The function should output with:\n        directory (str): The directory in which the files were generated.\n    \"\"\"\n    # Create a list of random strings\n    strings = [random.choice(string.ascii_letters) for _ in range(n_files)]\n\n    # Create n random text files in the specified directory\n    for i in range(n_files):\n        with open(os.path.join(directory, f\"file{i}.txt\"), \"w\") as f:\n            f.write(strings[i])\n\n    # Reset the cursor to the beginning of each file\n    for i in range(n_files):\n        with open(os.path.join(directory, f\"file{i}.txt\"), \"r+\") as f:\n            f.seek(0)\n\n    return directory", "problem": "Create n random text files in a specific directory, write a random string to each file, and then reset the cursor to the beginning of each file.\nThe function should output with:\n    directory (str): The directory in which the files were generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\ndef task_func(directory, n_files):\n```", "solution": "import os\nimport random\ndef task_func(directory, n_files):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n_files):\n        filename = os.path.join(directory, f\"file_{i+1}.txt\")\n\n        with open(filename, 'w') as file:\n            file.write(str(random.randint(1, 100)))\n            file.seek(0)\n\n    return directory", "pass": false}
{"task_id": "676", "program": "import pandas as pd\nimport random\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(df):\n    # Add a 'winner' column to the DataFrame\n    df['winner'] = ''\n\n    # Iterate over each row of the DataFrame\n    for i in range(len(df)):\n        # Get the scores for the two teams\n        team1_score = df.iloc[i]['team1_score']\n        team2_score = df.iloc[i]['team2_score']\n\n        # Determine the winner\n        if team1_score > team2_score:\n            winner = df.iloc[i]['team1']\n        elif team2_score > team1_score:\n            winner = df.iloc[i]['team2']\n        else:\n            # If the scores are equal, randomly decide the winner\n            winner = random.choice([df.iloc[i]['team1'], df.iloc[i]['team2']])\n\n        # Update the 'winner' column\n        df.iloc[i, df.columns.get_loc('winner')] = winner\n\n    return df\ndf = pd.DataFrame({'team1': ['A', 'B', 'C', 'D'],\n                   'team2': ['B', 'C', 'D', 'A'],\n                   'team1_score': [1, 2, 3, 4],\n                   'team2_score': [2, 3, 4, 1]})", "problem": "Generate a DataFrame that contains savegames for a number of games between different teams. Each row of the input DataFrame represents a match, and contains two teams and their respective scores. The function adds a 'winner' column to the DataFrame, which is the team with the highest score in each match. If the scores are equal, the winner is should be randomly decided.\nThe function should output with:\n    df (pandas.DataFrame): The DataFrame with the added 'winner' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(df):\n\n    def determine_winner(row):\n        if row['score1'] > row['score2']:\n            return row['team1']\n        elif row['score1'] < row['score2']:\n            return row['team2']\n        else:\n            return random.choice([row['team1'], row['team2']])\n    \n    # Using pd.Series to explicitly create a new Series for the 'winner' column\n    winner_series = pd.Series([determine_winner(row) for index, row in df.iterrows()], index=df.index)\n    df['winner'] = winner_series\n    return df", "pass": false}
{"task_id": "677", "program": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n    \"\"\"\n    Analyze the relationship between two variables in a DataFrame.\n    The function performs a linear regression on the two variables and adds a 'predicted' column to the DataFrame.\n    The function should output with:\n        df (pandas.DataFrame): The DataFrame with the added 'predicted' column.\n    \"\"\"\n    # Perform linear regression on the two variables\n    x = df['x']\n    y = df['y']\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Add a 'predicted' column to the DataFrame\n    df['predicted'] = slope * x + intercept\n\n    return df\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 6, 8, 10]})", "problem": "Analyze the relationship between two variables in a DataFrame. The function performs a linear regression on the two variables and adds a 'predicted' column to the DataFrame.\nThe function should output with:\n    df (pandas.DataFrame): The DataFrame with the added 'predicted' column.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n    \n    regression = linregress(df['var1'], df['var2'])\n    \n    # Explicit use of np.array to demonstrate the np. prefix usage\n    # This step is purely illustrative and may not be necessary for this specific logic\n    predictions = np.array(regression.slope) * np.array(df['var1']) + np.array(regression.intercept)\n    \n    df['predicted'] = pd.Series(predictions, index=df.index)\n\n    return df", "pass": false}
{"task_id": "678", "program": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n\n    pass\nimport pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    # Create a list to store the dataframes\n    df_list = []\n\n    # Loop through the files in the directory\n    for filename in os.listdir(path):\n        # Check if the file is a JSON file\n        if filename.endswith(\".json\"):\n            # Read the JSON file into a dataframe\n            df = pd.read_json(os.path.join(path, filename))\n\n            # Add a \"Source\" column to the dataframe\n            df[\"Source\"] = filename\n\n            # Append the dataframe to the list\n            df_list.append(df)\n\n    # Concatenate the dataframes in the list\n    df = pd.concat(df_list)\n\n    # Create the \"processed\" subdirectory if it doesn't exist\n    processed_path = os.path.join(path, \"processed\")\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n\n    # Move the processed files to the \"processed\" subdirectory\n    for filename in os.listdir(path):\n        if filename.endswith(\".json\"):\n            shutil.move(os.path.join(path, filename), processed_path)\n\n    return df", "problem": "Processes JSON files in a directory. The function reads each JSON file alphabetically into a DataFrame and inserts a \"Source\" column that specifies the filename. The processed files are then moved to a \"processed\" subdirectory. The path may not exist initially.\nThe function should output with:\n    df (pandas.DataFrame): A DataFrame containing the data from all processed files.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n```", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n\n    df = pd.DataFrame()\n    processed_path = os.path.join(path, 'processed')\n\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(path, filename)\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n                if isinstance(data, dict):\n                    data = [data]  # Wrap scalar values in a list\n                temp_df = pd.DataFrame(data)\n                temp_df['source'] = filename\n                df = pd.concat([df, temp_df])\n\n            shutil.move(file_path, processed_path)\n\n    return df", "pass": false}
{"task_id": "679", "program": "import pandas as pd\nfrom collections import Counter\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom collections import Counter\ndef task_func(df):\n    # Create a new column called 'combination' that contains the combination of items in each row\n    df['combination'] = df['item1'] + df['item2']\n\n    # Create a dictionary to store the frequency of each combination\n    combination_freq = {}\n\n    # Iterate over each row in the DataFrame and update the frequency of each combination\n    for index, row in df.iterrows():\n        combination = row['combination']\n        if combination not in combination_freq:\n            combination_freq[combination] = 0\n        combination_freq[combination] += 1\n\n    return combination_freq\ndf = pd.DataFrame({'item1': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'item2': ['D', 'E', 'F', 'D', 'E', 'F']})", "problem": "Calculate the frequency of combinations of elements in a DataFrame. The function adds a 'combination' column to the DataFrame, which is the combination of items in each row. It then calculates the frequency of each combination.\nThe function should output with:\n    dict: A dictionary containing the frequency of all combination.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(df):\n    df['combination'] = pd.Series(df.apply(lambda row: tuple(sorted(row)), axis=1))\n    \n    # Using Counter from collections to calculate the frequency of each combination\n    combination_freq = Counter(df['combination'])\n    \n    return dict(combination_freq)", "pass": false}
{"task_id": "680", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n    \"\"\"\n    Standardize the functions in a DataFrame.\n    The function applies standard scaling to the features.\n    The function should output with:\n        df (pandas.DataFrame): The DataFrame with the standardized features.\n    \"\"\"\n    # Create a StandardScaler object\n    scaler = StandardScaler()\n\n    # Fit the scaler to the features\n    scaler.fit(df[features])\n\n    # Scale the features\n    df[features] = scaler.transform(df[features])\n\n    return df\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50]})", "problem": "Standardize the functions in a DataFrame. The function applies standard scaling to the features.\nThe function should output with:\n    df (pandas.DataFrame): The DataFrame with the standardized features.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n    if not features:\n        return df\n\n    # Initialize the StandardScaler\n    scaler = StandardScaler()\n    \n    # Apply StandardScaler to the specified features\n    # Using pd.DataFrame to explicitly reference DataFrame operations\n    df.loc[:, features] = pd.DataFrame(scaler.fit_transform(df.loc[:, features]), columns=features, index=df.index)\n\n    # Example of explicit np usage, even though not necessary for this function\n    # Just for demonstration: add a dummy operation using np\n    df['dummy'] = np.zeros(len(df))\n\n    return df.drop('dummy', axis=1)  ", "pass": false}
{"task_id": "681", "program": "import pandas as pd\nimport json\ndef task_func(file_path, key):\n\n    pass\nimport pandas as pd\nimport json\ndef task_func(file_path, key):\n    \"\"\"\n    Load a JSON file into a Pandas DataFrame, remove a specific key from each object and write the processed DataFrame back into a JSON file oriented by records.\n\n    Parameters:\n    file_path (str): The path to the JSON file to be processed.\n    key (str): The key to be removed from each object in the JSON file.\n\n    Returns:\n    df (DataFrame): A pandas DataFrame representation of the processed JSON data.\n    \"\"\"\n    # Load the JSON file into a Pandas DataFrame\n    df = pd.read_json(file_path)\n\n    # Remove the specified key from each object in the DataFrame\n    df = df.drop(columns=[key])\n\n    # Write the processed DataFrame back into a JSON file oriented by records\n    df.to_json(file_path, orient='records')\n\n    return df", "problem": "Load a JSON file into a Pandas DataFrame, remove a specific key from each object and write the processed DataFrame back into a JSON file oriented by records.\nThe function should output with:\n    df (DataFrame): A pandas DataFrame representation of the processed JSON data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\ndef task_func(file_path, key):\n```", "solution": "import pandas as pd\nimport json\ndef task_func(file_path, key):\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n\n    df = pd.DataFrame(data)\n    df.drop(key, axis=1, inplace=True)\n\n    with open(file_path, 'w') as file:\n        file.write(df.to_json(orient='records'))\n\n    return df", "pass": true}
{"task_id": "682", "program": "from collections import Counter\nimport math\ndef task_func(nested_dict):\n\n    pass\nfrom collections import Counter\nimport math\ndef task_func(nested_dict):\n    # Aggregate the values of the same keys from the nested dictionary\n    aggregated_dict = {}\n    for key, value in nested_dict.items():\n        if key != \"ele\":\n            if key not in aggregated_dict:\n                aggregated_dict[key] = value\n            else:\n                aggregated_dict[key] += value\n\n    # Remove the \"ele\" key from the aggregated dictionary\n    del aggregated_dict[\"ele\"]\n\n    # Take the sine of each remaining key\n    for key in aggregated_dict.keys():\n        aggregated_dict[key] = math.sin(aggregated_dict[key])\n\n    return aggregated_dict\nnested_dict = {\"ele\": 1, \"a\": 2, \"b\": 3, \"c\": 4, \"d\": 5}", "problem": "Aggregate the values of the same keys from a nested dictionary and remove the \"ele\" key. For each remaining key take the sine.\nThe function should output with:\n    dict: A dictionary with aggregated values.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport math\ndef task_func(nested_dict):\n```", "solution": "from collections import Counter\nimport math\ndef task_func(nested_dict):\n    counter = Counter()\n    for sub_dict in nested_dict.values():\n        counter.update(sub_dict)\n\n    counter.pop('ele', None)\n\n    return {k: math.sin(v) for k,v in counter.items()}", "pass": false}
{"task_id": "683", "program": "import math\nimport yaml\ndef task_func(yaml_path, key):\n\n    pass\nimport math\nimport yaml\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    The function should output with:\n        data (dict): A dictionary representation of the modified YAML data.\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(f)\n\n    data[key] = math.cos(data[key])\n\n    with open(yaml_path, 'w') as f:\n        yaml.dump(data, f)\n\n    return data", "problem": "Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\nThe function should output with:\n    data (dict): A dictionary representation of the modified YAML data.\nYou should write self-contained code starting with:\n```\nimport math\nimport yaml\ndef task_func(yaml_path, key):\n```", "solution": "import math\nimport yaml\ndef task_func(yaml_path, key):\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n\n    if key in data:\n        data[key] = math.cos(data[key])\n\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n\n    return data", "pass": true}
{"task_id": "684", "program": "import pandas as pd\nimport numpy as np\ndef task_func(df, col):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(df, col):\n    # Remove the specified column\n    df = df.drop(columns=[col])\n\n    # Add a new column 'IsEvenIndex'\n    df['IsEvenIndex'] = np.where(df.index % 2 == 0, True, False)\n\n    return df\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [6, 7, 8, 9, 10]})", "problem": "Process a Pandas DataFrame by removing a specific column and adding a 'IsEvenIndex' column. The 'IsEvenIndex' column is a boolean flag indicating if the index of each row is even.\nThe function should output with:\n    df (pd.DataFrame): The processed pandas DataFrame with the specified column removed and a new 'IsEvenIndex' column added.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(df, col):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(df, col):\n    # Remove specified column using pandas\n    updated_df = pd.DataFrame(df).drop(col, axis=1)\n    \n    # Add a new column 'IsEvenIndex' using numpy to determine if index is even\n    # The np.arange(len(updated_df)) creates an array of indexes, % 2 == 0 checks if they are even\n    updated_df['IsEvenIndex'] = np.arange(len(updated_df)) % 2 == 0\n    \n    return updated_df", "pass": true}
{"task_id": "685", "program": "from collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n\n    pass\nfrom collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n    merged_list = list(chain.from_iterable(list_of_lists))\n    return Counter(merged_list)", "problem": "Merge all sublists from a list of lists into a list and return a count of the elements.\nThe function should output with:\n    collections.Counter: Counter object with the counts of the elements in the merged list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n```", "solution": "from collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n    merged_list = list(chain.from_iterable(list_of_lists))\n    return Counter(merged_list)", "pass": true}
{"task_id": "686", "program": "import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n    # Merge the lists into a single list\n    merged_list = [item for sublist in list_of_lists for item in sublist]\n\n    # One-hot encode the merged list\n    one_hot_encoder = OneHotEncoder(sparse=False)\n    one_hot = one_hot_encoder.fit_transform(merged_list)\n\n    return one_hot\nlist_of_lists = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", "problem": "Merges a predefined set of lists into a list and one-hot-encodes the elements of the list.\nThe function should output with:\n    one_hot (numpy.array): The one-hot encoding of the merged list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n    merged_list = np.array([item for sublist in list_of_lists for item in sublist]).reshape(-1, 1)\n    encoder = OneHotEncoder(sparse=False)\n    one_hot = encoder.fit_transform(merged_list)\n    return one_hot", "pass": false}
{"task_id": "687", "program": "import numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n\n    pass\nimport numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n    # Merge the lists into a single list\n    merged_list = [item for sublist in list_of_lists for item in sublist]\n\n    # Find the mode of the merged list\n    mode_value, mode_count = mode(merged_list)\n\n    # Return the mode and count as a tuple\n    return (mode_value, mode_count)\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Merges a predefined set of lists into a list and finds the mode of the elements in the list.\nThe function should output with:\n    tuple: The mode and count of the mode in the merged list.\n    mode_value (np.array): The value that appears most frequently in the merged array.\n    mode_count (int): The frequency count of the mode_value within the merged array.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n```", "solution": "import numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n    merged_list = np.array([item for sublist in list_of_lists for item in sublist])\n    mode_value, mode_count = mode(merged_list)\n    return mode_value, mode_count", "pass": true}
{"task_id": "688", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Standardize the DataFrame using the StandardScaler\n    scaler = StandardScaler()\n    df_standardized = scaler.fit_transform(df)\n    \n    # Return the standardized DataFrame\n    return df_standardized\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 20, 30, 40, 50]})", "problem": "Given a Pandas DataFrame with random numeric values, standardize it with the standard scaler from sklearn.\nThe function should output with:\n    df_standardized (DataFrame): The standardized DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Standardize data\n    scaler = StandardScaler()\n    df_standardized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n    return df_standardized", "pass": false}
{"task_id": "689", "program": "import numpy as np\nfrom scipy import stats\ndef task_func(df):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\ndef task_func(df):\n    \"\"\"\n    Given a Pandas DataFrame with random numeric values, test if the data in each column is normally distributed using the Shapiro-Wilk test.\n    The function should output with:\n        dict: A dictionary with p-values from the Shapiro-Wilk test for each column.\n    \"\"\"\n    # Initialize an empty dictionary to store the p-values\n    p_values = {}\n\n    # Iterate over each column in the DataFrame\n    for col in df.columns:\n        # Perform the Shapiro-Wilk test on the column\n        stat, p_value = stats.shapiro(df[col])\n\n        # Store the p-value in the dictionary\n        p_values[col] = p_value\n\n    return p_values\ndf = pd.DataFrame(np.random.rand(100, 5), columns=list('ABCDE'))", "problem": "Given a Pandas DataFrame with random numeric values test if the data in each column is normally distributed using the Shapiro-Wilk test.\nThe function should output with:\n    dict: A dictionary with p-values from the Shapiro-Wilk test for each column.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(df):\n```", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(df):\n\n    p_values = {}\n\n    for col in df.columns:\n        column_data = np.array(df[col])\n        \n        test_stat, p_value = stats.shapiro(column_data)\n        \n        p_values[col] = p_value\n\n    return p_values", "pass": true}
{"task_id": "690", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nROWS = 100\nCOLUMNS = ['X', 'Y']\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Fit the model to the data\n    model.fit(df[['X']], df['Y'])\n\n    # Return the fitted model\n    return model\ndf = pd.DataFrame(data={'X': [1, 2, 3, 4, 5], 'Y': [2, 4, 6, 8, 10]})", "problem": "Given a Pandas DataFrame with random numeric values and columns X & Y, use sklearn's linear regression to match the data to a linear model.\nThe function should output with:\n    model (LinearRegression): The fitted linear model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nROWS = 100\nCOLUMNS = ['X', 'Y']\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nROWS = 100\nCOLUMNS = ['X', 'Y']\ndef task_func(df):\n    X = pd.DataFrame(df[['X']])  # Extracting column 'X' as a DataFrame\n    y = pd.Series(df['Y'])       # Extracting column 'Y' as a Series\n    \n    # Fitting the linear regression model\n    model = LinearRegression().fit(X, y)\n    \n    return model", "pass": true}
{"task_id": "691", "program": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Scale the data using StandardScaler\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(df)\n\n    # Run KMeans clustering on the scaled data\n    kmeans = KMeans(n_clusters=3, random_state=42)\n    labels = kmeans.fit_predict(scaled_data)\n\n    return labels\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 4, 6, 8, 10]})", "problem": "Given a pandas DataFrame with random numeric values, run KMeans clusters on the data and return the labels.\nThe function should output with:\n    labels (np.array): The labels from the KMeans clustering.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Perform clustering\n    scaler = StandardScaler()\n    df_std = scaler.fit_transform(df.values)\n    \n    # Convert standardized values back to a DataFrame using pd\n    df_std = pd.DataFrame(df_std, columns=df.columns)\n    \n    # Perform clustering with sklearn's KMeans\n    kmeans = KMeans(n_clusters=3, random_state=0).fit(df_std)\n    labels = kmeans.labels_  # The labels are directly a numpy array\n    \n    return labels", "pass": true}
{"task_id": "692", "program": "import math\nimport pandas as pd\ndef task_func(tuples_list):\n\n    pass\nimport math\nimport pandas as pd\ndef task_func(tuples_list):\n    # Create a list of lists from the tuples\n    list_of_lists = [list(t) for t in tuples_list]\n\n    # Create a DataFrame from the list of lists\n    df = pd.DataFrame(list_of_lists)\n\n    # Apply the sine function to each value in the DataFrame\n    df = df.applymap(math.sin)\n\n    return df\ntuples_list = [(1, 2), (3, 4), (5, 6)]", "problem": "Given a list of tuples turn them into a Pandas DataFrame with math.sin applied to each number.\nThe function should output with:\n    df (DataFrame): A pandas DataFrame. Each row of df corresponds to a tuple from tuples_list, with the values being the sine of the original values in the tuple.\nYou should write self-contained code starting with:\n```\nimport math\nimport pandas as pd\ndef task_func(tuples_list):\n```", "solution": "import math\nimport pandas as pd\ndef task_func(tuples_list):\n    df = pd.DataFrame([(math.sin(n) for n in t) for t in tuples_list])\n    return df", "pass": true}
{"task_id": "693", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n    # Convert the list of tuples to a pandas DataFrame\n    df = pd.DataFrame(tuples_list, columns=columns)\n\n    # Perform default scaling on each column\n    scaler = StandardScaler()\n    df_scaled = scaler.fit_transform(df)\n\n    # Return the scaled DataFrame\n    return df_scaled\ntuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ncolumns = ['a', 'b', 'c']", "problem": "Convert a list of tuples into a Pandas DataFrame, perform a default scaling in each column, and return the transformed DataFrame.\nThe function should output with:\n    df_scaled (DataFrame): A pandas DataFrame containing the scaled versions of the original data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n    df = pd.DataFrame(tuples_list, columns=columns)\n    scaler = StandardScaler()\n    df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n\n    return df_scaled", "pass": false}
{"task_id": "694", "program": "import itertools\nimport random\ndef task_func(t, n):\n\n    pass\nimport itertools\nimport random\ndef task_func(t, n):\n    \"\"\"\n    Generate all combinations from a tuple with length n and return a random combination of length n.\n    The function should output with:\n        tuple: A combination of the input tuple.\n    \"\"\"\n    combinations = list(itertools.combinations(t, n))\n    return random.choice(combinations)\nt = (1, 2, 3, 4, 5)\nn = 3", "problem": "Generate all combinations from a tuple with length n and return a random combination of length n.\nThe function should output with:\n    tuple: A combination of the input tuple.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport random\ndef task_func(t, n):\n```", "solution": "import itertools\nimport random\ndef task_func(t, n):\n    combinations = list(itertools.combinations(t, n))\n    selected_combination = random.choice(combinations)\n\n    return selected_combination", "pass": true}
{"task_id": "695", "program": "import numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n\n    pass\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a list of tuples.\n\n    Parameters\n    ----------\n    tuples_list : list of tuples\n        The list of tuples to perform PCA on.\n    n_components : int\n        The number of principal components to keep.\n\n    Returns\n    -------\n    transformed_data : ndarray\n        The transformed data.\n    \"\"\"\n    # Convert the list of tuples to a numpy array\n    data = np.array(tuples_list)\n\n    # Perform PCA on the data\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    return transformed_data\ntuples_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nn_components = 2", "problem": "Perform Principal Component Analysis (PCA) on a list of tuples.\nThe function should output with:\n    transformed_data (ndarray): The transformed data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n```", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n    data = np.array(tuples_list)\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    return transformed_data", "pass": true}
{"task_id": "696", "program": "import numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n\n    pass\nimport numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n    \"\"\"\n    Create a tuple with a list of random points within a circle of a given radius.\n\n    Args:\n        radius (float): The radius of the circle.\n        num_points (int): The number of points to generate.\n\n    Returns:\n        out (list): A list of points within a circle.\n    \"\"\"\n    # Generate random points within a square\n    square_size = radius * 2\n    x = np.random.uniform(-square_size, square_size, num_points)\n    y = np.random.uniform(-square_size, square_size, num_points)\n\n    # Filter points outside the circle\n    out = []\n    for i in range(num_points):\n        if x[i]**2 + y[i]**2 <= radius**2:\n            out.append((x[i], y[i]))\n\n    return out\nradius = 10\nnum_points = 100", "problem": "Create a tuple with a list of random points within a circle of a given radius.\nThe function should output with:\n    out (list): A list of points within a circle.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n```", "solution": "import numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n    out = []\n    \n    for _ in range(num_points):\n        theta = uniform(0, 2*np.pi)\n        r = radius * math.sqrt(uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        out.append((x, y))\n        \n    return out", "pass": true}
{"task_id": "697", "program": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n\n    pass\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Extract the feature and target variables from the dataframe\n    X = df[['feature']]\n    y = df['value']\n\n    # Create a linear regression model and fit it to the data\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Extract the coefficients and intercept from the model\n    coef = model.coef_\n    intercept = model.intercept_\n\n    # Return the coefficients and intercept as a dictionary\n    result = {'coef': coef, 'intercept': intercept}\n    return result", "problem": "Use a linear regression model to predict the \"value\" of \"feature\" in the given dataframe and return the coefficients and intercept.\nThe function should output with:\n    result (dict): A dictionary with the coefficients and the intercept of the fitted linear regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```", "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    X = np.array(df['feature']).reshape(-1,1)  # Explicitly converting to numpy array and reshaping\n    y = np.array(df['value']).reshape(-1,1)    # Explicitly converting to numpy array and reshaping\n\n    model = LinearRegression().fit(X, y)\n\n    return {'coefficients': model.coef_.tolist(), 'intercept': model.intercept_.tolist()}", "pass": false}
{"task_id": "698", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n    X = df.drop(\"target\", axis=1)\n    y = df[\"target\"]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n    return X_train, X_test, y_train, y_test\ndf = pd.DataFrame({\"feature1\": [1, 2, 3, 4, 5], \"feature2\": [6, 7, 8, 9, 10], \"target\": [11, 12, 13, 14, 15]})", "problem": "Divide the given DataFrame into a training set and a test set (70%: 30% split), separate the \"target\" column and return the four resulting DataFrames.\nThe function should output with:\n    tuple: A tuple containing four DataFrames: X_train, X_test, y_train, y_test.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n    X = pd.DataFrame.drop(df, 'target', axis=1)\n    y = pd.DataFrame(df['target'])\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n    return X_train, X_test, y_train, y_test", "pass": true}
{"task_id": "699", "program": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list):\n    # Create a DataFrame with two columns \"x\" and \"y\"\n    df = pd.DataFrame({\"x\": x_list, \"y\": y_list})\n\n    # Perform K-Means clustering on the DataFrame\n    kmeans = KMeans(n_clusters=3, random_state=0).fit(df)\n\n    # Return the labels and centroids\n    return kmeans.labels_, kmeans.cluster_centers_", "problem": "Perform K-Means clustering on the given data by first turning it into a DataFrame with two columns \"x\" and \"y\" and then return the labels and centroids.\nThe function should output with:\n    tuple: The labels and centroids as numpy arrays.\n    kmeans.labels_: A NumPy array where each element is the cluster label assigned to each data point.\n    kmeans.cluster_centers_: A NumPy array containing the coordinates of the cluster centers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n    df = pd.DataFrame({'x': x_list, 'y': y_list})\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state).fit(df)\n    return kmeans.labels_, kmeans.cluster_centers_", "pass": false}
{"task_id": "700", "program": "import pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=cols)\n\n    # Calculate the correlation matrix of numeric columns\n    correlation_matrix = df.corr()\n\n    return correlation_matrix\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ncols = ['A', 'B', 'C']", "problem": "Turn the provided data into a DataFrame and then calculate the correlation matrix of numeric columns.\nThe function should output with:\n    correlation_matrix (pd.DataFrame): The correlation matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    \n    df_np = np.array(df)\n    df = pd.DataFrame(df_np, columns=cols)\n    \n    correlation_matrix = df.corr()\n    return correlation_matrix", "pass": true}
{"task_id": "701", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n    # Perform linear regression on the data\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n\n    # Calculate the R-squared score\n    score = model.score(X, y)\n\n    return score\ndf = pd.DataFrame({'feature1': [1, 2, 3, 4, 5], 'feature2': [2, 4, 6, 8, 10], 'target': [1, 3, 5, 7, 9]})\ntarget = 'target'", "problem": "Perform a linear regression analysis on a given DataFrame.\nThe function should output with:\n    score (float): The R-squared score of the model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    \n    model = LinearRegression()\n    model.fit(X, y)\n\n    return model.score(X, y)", "pass": true}
{"task_id": "702", "program": "import pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n\n    pass\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n    pca = PCA(n_components=2)\n    df_pca = pd.DataFrame(pca.fit_transform(df), columns=['PC1', 'PC2'])\n    return df_pca\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 4, 6, 8, 10], 'C': [3, 6, 9, 12, 15]})", "problem": "Perform Principal Component Analysis (PCA) on the DataFrame and record the first two main components.\nThe function should output with:\n    df_pca (DataFrame): The DataFrame with the first two principal components named 'PC1' and 'PC2' as columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n```", "solution": "import pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n    pca = PCA(n_components=2)\n    df_pca = pca.fit_transform(df)\n    \n    df_pca = pd.DataFrame(df_pca, columns=['PC1', 'PC2'])\n    \n    return df_pca", "pass": true}
{"task_id": "703", "program": "import pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=cols)\n\n    # Perform DBSCAN clustering on the data\n    dbscan = DBSCAN(eps=3, min_samples=2)\n    clusters = dbscan.fit_predict(df)\n\n    # Add the clusters to the DataFrame\n    df['Cluster'] = clusters\n\n    return df", "problem": "Perform DBSCAN clustering on the data by transforming it into a DataFrame and recording the clusters in a new column named 'Cluster'. Please choose the parameters eps=3 and min_samples=2.\nThe function should output with:\n    df (DataFrame): The DataFrame with a new 'Cluster' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    dbscan = DBSCAN(eps=3, min_samples=2)\n    df['Cluster'] = dbscan.fit_predict(df)\n    return df", "pass": true}
{"task_id": "704", "program": "import pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n\n    pass\nimport pandas as pd\nfrom itertools import combinations\ndef task_func(data, cols, percentage):\n    \"\"\"\n    Find all combinations of columns from a given DataFrame so that the absolute correlation between them is greater than a certain threshold.\n\n    Args:\n        data (pd.DataFrame): The input DataFrame.\n        cols (list): The list of column names to consider.\n        percentage (float): The minimum percentage of absolute correlation required for a pair of columns to be considered a combination.\n\n    Returns:\n        corr_combinations (list): A list of tuples where each tuple contains two column names.\n    \"\"\"\n    # Calculate the absolute correlation between all pairs of columns\n    corr_matrix = data[cols].corr().abs()\n\n    # Find all combinations of columns with absolute correlation greater than the threshold\n    corr_combinations = []\n    for i, j in combinations(range(len(cols)), 2):\n        if corr_matrix.iloc[i, j] >= percentage:\n            corr_combinations.append((cols[i], cols[j]))\n\n    return corr_combinations\ndata = pd.DataFrame({\n    'A': [1, 2, 3, 4, 5],\n    'B': [2, 4, 6, 8, 10],\n    'C': [3, 6, 9, 12, 15],\n    'D': [4, 8, 12, 16, 20]\n})", "problem": "Find all combinations of columns from a given DataFrame so that the absolute correlation between them is greater than a certain threshold.\nThe function should output with:\n    corr_combinations (list): A list of tuples where each tuple contains two column names.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n```", "solution": "import pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n    if not 0 <= percentage <= 1:\n        raise ValueError('Percentage must be between 0 and 1')\n    df = pd.DataFrame(data, columns=cols)\n    corr_matrix = df.corr().abs()\n    columns = corr_matrix.columns\n    corr_combinations = []\n\n    for col1, col2 in combinations(columns, 2):\n        if corr_matrix.loc[col1, col2] > percentage:\n            corr_combinations.append((col1, col2))\n\n    return corr_combinations", "pass": false}
{"task_id": "705", "program": "import numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n\n    pass\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\ndef task_func(df, column, alpha):\n    \"\"\"\n    Test the normality of a particular numeric column from a DataFrame with Shapiro-Wilk test.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to test.\n        column (str): The name of the column to test.\n        alpha (float): The significance level for the test.\n\n    Returns:\n        bool: True if the column passes the normality test, False otherwise.\n    \"\"\"\n    # Extract the column from the DataFrame\n    column_data = df[column]\n\n    # Perform the Shapiro-Wilk test\n    statistic, p_value = stats.shapiro(column_data)\n\n    # Check if the p-value is less than the significance level\n    if p_value < alpha:\n        return True\n    else:\n        return False\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 4, 6, 8, 10]})", "problem": "Test the normality of a particular numeric column from a DataFrame with Shapiro-Wilk test, including an artificial step to explicitly use np.\nThe function should output with:\n    bool: True if the column passes the normality test, False otherwise.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n```", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n    # Artificial step to use np.mean for demonstration\n    mean_value = np.mean(df[column])\n\n    # Adjusting DataFrame for demonstration, this step is artificial\n    df[column] = df[column] - mean_value\n\n    if column not in df.columns:\n        raise ValueError('Column does not exist in DataFrame')\n\n    _, p = stats.shapiro(df[column])\n    return p > alpha", "pass": false}
{"task_id": "706", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n    # Split the data into training and testing sets\n    X = data[columns]\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Train a logistic regression model on the training data\n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n\n    # Make predictions on the testing data\n    y_pred = model.predict(X_test)\n\n    # Evaluate the model's performance\n    accuracy = accuracy_score(y_test, y_pred)\n\n    return accuracy\ndata = pd.DataFrame({'feature1': [1, 2, 3, 4, 5], 'feature2': [6, 7, 8, 9, 10], 'target': [0, 1, 0, 1, 0]})\ncolumns = ['feature1', 'feature2']\ntarget_column = 'target'", "problem": "Perform a logistic regression on a DataFrame to predict a specific target column.\nThe function should output with:\n    accuracy (float): The accuracy of the logistic regression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n    df = pd.DataFrame(data, columns=columns)\n    if target_column not in df.columns:\n        raise ValueError('Target column does not exist in DataFrame')\n\n    X = df.drop(columns=target_column)  # Operate directly on the DataFrame\n    y = df[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LogisticRegression(max_iter=200)\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n\n    return accuracy", "pass": false}
{"task_id": "707", "program": "import json\nimport numpy as np\ndef task_func(df):\n\n    pass\nimport json\nimport numpy as np\ndef task_func(df):\n    # Transform the 'IntCol' column by a logarithm (base 10)\n    df['IntCol'] = np.log10(df['IntCol'])\n\n    # Write the transformed column to a JSON file\n    with open('IntCol.json', 'w') as f:\n        json.dump(df['IntCol'].tolist(), f)\n\n    # Return the DataFrame\n    return df", "problem": "Given a DataFrame with random values and an 'IntCol' column, transform the 'IntCol' column by a logarithm (base 10) and write it to a `IntCol.json` file as a list. Also return the DataFrame.\nThe function should output with:\n    df (DataFrame): A pandas DataFrame to describe the transformed data.\nYou should write self-contained code starting with:\n```\nimport json\nimport numpy as np\ndef task_func(df):\n```", "solution": "import json\nimport numpy as np\ndef task_func(df):\n    df['IntCol'] = np.log10(df['IntCol'])\n\n    # Convert 'IntCol' column to a list and write it to a JSON file\n    int_col_list = df['IntCol'].tolist()\n    with open('IntCol.json', 'w') as json_file:\n        json.dump(int_col_list, json_file)\n\n    return df", "pass": true}
{"task_id": "708", "program": "import json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n\n    pass\nimport json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n    # Decode the base64-encoded JSON string\n    decoded_string = base64.b64decode(raw_string).decode(\"utf-8\")\n\n    # Load the JSON data into a Python dictionary\n    data = json.loads(decoded_string)\n\n    # Create a CSV file with the data\n    file_path = os.path.join(output_dir, filename)\n    with open(file_path, \"w\", newline=\"\") as csvfile:\n        fieldnames = data.keys()\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerow(data)\n\n    return file_path", "problem": "Processes a base64-encoded JSON string, stores the data in a CSV file, and returns the path of the file.\nThe function should output with:\n    file_path (str): The path of the file.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n```", "solution": "import json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n    # Decode the string and load the data\n    decoded_string = base64.b64decode(raw_string).decode('utf-8')\n    data = json.loads(decoded_string)\n\n    # Prepare the output directory\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Prepare the file path\n    file_path = os.path.join(output_dir, f'{filename}.csv')\n\n    # Save the data to the file\n    with open(file_path, 'w', newline='') as f:\n        writer = csv.writer(f)\n        for key, value in data.items():\n            writer.writerow([key, value])\n\n    return file_path", "pass": false}
{"task_id": "709", "program": "import base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n\n    pass\nimport base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n    # Decode the raw string from base64\n    decoded_string = base64.b64decode(raw_string).decode(\"utf-8\")\n\n    # Decouple HTML entities\n    decoded_string = unescape(decoded_string)\n\n    # Replace multiple spaces with a single space\n    decoded_string = re.sub(r\"\\s+\", \" \", decoded_string)\n\n    # Strip leading and subsequent spaces\n    decoded_string = decoded_string.strip()\n\n    # Wrap text to a certain line length\n    wrapped_text = textwrap.fill(decoded_string, width=line_length)\n\n    return wrapped_text\nraw_string = \"SGVsbG8gV29ybGQh\"\nline_length = 10", "problem": "Decode a raw string from base64, decouple HTML entities, replace multiple spaces with a single space, strip leading and subsequent spaces, and wrap text to a certain line length.\nThe function should output with:\n    wrapped_text (str): The cleaned and formatted string.\nYou should write self-contained code starting with:\n```\nimport base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n```", "solution": "import base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n\n    # Decode the string from base64\n    decoded_string = base64.b64decode(raw_string).decode('utf-8')\n\n    # Unescape HTML entities\n    unescaped_string = unescape(decoded_string)\n\n    # Replace multiple spaces with a single space and strip leading and trailing spaces\n    cleaned_string = re.sub(' +', ' ', unescaped_string).strip()\n\n    # Wrap the text\n    wrapped_text = textwrap.fill(cleaned_string, line_length)\n\n    return wrapped_text", "pass": true}
{"task_id": "710", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n    # Load the dataset\n    df = pd.read_csv(data_path)\n\n    # Normalize the dataset\n    scaler = MinMaxScaler()\n    df_scaled = scaler.fit_transform(df)\n\n    # Return the normalized dataset\n    return df_scaled", "problem": "Normalizes a dataset from a .csv file.\nThe function should output with:\n    df (DataFrame): The normalized dataset.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    \n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n\n    df = pd.DataFrame(data, columns=df.columns)\n\n    return df", "pass": false}
{"task_id": "711", "program": "import json\nimport csv\ndef task_func(json_file, csv_file):\n\n    pass\nimport json\nimport csv\ndef task_func(json_file, csv_file):\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    with open(csv_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(data.keys())\n        for row in data.values():\n            writer.writerow(row)\n\n    return csv_file", "problem": "Convert a JSON file to CSV.\nThe function should output with:\n    csv_file: The function returns the path to the CSV file that was written.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\ndef task_func(json_file, csv_file):\n```", "solution": "import json\nimport csv\ndef task_func(json_file, csv_file):\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    with open(csv_file, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerow(data.keys())\n        writer.writerow(data.values())\n    \n    return csv_file", "pass": false}
{"task_id": "712", "program": "import os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n\n    pass\nimport os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n    \"\"\"\n    Move all files with a particular extension from one directory to another.\n\n    Parameters:\n    source_dir (str): The directory to move files from.\n    dest_dir (str): The directory to move files to.\n    extension (str): The file extension to move.\n\n    Returns:\n    result (int): The count of files that were moved.\n    \"\"\"\n    # Get a list of all files in the source directory with the given extension\n    files = glob.glob(os.path.join(source_dir, f\"*.{extension}\"))\n\n    # Move each file to the destination directory\n    for file in files:\n        shutil.move(file, dest_dir)\n\n    # Return the count of files that were moved\n    return len(files)\nsource_dir = \"source_dir\"\ndest_dir = \"dest_dir\"\nextension = \"txt\"", "problem": "Move all files with a particular extension from one directory to another.\nThe function should output with:\n    result (int): The count of files that were moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n```", "solution": "import os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n    files = glob.glob(os.path.join(source_dir, f'*.{extension}'))\n    \n    for file in files:\n        shutil.move(file, dest_dir)\n        \n    result = len(files)\n\n    return result", "pass": true}
{"task_id": "713", "program": "import os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n\n    pass\nimport os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n    \"\"\"\n    Check a log file and format the lines that contain certain keywords.\n\n    This function reads the log file specified by log_file_path; searches for lines containing any of the keywords provided in the list; and formats each line to display the keyword, the timestamp, and the message separated by 20 spaces.\n\n    Args:\n        log_file_path (str): The path to the log file to be checked.\n        keywords (list): A list of keywords to search for in the log file.\n\n    Returns:\n        formatted_lines (list): A list of formatted strings containing the relevant information.\n    \"\"\"\n    formatted_lines = []\n    with open(log_file_path, \"r\") as log_file:\n        for line in log_file:\n            for keyword in keywords:\n                if keyword in line:\n                    timestamp = line.split(\" \")[0]\n                    message = line.split(\" \")[1:]\n                    formatted_line = f\"{keyword:<20}{timestamp:<20}{' '.join(message)}\"\n                    formatted_lines.append(formatted_line)\n    return formatted_lines\nlog_file_path = \"log.txt\"\nkeywords = [\"ERROR\", \"WARNING\"]", "problem": "Check a log file and format the lines that contain certain keywords. This code reads the log file specified by log_file_path; searches for lines containing any of the keywords provided in the list; and formats each line to display the keyword, the timestamp, and the message separated by 20 spaces.\nThe function should output with:\n    formatted_lines (list): Returns a list of formatted strings containing the relevant information.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n```", "solution": "import os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n    if not os.path.exists(log_file_path):\n        raise FileNotFoundError(f\"Log file {log_file_path} does not exist.\")\n    \n    formatted_lines = []\n    with open(log_file_path, 'r') as log:\n        for line in log:\n            for keyword in keywords:\n                if keyword in line:\n                    parts = re.split(r'\\s+', line.strip(), maxsplit=2)\n                    if len(parts) == 3:\n                        formatted_line = f\"{keyword:>{20}} : {parts[1]:>{20}} : {parts[2]:>{20}}\"\n                        formatted_lines.append(formatted_line)\n                    else:\n                        # Handle lines that do not conform to expected structure\n                        formatted_lines.append(f\"Line format unexpected: {line.strip()}\")\n    return formatted_lines", "pass": true}
{"task_id": "714", "program": "import sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n\n    pass\nimport sys\nfrom pathlib import Path\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n    \"\"\"\n    Add a specific path to sys.path and create a directory in that path if it does not exist.\n\n    Args:\n        path_to_append (str): The path to append to sys.path and create a directory in.\n\n    Returns:\n        path_to_append (str): The path that was appended and where the directory was created.\n    \"\"\"\n    # Append the path to sys.path\n    sys.path.append(path_to_append)\n\n    # Create the directory if it does not exist\n    path = Path(path_to_append)\n    if not path.exists():\n        path.mkdir(parents=True)\n\n    return path_to_append", "problem": "Add a specific path to sys.path and create a directory in that path if it does not exist. >>> task_func() \"/path/to/whatever\"\nNote that: The function uses a constant PATH_TO_APPEND which defaults to '/path/to/whatever'.\nThe function should output with:\n    path_to_append (str): The path that was appended and where the directory was created.\nYou should write self-contained code starting with:\n```\nimport sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n```", "solution": "import sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n    # Creating the directory if it does not exist\n    Path(path_to_append).mkdir(parents=True, exist_ok=True)\n    \n    # Adding the directory to sys.path\n    sys.path.append(path_to_append)\n    \n    return path_to_append", "pass": true}
{"task_id": "715", "program": "import sys\nimport subprocess\n# Constants\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n\n    pass\nimport sys\nimport subprocess\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n    \"\"\"\n    Switch to a specific version of Python and add a specific path to sys.path.\n    Note that: This function changes the global Python version and should be used carefully.\n    The function should output with:\n        python_version (str): The Python version that was switched to.\n    \"\"\"\n    # Check if the specified Python version is installed\n    if python_version not in subprocess.check_output(['python', '-V']).decode().strip():\n        raise ValueError(f'Python version {python_version} is not installed.')\n\n    # Switch to the specified Python version\n    subprocess.check_call(['python', '-m', 'venv', '--python', python_version])\n\n    # Add the specified path to sys.path\n    sys.path.append(path_to_append)\n\n    return python_version", "problem": "Switch to a specific version of Python and add a specific path to sys.path.\nNote that: This function changes the global Python version and should be used carefully.\nThe function should output with:\n    python_version (str): The Python version that was switched to.\nYou should write self-contained code starting with:\n```\nimport sys\nimport subprocess\n# Constants\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n```", "solution": "import sys\nimport subprocess\n# Constants\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n    subprocess.run(['pyenv', 'global', python_version], check=True)\n    sys.path.append(path_to_append)\n\n    return python_version", "pass": false}
{"task_id": "716", "program": "import sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n\n    pass\nimport sys\nimport json\nfrom datetime import datetime\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n    \"\"\"\n    Add a specific path to sys.path and update a JSON file with the current date and time.\n    This function appends a given path to Python's sys.path and updates a JSON file with the current date and time under the key 'last_updated'.\n    The function should output with:\n        json_data (dict): The updated JSON data. The dictionary will contain a 'last_updated' key with the current datetime as its value.\n    \"\"\"\n    # Append the path to sys.path\n    sys.path.append(path_to_append)\n\n    # Read the JSON file\n    with open(json_file, 'r') as f:\n        json_data = json.load(f)\n\n    # Update the JSON data with the current date and time\n    json_data['last_updated'] = datetime.now().isoformat()\n\n    # Write the updated JSON data to the file\n    with open(json_file, 'w') as f:\n        json.dump(json_data, f, indent=4)\n\n    return json_data", "problem": "Add a specific path to sys.path and update a JSON file with the current date and time. This function appends a given path to Python's sys.path and updates a JSON file with the current date and time under the key 'last_updated'.\nThe function should output with:\n    json_data (dict): The updated JSON data. The dictionary will contain a 'last_updated' key with the current datetime as its value.\nYou should write self-contained code starting with:\n```\nimport sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n```", "solution": "import sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n    sys.path.append(path_to_append)\n\n    with open(json_file, 'r+') as file:\n        json_data = json.load(file)\n        json_data['last_updated'] = str(datetime.now())\n        file.seek(0)\n        json.dump(json_data, file, indent=4)\n        file.truncate()\n\n    return json_data", "pass": false}
{"task_id": "717", "program": "import sys\nfrom configparser import ConfigParser\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n\n    pass\nimport sys\nfrom configparser import ConfigParser\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n    # Add the path to the sys.path\n    sys.path.append(path_to_append)\n\n    # Read the configuration file\n    config = ConfigParser()\n    config.read(config_file)\n\n    # Update the configuration file with the new path\n    config['DEFAULT']['path'] = path_to_append\n\n    # Write the updated configuration file\n    with open(config_file, 'w') as f:\n        config.write(f)\n\n    return config, config_file", "problem": "Add a specific path to sys.path and update a configuration file with this path.\nThe function should output with:\n    config (object): The object contains the updated configuration.\n    config_file (str): The path to the configuration file that was just modified.\nYou should write self-contained code starting with:\n```\nimport sys\nfrom configparser import ConfigParser\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n```", "solution": "import sys\nfrom configparser import ConfigParser\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n    if isinstance(path_to_append, list):\n        for path in path_to_append:\n            sys.path.append(path)\n    else:\n        sys.path.append(path_to_append)\n\n    config = ConfigParser()\n\n    # Create the file if it doesn't exist\n    if not os.path.exists(config_file):\n        open(config_file, 'a').close()\n\n    config.read(config_file)\n    path_str = ','.join(path_to_append) if isinstance(path_to_append, list) else path_to_append\n    config.set('DEFAULT', 'path_to_append', path_str)\n\n    with open(config_file, 'w') as file:\n        config.write(file)\n\n    return config, config_file", "pass": false}
{"task_id": "718", "program": "import re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n\n    pass\nimport re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n    \"\"\"\n    Perform a paired t-test for the number of words in two strings, only if the strings produce the same number of words.\n    The function should output with:\n        t_statistic (float): The t-statistic, or NaN if tests cannot be performed due to unequal lengths.\n        p_value (float): The p-value, or NaN if tests cannot be performed due to unequal lengths.\n    \"\"\"\n    words1 = re.split(r'\\W+', text1)\n    words2 = re.split(r'\\W+', text2)\n    if len(words1) == len(words2):\n        t_statistic, p_value = ttest_rel(words1, words2)\n        return t_statistic, p_value\n    else:\n        return np.nan, np.nan\ntext1 = \"This is a sample text\"\ntext2 = \"This is another sample text\"", "problem": "Perform a paired t-test for the number of words in two strings, only if the strings produce the same number of words.\nThe function should output with:\n    t_statistic (float): The t-statistic, or NaN if tests cannot be performed due to unequal lengths.\n    p_value (float): The p-value, or NaN if tests cannot be performed due to unequal lengths.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n```", "solution": "import re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n    word_counts1 = np.array([len(word) for word in re.split(r'\\W+', text1) if word])\n    word_counts2 = np.array([len(word) for word in re.split(r'\\W+', text2) if word])\n\n    if len(word_counts1) != len(word_counts2):\n        return (np.nan, np.nan)\n\n    t_statistic, p_value = ttest_rel(word_counts1, word_counts2)\n    return t_statistic, p_value", "pass": false}
{"task_id": "719", "program": "import re\nimport os\nimport glob\ndef task_func(directory, word):\n\n    pass\nimport re\nimport os\nimport glob\ndef task_func(directory, word):\n    \"\"\"\n    Count the number of files in a directory that contain a specific word.\n\n    Args:\n        directory (str): The directory to search in.\n        word (str): The word to search for.\n\n    Returns:\n        count (int): The number of files that contain the given word.\n    \"\"\"\n    count = 0\n    for filename in glob.glob(os.path.join(directory, '*')):\n        with open(filename, 'r') as f:\n            if re.search(word, f.read()):\n                count += 1\n    return count\ndirectory = 'path/to/directory'\nword = 'example'", "problem": "Count the number of files in a directory that contain a specific word.\nThe function should output with:\n    count (int): The number of files that contain the given word.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(directory, word):\n```", "solution": "import re\nimport os\nimport glob\ndef task_func(directory, word):\n    count = 0\n    # Pattern to match word boundaries and ignore case, handling punctuation\n    pattern = re.compile(r'\\b' + re.escape(word) + r'\\b', re.IGNORECASE)\n    for filename in glob.glob(os.path.join(directory, '*.*')):\n        with open(filename, 'r', encoding='utf-8') as f:\n            text = f.read()\n            if pattern.search(text):\n                count += 1\n    return count", "pass": false}
{"task_id": "720", "program": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n\n    pass\nimport os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    # Generate random temperature and humidity data\n    temperature = [random.randint(10, 30) for _ in range(10)]\n    humidity = [random.randint(10, 90) for _ in range(10)]\n\n    # Create a CSV file with the data\n    with open(\"task_func_data/Output.txt\", \"w\", newline=\"\") as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow([\"Timestamp\", \"Temperature\", \"Humidity\"])\n        for i in range(len(temperature)):\n            writer.writerow([datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), temperature[i], humidity[i]])\n\n    # Return the path to the CSV file\n    return \"task_func_data/Output.txt\"", "problem": "Create and delete a CSV file \"task_func_data/Output.txt\" with sensor data for temperature and humidity. The data is generated randomly, written in append mode, and the file is deleted after use.\nThe function should output with:\n    Returns the path to the CSV file \"task_func_data/Output.txt\" before deletion.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n```", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    FILE_NAME = 'task_func_data/Output.txt'\n    FIELDS = ['Timestamp', 'Temperature', 'Humidity']\n\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(FILE_NAME), exist_ok=True)\n\n    temperature = random.uniform(20, 30)  # Temperature between 20 and 30\n    humidity = random.uniform(50, 60)  # Humidity between 50 and 60\n    timestamp = datetime.now()\n\n    # Check if file exists and write headers if not\n    if not os.path.isfile(FILE_NAME):\n        with open(FILE_NAME, 'w', newline='') as f:\n            csv_writer = csv.writer(f)\n            csv_writer.writerow(FIELDS)\n\n    # Append data\n    with open(FILE_NAME, 'a', newline='') as f:\n        csv_writer = csv.writer(f)\n        csv_writer.writerow([timestamp, temperature, humidity])\n\n    return FILE_NAME", "pass": false}
{"task_id": "721", "program": "import os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n\n    pass\nimport os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n    if not os.path.exists(file_path):\n        return None\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        words = [word for row in reader for word in row]\n        if not words:\n            return None\n        counter = Counter(words)\n        return counter.most_common(1)[0]", "problem": "This function reads the specified CSV file, counts the frequency of each word, and returns the most common word along with its frequency.\nNote that: The function specifically reads from the given file path. This example uses +SKIP because it relies on external file content.\nThe function should output with:\n    tuple: The most common word and its frequency, or None if the file doesn't exist or is empty.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n```", "solution": "import os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n    if not os.path.isfile(file_path):\n        return None\n\n    word_counter = Counter()\n\n    with open(file_path, 'r') as f:\n        csv_reader = csv.reader(f, delimiter=',', skipinitialspace=True)\n        for row in csv_reader:\n            for word in row:\n                word_counter[word.strip()] += 1\n\n    if not word_counter:\n        return None\n\n    most_common_word, frequency = word_counter.most_common(1)[0]\n    return most_common_word, frequency", "pass": true}
{"task_id": "722", "program": "import urllib.request\nimport os\nimport re\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n\n    pass\nimport urllib.request\nimport os\nimport re\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n    # Download the file\n    with urllib.request.urlopen(url) as response:\n        with open(TARGET_FILE, 'wb') as f:\n            f.write(response.read())\n\n    # Search for occurrences of the word \"ERROR\"\n    with open(TARGET_FILE, 'r') as f:\n        occurrences = len(re.findall(SEARCH_PATTERN, f.read()))\n\n    # Clean up\n    os.remove(TARGET_FILE)\n\n    return occurrences\nurl = 'https://www.example.com/file.txt'", "problem": "Download a text file from the specified url and search for occurrences of the word \"ERROR.\"\nThe function should output with:\n    occurrences (int): The number of occurrences of the word 'ERROR'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport re\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n```", "solution": "import urllib.request\nimport os\nimport re\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n    TARGET_FILE = 'downloaded_file.txt'\n    SEARCH_PATTERN = r'\\bERROR\\b'\n\n    urllib.request.urlretrieve(url, TARGET_FILE)\n\n    with open(TARGET_FILE, 'r') as f:\n        data = f.read()\n    occurrences = len(re.findall(SEARCH_PATTERN, data))\n\n    os.remove(TARGET_FILE)\n\n    return occurrences", "pass": false}
{"task_id": "723", "program": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n\n    pass\nimport urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    # Create a CSV file to store the scraped data\n    with open(CSV_FILE_PATH, 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age', 'gender']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n\n        # Scrape data from the given URL\n        response = urllib.request.urlopen(url)\n        soup = BeautifulSoup(response, 'html.parser')\n\n        # Extract data from the HTML\n        for div in soup.find_all('div', {'class': 'person'}):\n            name = div.find('span', {'class': 'name'}).text.strip()\n            age = div.find('span', {'class': 'age'}).text.strip()\n            gender = div.find('span', {'class': 'gender'}).text.strip()\n\n            # Write the data to the CSV file\n            writer.writerow({'name': name, 'age': age, 'gender': gender})\n\n    return CSV_FILE_PATH\nurl = 'https://www.example.com/people'", "problem": "Scrape data from a given URL and save the scraped data to a CSV file.\nThe function should output with:\n    CSV_FILE_PATH (str): The path of the CSV file where the scraped data is saved.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n```", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    html = urllib.request.urlopen(url).read()\n    soup = BeautifulSoup(html, 'html.parser')\n\n    data = []\n    table = soup.find('table', attrs={'class':'data-table'})\n    table_rows = table.find_all('tr')\n\n    for tr in table_rows:\n        td = tr.find_all('td')\n        row = [tr.text for tr in td]\n        data.append(row)\n    \n    if os.path.exists(CSV_FILE_PATH):\n        os.remove(CSV_FILE_PATH)\n\n    with open(CSV_FILE_PATH, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n    \n    return CSV_FILE_PATH", "pass": false}
{"task_id": "724", "program": "import os\nimport json\ndef task_func(config_path: str) -> dict:\n\n    pass\nimport os\nimport json\ndef task_func(config_path: str) -> dict:\n    \"\"\"Load a JSON configuration file and return the configuration dictionary.\n\n    Args:\n        config_path (str): Path to the JSON configuration file.\n\n    Returns:\n        config (dict): Configuration dictionary loaded from the file.\n\n    Raises:\n        FileNotFoundError: If the provided configuration file does not exist.\n    \"\"\"\n    if not os.path.exists(config_path):\n        raise FileNotFoundError(f\"Configuration file {config_path} does not exist.\")\n\n    with open(config_path, \"r\") as f:\n        config = json.load(f)\n\n    return config", "problem": "Load a JSON configuration file and return the configuration dictionary.\nThe function should raise the exception for: FileNotFoundError: If the provided configuration file does not exist.\nThe function should output with:\n    config (dict): Configuration dictionary loaded from the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport json\ndef task_func(config_path: str) -> dict:\n```", "solution": "import os\nimport json\ndef task_func(config_path: str) -> dict:\n    if not os.path.isfile(config_path):\n        raise FileNotFoundError(f\"The configuration file {config_path} does not exist.\")\n    \n    with open(config_path) as f:\n        config = json.load(f)\n    \n    return config", "pass": true}
{"task_id": "725", "program": "import codecs\nimport os\nimport glob\n# Constants\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n\n    pass\nimport codecs\nimport os\nimport glob\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n    \"\"\"\n    Convert the encoding of all text files in a specified directory from one encoding to another.\n    The function modifies the files in-place.\n    The function should output with:\n        None\n    \"\"\"\n    # Get a list of all files in the directory\n    file_list = glob.glob(os.path.join(directory, '*'))\n\n    # Iterate over the list of files and convert the encoding\n    for file in file_list:\n        # Open the file in read mode\n        with codecs.open(file, 'r', from_encoding) as f:\n            # Read the contents of the file\n            contents = f.read()\n\n        # Open the file in write mode\n        with codecs.open(file, 'w', to_encoding) as f:\n            # Write the contents of the file\n            f.write(contents)\n\n    # Return None\n    return None", "problem": "Convert the encoding of all text files in a specified directory from one encoding to another. The function modifies the files in-place.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport codecs\nimport os\nimport glob\n# Constants\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n```", "solution": "import codecs\nimport os\nimport glob\n# Constants\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n    for filename in glob.glob(os.path.join(directory, '*.txt')):\n        with codecs.open(filename, 'r', from_encoding) as file:\n            content = file.read()\n\n        with codecs.open(filename, 'w', to_encoding) as file:\n            file.write(content)", "pass": true}
{"task_id": "726", "program": "import re\nimport random\nfrom nltk.corpus import words\nfrom random import sample\n# Ensure the words corpus is downloaded\nimport nltk\nnltk.download('words')\n# Constants\nSAMPLE_ENGLISH_WORDS = set(words.words())  # Correct initialization\ndef task_func(s, n):\n\n    pass\nimport re\nimport random\nfrom nltk.corpus import words\nfrom random import sample\nimport nltk\nSAMPLE_ENGLISH_WORDS = set(words.words())\ndef task_func(s, n):\n    \"\"\"\n    Extract up to n different English words from a string, ignoring case.\n    The string is split into words and only the English words are retained.\n    If there are fewer than n different English words, all distinct ones are returned.\n\n    Args:\n        s (str): The input string.\n        n (int): The maximum number of words to extract.\n\n    Returns:\n        List[str]: A list of up to n different English words found in the string.\n    \"\"\"\n    # Split the input string into words\n    words = re.split(r'\\W+', s.lower())\n\n    # Filter out non-English words\n    english_words = [word for word in words if word in SAMPLE_ENGLISH_WORDS]\n\n    # Return all distinct English words if there are fewer than n\n    if len(english_words) <= n:\n        return english_words\n\n    # Otherwise, return a random sample of n English words\n    return sample(english_words, n)\ns = \"The quick brown fox jumps over the lazy dog.\"\nn = 3", "problem": "Extract up to n different English words from a string, ignoring case. The string is split into words and only the English words are retained. If there are fewer than n different English words, all distinct ones are returned.\nThe function should output with:\n    List[str]: A list of up to n different English words found in the string.\nYou should write self-contained code starting with:\n```\nimport re\nimport random\nfrom nltk.corpus import words\nfrom random import sample\n# Ensure the words corpus is downloaded\nimport nltk\nnltk.download('words')\n# Constants\nSAMPLE_ENGLISH_WORDS = set(words.words())  # Correct initialization\ndef task_func(s, n):\n```", "solution": "import re\nimport random\nfrom nltk.corpus import words\nfrom random import sample\n# Ensure the words corpus is downloaded\nimport nltk\nnltk.download('words')\n# Constants\nSAMPLE_ENGLISH_WORDS = set(words.words())  # Correct initialization\ndef task_func(s, n):\n\n    word_list = re.findall(r'\\b\\w+\\b', s.lower())  # Convert to lowercase for comparison\n    english_words = [word for word in word_list if word in SAMPLE_ENGLISH_WORDS]\n    if len(english_words) < n:\n        return english_words\n    else:\n        return sample(english_words, n)", "pass": true}
{"task_id": "727", "program": "import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n\n    pass\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n    \"\"\"\n    Vectorize a string using the Bag-of-Words model.\n    The string is split into words and each word is treated as an attribute.\n    The value of each attribute is the number of occurrences of the word in the string.\n    The function also uses some predefined sentences (SENTENCES constant) for vectorization.\n\n    Parameters\n    ----------\n    s : str\n        The string to be vectorized.\n\n    Returns\n    -------\n    np.ndarray\n        A numpy array with the vectorized string.\n    \"\"\"\n    # Split the string into words\n    words = re.split(r'\\W+', s)\n\n    # Create a CountVectorizer object\n    vectorizer = CountVectorizer()\n\n    # Fit the vectorizer to the predefined sentences\n    vectorizer.fit(SENTENCES)\n\n    # Transform the words into a vector\n    vector = vectorizer.transform([words])\n\n    return vector.toarray()", "problem": "Vectorize a string using the Bag-of-Words model. The string is split into words and each word is treated as an attribute. The value of each attribute is the number of occurrences of the word in the string. The function also uses some predefined sentences (SENTENCES constant) for vectorization.\nThe function should output with:\n    np.ndarray: A numpy array with the vectorized string.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n```", "solution": "import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n    s = re.sub(r'\\W+', ' ', s)\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform([s] + SENTENCES)\n    return X.toarray()[0]", "pass": false}
{"task_id": "728", "program": "import csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n\n    pass\nimport csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n    \"\"\"\n    Convert the encoding of a CSV file from one encoding to another and return a list of dictionaries along with the converted CSV data as a string.\n    :param filename: The name of the CSV file to convert.\n    :param from_encoding: The encoding of the input CSV file.\n    :param to_encoding: The encoding to convert the CSV file to.\n    :param delimiter: The delimiter to use for the CSV file.\n    :return: A tuple containing:\n        list: A list of dictionaries. Each dictionary represents a row in the CSV file.\n        str: The converted CSV data as a string.\n    \"\"\"\n    # Open the input CSV file and read it into a list of dictionaries\n    with open(filename, 'r', encoding=from_encoding) as f:\n        reader = csv.DictReader(f, delimiter=delimiter)\n        rows = [row for row in reader]\n\n    # Convert the CSV data to the desired encoding\n    with io.StringIO() as f:\n        writer = csv.DictWriter(f, fieldnames=reader.fieldnames, delimiter=delimiter)\n        writer.writeheader()\n        for row in rows:\n            writer.writerow(row)\n        converted_data = f.getvalue()\n\n    return rows, converted_data", "problem": "Convert the encoding of a CSV file from one encoding to another and return a list of dictionaries along with the converted CSV data as a string.\nNote that: The default filename to use if not specified is 'sample.csv'. The default delimiter is ','.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list of dictionaries. Each dictionary represents a row in the CSV file.\n    str: The converted CSV data as a string.\nYou should write self-contained code starting with:\n```\nimport csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n```", "solution": "import csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n    with io.open(filename, 'r', encoding=from_encoding) as file:\n        content = file.read()\n\n    content = content.encode(from_encoding).decode(to_encoding)\n    file_like = io.StringIO(content)\n\n    reader = csv.DictReader(file_like, delimiter=delimiter)\n    data = list(reader)\n\n    output = io.StringIO()\n    # Check if fieldnames are present, else set a default\n    fieldnames = reader.fieldnames if reader.fieldnames else ['Column']\n    writer = csv.DictWriter(output, fieldnames=fieldnames, delimiter=delimiter)\n    writer.writeheader()\n    writer.writerows(data)\n    converted_csv = output.getvalue().replace('\\r\\n', '\\n')  # Normalize newlines\n\n    return data, converted_csv", "pass": false}
{"task_id": "729", "program": "import pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n\n    pass\nimport pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n    if filename is None:\n        filename = ''.join(random.choice(string.ascii_letters) for _ in range(10))\n    with open(filename, 'wb') as f:\n        pickle.dump(strings, f)\n    with open(filename, 'rb') as f:\n        loaded_strings = pickle.load(f)\n    return loaded_strings\nstrings = ['hello', 'world', 'python']", "problem": "Save the list of random strings \"Strings\" in a pickle file and then read it back for validation. If a filename is not provided, a unique filename is generated.\nThe function should output with:\n    loaded_strings (list): The loaded list of strings from the pickle file.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n```", "solution": "import pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n\n    if filename is None:\n        # Generate a unique filename using a random string\n        filename = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10)) + \".pkl\"\n\n    with open(filename, 'wb') as file:\n        pickle.dump(strings, file)\n    \n    with open(filename, 'rb') as file:\n        loaded_strings = pickle.load(file)\n\n    os.remove(filename)\n\n    return loaded_strings", "pass": true}
{"task_id": "730", "program": "import pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n\n    pass\nimport pickle\nimport os\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n    # Save the datetime object to a pickle file\n    with open(FILE_NAME, 'wb') as f:\n        pickle.dump(dt, f)\n\n    # Load the datetime object from the pickle file\n    with open(FILE_NAME, 'rb') as f:\n        loaded_dt = pickle.load(f)\n\n    # Validate that the loaded datetime object is the same as the original\n    assert loaded_dt == dt\n\n    return loaded_dt\ndt = datetime.datetime.now()", "problem": "Save the date time object \"dt\" in the pickle file \"save.pkl\" and then read it back for validation.\nThe function should output with:\n    loaded_dt (datetime): The loaded datetime object from 'save.pkl'.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n```", "solution": "import pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump(dt, file)\n    \n    with open(FILE_NAME, 'rb') as file:\n        loaded_dt = pickle.load(file)\n\n    os.remove(FILE_NAME)\n\n    return loaded_dt", "pass": false}
{"task_id": "731", "program": "import pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n\n    pass\nimport pickle\nimport os\nfrom sklearn.datasets import make_classification\nFILE_NAME = 'save.pkl'\ndef task_func(data, target):\n    # Save the data and target to a pickle file\n    with open(FILE_NAME, 'wb') as f:\n        pickle.dump((data, target), f)\n\n    # Load the data and target from the pickle file\n    with open(FILE_NAME, 'rb') as f:\n        loaded_data, loaded_target = pickle.load(f)\n\n    # Validate that the loaded data and target are the same as the original data and target\n    assert loaded_data.equals(data)\n    assert loaded_target.equals(target)\n\n    return loaded_data, loaded_target", "problem": "Save the Sklearn dataset (\"Data\" and \"Destination\") in the pickle file \"save.pkl\" and then read it back for validation.\nThe function should output with:\n    tuple: The loaded tuple (data, target) from 'save.pkl'.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n```", "solution": "import pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump((data, target), file)\n    \n    with open(FILE_NAME, 'rb') as file:\n        loaded_data, loaded_target = pickle.load(file)\n\n    os.remove(FILE_NAME)\n\n    return loaded_data, loaded_target", "pass": false}
{"task_id": "732", "program": "import re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n\n    pass\nimport re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n    \"\"\"\n    Stem every word in a sentence, except the last, and count the frequency of each stem.\n    The function should output with:\n        dict: A dictionary with stemmed words as keys and their frequency as values.\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    content = content.translate(str.maketrans('', '', string.punctuation)).lower()\n\n    # Split the content into a list of words\n    words = content.split()\n\n    # Stem every word except the last\n    stemmed_words = [STEMMER.stem(word) for word in words[:-1]]\n\n    # Count the frequency of each stemmed word\n    frequency = Counter(stemmed_words)\n\n    # Return the dictionary with stemmed words as keys and their frequency as values\n    return frequency\ncontent = \"The quick brown fox jumps over the lazy dog.\"", "problem": "Stem every word in a sentence, except the last, and count the frequency of each stem.\nThe function should output with:\n    dict: A dictionary with stemmed words as keys and their frequency as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n```", "solution": "import re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n    content = content.split(' ')[:-1]\n    words = [word.strip(string.punctuation).lower() for word in re.split('\\W+', ' '.join(content))]\n    stemmed_words = [STEMMER.stem(word) for word in words]\n    word_counts = Counter(stemmed_words)\n\n    return dict(word_counts)", "pass": true}
{"task_id": "733", "program": "import re\nimport string\ndef task_func(content):\n\n    pass\nimport re\nimport string\ndef task_func(content):\n    \"\"\"\n    Count the non-stop words in a sentence without the last word.\n    The function should output with:\n        count (int): The count of non-stopwords.\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    content = content.translate(str.maketrans('', '', string.punctuation)).lower()\n\n    # Split the content into a list of words\n    words = content.split()\n\n    # Remove the last word\n    words = words[:-1]\n\n    # Count the number of non-stopwords\n    count = 0\n    for word in words:\n        if word not in set(string.punctuation):\n            count += 1\n\n    return count", "problem": "Count the non-stop words in a sentence without the last word.\nThe function should output with:\n    count (int): The count of non-stopwords.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\ndef task_func(content):\n```", "solution": "import re\nimport string\ndef task_func(content):\n    STOPWORDS = set([\n        \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \n        \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \n        \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \n        \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \n        \"these\", \"those\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \n        \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"an\", \"the\", \"and\", \n        \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \n        \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \n        \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \n        \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\"\n    ])\n\n    content = content.split(' ')\n    if len(content) > 1:\n        content = content[:-1]\n    else:\n        content = []\n    words = [word.strip(string.punctuation).lower() for word in re.split(r'\\W+', ' '.join(content)) if word]\n    non_stopwords = [word for word in words if word not in STOPWORDS]\n    count = len(non_stopwords)\n\n    return count", "pass": false}
{"task_id": "734", "program": "import nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n\n    pass\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\nfrom collections import Counter\ndef task_func(content):\n    # Download necessary NLTK data (if not already present)\n    nltk.download('punkt')\n    nltk.download('averaged_perceptron_tagger')\n\n    # Tokenize the sentence\n    tokens = word_tokenize(content)\n\n    # Part-of-speech tag the tokens\n    pos_tags = pos_tag(tokens)\n\n    # Create a dictionary with POS tags as keys and their count as values\n    pos_counts = Counter(pos for _, pos in pos_tags)\n\n    # Return the dictionary\n    return pos_counts\nsentence = \"This is a sample sentence.\"", "problem": "Count the Part-of-Speech (POS) tags in a sentence without the last word.\nThe function should output with:\n    dict: A dictionary with POS tags as keys and their count as values.\nYou should write self-contained code starting with:\n```\nimport nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n```", "solution": "import nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n    words = content.split()[:-1]  # Split and remove the last word\n    pos_tags = nltk.pos_tag(words)  # Tokenization is built into pos_tag for simple whitespace tokenization\n    pos_counts = Counter(tag for _, tag in pos_tags)\n    return dict(pos_counts)", "pass": false}
{"task_id": "735", "program": "import numpy as np\nfrom itertools import chain\ndef task_func(L):\n\n    pass\nimport numpy as np\nfrom itertools import chain\ndef task_func(L):\n    \"\"\"\n    Calculate the mean and variance of all elements in a nested list 'L'.\n    The function should output with:\n        dict: A dictionary containing the mean and variance.\n    \"\"\"\n    # Flatten the nested list\n    flat_list = list(chain.from_iterable(L))\n\n    # Calculate the mean and variance\n    mean = np.mean(flat_list)\n    variance = np.var(flat_list)\n\n    # Return a dictionary with the mean and variance\n    return {\"mean\": mean, \"variance\": variance}\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the mean and variance of all elements in a nested list 'L'.\nThe function should output with:\n    dict: A dictionary containing the mean and variance.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import chain\ndef task_func(L):\n```", "solution": "import numpy as np\nfrom itertools import chain\ndef task_func(L):\n    flattened = list(chain.from_iterable(L))\n    mean = np.mean(flattened)\n    variance = np.var(flattened)\n    \n    return {'mean': mean, 'variance': variance}", "pass": true}
{"task_id": "736", "program": "import numpy as np\nfrom scipy import stats\ndef task_func(L):\n\n    pass\nimport numpy as np\nfrom scipy import stats\ndef task_func(L):\n    \"\"\"\n    Calculate the mode of all elements in a nested list 'L'.\n\n    Args:\n        L (list): A nested list of integers.\n\n    Returns:\n        mode (int): The mode.\n    \"\"\"\n    # Flatten the nested list\n    flat_list = [item for sublist in L for item in sublist]\n\n    # Calculate the mode\n    mode = stats.mode(flat_list)\n\n    return mode\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the mode of all elements in a nested list 'L'.\nThe function should output with:\n    mode (int): The mode.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(L):\n```", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(L):\n    flattened = np.hstack(L)  \n    mode = stats.mode(flattened)[0][0]\n    return mode", "pass": false}
{"task_id": "737", "program": "import numpy as np\nimport math\ndef task_func(L):\n\n    pass\nimport numpy as np\nimport math\ndef task_func(L):\n    \"\"\"\n    Calculate the median of all elements in a nested list 'L'.\n\n    Args:\n        L (list): A nested list of numbers.\n\n    Returns:\n        median (float): The median.\n    \"\"\"\n    # Flatten the nested list\n    flat_list = [item for sublist in L for item in sublist]\n\n    # Sort the flattened list\n    sorted_list = sorted(flat_list)\n\n    # Calculate the median\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[int(len(sorted_list) / 2)] + sorted_list[int(len(sorted_list) / 2) - 1]) / 2\n    else:\n        median = sorted_list[int(len(sorted_list) / 2)]\n\n    return median\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the median of all elements in a nested list 'L'.\nThe function should output with:\n    median (float): The median.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(L):\n```", "solution": "import numpy as np\nimport math\ndef task_func(L):\n    # Recursive function to flatten the list\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened = flatten(L)\n    \n    if not flattened:\n        raise ValueError(\"List is empty\")\n    \n    # Using numpy to sort the list\n    sorted_flattened = np.sort(flattened)\n    n = len(sorted_flattened)\n    \n    # Calculating the median index using math.ceil\n    if n % 2 == 0:\n        median_index1 = math.ceil(n / 2) - 1\n        median_index2 = median_index1 + 1\n        median = (sorted_flattened[median_index1] + sorted_flattened[median_index2]) / 2.0\n    else:\n        median_index = math.ceil(n / 2) - 1\n        median = sorted_flattened[median_index]\n    \n    return median", "pass": false}
{"task_id": "738", "program": "import numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n\n    pass\nimport numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n    \"\"\"\n    Calculate the interquartile range of all elements in a nested list 'L'.\n\n    Parameters\n    ----------\n    L : list\n        A nested list of numbers.\n\n    Returns\n    -------\n    iqr_value : float\n        The interquartile range.\n    \"\"\"\n    # Flatten the nested list\n    flat_list = [item for sublist in L for item in sublist]\n\n    # Calculate the interquartile range\n    iqr_value = iqr(flat_list)\n\n    return iqr_value\nL = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the interquartile range of all elements in a nested list 'L'.\nThe function should output with:\n    iqr_value (float): The interquartile range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n```", "solution": "import numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n    flattened = np.array(L).flatten()\n    iqr_value = iqr(flattened)\n    \n    return iqr_value", "pass": true}
{"task_id": "739", "program": "import struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n\n    pass\nimport struct\nimport random\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n    \"\"\"\n    Generate a random float number from a list of hexadecimal strings and then round the float number to 2 decimal places.\n    The function should output with:\n        rounded_float (float): The rounded float number.\n    \"\"\"\n    if hex_key is None:\n        hex_key = random.choice(KEYS)\n    float_num = struct.unpack('f', bytes.fromhex(hex_key))[0]\n    rounded_float = round(float_num, 2)\n    return rounded_float", "problem": "Generate a random float number from a list of hexadecimal strings and then round the float number to 2 decimal places.\nThe function should output with:\n    rounded_float (float): The rounded float number.\nYou should write self-contained code starting with:\n```\nimport struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n```", "solution": "import struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n    if hex_key is None:\n        hex_key = random.choice(KEYS)\n    float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    rounded_float = round(float_num, 2)\n    return rounded_float", "pass": false}
{"task_id": "740", "program": "from collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n\n    pass\nfrom collections import Counter\nimport heapq\ndef task_func(my_dict):\n    \"\"\"\n    Find the 3 most common letters in the dictionary.\n\n    Args:\n        my_dict (dict): A dictionary with letters as keys and integers as values.\n\n    Returns:\n        most_common_letters (list): The 3 most common letters.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(my_dict)\n\n    # Get the top 3 most common letters\n    most_common_letters = heapq.nlargest(3, counter.items(), key=lambda x: x[1])\n\n    # Return the most common letters\n    return [letter for letter, _ in most_common_letters]\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}", "problem": "Create a dictionary in which the keys are letters and the values are random integers. Find the 3 most common letters in the dictionary.\nThe function should output with:\n    most_common_letters (list): The 3 most common letters.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n```", "solution": "from collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n    letter_counter = Counter(my_dict)\n    most_common_letters = heapq.nlargest(3, letter_counter, key=letter_counter.get)\n\n    return most_common_letters", "pass": true}
{"task_id": "741", "program": "from itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n\n    pass\nfrom itertools import groupby\nfrom operator import itemgetter\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n    aggregated_dict = {}\n    for key, group in groupby(my_dict.items(), KEY_FUNC):\n        aggregated_dict[key] = sum(map(itemgetter(1), group))\n    return aggregated_dict", "problem": "Group the dictionary entries after the first character of the key and add the values for each group.\nThe function should output with:\n    aggregated_dict (dict): The aggregated dictionary.\nYou should write self-contained code starting with:\n```\nfrom itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n```", "solution": "from itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n    sorted_items = sorted(my_dict.items(), key=lambda item: item[0][0])\n    # Group items by the first character of the key and sum their values\n    aggregated_dict = {k: sum(item[1] for item in g) for k, g in groupby(sorted_items, key=lambda item: item[0][0])}\n\n    return aggregated_dict", "pass": false}
{"task_id": "742", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    The function should raise the exception for:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    The function should output with:\n        DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n        Category contains the the first elements of each tuple.\n        Value contains the normalized values of each tuple.\n    \"\"\"\n    # Check if the input list is empty\n    if not list_of_pairs:\n        raise Exception(\"Input list is empty\")\n\n    # Check if the values in the list are numeric\n    if not all(isinstance(x, (int, float)) for x in list_of_pairs):\n        raise ValueError(\"Values are not numeric\")\n\n    # Create a DataFrame from the list of pairs\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    df[\"Value\"] = scaler.fit_transform(df[\"Value\"].values.reshape(-1, 1))\n\n    return df\nlist_of_pairs = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)]", "problem": "Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\nThe function should raise the exception for: Exception: If the input array is empty. ValueError: If Values are not numeric.\nThe function should output with:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n    Category contains the the first elements of each tuple.\n    Value contains the normalized values of each tuple.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n\n    return df", "pass": false}
{"task_id": "743", "program": "import json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n\n    pass\nimport json\nimport os\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n    # Initialize a dictionary to store the counts\n    counts = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate over all JSON files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            # Open the JSON file and load its contents\n            with open(os.path.join(directory, filename), \"r\") as f:\n                data = json.load(f)\n\n            # Iterate over all keys in the JSON object\n            for key in data.keys():\n                # Check if the key starts with any of the prefixes\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        # Increment the count for the corresponding prefix\n                        counts[prefix] += 1\n\n    # Return the dictionary of counts\n    return counts\ndirectory = \"path/to/json/files\"", "problem": "Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes (defined in the PREFIXES constant), and return a dictionary of statistics.\nThe function should output with:\n    dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n```", "solution": "import json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n\n    return stats", "pass": true}
{"task_id": "744", "program": "import nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n\n    pass\nimport nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n    if not isinstance(text, str):\n        raise ValueError(\"text must be a string\")\n\n    # Tokenize the text into individual words\n    tokens = nltk.word_tokenize(text)\n\n    # Filter out punctuation and words that don't start with '$'\n    words = [word for word in tokens if word[0] == '$' and word not in punctuation]\n\n    # Count the frequency of each word\n    word_counts = {}\n    for word in words:\n        if word not in word_counts:\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n\n    # Create a DataFrame with the results\n    df = pd.DataFrame(word_counts.items(), columns=[\"Word\", \"Frequency\"])\n\n    return df\ntext = \"$hello this i$s a $test $test $test\"", "problem": "Finds all words in a text, that are seperated by whitespace, beginning with the \"$\" character and computes their number of occurences. >>> text = \"$hello this i$s a $test $test $test\" >>> task_func(text) Word  Frequency 0  $hello          1 1   $test          3\nNote that: The function ignores words that are entirely made up of punctuation, even if they start with a '$'.\nThe function should raise the exception for: ValueError: if text is not a string\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: \"Word\" and \"Frequency\".\n    \"Word\" contains the '$' prefixed words, and \"Frequency\" contains their occurrences.\nYou should write self-contained code starting with:\n```\nimport nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n```", "solution": "import nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n    if not isinstance(text, str):\n        raise ValueError(\"The input should be a string.\")\n\n    tk = nltk.WhitespaceTokenizer()\n    words = tk.tokenize(text)    \n    dollar_words = [word for word in words if word.startswith('$') and not all(c in set(punctuation) for c in word)]\n    freq = nltk.FreqDist(dollar_words)\n    df = pd.DataFrame(list(freq.items()), columns=[\"Word\", \"Frequency\"])\n    return df", "pass": false}
{"task_id": "745", "program": "import subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n\n    pass\nimport subprocess\nimport random\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'\ndef task_func():\n    # Select a random script from the list\n    script = random.choice(SCRIPTS)\n\n    # Build the full path to the script\n    script_path = os.path.join(SCRIPTS_DIR, script)\n\n    # Run the script\n    subprocess.run(script_path, shell=True)\n\n    # Return the full path of the script that was executed\n    return script_path", "problem": "Run a random bash script from a list of scripts.\nThe function should output with:\n    script (str): The full path of the script that was executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n```", "solution": "import subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n    script_name = random.choice(SCRIPTS)\n    script_path = os.path.join(SCRIPTS_DIR, script_name)  # Generate the full path\n    subprocess.call(script_path, shell=True)\n\n    return script_path  # Return the full path", "pass": false}
{"task_id": "746", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n    \"\"\"\n    Replace all elements in DataFrame columns that are not present in the target_values array with zeros, and then perform a linear regression using the target column.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The input DataFrame.\n    target_column : str\n        The name of the target column.\n    target_values : array-like, optional\n        The array of values to replace with zeros. If None, all values not in the target column are replaced with zeros.\n\n    Returns\n    -------\n    LinearRegression\n        The trained Linear Regression model.\n\n    Raises\n    ------\n    ValueError\n        If df is not a DataFrame or if target_column is not a string or if target_values is not an array-like object.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a DataFrame\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column must be a string\")\n    if target_values is not None and not isinstance(target_values, (list, tuple, np.ndarray)):\n        raise ValueError(\"target_values must be an array-like object\")\n\n    # Replace all elements in DataFrame columns that are not present in the target_values array with zeros\n    if target_values is not None:\n        for column in df.columns:\n            df[column] = df[column].replace(target_values, 0)\n\n    # Perform linear regression using the target column\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    model = LinearRegression().fit(X, y)\n\n    return model\nrng = np.random.default_rng(seed=0)\ndf = pd.DataFrame(rng.integers(0, 100, size=(1000, 5)), columns=['A', 'B', 'C', 'D', 'predict'])", "problem": "Replace all elements in DataFrame columns that are not present in the target_values array with zeros, and then perform a linear regression using the target column. >>> rng = np.random.default_rng(seed=0) >>> df = pd.DataFrame(rng.integers(0, 100, size=(1000, 5)), columns=['A', 'B', 'C', 'D', 'predict']) >>> model = task_func(df, 'predict') >>> print(model.coef_) [-0.00173703 -0.02190392 -0.03304266  0.00759771] >>> print(model.intercept_) 53.362739257681035\nThe function should raise the exception for: ValueError: If df is not a DataFrame or if target_column is not a string or if target_values is not an array-like object\nThe function should output with:\n    LinearRegression: The trained Linear Regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame.\")\n    \n    if df.empty:\n        raise ValueError(\"df should contain at least one row\")\n    \n    if target_column not in df.columns:\n        raise ValueError(\"target_column should be in DataFrame\")\n    \n    if not all(np.issubdtype(dtype, np.number) for dtype in df.dtypes):\n        raise ValueError(\"df values should be numeric only\")\n\n    if target_values != None:\n        df = df.applymap(lambda x: x if x in target_values else 0)\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    model = LinearRegression().fit(X, y)\n\n    return model", "pass": false}
{"task_id": "747", "program": "import re\nimport math\ndef task_func(s):\n\n    pass\nimport re\nimport math\ndef task_func(s):\n    # Split the string into a list of numbers\n    numbers = s.split(',')\n\n    # Initialize the count and sum variables\n    count = 0\n    sum = 0\n\n    # Iterate over the numbers and calculate the square root of each number\n    for number in numbers:\n        # Check if the number is an integer or a float\n        if number.isdigit():\n            # If the number is an integer, convert it to a float\n            number = float(number)\n\n        # Calculate the square root of the number\n        sqrt = math.sqrt(number)\n\n        # Increment the count and add the square root to the sum\n        count += 1\n        sum += sqrt\n\n    # Return the count and sum as a tuple\n    return count, sum", "problem": "Count the number of integers and floating-point numbers in a comma-separated string and calculate the sum of their square roots.\nThe function should output with:\n    count (int): The number of integers and floats in the string.\n    sqrt_sum (float): The sum of the square roots of the integers and floats.\nYou should write self-contained code starting with:\n```\nimport re\nimport math\ndef task_func(s):\n```", "solution": "import re\nimport math\ndef task_func(s):\n    numbers = re.findall(r'\\b\\d+(?:\\.\\d+)?\\b', s)  # Use non-capturing group for decimals\n    count = len(numbers)\n    sqrt_sum = sum(math.sqrt(float(num)) for num in numbers if num)  # Ensure conversion to float\n    return count, sqrt_sum", "pass": false}
{"task_id": "748", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n    \"\"\"\n    Filters and standardizes a given DataFrame based on specified age and weight criteria.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The input DataFrame.\n    age : int\n        The minimum age to filter by.\n    weight : int\n        The minimum weight to filter by.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame containing the filtered and standardized data. If the filtering\n        results in an empty DataFrame, an empty DataFrame is returned.\n\n    Raises\n    ------\n    KeyError\n        If the input DataFrame does not contain the required columns 'Age' and 'Weight'.\n    \"\"\"\n    # Check if the input DataFrame contains the required columns\n    if \"Age\" not in df.columns or \"Weight\" not in df.columns:\n        raise KeyError(\"The input DataFrame does not contain the required columns 'Age' and 'Weight'.\")\n\n    # Filter the rows based on the specified age and weight criteria\n    filtered_df = df[(df[\"Age\"] < age) & (df[\"Weight\"] > weight)]\n\n    # Standardize the numerical values in the filtered DataFrame\n    scaler = StandardScaler()\n    standardized_df = pd.DataFrame(scaler.fit_transform(filtered_df.drop(columns=[\"Age\", \"Weight\"])), columns=filtered_df.columns)\n\n    # Add the filtered and standardized data to the original DataFrame\n    standardized_df[\"Age\"] = filtered_df[\"Age\"]\n    standardized_df[\"Weight\"] = filtered_df[\"Weight\"]\n\n    return standardized_df", "problem": "Filters and standardizes a given DataFrame based on specified age and weight criteria. This function first filters the rows in the input DataFrame where 'Age' is less than the specified 'age' and 'Weight' is greater than the specified 'weight'. It then standardizes the numerical values in the filtered DataFrame using the StandardScaler from sklearn. >>> data = pd.DataFrame({ ...     \"Age\": [32, 51, 11, 5, 88, 434], ...     \"Weight\": [62, 76, 72, 859, 69, 102], ...     \"shoe_size\": [12, 6, 7, 8, 9, 6] ... }) >>> print(task_func(data, 70, 63)) Age    Weight  shoe_size 0  1.40400 -0.701695  -1.224745 1 -0.55507 -0.712504   0.000000 2 -0.84893  1.414200   1.224745 >>> input = pd.DataFrame({ ...     \"Age\": [32, 51, 12, 1, 55, 11, 23, 5], ...     \"Weight\": [62, 63, 12, 24, 11, 111, 200, 70], ...     \"banana_consumption\": [1, 1, 7, 2, 100, 6, 26, 1] ... }) >>> print(task_func(input, 32, 22)) Age    Weight  banana_consumption 0 -1.083473 -1.192322           -0.666109 1  0.120386  0.150487           -0.271378 2  1.565016  1.524165            1.702277 3 -0.601929 -0.482331           -0.764791\nThe function should raise the exception for: KeyError: If the input DataFrame does not contain the required columns 'Age' and 'Weight'.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the filtered and standardized data. If the filtering\n    results in an empty DataFrame, an empty DataFrame is returned.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n    selected_df = df[(df['Age'] < age) & (df['Weight'] > weight)]\n    \n    # Check if the selected DataFrame is empty\n    if selected_df.empty:\n        return selected_df\n\n    # Standardizing the selected data\n    scaler = StandardScaler()\n    selected_df = pd.DataFrame(scaler.fit_transform(selected_df), columns=selected_df.columns)\n\n    return selected_df", "pass": false}
{"task_id": "749", "program": "from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n\n    pass\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n    # Convert the list to a numpy array\n    myArray = np.array(myList)\n\n    # Create a MinMaxScaler object\n    scaler = MinMaxScaler()\n\n    # Fit the scaler to the array\n    scaler.fit(myArray.reshape(-1, 1))\n\n    # Scale the array\n    scaledArray = scaler.transform(myArray.reshape(-1, 1))\n\n    # Return the scaled array\n    return scaledArray\nmyList = [1, 2, 3, 4, 5]", "problem": "Normalize a list of numeric values to the range [0, 1] using min-max scaling.\nThe function should output with:\n    ndarray: An array of normalized values.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n```", "solution": "from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n    myList = np.array(myList).reshape(-1, 1)\n    scaler = MinMaxScaler()\n    normalized_list = scaler.fit_transform(myList)\n\n    return normalized_list.flatten()", "pass": false}
{"task_id": "750", "program": "import pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n\n    pass\nimport pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n    \"\"\"\n    Performs an OLS linear regression on a subset of the provided DataFrame.\n    The subset is created by filtering rows where the value in the second column of 'columns' is greater than 'height' and the value in the third column is less than 'weight'.\n    The first column in 'columns' is used as the dependent variable / target (y), and the rest as independent variables (X) in the regression.\n    If df is empty, or if no rows match the conditions None is returned.\n    \"\"\"\n    # Check if the DataFrame is empty\n    if df.empty:\n        return None\n\n    # Filter the DataFrame to include only rows where the second column is greater than height and the third column is less than weight\n    filtered_df = df[df[columns[1]] > height][df[columns[2]] < weight]\n\n    # Check if there are any rows left after filtering\n    if filtered_df.empty:\n        return None\n\n    # Perform the OLS regression\n    X = filtered_df[columns[1:]].values\n    y = filtered_df[columns[0]].values\n    model = sm.OLS(y, X).fit()\n\n    return model.results", "problem": "Performs an OLS linear regression on a subset of the provided DataFrame. The subset is created by filtering rows where the value in the second column of 'columns' is greater than 'height' and the value in the third column is less than 'weight'. The first column in 'columns' is used as the dependent variable / target (y), and the rest as independent variables (X) in the regression. If df is empty, or if no rows match the conditions None is returned. >>> df = pd.DataFrame(np.random.randint(10,98,size=(100, 3)), columns=['Age', 'Height', 'Weight']) >>> model = task_func(df, 45, 72, columns=['Age', 'Height', 'Weight'])\nThe function should output with:\n    sm.regression.linear_model.RegressionResultsWrapper: The result of the OLS regression, or None if no rows meet the criteria or DataFrame is empty.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n```", "solution": "import pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n    # Check for empty DataFrame\n    if df.empty:\n        return None\n\n    # Filter the DataFrame based on provided column names\n    selected_df = df[(df[columns[1]] > height) & (df[columns[2]] < weight)]\n    \n    # If no rows match the condition, return None\n    if selected_df.empty:\n        return None\n    \n    X = selected_df[columns[1:]]\n    y = selected_df[columns[0]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return results", "pass": false}
{"task_id": "751", "program": "import random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n\n    pass\nimport random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n    \"\"\"\n    Sample random numbers based on a given weighted distribution and return a histogram of the samples.\n\n    Args:\n        values (list): A list of values to sample from.\n        weights (list): A list of weights corresponding to each value.\n        n_samples (int): The number of samples to generate.\n\n    Returns:\n        histogram (dict): A histogram as a dictionary with the values as keys and counts as values.\n    \"\"\"\n    # Check if the input is valid\n    if len(values) != len(weights):\n        raise ValueError(\"The length of values and weights must be the same.\")\n\n    # Create a list of (value, weight) pairs\n    pairs = list(zip(values, weights))\n\n    # Create a histogram\n    histogram = Counter()\n\n    # Sample n_samples random numbers\n    for _ in range(n_samples):\n        # Choose a random value based on the weights\n        value = random.choices(values, weights=weights)[0]\n        # Increment the count for the chosen value\n        histogram[value] += 1\n\n    return histogram\nvalues = [1, 2, 3, 4, 5]\nweights = [0.1, 0.2, 0.3, 0.4, 0.5]\nn_samples = 1000", "problem": "Sample random numbers based on a given weighted distribution and return a histogram of the samples.\nThe function should output with:\n    histogram (dict): A histogram as a dictionary with the values as keys and counts as values.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n```", "solution": "import random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n    import random\n    samples = random.choices(values, weights=weights, k=n_samples)\n    histogram = dict(Counter(samples))\n\n    return histogram", "pass": true}
{"task_id": "752", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train a linear regression model and return the model score of the test set.\n\n    Args:\n        data (pd.DataFrame): The data to be used for training the model.\n        target_column (str): The name of the target column in the data.\n        test_size (float, optional): The proportion of the data to include in the test set. Defaults to 0.2.\n        random_state (int, optional): The random state to use for splitting the data. Defaults to 0.\n\n    Returns:\n        float: The model's score.\n\n    Raises:\n        ValueError: If data is not a DataFrame.\n        ValueError: If data is empty.\n        ValueError: If target_column is not a column of data.\n        ValueError: If data contains values that are not numeric.\n        ValueError: If random_state is not an integer.\n        ValueError: If test_size is not between 0 and 1.\n    \"\"\"\n    # Check if data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a DataFrame\")\n\n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n\n    # Check if target_column is a column of data\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} is not a column of data\")\n\n    # Check if data contains values that are not numeric\n    if not np.issubdtype(data[target_column].dtype, np.number):\n        raise ValueError(\"data must contain only numeric values\")\n\n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n\n    # Check if test_size is between 0 and 1\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    # Split data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data.drop(target_column, axis=1), data[target_column], test_size=test_size, random_state=random_state)\n\n    # Train linear regression model on training data\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Return model score on test data\n    return model.score(X_test, y_test)", "problem": "Train a linear regression model and return the model score of the test set. The provided DataFrame is used as training data, where target_column is used as target in training the model. Before training the provided data is split into a training and a test set using test_size and random_state parameters. >>> data = pd.DataFrame({ ...     'x1': rng.random(500), ... }) >>> data['y'] = data['x1'] * 2 + 1 >>> result = task_func(data, 'y', random_state=9, test_size=0.1) >>> result 1.0\nThe function should raise the exception for: ValueError: If data is not a DataFrame. ValueError: If data is empty. ValueError: If target_column ist not a column of data. ValueError: If data contains values that are not numeric. ValueError: If random_state is not an integer. ValueError: If test_size is not between 0 and 1.\nThe function should output with:\n    float: The model's score.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data should be a DataFrame.\")\n    \n    if data.empty:\n        raise ValueError(\"data should contain at least one row.\")\n    \n    if target_column not in data.columns:\n        raise ValueError(\"target_column should be in the provided DataFrame.\")\n    \n    if not all(np.issubdtype(dtype, np.number) for dtype in data.dtypes):\n        raise ValueError(\"data values should be numeric only.\")\n    \n    if test_size <= 0 or test_size >= 1:\n        raise ValueError(\"test_size should be between 0 and 1: 0 < test_size < 1\")\n    \n    if isinstance(random_state, int) is not True:\n        raise ValueError(\"random_state should be an integer.\") \n    \n    \n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    model = LinearRegression().fit(X_train, y_train)\n\n    return model.score(X_test, y_test)", "pass": false}
{"task_id": "753", "program": "import math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n\n    pass\nimport math\nimport random\nimport statistics\nRADIUS = 5\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n    The function should output with:\n        float: The average distance from the center of the circle.\n    \"\"\"\n    # Generate n random points within a circle of radius RADIUS\n    points = []\n    for i in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        x = RADIUS * math.cos(theta)\n        y = RADIUS * math.sin(theta)\n        points.append((x, y))\n\n    # Calculate the average distance from the center of the circle\n    distances = []\n    for point in points:\n        distance = math.sqrt(point[0]**2 + point[1]**2)\n        distances.append(distance)\n    average_distance = statistics.mean(distances)\n\n    return average_distance\nn = 1000", "problem": "Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\nThe function should output with:\n    float: The average distance from the center of the circle.\nYou should write self-contained code starting with:\n```\nimport math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n```", "solution": "import math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n    distances = []\n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n\n    return round(statistics.mean(distances), 4)", "pass": false}
{"task_id": "754", "program": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    \"\"\"\n    Calculate the mean, median, min, max, and standard deviation of the \"from_user\" values in \"result\" and add the current date and time in the format YYYY-mm-dd HHL:MM:SS to the summary.\n    The global constant DATE_FORMAT is used to transform the currnet date and time into this format.\n    Data Structures:\n    - Uses numpy arrays for efficient statistical computations.\n    The function should raise the exception for:\n    ValueError: If the \"from_user\" values are not numeric.\n    The function should output with:\n        Series: A pandas Series with the statistical summary, including 'mean', 'median', 'min', 'max', 'std', and 'current_time'.\n        If the input contains no \"from_user\" values all statistical values are set to np.nan\n    \"\"\"\n    # Check if the \"from_user\" values are numeric\n    if not np.issubdtype(result[\"from_user\"].dtype, np.number):\n        raise ValueError(\"The 'from_user' values are not numeric.\")\n\n    # Calculate the statistical summary\n    summary = pd.Series(\n        {\n            \"mean\": np.mean(result[\"from_user\"]),\n            \"median\": np.median(result[\"from_user\"]),\n            \"min\": np.min(result[\"from_user\"]),\n            \"max\": np.max(result[\"from_user\"]),\n            \"std\": np.std(result[\"from_user\"]),\n            \"current_time\": datetime.now().strftime(DATE_FORMAT),\n        }\n    )\n\n    # Return the summary\n    return summary", "problem": "Calculate the mean, median, min, max, and standard deviation of the \"from_user\" values in \"result\" and add the current date and time in the format YYYY-mm-dd HHL:MM:SS to the summary. The global constant DATE_FORMAT is used to transform the currnet date and time into this format. Data Structures: - Uses numpy arrays for efficient statistical computations.\nThe function should raise the exception for: ValueError: If the \"from_user\" values are not numeric.\nThe function should output with:\n    Series: A pandas Series with the statistical summary, including 'mean', 'median', 'min', 'max', 'std', and 'current_time'.\n    If the input contains no \"from_user\" values all statistical values are set to np.nan\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    from_user_values = np.array([d['from_user'] for d in result if 'from_user' in d])\n    # Handle edge case of empty array\n    if len(from_user_values) == 0:\n        summary = {\n            'mean': np.nan,\n            'median': np.nan,\n            'min': np.nan,\n            'max': np.nan,\n            'std': np.nan,\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        }\n    \n    elif not np.issubdtype(from_user_values.dtype, np.number):\n         raise ValueError(\"from_user values should be numeric only.\")\n\n\n    else:\n        summary = {\n            'mean': np.mean(from_user_values),\n            'median': np.median(from_user_values),\n            'min': np.min(from_user_values),\n            'max': np.max(from_user_values),\n            'std': np.std(from_user_values),\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        }\n\n    summary_series = pd.Series(summary)\n    return summary_series", "pass": false}
{"task_id": "755", "program": "import os\nimport glob\ndef task_func(directory_path):\n\n    pass\nimport os\nimport glob\ndef task_func(directory_path):\n    new_filenames = []\n    for filename in glob.glob(os.path.join(directory_path, '*')):\n        filename_parts = filename.split('.')\n        filename_parts.reverse()\n        new_filename = '.'.join(filename_parts)\n        new_filenames.append(new_filename)\n    return new_filenames", "problem": "Reverse the order of words in all the filenames of a directory, where words are separated by periods.\nThe function should output with:\n    new_filenames (list[str]): A list of new filenames after renaming.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\ndef task_func(directory_path):\n```", "solution": "import os\nimport glob\ndef task_func(directory_path):\n    new_filenames = []\n    for filename in glob.glob(os.path.join(directory_path, '*')):\n        base_name = os.path.basename(filename)\n        new_base_name = '.'.join(base_name.split('.')[::-1])\n        os.rename(filename, os.path.join(directory_path, new_base_name))\n        new_filenames.append(new_base_name)\n    return new_filenames", "pass": false}
{"task_id": "756", "program": "import shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n\n    pass\nimport shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    \"\"\"\n    Move all files with certain extensions from one directory to another.\n\n    Args:\n        source_dir (str): The directory to move files from.\n        target_dir (str): The directory to move files to.\n        extensions (List[str]): The file extensions to move.\n\n    Returns:\n        int: The number of moved files.\n\n    Raises:\n        ValueError: If source_dir or target_dir does not exist.\n    \"\"\"\n    source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n    if not source_dir.exists():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if not target_dir.exists():\n        raise ValueError(f\"Target directory {target_dir} does not exist.\")\n\n    moved_files = 0\n    for file in source_dir.glob(\"*\"):\n        if file.suffix in extensions:\n            shutil.move(file, target_dir)\n            moved_files += 1\n\n    return moved_files\nsource_dir = \"source_dir\"\ntarget_dir = \"target_dir\"\nextensions = [\".txt\", \".pdf\"]", "problem": "Move all files with certain extensions from one directory to another.\nThe function should raise the exception for: ValueError: If source_dir or target_dir does not exist.\nThe function should output with:\n    int: The number of moved files.\nYou should write self-contained code starting with:\n```\nimport shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n```", "solution": "import shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n\n    count = 0\n\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n\n    return count", "pass": true}
{"task_id": "757", "program": "import numpy as np\nimport datetime\ndef task_func(arr):\n\n    pass\nimport numpy as np\nimport datetime\ndef task_func(arr):\n    \"\"\"\n    Reverse the order of words separated by. \"\" in all strings of a numpy array.\n\n    Parameters\n    ----------\n    arr : numpy.ndarray\n        The numpy array with the strings to be reversed.\n\n    Returns\n    -------\n    numpy.ndarray\n        The numpy array with the strings reversed.\n    \"\"\"\n    # Initialize an empty list to store the reversed strings\n    reversed_strings = []\n\n    # Iterate over the strings in the numpy array\n    for string in arr:\n        # Split the string into a list of words\n        words = string.split(\".\")\n\n        # Reverse the order of the words\n        reversed_words = words[::-1]\n\n        # Join the reversed words into a single string\n        reversed_string = \".\".join(reversed_words)\n\n        # Add the reversed string to the list\n        reversed_strings.append(reversed_string)\n\n    # Convert the list of reversed strings to a numpy array\n    reversed_array = np.array(reversed_strings)\n\n    return reversed_array\narr = np.array([\"This is a test.\", \"This is another test.\"])", "problem": "Reverse the order of words separated by. \"\" in all strings of a numpy array.\nThe function should output with:\n    numpy.ndarray: The numpy array with the strings reversed.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport datetime\ndef task_func(arr):\n```", "solution": "import numpy as np\nimport datetime\ndef task_func(arr):\n    vectorized_reverse = np.vectorize(lambda s: '.'.join(s.split('.')[::-1]))\n    \n    now = datetime.datetime.now()\n    \n    return vectorized_reverse(arr)", "pass": true}
{"task_id": "758", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n    if not isinstance(num_samples, int):\n        raise ValueError(\"num_samples must be an integer\")\n    \n    # Initialize the random number generator\n    rng = np.random.default_rng(rng_seed)\n    \n    # Create a list of country names\n    country_names = np.random.choice(countries, size=num_samples, replace=True)\n    \n    # Create a list of ages\n    ages = np.random.choice(ages, size=num_samples, replace=True)\n    \n    # Create a list of genders\n    genders = np.random.choice(genders, size=num_samples, replace=True)\n    \n    # Encode the genders using LabelEncoder\n    le = LabelEncoder()\n    genders = le.fit_transform(genders)\n    \n    # Create a DataFrame with the demographics data\n    demographics = pd.DataFrame({'Country': country_names, 'Age': ages, 'Gender': genders})\n    \n    return demographics", "problem": "Generate a demographic dataset with information about people from different countries, their age, and gender. Genders are encoded using sklearn LabelEncoder. Datapoints are sampled from the lists using a numpy.random.default_rng with seed: rng_seed. >>> demographics = task_func(5, countries=['Austria', 'Germany'], rng_seed=3) >>> print(demographics) Country  Age  Gender 0  Germany   51       1 1  Austria   54       1 2  Austria   42       0 3  Austria   19       1 4  Austria   21       1\nThe function should raise the exception for: ValueError: If num_samples is not an integer.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the demographics data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n\n    if not isinstance(num_samples, int):\n        raise ValueError(\"num_samples should be an integer.\")\n\n    rng = np.random.default_rng(seed=rng_seed)\n    countries = rng.choice(countries, num_samples)\n    ages = rng.choice(ages, num_samples)\n    genders = rng.choice(genders, num_samples)\n\n    le = LabelEncoder()\n    encoded_genders = le.fit_transform(genders)\n\n    demographics = pd.DataFrame({\n        'Country': countries,\n        'Age': ages,\n        'Gender': encoded_genders\n    })\n\n    return demographics", "pass": false}
{"task_id": "759", "program": "import os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n\n    pass\nimport os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n    \"\"\"\n    Moves all files that match a particular pattern from one directory to another.\n\n    Args:\n        source_directory (str): The directory to move files from.\n        destination_directory (str): The directory to move files to.\n        file_pattern (str): The pattern to match files with.\n\n    Returns:\n        A list of filenames that were moved.\n    \"\"\"\n    moved_files = []\n    for root, _, files in os.walk(source_directory):\n        for file in files:\n            if fnmatch.fnmatch(file, file_pattern):\n                source_path = os.path.join(root, file)\n                destination_path = os.path.join(destination_directory, file)\n                shutil.move(source_path, destination_path)\n                moved_files.append(file)\n    return moved_files\nsource_directory = \"source_dir\"\ndestination_directory = \"destination_dir\"\nfile_pattern = \"*.txt\"", "problem": "Moves all files that match a particular pattern from one directory to another. Functionality: - Moves files from 'source_directory' to 'destination_directory' based on a filename pattern 'file_pattern'.\nThe function should output with:\n    Returns a list of filenames that were moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n```", "solution": "import os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n    moved_files = []\n    for path, dirs, files in os.walk(source_directory):\n        for filename in fnmatch.filter(files, file_pattern):\n            shutil.move(os.path.join(path, filename), os.path.join(destination_directory, filename))\n            moved_files.append(filename)\n    return moved_files", "pass": true}
{"task_id": "760", "program": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nfrom datetime import datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport codecs\nimport re\nfrom datetime import datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates a random DataFrame with 100 records. Each record consists of an ID (ranging from 1 to 100), Name (randomly selected from provided lists of Latin and other names), Date of Birth (randomly generated dates between the specified years), and Email (constructed using the name, year of birth, and provided email domain). Improperly encoded Latin characters in names are corrected during the process.\n\n    Args:\n        start_year (int, optional): The starting year for the date of birth. Defaults to 1980.\n        end_year (int, optional): The ending year for the date of birth. Defaults to 2000.\n        email_domain (str, optional): The email domain to use for the email column. Defaults to 'example.com'.\n        latin_names (list, optional): A list of Latin names to use for the name column. Defaults to ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'].\n        other_names (list, optional): A list of other names to use for the name column. Defaults to ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'].\n        rng_seed (int, optional): A random seed to use for the random number generation. Defaults to None.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the generated user data. The DataFrame has columns:\n            'ID', 'Name', 'Date of Birth', and 'Email'.\n    \"\"\"\n    # Set the random seed\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n\n    # Create a list of all names\n    names = latin_names + other_names\n\n    # Create a list of all dates\n    dates = [datetime.strptime(f'{np.random.randint(start_year, end_year)}-{np.random.randint(1, 12)}-{np.random.randint(1, 28)}', '%Y-%m-%d') for _ in range(100)]\n\n    # Create a list of all emails\n    emails = [f'{name.lower().replace(\" \", \"\")}{date.year}@{email_domain}' for name, date in zip(names, dates)]\n\n    # Correct improperly encoded Latin characters in names\n    emails = [re.sub(r'[\u00e1\u00e9\u00ed\u00f3\u00fa]', lambda x: x.group().lower(), email) for email in emails]\n\n    # Create the DataFrame\n    df = pd.DataFrame({'ID': range(1, 101), 'Name': names, 'Date of Birth': dates, 'Email': emails})\n\n    return df", "problem": "Creates a random DataFrame with 100 records. Each record consists of an ID (ranging from 1 to 100), Name (randomly selected from provided lists of Latin and other names), Date of Birth (randomly generated dates between the specified years), and Email (constructed using the name, year of birth, and provided email domain). Improperly encoded Latin characters in names are corrected during the process. >>> df = task_func(start_year=0, end_year=1200, email_domain='test.at', rng_seed=3) >>> print(df) ID      Name        Date of Birth                Email 0     1   Sopet\u00f3n  0952-09-01 00:00:00   sopet\u00f3n952@test.at 1     2     Brown  0875-10-10 00:00:00     brown875@test.at 2     3   Sopet\u00f3n  0605-08-15 00:00:00   sopet\u00f3n605@test.at 3     4     G\u00f3mez  0337-11-23 00:00:00     g\u00f3mez337@test.at 4     5     G\u00f3mez  0641-04-27 00:00:00     g\u00f3mez641@test.at ..  ...       ...                  ...                  ... 95   96     Brown  0044-05-17 00:00:00      brown44@test.at 96   97  Williams  0530-01-21 00:00:00  williams530@test.at 97   98   Johnson  1005-12-15 00:00:00  johnson1005@test.at 98   99    M\u00e9ndez  1134-07-19 00:00:00   m\u00e9ndez1134@test.at 99  100   Johnson  0696-08-22 00:00:00   johnson696@test.at <BLANKLINE> [100 rows x 4 columns]\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the generated user data. The DataFrame has columns:\n    'ID', 'Name', 'Date of Birth', and 'Email'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport codecs\nimport re\nfrom datetime import datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nfrom datetime import datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \n    # Correcting the encoding for Latin names\n    latin_names = [codecs.encode(name, 'utf-8').decode('utf-8') for name in latin_names]\n    \n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n\n    data = []\n    for i in range(1, 101):\n        is_latin = np.random.choice([True, False])\n        name = np.random.choice(latin_names) if is_latin else np.random.choice(other_names)\n        birth_year = np.random.randint(start_year, end_year + 1)\n        dob = datetime.datetime(birth_year, np.random.randint(1, 13), np.random.randint(1, 29))\n        # Creating the email by removing spaces in names, converting to lowercase, and appending details\n        email = re.sub(r'\\s+', '.', name.lower()) + str(birth_year) + '@' + email_domain\n        data.append([i, name, dob, email])\n\n    df = pd.DataFrame(data, columns=['ID', 'Name', 'Date of Birth', 'Email'])\n\n    return df", "pass": false}
{"task_id": "761", "program": "import json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n\n    pass\nimport json\nimport re\nfrom collections import Counter\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n    # Parse the JSON string\n    data = json.loads(json_str)\n\n    # Remove None values\n    data = {k: v for k, v in data.items() if v is not None}\n\n    # Count the frequency of each unique value\n    value_counts = Counter(data.values())\n\n    # Replace all email addresses with the placeholder \"None\"\n    data = {k: REPLACE_NONE if isinstance(v, str) and re.match(r\"[^@]+@[^@]+\\.[^@]+\", v) else v for k, v in data.items()}\n\n    # Return the processed data and value counts\n    return {\"data\": data, \"value_counts\": value_counts}\njson_str = '{\"name\": \"John\", \"age\": 30, \"email\": \"john@example.com\", \"city\": \"New York\"}'", "problem": "Process a JSON string by: 1. Removing None values. 2. Counting the frequency of each unique value. 3. Replacing all email addresses with the placeholder \"None\".\nThe function should output with:\n    dict: A dictionary containing:\n    \"data\": Processed JSON data.\n    \"value_counts\": A Counter object with the frequency of each unique value.\nYou should write self-contained code starting with:\n```\nimport json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n```", "solution": "import json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n    data = json.loads(json_str)\n    \n    # Remove None values and replace emails\n    processed_data = {}\n    for key, value in data.items():\n        if value is None:\n            continue\n        if isinstance(value, str) and re.match(r\"[^@]+@[^@]+\\.[^@]+\", value):\n            value = REPLACE_NONE\n        processed_data[key] = value\n\n    # Count frequency of each unique value\n    value_counts = Counter(processed_data.values())\n\n    return {\"data\": processed_data, \"value_counts\": value_counts}", "pass": false}
{"task_id": "762", "program": "import codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n\n    pass\nimport codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n              content='Sopet\u00f3n',\n              file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n              encoding=\"latin-1\"):\n    # Create a directory with the given name\n    os.mkdir(directory_name)\n\n    # Create specified .txt files\n    for file_name in file_names:\n        with open(os.path.join(directory_name, file_name), \"w\", encoding=encoding) as f:\n            f.write(content)\n\n    # Encode the content using the specified encoding and write it into all .txt files\n    for file_name in file_names:\n        with open(os.path.join(directory_name, file_name), \"r\", encoding=encoding) as f:\n            content = f.read()\n        with open(os.path.join(directory_name, file_name), \"w\", encoding=encoding) as f:\n            f.write(content.encode(encoding))\n\n    # Zip the directory\n    with zipfile.ZipFile(directory_name + \".zip\", \"w\") as zf:\n        for file_name in file_names:\n            zf.write(os.path.join(directory_name, file_name))\n\n    return directory_name + \".zip\"", "problem": "Create a directory with the given name, create specified .txt files. Encode the content using the specified encoding and write it into all .txt files, then zip the directory. Args: directory_name (str): The name of the directory to be created. content (str, optional): The content which should be written to each .txt file. Defaults to 'Sopet\u00f3n'. file_names (list): List of .txt file names to be created. Defaults to ['file1.txt', 'file2.txt', 'file3.txt']. encoding (str): The encoding type for the files. Default is 'latin-1'. >>> zipped_file = task_func(directory_name=\"directorio\", content='hi', file_names=[\"custom1.txt\", \"custom2.txt\"], encoding='utf-8') >>> print(zipped_file) directorio.zip\nThe function should output with:\n    str: The zipped file name.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n```", "solution": "import codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n\n    os.makedirs(directory_name, exist_ok=True)\n\n    for file_name in file_names:\n        with open(os.path.join(directory_name, file_name), 'wb') as f:\n            f.write(codecs.encode(content, encoding))\n\n    zipped_file = directory_name + '.zip'\n    with zipfile.ZipFile(zipped_file, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for root, dirs, files in os.walk(directory_name):\n            for file in files:\n                zipf.write(os.path.join(root, file))\n\n    return zipped_file ", "pass": false}
{"task_id": "763", "program": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n\n    pass\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    # Read the JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize the output dictionary\n    output = defaultdict(dict)\n\n    # Calculate the mean and median for each key\n    for key in data[0].keys():\n        values = [d[key] for d in data]\n        output[key]['mean'] = np.mean(values)\n        output[key]['median'] = np.median(values)\n\n    # Write the results to a CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])\n        writer.writeheader()\n        for key, values in output.items():\n            writer.writerow({'key': key, 'mean': values['mean'], 'median': values['median']})\ninput_file = 'input.json'\noutput_file = 'output.csv'", "problem": "Read a list of dictionaries from a JSON file, calculate the mean and median for each key, and write the results to a CSV file.\nThe function should output with:\n    dict: A dictionary where each key is a field from the input JSON and each value is another dictionary with the mean and median of that field.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n```", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    \n    result = {k: {'mean': np.mean(v), 'median': np.median(v)} for k, v in stats.items()}\n\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])\n        writer.writeheader()\n        for key, values in result.items():\n            writer.writerow({'key': key, 'mean': values['mean'], 'median': values['median']})\n    \n    return result", "pass": true}
{"task_id": "764", "program": "import csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n\n    pass\nimport csv\nimport random\ndef task_func(csv_file='names.csv', \n              latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n              names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n              encoding='latin-1', rng_seed=None):\n    \"\"\"\n    Create a CSV file with 100 lines. Each line contains a name and an age (randomly generated between 20 and 50). Half of the names are randomly selected from a list of Latin names (default: ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']), the other half from a list of English names (default: ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']). All names are encoded using the specified encoding. If empty name arrays are passed, a csv with headers but no entries is generated.\n\n    Args:\n        csv_file (str, optional): Name of the CSV file to be created. Defaults to 'names.csv'.\n        latin_names (list, optional): List of Latin names. Defaults to ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'].\n        names (list, optional): List of English names. Defaults to ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'].\n        encoding (str, optional): The encoding used for writing the names. Defaults to 'latin-1'.\n        rng_seed (int, optional): The seed for the rng. Defaults to None.\n\n    Returns:\n        str: The CSV file name.\n\n    Raises:\n        TypeError: If csv_file is not a string.\n        TypeError: If latin_names is not an array.\n        TypeError: If names is not an array.\n    \"\"\"\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be an array\")\n\n    # Set the random seed\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    # Create the CSV file", "problem": "Create a CSV file with 100 lines. Each line contains a name and an age (randomly generated between 20 and 50). Half of the names are randomly selected from a list of Latin names (default: ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']), the other half from a list of English names (default: ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']). All names are encoded using the specified encoding. If empty name arrays are passed, a csv with headers but no entries is generated. Args: - csv_file (str, optional): Name of the CSV file to be created. Defaults to 'names.csv'. - latin_names (list, optional): List of Latin names. Defaults to ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']. - names (list, optional): List of English names. Defaults to ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']. - encoding (str, optional): The encoding used for writing the names. Defaults to 'latin-1' - rng_seed (int, optional): The seed for the rng. Defaults to None. >>> file_name = task_func(csv_file='test.csv', names=['simon', 'alex'], rng_seed=1) >>> with open(file_name, 'r', newline='', encoding='latin-1') as csvfile: ...     reader = csv.reader(csvfile) ...     rows = list(reader) ...     print(rows) [['Name', 'Age'], ['M\u00e9ndez', '38'], ['simon', '28'], ['Sopet\u00f3n', '35'], ['alex', '35'], ['P\u00e9rez', '45'], ['simon', '23'], ['P\u00e9rez', '20'], ['alex', '33'], ['Mu\u00f1oz', '44'], ['simon', '42'], ['P\u00e9rez', '28'], ['simon', '38'], ['Sopet\u00f3n', '48'], ['alex', '20'], ['Sopet\u00f3n', '20'], ['simon', '50'], ['P\u00e9rez', '41'], ['simon', '33'], ['Sopet\u00f3n', '36'], ['simon', '44'], ['P\u00e9rez', '50'], ['alex', '37'], ['M\u00e9ndez', '31'], ['simon', '41'], ['M\u00e9ndez', '44'], ['alex', '50'], ['G\u00f3mez', '49'], ['simon', '33'], ['Mu\u00f1oz', '49'], ['simon', '25'], ['G\u00f3mez', '23'], ['alex', '48'], ['Mu\u00f1oz', '49'], ['alex', '36'], ['M\u00e9ndez', '29'], ['alex', '38'], ['P\u00e9rez', '47'], ['alex', '38'], ['Sopet\u00f3n', '35'], ['simon', '43'], ['P\u00e9rez', '33'], ['simon', '31'], ['Mu\u00f1oz', '48'], ['alex', '22'], ['P\u00e9rez', '41'], ['simon', '44'], ['M\u00e9ndez', '36'], ['alex', '31'], ['P\u00e9rez', '43'], ['simon', '35'], ['Sopet\u00f3n', '29'], ['alex', '40'], ['M\u00e9ndez', '25'], ['simon', '20'], ['M\u00e9ndez', '37'], ['simon', '32'], ['Mu\u00f1oz', '31'], ['alex', '34'], ['G\u00f3mez', '41'], ['simon', '32'], ['Mu\u00f1oz', '45'], ['simon', '36'], ['Mu\u00f1oz', '26'], ['alex', '50'], ['Sopet\u00f3n', '35'], ['alex', '38'], ['Mu\u00f1oz', '26'], ['alex', '35'], ['G\u00f3mez', '33'], ['alex', '20'], ['Mu\u00f1oz', '37'], ['alex', '34'], ['Mu\u00f1oz', '20'], ['simon', '40'], ['M\u00e9ndez', '37'], ['simon', '47'], ['Sopet\u00f3n', '45'], ['alex', '21'], ['Sopet\u00f3n', '22'], ['simon', '34'], ['Sopet\u00f3n', '44'], ['alex', '27'], ['G\u00f3mez', '23'], ['simon', '31'], ['G\u00f3mez', '22'], ['simon', '25'], ['G\u00f3mez', '36'], ['simon', '41'], ['G\u00f3mez', '40'], ['alex', '34'], ['G\u00f3mez', '35'], ['alex', '23'], ['Sopet\u00f3n', '29'], ['alex', '30'], ['P\u00e9rez', '45'], ['simon', '28'], ['Sopet\u00f3n', '28'], ['simon', '50'], ['Mu\u00f1oz', '33'], ['simon', '27']]\nThe function should raise the exception for: TypeError: If csv_file is not a string. TypeError: If latin_names is not an array. TypeError: If names is not an array.\nThe function should output with:\n    str: The CSV file name.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n```", "solution": "import csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file should be a string.\")\n    \n    if not isinstance(names, list):\n        raise TypeError(\"names should be a list.\")\n    \n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names should be a list.\")\n\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        fieldnames = ['Name', 'Age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n\n        for _ in range(50):\n            if latin_names:\n                writer.writerow({'Name': random.choice(latin_names), 'Age': random.randint(20, 50)})\n            if names:\n                writer.writerow({'Name': random.choice(names), 'Age': random.randint(20, 50)})\n\n    return csv_file", "pass": false}
{"task_id": "765", "program": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n\n    pass\nimport os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    copied_files = []\n    for file in kwargs:\n        file_path = Path(file)\n        if file_path.exists() and file_path.stat().st_size > 0:\n            shutil.copy(file, target_dir)\n            copied_files.append(file)\n    return copied_files", "problem": "Process files from a dictionary by checking if the file exists, and if it has content, then copies it to a target directory.\nThe function should output with:\n    copied_files (list): A list of full file paths that were copied.\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n```", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    # Check if the target directory exists, if not create it\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    copied_files = []\n\n    for file, content in kwargs.items():\n        if content is not None and os.path.isfile(file):\n            target_file = Path(target_dir) / Path(file).name\n            shutil.copyfile(file, target_file)\n            copied_files.append(str(target_file))\n\n    return copied_files", "pass": false}
{"task_id": "766", "program": "import re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n\n    pass\nimport re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns must be a list of str\")\n\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] += len(re.findall(pattern, string))\n\n    return dict(pattern_counts)", "problem": "Counts the occurrence of specific patterns in a string.\nThe function should raise the exception for: TypeError: If string is not a str. TypeError: If patterns is not a list of str.\nThe function should output with:\n    dict: A dictionary with patterns as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n```", "solution": "import re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    \n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n\n    \n\n    pattern_counts = collections.defaultdict(int)\n\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n\n    return dict(pattern_counts)", "pass": true}
{"task_id": "767", "program": "from collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n\n    pass\nfrom collections import Counter\nimport random\nimport string\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n    \"\"\"\n    If you have a nested list, replace each sublist with a random letter and return a count of each letter in the final list.\n    The function should output with:\n        dict: A dictionary containing count of each letter in the list.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    letter_counts = {}\n\n    # Iterate over the nested list\n    for sublist in list_of_lists:\n        # Replace each sublist with a random letter\n        random_letter = random.choice(LETTERS)\n        sublist[:] = [random_letter]\n\n        # Increment the count for the random letter\n        if random_letter in letter_counts:\n            letter_counts[random_letter] += 1\n        else:\n            letter_counts[random_letter] = 1\n\n    # Return the dictionary of letter counts\n    return letter_counts\nlist_of_lists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]", "problem": "If you have a nested list, replace each sublist with a random letter and return a count of each letter in the final list.\nThe function should output with:\n    dict: A dictionary containing count of each letter in the list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n```", "solution": "from collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n    flat_list = [random.choice(LETTERS) for _ in list_of_lists]\n\n    return dict(Counter(flat_list))", "pass": true}
{"task_id": "768", "program": "import re\nimport os\nimport glob\ndef task_func(dir_path):\n\n    pass\nimport re\nimport os\nimport glob\ndef task_func(dir_path):\n    \"\"\"\n    Search for occurrences of the word \"error\" in all text files within a specified directory and its subdirectories.\n    The function specifically searches for the word \"error\" in text files (with the extension \".txt\").\n    This function is NOT case sensitive, e.g. also \"ERROr\" will be counted.\n    The function should raise the exception for: ValueError: If directory in dir_path does not exist.\n    The function should output with:\n        dict: A dictionary with relative file paths as keys and the count of occurrences of the word \"error\" as values.\n    \"\"\"\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist\")\n\n    error_count = {}\n    for file in glob.iglob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True):\n        with open(file, \"r\") as f:\n            content = f.read()\n            error_count[file] = len(re.findall(r\"\\berror\\b\", content, flags=re.IGNORECASE))\n\n    return error_count", "problem": "Search for occurrences of the word \"error\" in all text files within a specified directory and its subdirectories. The function specifically searches for the word \"error\" in text files (with the extension \".txt\"). This function is NOT case sensitive, e.g. also \"ERROr\" will be counted.\nThe function should raise the exception for: ValueError: If directory in dir_path does not exist.\nThe function should output with:\n    dict: A dictionary with relative file paths as keys and the count of\n    occurrences of the word \"error\" as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(dir_path):\n```", "solution": "import re\nimport os\nimport glob\ndef task_func(dir_path):\n\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Specified directory does not exist.\")\n\n    result = {}\n    file_paths = glob.glob(f'{dir_path}/**/*.txt', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n        matches = re.findall(r'\\berror\\b', content, re.IGNORECASE)\n        # Always set the file's count in the result dictionary, even if it's 0\n        result[os.path.relpath(file_path, dir_path)] = len(matches)\n\n    return result", "pass": false}
{"task_id": "769", "program": "from collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n\n    pass\nfrom collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n    # Flatten the list of menu items\n    flat_list = list(itertools.chain.from_iterable(list_of_menuitems))\n\n    # Count the frequency of each menu item\n    counter = Counter(flat_list)\n\n    # Find the most common menu item\n    most_common = counter.most_common(1)[0][0]\n\n    return most_common", "problem": "Faced with a nested list of menu items, flatten the list and return the most common menu item.\nThe function should output with:\n    str: The most common menu item.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n```", "solution": "from collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n    flat_list = list(itertools.chain(*list_of_menuitems))\n\n    counter = Counter(flat_list)\n\n    return max(counter.items(), key=operator.itemgetter(1))[0]", "pass": true}
{"task_id": "770", "program": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n\n    pass\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n    # Generate a dataset with a single feature and a target variable\n    np.random.seed(random_seed)\n    X = np.linspace(0, 10, num_samples)\n    y = 2 * X + np.random.normal(0, noise_strength, num_samples)\n\n    # Split the dataset into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_seed)\n\n    # Train a linear regression model on the training set\n    model = LinearRegression().fit(X_train, y_train)\n\n    # Calculate the R-squared score of the fitted model on the test set\n    r2 = model.score(X_test, y_test)\n\n    # Check if the test set size is smaller than 2\n    if len(X_test) < 2:\n        raise ValueError(\"Test set size is smaller than 2\")\n\n    return r2, model", "problem": "Generate a dataset with a single feature and a target variable. The target is computed from the feature using a linear relation. In addition some gaussian noise (random samples from normal distributioin), scaled by noise_strength, is added to the target. The dataset is split into training and test sets. Then a linear regression model is adjusted to the training set and the R-squared score is calculated on the test set.\nThe function should raise the exception for: ValueError: If test set size is smaller than 2.\nThe function should output with:\n    float: The R-squared score of the fitted model on the test set.\n    LinearRegression: The trained linear regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n```", "solution": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n\n    if num_samples * test_size < 2:\n        raise ValueError(\"Test set should contain at least 2 samples. num_samples * testsize >=2\")\n\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    X = np.random.rand(num_samples, 1)\n    y = 2*X.squeeze() + 1 + np.random.randn(num_samples) * noise_strength\n\n    X_train, X_test, y_train, y_test = train_test_split(\n                                            X, y,\n                                            test_size=test_size,\n                                            random_state=random_seed\n                                            )\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    r_squared = model.score(X_test, y_test)\n\n    return r_squared, model", "pass": false}
{"task_id": "771", "program": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    pass\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    \"\"\"\n    Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content.\n\n    Args:\n        directory (str): The directory containing the CSV files.\n        pattern (str): The pattern to match the CSV file names. Defaults to r'^(.*?)-\\d+\\.csv$'.\n\n    Returns:\n        list: A list of strings, where each string is the filename of a new CSV file created by the function.\n    \"\"\"\n    # Create a list to store the new file names\n    new_files = []\n\n    # Iterate over the files in the directory\n    for file in os.listdir(directory):\n        # Check if the file matches the pattern\n        if re.match(pattern, file):\n            # Open the file and read the contents\n            with open(os.path.join(directory, file), 'r', newline='') as f:\n                reader = csv.reader(f)\n                # Create a new file with the same contents\n                with open(os.path.join(directory, file.replace('-', '_')), 'w', newline='') as f:\n                    writer = csv.writer(f)\n                    for row in reader:\n                        writer.writerow(row)\n            # Add the new file name to the list\n            new_files.append(file.replace('-', '_'))\n\n    return new_files", "problem": "Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content, you've laid out a solid foundation with your initial tests.\nThe function should output with:\n    new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n```", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    file_dir = Path(directory)\n    file_pattern = re.compile(pattern)\n    new_files = []\n    \n    for filename in os.listdir(file_dir):\n        match = file_pattern.match(filename)\n        if match is not None:\n            prefix = match.group(1)\n            new_filename = f'{prefix}.csv'\n            with open(file_dir / filename, 'r') as infile, open(file_dir / new_filename, 'w') as outfile:\n                reader = csv.reader(infile)\n                writer = csv.writer(outfile)\n                writer.writerows(reader)\n            new_files.append(new_filename)\n    \n    return new_files", "pass": false}
{"task_id": "772", "program": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\ndef task_func(num_samples=1000, k=5, d=2,  random_seed=None):\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\ndef task_func(num_samples=1000, k=5, d=2, random_seed=None):\n    \"\"\"\n    Generate a dataset consisting of random numbers sampled from a gaussian normal distribution that are transformed by applying a linear transformation. Standardize it with the StandardScaler of sklearn, and calculate the average square error between the original dataset and the standardized dataset.\n\n    Parameters\n    ----------\n    num_samples : int, optional\n        Number of samples to generate. The default is 1000.\n    k : int, optional\n        The slope of the linear transformation. The default is 5.\n    d : int, optional\n        The intercept of the linear transformation. The default is 2.\n    random_seed : int, optional\n        Random seed for reproducibility. The default is None.\n\n    Returns\n    -------\n    float\n        The mean squared error between the original and standardized data.\n    \"\"\"\n    # Generate random numbers from a Gaussian normal distribution\n    np.random.seed(random_seed)\n    data = np.random.normal(size=num_samples)\n\n    # Apply linear transformation\n    data_transformed = k * data + d\n\n    # Standardize data\n    scaler = StandardScaler()\n    data_standardized = scaler.fit_transform(data_transformed.reshape(-1, 1))\n\n    # Calculate mean squared error\n    mse = mean_squared_error(data, data_standardized)\n\n    return mse", "problem": "Generate a dataset consisting of random numbers sampled from a gaussian normal distribution that are transformed by applying a linear transformation. Standardize it with the StandardScaler of sklearn, and calculate the average square error between the original dataset and the standardized dataset. >>> mse = task_func() >>> print(mse) 19.03543917135251 >>> mse = task_func(k=1, d=0) >>> print(mse) 0.001113785307245742\nThe function should output with:\n    float: The mean squared error between the original and standardized data.\n    This value represents the average squared difference between each\n    original value and its standardized counterpart. The MSE can vary\n    significantly depending on the random seed and the specified\n    parameters of the linear transformation.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\ndef task_func(num_samples=1000, k=5, d=2,  random_seed=None):\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\ndef task_func(num_samples=1000, k=5, d=2,  random_seed=None):\n\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    data = np.random.randn(num_samples, 1)*k + d\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n\n    mse = mean_squared_error(data, scaled_data)\n\n    return mse", "pass": false}
{"task_id": "773", "program": "import os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n\n    pass\nimport os\nimport re\nimport shutil\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n    # Get a list of all JSON files in the source directory\n    json_files = [f for f in os.listdir(SOURCE_DIR) if f.endswith('.json')]\n\n    # Iterate over the JSON files and move them to the target directory\n    for json_file in json_files:\n        # Extract the prefix part of the filename\n        prefix = FILE_PATTERN.match(json_file).group(1)\n\n        # Move the JSON file to the target directory with the new name\n        shutil.move(os.path.join(SOURCE_DIR, json_file), os.path.join(TARGET_DIR, prefix + '.json'))\n\n    return None", "problem": "Move all json files in a source directory to a target directory and rename them by splitting the filename the last time \"-\" occurs and keeping the prefix part of the filename.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n```", "solution": "import os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n    SOURCE_DIR = '/source/dir'\n    TARGET_DIR = '/target/dir'\n    FILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\n    for filename in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.match(filename)\n        if match is not None:\n            prefix = match.group(1)\n            new_filename = f'{prefix}.json'\n            shutil.move(os.path.join(SOURCE_DIR, filename), os.path.join(TARGET_DIR, new_filename))", "pass": false}
{"task_id": "774", "program": "import numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n\n    pass\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n    \"\"\"\n    Generate a dataset with five features sampled from the standard normal distribution and a target variable.\n    The target value is created by computing the sum of the features and adding random numbers sampled from the standard normal distribution.\n    Then cross-validate the dataset using a RandomForestRegressor model and return the mean cross-validation score.\n\n    Args:\n        num_samples (int): The number of samples to generate.\n        n_estimators (int): The number of trees in the Random Forest model.\n        random_seed (int): The random seed for reproducibility.\n        cv (int): The number of cross-validation folds.\n\n    Returns:\n        float: The mean cross-validation score.\n        model: The trained model.\n    \"\"\"\n    # Set the random seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # Generate the dataset\n    X = np.random.normal(size=(num_samples, 5))\n    y = np.sum(X, axis=1) + np.random.normal(size=num_samples)\n\n    # Train the model\n    model = RandomForestRegressor(n_estimators=n_estimators, random_state=random_seed)\n    model.fit(X, y)\n\n    # Cross-validate the model\n    scores = cross_val_score(model, X, y, cv=cv)\n\n    # Return the mean cross-validation score and the trained model\n    return scores.mean(), model", "problem": "Generate a dataset with five features sampled from the standard normal distribution and a target variable. The target value is created by computing the sum of the features and adding random numbers sampled from the standard normal distribution. Then cross-validate the dataset using a RandomForestRegressor model and return the mean cross-validation score. >>> results = task_func(random_seed=1) >>> print(results) (0.47332912782858, RandomForestRegressor(random_state=1))\nThe function should raise the exception for: ValueError: If num_samples / cv < 2\nThe function should output with:\n    float: The mean cross-validation score.\n    model: the trained model\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n```", "solution": "import numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n    \n    if num_samples / cv < 2:\n        raise ValueError(\"num_samples / cv should be greater than or equal to 2.\")\n\n    np.random.seed(random_seed)\n    X = np.random.randn(num_samples, 5)\n    y = np.sum(X, axis=1) + np.random.randn(num_samples)\n    \n    model = RandomForestRegressor(n_estimators=n_estimators,\n                                  random_state=random_seed\n                                  )\n    \n    cv_scores = cross_val_score(model, X, y, cv=cv)\n    \n    return np.mean(cv_scores), model", "pass": true}
{"task_id": "775", "program": "from string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n\n    pass\nfrom string import ascii_lowercase\nimport re\nfrom collections import Counter\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\ndef task_func(string):\n    \"\"\"\n    If a string occurs, divide it the last time \"-\" occurs and count the frequency of each lowercase letter in the prefix of the string.\n    The function should output with:\n        dict: A dictionary with the frequency of each lowercase letter.\n    \"\"\"\n    match = LETTERS_PATTERN.search(string)\n    if match:\n        prefix = match.group(1)\n        return Counter(prefix)\n    else:\n        return Counter()", "problem": "If a string occurs, divide it the last time \"-\" occurs and count the frequency of each lowercase letter in the prefix of the string.\nThe function should output with:\n    dict: A dictionary with the frequency of each lowercase letter.\nYou should write self-contained code starting with:\n```\nfrom string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n```", "solution": "from string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n    # Match and extract the portion before the last hyphen\n    match = re.search(r'^(.*)-', string)\n    if match:\n        prefix = match.group(1)\n    else:\n        # If there's no hyphen, the whole string is considered if it is letters only\n        prefix = string if string.isalpha() else \"\"\n\n    # Count each letter in the prefix\n    letter_counts = Counter(prefix)\n    # Initialize a dictionary with all letters set to zero count\n    result = {letter: 0 for letter in ascii_lowercase}\n    # Update this dictionary with the actual counts from the prefix\n    result.update({letter: letter_counts.get(letter, 0) for letter in letter_counts if letter in result})\n\n    return result", "pass": false}
{"task_id": "776", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n    \"\"\"\n    Sorts a CSV file by a specific column key using pandas, and optionally writes the sorted data to another CSV file.\n    Can also fit a linear regression model to specified columns if required.\n\n    Args:\n        file_path (str): The path to the input CSV file.\n        output_path (str, optional): The path to the output CSV file. If None, the sorted DataFrame is returned.\n        sort_key (str, optional): The column key to sort by. Defaults to 'title'.\n        linear_regression (bool, optional): Whether to fit a linear regression model. Defaults to False.\n        x_column (str, optional): The column to use as the independent variable for the linear regression model.\n            Defaults to None.\n        y_column (str, optional): The column to use as the dependent variable for the linear regression model.\n            Defaults to None.\n\n    Returns:\n        DataFrame, str, or LinearRegression model: The sorted pandas DataFrame if 'output_path' is None and\n        'linear_regression' is False, otherwise the path to the saved output file. If 'linear_regression' is True,\n        returns the fitted model.\n\n    Raises:\n        Exception: If there is an error in reading, sorting the data, or fitting the model.\n        ValueError: If the specified columns for linear regression do not exist in the dataframe.\n    \"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        df = df.sort_values(sort_key)\n        if output_path is not None:\n            df.to_csv(output_path, index=False)\n        if linear_regression:\n            if x_column is None or y_column is None:\n                raise ValueError(\"x_column and y_column must be specified for linear regression\")\n            if x_column not in df.columns or y_column not in df.columns:\n                raise ValueError(\"Specified columns for linear regression do not exist in the dataframe\")\n            model = LinearRegression()\n            model.fit(df[x_column], df[y_column])\n            return model\n        else:\n            return df\n    except Exception as e:\n        raise Exception(f\"Error in reading, sorting, or fitting the data: {e}\")", "problem": "Sorts a CSV file by a specific column key using pandas, and optionally writes the sorted data to another CSV file. Can also fit a linear regression model to specified columns if required.\nThe function should raise the exception for: Exception: If there is an error in reading, sorting the data, or fitting the model. If the specified columns for linear regression do not exist in the dataframe, a ValueError with \"Specified columns for linear regression do not exist in the dataframe\" message is also raised.\nThe function should output with:\n    DataFrame, str, or LinearRegression model: The sorted pandas DataFrame if 'output_path' is None and\n    'linear_regression' is False, otherwise the path to the saved output file. If 'linear_regression' is True,\n    returns the fitted model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n    try:\n        df = pd.read_csv(file_path)\n        df.sort_values(by=[sort_key], inplace=True)\n\n        if linear_regression:\n            if x_column not in df.columns or y_column not in df.columns:\n                raise ValueError(\"Specified columns for linear regression do not exist in the dataframe\")\n\n            X = df[[x_column]]\n            y = df[y_column]\n            model = LinearRegression().fit(X, y)\n            return model\n\n        if output_path:\n            df.to_csv(output_path, index=False)\n            return output_path\n        else:\n            return df\n    except Exception as e:\n        raise Exception(f\"Error while processing the file: {str(e)}\")", "pass": false}
{"task_id": "777", "program": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n\n    pass\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\n    The function should output with:\n        list: A list of directories where the files were extracted.\n    \"\"\"\n    # Get a list of all zip files in the directory\n    zip_files = [f for f in os.listdir(directory) if re.match(pattern, f)]\n\n    # Create a list to store the directories where the files were extracted\n    extracted_dirs = []\n\n    # Loop through each zip file and extract it to a directory with the same name as the prefix part of the filename\n    for zip_file in zip_files:\n        # Split the filename the last time \"-\" occurs\n        prefix, _ = os.path.splitext(zip_file)\n        prefix = prefix.rsplit(\"-\", 1)[0]\n\n        # Create a directory with the same name as the prefix part of the filename\n        extracted_dir = os.path.join(directory, prefix)\n        os.makedirs(extracted_dir, exist_ok=True)\n\n        # Extract the zip file to the directory\n        with zipfile.ZipFile(os.path.join(directory, zip_file), \"r\") as zf:\n            zf.extractall(extracted_dir)\n\n        # Add the directory to the list of extracted directories\n        extracted_dirs.append(extracted_dir)\n\n    return extracted_dirs", "problem": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            file_path = os.path.join(directory, filename)\n            # Use the part before the first '-' as the directory name.\n            base_name = match.group(1)\n            extract_path = os.path.join(directory, base_name)\n            with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_path)\n            if extract_path not in extracted_dirs:\n                extracted_dirs.append(extract_path)\n                os.makedirs(extract_path, exist_ok=True)  # Ensure the directory is created\n    return extracted_dirs", "pass": true}
{"task_id": "778", "program": "from collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n\n    pass\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n    \"\"\"\n    Sort a list of news articles by \"category\" and \"title.\" The news articles are then grouped by \"category.\"\n\n    Args:\n        news_articles (list): A list of news articles represented as dictionaries with keys \"title\", \"title_url\", \"id\", and \"category\".\n\n    Returns:\n        dict: A dictionary where the keys are categories and the values are lists of articles sorted by \"title\" in that category.\n            Each article is represented as a dictionary with keys \"title\", \"title_url\", \"id\", and \"category\".\n\n    Raises:\n        ValueError: If dictionary keys do not match the requirements.\n    \"\"\"\n    # Check if all dictionaries in the list have the required keys\n    for article in news_articles:\n        if not all(key in article for key in [\"title\", \"title_url\", \"id\", \"category\"]):\n            raise ValueError(\"Dictionary keys do not match the requirements.\")\n\n    # Sort the articles by category and title\n    sorted_articles = sorted(news_articles, key=itemgetter(\"category\", \"title\"))\n\n    # Group the articles by category\n    grouped_articles = groupby(sorted_articles, key=itemgetter(\"category\"))\n\n    # Create a dictionary with the categories as keys and the articles as values\n    result = defaultdict(list)\n    for category, articles in grouped_articles:\n        result[category].extend(articles)\n\n    return result\narticles = [\n    {\"title\": \"Der Standard\", \"title_url\": \"standard\", \"id\": 2, \"category\": \"climate\"},\n    {\"title\": \"tecky\", \"title_url\": \"tecky\", \"id\": 4, \"category\": \"climate\"},\n    {\"title\": \"earth magazine\", \"title_url\": \"earth\", \"id\": 4, \"category\": \"environment\"},\n]", "problem": "Sort a list of news articles by \"category\" and \"title.\" The news articles are then grouped by \"category.\" >>> articles = [ ...        {'title': 'Der Standard', 'title_url': 'standard', 'id': 2, 'category': 'climate'}, ...        {'title': 'tecky', 'title_url': 'tecky', 'id': 4, 'category': 'climate'}, ...        {'title': 'earth magazine', 'title_url': 'earth', 'id': 4, 'category': 'environment'} ...    ] >>> sorted_articles = task_func(articles) >>> print(sorted_articles) defaultdict(<class 'list'>, {'climate': [{'title': 'Der Standard', 'title_url': 'standard', 'id': 2, 'category': 'climate'}, {'title': 'tecky', 'title_url': 'tecky', 'id': 4, 'category': 'climate'}], 'environment': [{'title': 'earth magazine', 'title_url': 'earth', 'id': 4, 'category': 'environment'}]})\nThe function should raise the exception for: ValueError: If dictionary keys do not match the requirements.\nThe function should output with:\n    dict: A dictionary where the keys are categories and the values are lists\n    of articles sorted by 'title' in that category. Each article is represented as a dictionary\n    with keys 'title', 'title_url', 'id', and 'category'.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n```", "solution": "from collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n    if any(not sorted(dic.keys()) == ['category', 'id', 'title', 'title_url']  for dic in news_articles):\n        raise ValueError(\"input dictionaries must contain the following keys: 'category', 'id', 'title', 'title_url'\")\n\n    news_articles.sort(key=itemgetter('category', 'title'))\n\n    grouped_articles = defaultdict(list)\n    for category, group in groupby(news_articles, key=itemgetter('category')):\n        grouped_articles[category] = list(group)\n\n    return grouped_articles", "pass": false}
{"task_id": "779", "program": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n\n    pass\nimport os\nimport shutil\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n    # Create a backup of the directory\n    backup_dir = get_unique_backup_dir()\n    shutil.copytree(directory, backup_dir)\n\n    # Clean the directory\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            os.remove(os.path.join(root, file))\n\n    # Return the backup directory path and a list of errors (if any)\n    return backup_dir, []", "problem": "Create a backup of a directory and clean the directory afterwards.\nNote that: The function will return the backup directory path and a list of errors (if any).\nThe function should output with:\n    tuple: A tuple containing:\n    str: The backup directory path.\n    list: A list of any errors encountered during the operation (empty list if no errors).\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n```", "solution": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n    errors = []\n    if not os.path.exists(directory):\n        errors.append(f\"Directory does not exist: {directory}\")\n        return None, errors\n\n    if not os.path.exists(directory):\n        errors.append(f\"Directory does not exist: {directory}\")\n        return None, errors\n\n    try:\n        if not os.path.exists(BACKUP_DIR):\n            os.makedirs(BACKUP_DIR)\n\n        backup_dir = get_unique_backup_dir()\n        os.makedirs(backup_dir)\n        shutil.copytree(directory, os.path.join(backup_dir, os.path.basename(directory)))\n        try:\n            shutil.rmtree(directory)  # Deleting contents after backup\n        except PermissionError as e:\n            errors.append(f\"Permission denied: {e}\")\n            shutil.copytree(os.path.join(backup_dir, os.path.basename(directory)), directory)  # Restore original if cleanup fails\n        os.makedirs(directory, exist_ok=True)  # Recreating the original directory\n    except Exception as e:\n        errors.append(str(e))\n\n    return \"/fake/backup/path\", errors\n    \n    try:\n        shutil.copytree(directory, os.path.join(backup_dir, os.path.basename(directory)))\n        shutil.rmtree(directory)  # Deleting contents after backup\n        os.makedirs(directory)  # Recreating the original directory\n    except Exception as e:\n        errors.append(str(e))\n\n    return backup_dir, errors", "pass": false}
{"task_id": "780", "program": "import pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n\n    pass\nimport pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n    \"\"\"\n    Analyze the publication times of a list of articles:\n    1) Convert 'published_time' to a specified timezone\n    2) Group articles by 'category'\n    3) For each category, calculate the count, mean, min, max publication times only considering the hour\n\n    The function should raise the exception for:\n    ValueError: If dictionary keys do not match the requirements.\n    TypeError: If articles is not a list of dictionaries.\n    ValueError: If an empty list is passed as articles.\n\n    The function should output with:\n        DataFrame: A pandas DataFrame with the count, mean, min, max publication hour for each category.\n        The category is the index of the DataFrame.\n    \"\"\"\n    # Check if articles is a list of dictionaries\n    if not isinstance(articles, list) or not all(isinstance(article, dict) for article in articles):\n        raise TypeError(\"articles must be a list of dictionaries\")\n\n    # Check if articles is not empty\n    if not articles:\n        raise ValueError(\"articles must not be empty\")\n\n    # Check if dictionary keys match the requirements\n    required_keys = {\"category\", \"published_time\"}\n    if not all(required_keys <= set(article.keys()) for article in articles):\n        raise ValueError(\"dictionary keys do not match the requirements\")\n\n    # Convert published_time to the specified timezone\n    articles = [\n        {\n            **article,\n            \"published_time\": pytz.timezone(timezone).localize(article[\"published_time\"]),\n        }\n        for article in articles\n    ]\n\n    # Group articles by category and calculate the count, mean, min, max publication times only considering the hour\n    df = (\n        pd.DataFrame(articles)\n        .assign(hour=lambda x: x[\"published_time\"].dt.hour)\n        .groupby(\"category\")\n        .agg(\n            count=(\"hour\", \"count\"),\n            mean=(\"hour\", \"mean\"),\n            min=(\"hour\", \"min\"),\n            max=(\"hour\", \"max\"),\n        )\n        .reset_index()\n    )\n\n    return df", "problem": "Analyze the publication times of a list of articles: 1) Convert 'published_time' to a specified timezone 2) Group articles by 'category' 3) For each category, calculate the count, mean, min, max publication times only considering the hour.\nThe function should raise the exception for: ValueError: If dictionary keys do not match the requirements. TypeError: If articles is not a list of dictionaries. ValueError: If an empty list is passed as articles.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the count, mean, min, max publication hour for each category.\n    The category is the index of the DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n```", "solution": "import pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n\n    if not isinstance(articles, list):\n        raise TypeError(\"articles should be a list of dictionaries.\")\n\n    if not all(isinstance(item, dict) for item in articles):\n        raise TypeError(\"articles should be a list of dictionaries.\")\n\n    if len(articles) == 0:\n        raise ValueError(\"input articles list should contain at least one article.\")\n\n    if any(not sorted(dic.keys()) == ['category', 'id', 'published_time', 'title', 'title_url'] for dic in articles):\n        raise ValueError(\n            \"input dictionaries must contain the following keys: 'category', 'id', 'title', 'title_url', 'published_time'\")\n\n    tz = pytz.timezone(timezone)\n    for article in articles:\n        article['published_time'] = pd.to_datetime(article['published_time']).astimezone(tz)\n\n    df = pd.DataFrame(articles)\n    df['published_time'] = df['published_time'].dt.hour\n\n    analysis_df = df.groupby('category')['published_time'].agg(['count', 'mean', 'min', 'max'])\n\n    return analysis_df", "pass": false}
{"task_id": "781", "program": "import os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n\n    pass\nimport os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n    \"\"\"\n    Determine the size and date of the last modification of a file.\n\n    Args:\n        filepath (str): The path to the file.\n\n    Returns:\n        dict: A dictionary containing the size (in bytes) and last modification\n        date of the file in the format '%Y-%m-%d %H:%M:%S'.\n    \"\"\"\n    file_stats = os.stat(filepath)\n    size = file_stats.st_size\n    last_modified = datetime.fromtimestamp(file_stats.st_mtime)\n    return {\"size\": size, \"last_modified\": last_modified.strftime(\"%Y-%m-%d %H:%M:%S\")}", "problem": "Determine the size and date of the last modification of a file.\nThe function should output with:\n    dict: A dictionary containing the size (in bytes) and last modification\n    date of the file in the format '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nimport os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n```", "solution": "import os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n    try:\n        size = os.path.getsize(filepath)\n        mtime = os.path.getmtime(filepath)\n        mtime = datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M:%S')\n    except OSError as e:\n        raise Exception(f\"Error: {e}\")\n\n    return {'size': f\"{size} bytes\", 'last_modified': mtime}", "pass": false}
{"task_id": "782", "program": "import random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n\n    pass\nimport random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n              domain=\"samplewebsite.com\",\n              categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n              random_seed=None):\n    \"\"\"\n    Generate 'n' random articles with titles, URLs, IDs, categories, and views, and return them as a DataFrame.\n    Views are generated by sampling from a poisson distribution with lambda=1000.\n\n    Parameters\n    ----------\n    n : int\n        The number of articles to generate.\n    domain : str, optional\n        The domain name to use for the article URLs.\n    categories : list of str, optional\n        The categories to use for the articles.\n    random_seed : int, optional\n        The random seed to use for the Poisson distribution.\n\n    Returns\n    -------\n    DataFrame\n        A pandas DataFrame with columns: 'title', 'title_url', 'id', 'category', 'views'.\n    \"\"\"\n    # Set the random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # Generate the article titles\n    titles = [f\"Article {i}\" for i in range(n)]\n\n    # Generate the article URLs\n    title_urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n\n    # Generate the article IDs\n    ids = list(range(n))\n\n    # Generate the article categories\n    categories = random.choices(categories, k=n)\n\n    # Generate the article views\n    views = np.random.poisson(lam=1000, size=n)\n\n    # Create the DataFrame\n    df = pd.DataFrame({\"title\": titles,\n                       \"title_url\": title_urls,\n                       \"id\": ids,\n                       \"category\": categories,\n                       \"views\": views})\n\n    return df", "problem": "Generate 'n' random articles with titles, URLs, IDs, categories, and views, and return them as a DataFrame. Views are generated by sampling from a poisson distribution with lambda=1000. >>> df = task_func(3, categories=['A', 'B'], domain='test.de', random_seed=12) >>> print(df) title          title_url  id category  views 0  Article 0  test.de/Article_0   0        B    963 1  Article 1  test.de/Article_1   1        B    977 2  Article 2  test.de/Article_2   2        B   1048\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns: 'title', 'title_url', 'id', 'category', 'views'.\nYou should write self-contained code starting with:\n```\nimport random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n```", "solution": "import random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n    random.seed(random_seed)\n    np.random.seed(random_seed)\n\n    data = []\n    for _ in range(n):\n        title = f\"Article {_}\"\n        title_url = f\"{domain}/Article_{_}\"\n        id = _\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        data.append({'title': title, 'title_url': title_url, 'id': id, 'category': category, 'views': views})\n\n    df = pd.DataFrame(data)\n    return df", "pass": false}
{"task_id": "783", "program": "import os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n\n    pass\nimport os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n    \"\"\"\n    Move all files with a particular extension from one directory to another.\n\n    Parameters:\n    src_dir (str): The source directory.\n    dest_dir (str): The destination directory.\n    extension (str): The file extension to move.\n\n    Returns:\n    files_moved (int): The number of files moved.\n    \"\"\"\n    files_moved = 0\n    for filename in os.listdir(src_dir):\n        if filename.endswith(extension):\n            src_path = os.path.join(src_dir, filename)\n            dest_path = os.path.join(dest_dir, filename)\n            shutil.move(src_path, dest_path)\n            files_moved += 1\n    return files_moved\nsrc_dir = \"C:/Users/User/Documents/src\"\ndest_dir = \"C:/Users/User/Documents/dest\"\nextension = \".txt\"", "problem": "Move all files with a particular extension from one directory to another.\nThe function should output with:\n    files_moved (int): The number of files moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n```", "solution": "import os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n    files_moved = 0\n\n    for file_name in os.listdir(src_dir):\n        if file_name.endswith(extension):\n            shutil.move(os.path.join(src_dir, file_name), os.path.join(dest_dir, file_name))\n            files_moved += 1\n\n    return files_moved", "pass": true}
{"task_id": "784", "program": "import pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n\n    pass\nimport pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n    \"\"\"\n    Generate a DataFrame with random survey data based on given categories, news sites, and Likert scale responses.\n    The function writes the generated data to a CSV file and then reads it into a Pandas DataFrame.\n    \"\"\"\n    # Set the random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # Create a dictionary to map Likert scale responses to numerical values\n    likert_scale_map = {\n        'Strongly Disagree': 1,\n        'Disagree': 2,\n        'Neither Agree nor Disagree': 3,\n        'Agree': 4,\n        'Strongly Agree': 5\n    }\n\n    # Create a list of random category and news site combinations\n    category_news_pairs = [(category, news_site) for category in categories for news_site in news_sites]\n    random.shuffle(category_news_pairs)\n\n    # Create a list of random Likert scale responses\n    responses = [random.choice(likert_scale) for _ in range(n)]\n\n    # Create a list of random numerical values for the Likert scale responses\n    values = [likert_scale_map[response] for response in responses]\n\n    # Create a DataFrame with the category, news site, response, and value columns\n    df = pd.DataFrame({\n        'Category': [pair[0] for pair in category_news_pairs],\n        'News Site': [pair[1] for pair in category_news_pairs],\n        'Response': responses,\n        'Value': values\n    })\n\n    # Write the DataFrame to a CSV file\n    df.to_csv(file_path, index=False)\n\n    # Read the CSV file into a new DataFrame\n    df = pd.read_csv(file_path)\n\n    return df", "problem": "Generate a DataFrame with random survey data based on given categories, news sites, and Likert scale responses. The function writes the generated data to a CSV file and then reads it into a Pandas DataFrame. >>> df = task_func(8, ['test', 'fun'], likert_scale=['true', 'false'], news_sites=['cat', 'dog'], random_seed=12) >>> print(df) Site Category  Response  Value 0  dog      fun     False      2 1  cat      fun      True      1 2  dog      fun     False      2 3  dog     test      True      1 4  cat      fun     False      2 5  cat      fun      True      1 6  cat     test      True      1 7  dog      fun      True      1\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Site', 'Category', 'Response', 'Value'].\n    The 'Value' column assigns a numerical value to the Likert scale response (starting from 1).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n```", "solution": "import pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n    survey_data = []\n\n    random.seed(random_seed)\n    \n    for _ in range(n):\n        site = random.choice(news_sites)\n        category = random.choice(categories)\n        response = random.choice(likert_scale)\n        value = likert_scale.index(response) + 1  # Assign a numerical value to the response\n        survey_data.append({'Site': site, 'Category': category, 'Response': response, 'Value': value})\n    \n    with open(file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Site', 'Category', 'Response', 'Value']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(survey_data)\n        \n    df = pd.read_csv(file_path)\n    \n    return df", "pass": false}
{"task_id": "785", "program": "import subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n\n    pass\nimport subprocess\nimport os\nimport glob\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    Note that: This function will return the archive file path.\n    The function should output with:\n        archive_file (str): The archive file path.\n    \"\"\"\n    # Get all files that match the pattern\n    files = glob.glob(pattern)\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Archive the files\n    for file in files:\n        # Create the archive file path\n        archive_file = os.path.join(ARCHIVE_DIR, os.path.basename(file))\n\n        # Archive the file\n        subprocess.run(['tar', '-czf', archive_file, file])\n\n        # Delete the original file\n        os.remove(file)\n\n    return archive_file", "problem": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```", "solution": "import subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    \n    if not file_list:\n        return \"No files found matching the pattern.\"\n\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    \n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    \n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    \n    return archive_file", "pass": false}
{"task_id": "786", "program": "import pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n\n    pass\nimport pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n\n    # Set the random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # Create a list of dictionaries to store the sales data\n    sales_data = []\n\n    # Loop through each row\n    for i in range(n):\n        # Generate random country and product\n        country = random.choice(countries)\n        product = random.choice(products)\n\n        # Generate random sales value\n        sales = random.randint(1, 100)\n\n        # Add the data to the list of dictionaries\n        sales_data.append({'Country': country, 'Product': product, 'Sales': sales})\n\n    # Create a pandas DataFrame from the list of dictionaries\n    df = pd.DataFrame(sales_data)\n\n    # If an output path is provided, save the data to a csv file\n    if output_path is not None:\n        df.to_csv(output_path, index=False)\n\n    return df", "problem": "Generate random sales data and return it as a pandas DataFrame. The sales data has the columns 'Country', 'Product' and 'Sales'. Country and Product get sampled from the provided lists / the default values. Sales is populated by generating random integers between 1 and 100. If an output_path is provided, the generated data is saved to a csv file. >>> df = task_func(7, products=['tea', 'coffee'], countries=['Austria', 'Australia'], random_seed=12) >>> print(df) Country Product  Sales 0  Australia  coffee     85 1  Australia     tea     49 2    Austria  coffee     62 3  Australia  coffee     89 4    Austria     tea     85 5    Austria  coffee     48 6    Austria  coffee     27\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated sales data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n```", "solution": "import pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n    \n    random.seed(random_seed)\n    \n    sales_data = []\n    \n    for _ in range(n):\n        country = random.choice(countries)\n        product = random.choice(products)\n        sales = random.randint(1, 100)\n        sales_data.append({'Country': country, 'Product': product, 'Sales': sales})\n\n    # If an output path is provided, save the data to a CSV file\n    if output_path:\n        with open(output_path, 'w', newline='') as csvfile:\n            fieldnames = ['Country', 'Product', 'Sales']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n            writer.writeheader()\n            writer.writerows(sales_data)\n        \n    return pd.DataFrame(sales_data)", "pass": true}
{"task_id": "787", "program": "import numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n\n    pass\nimport numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n    \"\"\"\n    Calculate the maximum Euclidean distance between all possible pairs of points formed by combining elements from two input arrays.\n    Each point is formed by combining one element from the first array and one element from the second array.\n    The function then calculates the Euclidean distance between each pair of points and returns the maximum distance found.\n\n    Parameters\n    ----------\n    array1 : array_like\n        The first input array.\n    array2 : array_like\n        The second input array.\n\n    Returns\n    -------\n    max_distance : float\n        The maximum Euclidean distance between any two points formed by combining\n        elements from array1 and array2. If the arrays are empty, the function\n        returns 0.\n\n    Raises\n    ------\n    ValueError\n        If the input arrays have different lengths.\n    \"\"\"\n    if len(array1) != len(array2):\n        raise ValueError(\"The input arrays have different lengths.\")\n\n    # Calculate the Euclidean distance between all possible pairs of points\n    distances = []\n    for i, j in combinations(range(len(array1)), 2):\n        point1 = np.array([array1[i], array2[i]])\n        point2 = np.array([array1[j], array2[j]])\n        distance = np.linalg.norm(point1 - point2)\n        distances.append(distance)\n\n    # Return the maximum distance\n    return max(distances) if distances else 0\narray1 = np.array([1, 2, 3])\narray2 = np.array([4, 5, 6])", "problem": "Calculate the maximum Euclidean distance between all possible pairs of points formed by combining elements from two input arrays. Each point is formed by combining one element from the first array and one element from the second array. The function then calculates the Euclidean distance between each pair of points and returns the maximum distance found.\nThe function should raise the exception for: ValueError: If the input arrays have different lengths.\nThe function should output with:\n    max_distance (float): The maximum Euclidean distance between any two points formed by combining\n    elements from array1 and array2. If the arrays are empty, the function\n    returns 0.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n```", "solution": "import numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n    if len(array1) != len(array2):\n        raise ValueError(\"The input arrays must have the same length.\")\n    \n    if len(array1) == 0:\n        return 0\n    \n    max_distance = 0\n    for comb in combinations(zip(array1, array2), 2):\n        distance = np.linalg.norm(np.array(comb[0]) - np.array(comb[1]))\n        if distance > max_distance:\n            max_distance = distance\n\n    return max_distance", "pass": true}
{"task_id": "788", "program": "import heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n\n    pass\nimport heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n    \"\"\"\n    Find the N largest absolute differences between the corresponding elements of two specified columns in a DataFrame,\n    perform a t-Test on the elements with these differences, and return the calculated p-value.\n\n    Args:\n        df (pd.DataFrame): The DataFrame containing the columns to compare.\n        col1 (str): The name of the first column to compare.\n        col2 (str): The name of the second column to compare.\n        N (int, optional): The number of largest differences to consider. Defaults to 10.\n\n    Returns:\n        float: The p-value resulting from the t-Test on the elements with the N largest differences.\n\n    Raises:\n        ValueError: If specified columns are not in the provided DataFrame.\n        ValueError: If N is <= 1.\n    \"\"\"\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n    if N <= 1:\n        raise ValueError(\"N must be greater than 1.\")\n\n    # Find the N largest absolute differences between the corresponding elements of the two columns\n    diffs = [abs(df[col1][i] - df[col2][i]) for i in range(len(df))]\n    largest_diffs = heapq.nlargest(N, diffs)\n\n    # Perform a t-Test on the elements with the N largest differences\n    t, p = stats.ttest_ind(df[col1][largest_diffs], df[col2][largest_diffs])\n\n    return p\ndf = pd.DataFrame({\n    'col1': [1, 3, 4, 70],\n    'col2': [2, 3, 5, 1]\n})", "problem": "Find the N largest absolute differences between the corresponding elements of two specified columns in a DataFrame, perform a t-Test on the elements with these differences, and return the calculated p-value. >>> df = pd.DataFrame({ ...    'col1': [1, 3, 4, 70], ...    'col2': [2, 3, 5, 1] ...     }) >>> p_value = task_func(df, 'col1', 'col2', N=5) >>> print(p_value) 0.3590111759771484\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame. ValueError: If N is <= 1.\nThe function should output with:\n    float: The p-value resulting from the t-Test on the elements with the N largest differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n```", "solution": "import heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n    if N <= 1:\n        raise ValueError(f\"N should be greater than 1. Received N={N}.\")\n\n    # Ensure provided columns exist in the dataframe\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n    \n    # Extract values from the specified columns\n    l1 = df[col1].values\n    l2 = df[col2].values\n    \n    # Find the indices of the N largest differences\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n    \n    # Perform the t-Test and return the p-value\n    _, p_value = stats.ttest_ind(l1[largest_diff_indices], l2[largest_diff_indices])\n    return p_value", "pass": false}
{"task_id": "789", "program": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nARRAY_LENGTH = 10\ndef task_func():\n    # Generate a random array\n    array = np.random.rand(ARRAY_LENGTH)\n\n    # Apply min-max normalization (scaling) to transform the array values into a range between 0 and 1\n    scaler = MinMaxScaler()\n    scaled_array = scaler.fit_transform(array.reshape(-1, 1))\n\n    return scaled_array\narray = np.array([1, 2, 3, 4, 5])", "problem": "Generate a random array and apply min-max normalization (scaling) to transform the array values into a range between 0 and 1.\nThe function should output with:\n    scaled_array (numpy.ndarray): The normalized array.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n    np.random.seed(42)  # For reproducibility, as shown in your example\n    array = np.random.randint(0, 10, ARRAY_LENGTH).reshape(-1, 1)\n    scaler = MinMaxScaler()\n    scaled_array = scaler.fit_transform(array)\n    return scaled_array", "pass": false}
{"task_id": "790", "program": "import heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n\n    pass\nimport heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n    \"\"\"\n    Standardize two columns ('col1' and 'col2') in the DataFrame, find the biggest differences between the individual elements of the standardized columns, and return the indices of the N largest differences.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n        col1 (str): The name of the first column to standardize.\n        col2 (str): The name of the second column to standardize.\n        N (int, optional): The number of largest differences to return. Defaults to 10.\n\n    Returns:\n        list[int]: The indices of the N largest differences.\n\n    Raises:\n        ValueError: If specified columns are not in the provided DataFrame.\n    \"\"\"\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n\n    scaler = StandardScaler()\n    df_std = scaler.fit_transform(df[[col1, col2]])\n    diffs = df_std[:, 0] - df_std[:, 1]\n    indices = heapq.nlargest(N, range(len(diffs)), key=diffs.__getitem__)\n    return indices\ndf = pd.DataFrame({\n    'a': [1, 2, 3, 4],\n    'b': [1, 2, 3, 5]\n})", "problem": "Standardize two columns ('col1' and 'col2') in the DataFrame, find the biggest differences between the individual elements of the standardized columns, and return the indices of the N largest differences. >>> df = pd.DataFrame({ ...     'a': [1, 2, 3, 4], ...     'b': [1, 2, 3, 5] ... }) >>> indices = task_func(df, 'a', 'b') >>> print(indices) [2, 3, 0, 1]\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame.\nThe function should output with:\n    list[int]: The indices of the N largest differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n```", "solution": "import heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n    # Ensure provided columns exist in the dataframe\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n\n\n    scaler = StandardScaler()\n    df[[col1, col2]] = scaler.fit_transform(df[[col1, col2]])\n\n    l1 = df[col1].values\n    l2 = df[col2].values\n\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n\n    return largest_diff_indices", "pass": false}
{"task_id": "791", "program": "from collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n\n    pass\nfrom collections import Counter\nimport random\nfrom itertools import cycle\ndef task_func(l):\n    # Create a counter from the input list\n    counter = Counter(l)\n\n    # Move the first 3 elements to the end of the list\n    l = l[3:] + l[:3]\n\n    # Create a cycled, shuffled list\n    shuffled_list = list(cycle(l))\n    random.shuffle(shuffled_list)\n\n    # Create a frequency counter that maps elements from the input list to their frequencies in the first 30 elements of the cycled, shuffled list\n    counter = Counter(shuffled_list[:30])\n\n    return counter\nl = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']", "problem": "Create a counter from a list \"l\" and move the first 3 elements to the end of the list.\nThe function should output with:\n    counter (collections.Counter): A frequency counter that maps elements from the input list to their frequencies in the first 30 elements of the cycled, shuffled list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n```", "solution": "from collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n    if not l:  # Check if the list is empty\n        return Counter()  # Return an empty counter if the list is empty\n\n    random.shuffle(l)\n    l_cycled = cycle(l)\n    counter = Counter(next(l_cycled) for _ in range(30))\n    keys = list(counter.keys())\n    counter = Counter({k: counter[k] for k in keys[3:] + keys[:3]})\n    \n    return counter", "pass": false}
{"task_id": "792", "program": "import heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n\n    pass\nimport heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame specified by feature and target.\n    Return the indices of the n largest residuals as well as the linear regression model.\n\n    Args:\n        df (pd.DataFrame): The DataFrame containing the data.\n        feature (str): The name of the feature column.\n        target (str): The name of the target column.\n        n (int, optional): The number of largest residuals to return. Defaults to 10.\n\n    Returns:\n        list[int]: Indices of the n largest residuals.\n        LinearRegression: The LinearRegression model.\n\n    Raises:\n        ValueError: If specified columns are not in the provided DataFrame.\n    \"\"\"\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n\n    X = df[feature]\n    y = df[target]\n\n    model = LinearRegression().fit(X, y)\n\n    residuals = model.residuals\n    indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n\n    return indices, model\ndf = pd.DataFrame({\n    'a': [1, 2, 3, 4, 5],\n    'b': [1, 2, 3, 4, 5]\n})", "problem": "Fit a simple linear regression model to two columns of a DataFrame specified by feature and target. return the indices of the n largest residuals as well as the linear regression model. >>> df = pd.DataFrame({ ...     'a': [1, 2, 3, 4, 5], ...     'b': [1, 2, 3, 4, 5] ... }) >>> indices, model = task_func(df, 'a', 'b', n=3) >>> print(indices) [0, 1, 2] >>> print(model) LinearRegression()\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame.\nThe function should output with:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n```", "solution": "import heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n\n\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "pass": false}
{"task_id": "793", "program": "import numpy as np\nimport random\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n\n    pass\nimport numpy as np\nimport random\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n    \"\"\"\n    Create a numeric array from a list \"l\" and move the first 3 elements to the end of the array.\n    The function should output with:\n        arr (numpy.ndarray): The processed array with the first three elements moved to the end.\n    \"\"\"\n    if l is None:\n        l = random.sample(ELEMENTS, 10)\n    arr = np.array(l)\n    arr = np.roll(arr, 3)\n    return arr\nl = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']", "problem": "Create a numeric array from a list \"l\" and move the first 3 elements to the end of the array.\nThe function should output with:\n    arr (numpy.ndarray): The processed array with the first three elements moved to the end.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n```", "solution": "import numpy as np\nimport random\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n    if l is None:\n        l = ELEMENTS.copy()  # Use a copy to avoid modifying the original list\n    random.shuffle(l)\n    arr = np.array(l)\n    arr = np.concatenate((arr[3:], arr[:3]))\n    return arr", "pass": false}
{"task_id": "794", "program": "import string\nimport random\ndef task_func(length, random_seed=None):\n\n    pass\nimport string\nimport random\ndef task_func(length, random_seed=None):\n    \"\"\"\n    Generate a random string of a given length, with each character being either a parenthesis (from the set \"(){}[]\") or a lowercase English character.\n    :param length: The length of the string to generate.\n    :param random_seed: An optional random seed to use when sampling characters.\n    :return: The generated string.\n    \"\"\"\n    BRACKETS = \"(){}[]\"\n    LOWERCASE_LETTERS = string.ascii_lowercase\n\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    return \"\".join(random.choice(BRACKETS + LOWERCASE_LETTERS) for _ in range(length))", "problem": "Generate a random string of a given length, with each character being either a parenthesis (from the set \"(){}[]\") or a lowercase English character. For function uses a optional random_seed when sampling characters. >>> string = task_func(34, random_seed=42) >>> print(string) hbrpoigf)cbfnobm(o{rak)vrjnvgfygww >>> string = task_func(23, random_seed=1) >>> print(string) ieqh]{[yng]by)a{rogubbb\nNote that: The function uses the internal string constant BRACKETS for definition of the bracket set.\nThe function should output with:\n    str: The generated string.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\ndef task_func(length, random_seed=None):\n```", "solution": "import string\nimport random\ndef task_func(length, random_seed=None):\n    random.seed(random_seed)\n    # Constants\n    BRACKETS = \"(){}[]\"\n    return ''.join(random.choice(string.ascii_lowercase + BRACKETS) for _ in range(length))", "pass": true}
{"task_id": "795", "program": "from collections import deque\nimport math\ndef task_func(l):\n\n    pass\nfrom collections import deque\nimport math\ndef task_func(l):\n    dq = deque(l)\n    dq.rotate(3)\n    if all(isinstance(x, (int, float)) for x in dq):\n        print(f\"The square root of the sum of numeric elements: {math.sqrt(sum(dq))}\")\n    return dq\nl = [1, 2, 3, 4, 5]", "problem": "Create a deque from a list, rotate it to the right by 3 positions, and return the deque. Also, for demonstration, calculates the square root of the sum of numeric elements in the deque, if there are any, and prints it. >>> task_func([1, 2, 3, 4, 5]) The square root of the sum of numeric elements: 3.872983346207417 deque([3, 4, 5, 1, 2])\nThe function should output with:\n    dq (collections.deque): A deque obtained from the input list after performing a right rotation by 3 positions.\nYou should write self-contained code starting with:\n```\nfrom collections import deque\nimport math\ndef task_func(l):\n```", "solution": "from collections import deque\nimport math\ndef task_func(l):\n    if not l:  # Handle empty list\n        return deque()\n    dq = deque(l)\n    dq.rotate(3)\n\n    # Calculate the square root of the sum of numeric elements in the deque for demonstration.\n    numeric_sum = sum(item for item in dq if isinstance(item, (int, float)))\n    if numeric_sum > 0:\n        print(f\"The square root of the sum of numeric elements: {math.sqrt(numeric_sum)}\")\n    \n    return dq", "pass": true}
{"task_id": "796", "program": "import os\nimport re\ndef task_func(directory):\n\n    pass\nimport os\nimport re\nBRACKET_PATTERN = '[(){}\\\\[\\\\]]'\ndef task_func(directory):\n    file_paths = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(BRACKET_PATTERN, file):\n                file_paths.append(os.path.join(root, file))\n    return file_paths", "problem": "Finds all files in the specified directory whose names contain any type of bracket (round, curly, or square). Uses an internal constant BRACKET_PATTERN = '[(){}\\\\[\\\\]]', which specifies the brackets that are looked for. >>> task_func('./another_directory/') ['./another_directory/file{3}.png']\nThe function should output with:\n    list[str]: A list of file paths that contain brackets in their names.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(directory):\n```", "solution": "import os\nimport re\ndef task_func(directory):\n    BRACKET_PATTERN = '[(){}\\\\[\\\\]]'  # Corrected pattern to match any type of bracket\n    \n    file_list = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(BRACKET_PATTERN, file):\n                file_list.append(os.path.join(root, file))\n    return file_list", "pass": true}
{"task_id": "797", "program": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n\n    pass\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n    \"\"\"\n    Count the total number of brackets (i.e., '(', ')', '{', '}', '[', ']') in a pandas DataFrame.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n\n    Returns:\n        int: The total number of brackets.\n\n    Raises:\n        TypeError: If input is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a DataFrame\")\n\n    brackets = re.compile(r\"[(){}[\\]]\")\n    total_brackets = 0\n\n    for col in df.columns:\n        for row in df[col]:\n            total_brackets += len(brackets.findall(row))\n\n    return total_brackets\ndf = pd.DataFrame({'Test': ['(a)', 'b', '[[[[))c']})", "problem": "Count the total number of brackets (i.e., '(', ')', '{', '}', '[', ']') in a pandas DataFrame. >>> df = pd.DataFrame({'Test': ['(a)', 'b', '[[[[))c']}) >>> task_func(df) 8\nNote that: The function uses a specific pattern '[(){}[\\]]' to identify brackets.\nThe function should raise the exception for: TypeError: If input is not a DataFrame\nThe function should output with:\n    int: The total number of brackets.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n```", "solution": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"df should be a DataFrame.\")\n\n    # Constants\n    BRACKETS_PATTERN = '[(){}[\\]]'\n\n    return df.applymap(\n        lambda x: len(re.findall(BRACKETS_PATTERN, str(x)))\n        ).sum().sum()", "pass": true}
{"task_id": "798", "program": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n\n    pass\nimport os\nimport shutil\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n    \"\"\"Rollback the update of a directory by restoring it from a backup.\n\n    Args:\n        directory (str): The directory to rollback.\n\n    Returns:\n        str: The restored directory path if successful, otherwise an error message.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n\n    # Check if the directory to rollback exists\n    if not os.path.exists(directory):\n        return f\"Directory {directory} does not exist. Cannot rollback update.\"\n\n    # Check if the backup directory contains the directory to rollback\n    if not os.path.exists(os.path.join(BACKUP_DIR, directory)):\n        return f\"Backup directory {BACKUP_DIR} does not contain {directory}. Cannot rollback update.\"\n\n    # Restore the directory from the backup\n    shutil.copytree(os.path.join(BACKUP_DIR, directory), directory)\n\n    return directory", "problem": "Rollback the update of a directory by restoring it from a backup. Constants: - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'. >>> task_func('/tmp/nonexistent') 'Backup directory /tmp/backup does not exist. Cannot rollback update.'\nNote that: This function will return the restored directory path on successful rollback, or an error message otherwise.\nThe function should output with:\n    directory (str): The restored directory path if successful, otherwise an error message.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n```", "solution": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "pass": false}
{"task_id": "799", "program": "import pandas as pd\nfrom random import seed, choices\ndef task_func(L, num_dataframes=5, random_seed=None):\n\n    pass\nimport pandas as pd\nfrom random import seed, choices\ndef task_func(L, num_dataframes=5, random_seed=None):\n    if random_seed is not None:\n        seed(random_seed)\n    if not L:\n        return pd.DataFrame(), []\n    column_names = choices('abcdefghijklmnopqrstuvwxyz', k=len(L[0]))\n    df_list = [pd.DataFrame(L, columns=column_names) for _ in range(num_dataframes)]\n    common_rows = df_list[0]\n    for df in df_list[1:]:\n        common_rows = common_rows.merge(df, how='inner')\n    return common_rows, df_list\nL = [[1, '65', 76], [2, '5', 6]]", "problem": "Generate a specified number of Pandas DataFrames from a list of lists \"L\". Each DataFrame has the same column names randomly chosen from lowercase English letters and 3 rows sampled from 'L'. Then, find the common rows between all generated DataFrames. If L is empty, an empty dataframe is returend. >>> L = [[1, '65', 76], [2, '5', 6]] >>> common_rows, df_list = task_func(L, num_dataframes=1, random_seed=1) >>> print(common_rows) d   w   t 0  1  65  76 >>> print(df_list) [   d   w   t 0  1  65  76 1  1  65  76 2  1  65  76]\nThe function should output with:\n    DataFrame: A pandas DataFrame with the common rows between all generated DataFrames.\n    list of DataFrame: A list of all generated DataFrames.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import seed, choices\ndef task_func(L, num_dataframes=5, random_seed=None):\n```", "solution": "import pandas as pd\nfrom random import seed, choices\ndef task_func(L, num_dataframes=5, random_seed=None):\n    if random_seed is not None:\n        seed(random_seed)\n\n    if len(L) == 0:\n        return pd.DataFrame(), []\n\n    LETTERS = list('abcdefghijklmnopqrstuvwxyz')\n    max_cols = min(len(LETTERS), len(L[0]))\n    col_names = choices(LETTERS, k=max_cols)\n    dataframes = []\n\n    for _ in range(num_dataframes):\n        # Randomly sample rows from L for each DataFrame\n        sampled_rows = choices(L, k=3)\n        dataframe = pd.DataFrame(sampled_rows, columns=col_names)\n        dataframes.append(dataframe)\n\n    # Finding common rows across all DataFrames\n    # Concatenate all DataFrames and find common rows\n    combined_df = pd.concat(dataframes, ignore_index=True)\n    common_rows = combined_df[combined_df.duplicated(keep=False)]\n\n    return common_rows.drop_duplicates(), dataframes", "pass": false}
{"task_id": "800", "program": "import csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n\n    pass\nimport csv\nimport os\nfrom collections import Counter\nCSV_FILE_PATH = 'match_data.csv'\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    # Read the CSV file\n    with open(csv_file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip the header row\n        data = list(reader)\n\n    # Count the total number of goals and penalties\n    count = Counter()\n    for row in data:\n        count['goals'] += int(row[1])\n        count['penalties'] += int(row[2])\n\n    # Update the CSV file with the new data\n    with open(csv_file_path, 'a') as file:\n        writer = csv.writer(file)\n        writer.writerow([goals, penalties])\n\n    # Return the updated Counter object\n    return count", "problem": "Count the total number of goals and penalties from a CSV file and update it with the given goals and penalties.\nThe function should output with:\n    count (Counter.collections): A Counter object with total counts of goals and penalties.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n```", "solution": "import csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    counts = Counter({'goals': 0, 'penalties': 0})\n\n    if os.path.exists(csv_file_path):\n        with open(csv_file_path, 'r') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                counts['goals'] += int(row.get('goals', 0))\n                counts['penalties'] += int(row.get('penalties', 0))\n\n    for team, team_goals in goals.items():\n        counts['goals'] += team_goals\n\n    for team, team_penalties in penalties.items():\n        counts['penalties'] += team_penalties\n\n    return counts", "pass": false}
{"task_id": "801", "program": "import collections\nimport numpy as np\ndef task_func(file_name):\n\n    pass\nimport collections\nimport numpy as np\ndef task_func(file_name):\n    \"\"\"\n    Find the most common value in each column of a csv file with column names.\n    If some values occur the same number of times, the values are sorted alphabetically\n    and the first is considered most common. If an empty csv is passed, an empty\n    dictionary is returned.\n\n    Args:\n        file_name (str): The name of the csv file to read.\n\n    Returns:\n        dict: A dictionary with column names as keys and most common values as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Check if the file is empty\n    if file_name == \"\":\n        return results\n\n    # Read the csv file and get the column names\n    with open(file_name, \"r\") as f:\n        column_names = f.readline().strip().split(\",\")\n\n    # Iterate over each column and find the most common value\n    for column in column_names:\n        # Read the column values\n        with open(file_name, \"r\") as f:\n            column_values = f.readlines()\n\n        # Remove the column names from the values\n        column_values = [value.strip().split(\",\")[1] for value in column_values]\n\n        # Count the frequency of each value\n        value_counts = collections.Counter(column_values)\n\n        # Find the most common value\n        most_common_value = value_counts.most_common(1)[0][0]\n\n        # If there is a tie, sort the values alphabetically and take the first\n        if value_counts[most_common_value] > 1:\n            most_common_value = sorted(value_counts.keys())[0]\n\n        # Add the result to the dictionary\n        results[column] = most_common_value\n\n    return results", "problem": "Find the most common value in each column of a csv file with column names. If some values occur the same number of times, the values are sorted alphabetically and the first is considered most common. If an empty csv is passed, an empty dictionary is returned.\nThe function should output with:\n    dict: A dictionary with column names as keys and most common values as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport numpy as np\ndef task_func(file_name):\n```", "solution": "import collections\nimport numpy as np\ndef task_func(file_name):\n    data = np.genfromtxt(file_name, delimiter=',', names=True,\n                         dtype=None, encoding=None)\n    common_values = {}\n\n    if len(np.atleast_1d(data)) == 0:\n        return {}\n\n    if len(np.atleast_1d(data)) == 1:\n        for col in data.dtype.names:\n            common_values[col] = data[col].item()\n\n    else:\n        for col in data.dtype.names:\n            counter = collections.Counter(data[col])\n            if counter.most_common(2)[0][1] == counter.most_common(2)[1][1]:\n                common_values[col] = sorted(counter.items())[0][0]\n            else:\n                common_values[col] = counter.most_common(1)[0][0]\n\n    return common_values", "pass": false}
{"task_id": "802", "program": "import numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n\n    pass\nimport numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n    \"\"\"\n    Create a 2D numeric array (matrix) of a given dimension with random integers between 1 and 100, and a flat list of all elements in the matrix.\n\n    Args:\n        dimension (int): The dimension of the matrix.\n        seed (int, optional): The random seed. Defaults to 42.\n\n    Returns:\n        tuple: A tuple containing:\n            A 2D numpy array of the given dimension with random integers between 1 and 100.\n            A flat list of all elements in the matrix.\n    \"\"\"\n    np.random.seed(seed)\n    matrix = np.random.randint(1, 101, size=(dimension, dimension))\n    flat_list = list(itertools.chain.from_iterable(matrix))\n    return matrix, flat_list\ndimension = 5", "problem": "Create a 2D numeric array (matrix) of a given dimension with random integers between 1 and 100, and a flat list of all elements in the matrix.\nThe function should output with:\n    tuple: A tuple containing:\n    A 2D numpy array of the given dimension with random integers between 1 and 100.\n    A flat list of all elements in the matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n```", "solution": "import numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n    np.random.seed(seed)  # Ensure reproducible results\n    \n    if dimension <= 0:\n        raise ValueError(\"The dimension must be a positive integer\")\n    \n    matrix = np.random.randint(1, 101, size=(dimension, dimension))\n    flat_list = matrix.flatten().tolist()\n    \n    combinations = list(itertools.combinations(flat_list, 2))\n    \n    return matrix, flat_list", "pass": false}
{"task_id": "803", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n    \"\"\"\n    Normalize data in a csv file using MinMaxScaler from sklearn. Only numeric columns are normalized.\n    Columns with other dtypes are left as they are.\n\n    Args:\n        file_name (str): The name of the csv file to normalize.\n\n    Returns:\n        DataFrame: A pandas DataFrame with normalized data.\n\n    Raises:\n        ValueError: If input does not have numeric columns.\n    \"\"\"\n    df = pd.read_csv(file_name)\n    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"Input does not have numeric columns.\")\n    scaler = MinMaxScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n    return df", "problem": "Normalize data in a csv file using MinMaxScaler from sklearn. Only numeric columns are normalized. Columns with other dtypes are left as they are.\nThe function should raise the exception for: ValueError: If input does not have numeric columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n    df = pd.read_csv(file_name)\n    if df.select_dtypes(include='number').empty:\n        raise ValueError(\"Input must at least have one numeric column.\")\n\n    scaler = MinMaxScaler()\n    numeric_columns = df.select_dtypes(include='number').columns\n    df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n\n    return df", "pass": true}
{"task_id": "804", "program": "import os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n\n    pass\nimport os\nfrom datetime import datetime\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n    \"\"\"\n    Writes a dictionary of metrics to a specified log file, appending a timestamp to each entry.\n\n    Args:\n        metrics (dict): A dictionary of metrics to write to the log file.\n        filename (str): The name of the log file to write to.\n        log_dir (str): The directory where the log file should be written.\n\n    Returns:\n        bool: True if the metrics were successfully written to the file, False otherwise.\n    \"\"\"\n    # Create the log directory if it doesn't exist\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Open the log file in append mode\n    with open(os.path.join(log_dir, filename), 'a') as f:\n        # Write the metrics to the log file with a timestamp\n        for metric, value in metrics.items():\n            f.write(f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {metric}: {value}\\n\")\n\n    return True\nmetrics = {'precision': 0.75, 'recall': 0.80}", "problem": "This function writes a dictionary of metrics to a specified log file, appending a timestamp to each entry. >>> metrics = {'precision': 0.75, 'recall': 0.80} >>> task_func(metrics, 'evaluation.log') An error occurred: [Errno 2] No such file or directory: './logs/evaluation.log' False\nThe function should output with:\n    bool: True if the metrics were successfully written to the file, False otherwise.\nYou should write self-contained code starting with:\n```\nimport os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n```", "solution": "import os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n\n    if not isinstance(metrics, dict):\n        raise ValueError(\"Metrics must be a dictionary\")\n    if not isinstance(filename, str):\n        raise ValueError(\"Filename must be a string\")\n    \n    try:\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            f.write(f'{datetime.now()}\\n')\n            for key, value in metrics.items():\n                f.write(f'{key}: {value}\\n')\n            f.write('\\n')\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "pass": false}
{"task_id": "805", "program": "import pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n    # Convert the dictionary to a pandas DataFrame\n    df = pd.DataFrame.from_dict(dictionary, orient='index')\n\n    # Find the locations of the item in the DataFrame\n    locations = df[df == item].stack().index.tolist()\n\n    # Count the number of occurences\n    num_occurences = len(locations)\n\n    # Add a random integer x, where 0 <= x < 10, to the number of occurences\n    random.seed(seed)\n    num_occurences += random.randint(0, 9)\n\n    return locations, num_occurences, df", "problem": "Converts a dictionary to a pandas DataFrame and find the locations of a particular item in the resulting DataFrame. Counts the number of occurences and adds a random integer x, where 0 <=x < 10, to it. >>> dict = {'A': ['a', 'b', 'e'], 'B': ['c', 'd', 'd'], '2': ['asdf', 'ddd', 'aaaa'], '12': ['e', 'e', 'd']} >>> task_func(dict, 'e', seed=2) ([(2, 'A'), (0, '12'), (1, '12')], 3,    A  B     2 12 0  a  c  asdf  e 1  b  d   ddd  e 2  e  d  aaaa  d)\nThe function should output with:\n    list: A list of tuples. Each tuple contains the row-index and column-name where the item is found.\n    int: The number of occurences with the added random number.\n    DataFrame: The converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n    random.seed(seed)\n    random_int = random.randint(0, 9)\n    df = pd.DataFrame(dictionary)\n    positions = [(index, col) for col in df for index, val in enumerate(df[col]) if val == item]\n    return positions, len(positions) + random_int , df", "pass": false}
{"task_id": "806", "program": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n\n    pass\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n    # Remove duplicate and stopwords from the text\n    text = re.sub(r'\\b(' + r'|'.join(STOPWORDS) + r')\\b\\s*', '', text.lower())\n    text = re.sub(r'\\s+', ' ', text).strip()\n\n    # Generate a count of n-grams in the text\n    ngrams = Counter()\n    for i in range(len(text) - n + 1):\n        ngrams[text[i:i+n]] += 1\n\n    return ngrams\ntext = \"This is a sample text for testing the function.\"", "problem": "Remove duplicate and stopwords from a string \"text.\" Then, generate a count of n-grams (default is bigrams) in the text.\nThe function should output with:\n    dict: The count of the n-grams in the text.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n```", "solution": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n    # Normalize spaces and remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove all punctuation\n    text = re.sub(r'\\s+', ' ', text)  # Normalize whitespace\n\n    # Filter out stopwords and split into words\n    words = [word.lower() for word in text.split() if word.lower() not in STOPWORDS]\n\n    # Generate n-grams\n    ngrams = zip(*[words[i:] for i in range(n)])\n\n    return Counter(ngrams)", "pass": false}
{"task_id": "807", "program": "import numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n\n    pass\nimport numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n    First a normal distribution is fitted to the data, the mean and standard deviation is used to calculate the z scores of each datapoint.\n    If the absolute z score of a datapoint is larger than threshold it is considered an outlier and its index is recorded.\n    If the standard deviation is 0, an empty list is returned as outliers.\n\n    Args:\n        data (np.ndarray): The input data.\n        threshold (float, optional): The threshold for determining outliers. Defaults to 2.0.\n\n    Returns:\n        list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0.\n        float: The mean of the fitted normal distribution.\n        float: The variance of the fitted normal distribution.\n    \"\"\"\n    # Fit a normal distribution to the data\n    mean, var = norm.fit(data)\n\n    # Calculate the z scores of each datapoint\n    z_scores = (data - mean) / np.sqrt(var)\n\n    # Determine the outlier indices\n    outliers = np.where(np.abs(z_scores) > threshold)[0]\n\n    return outliers, mean, var\ndata = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20])", "problem": "Determine the outlier indices in a 1D numpy array based on the Z score. First a normal distribution is fitted to the data, the mean and standard deviation is used to calculate the z scores of each datapoint. If the absolute z score of a datapoint is larger than threshold it is considered an outlier and its index is recorded. If the standard deviation is 0, an empty list is returned as outliers. >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20]) >>> outliers, mean, var = task_func(data, threshold=4) >>> print(outliers) [] >>> print(mean) 5.0 >>> print(var) 50.888888888888886\nThe function should output with:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n```", "solution": "import numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n\n    return list(outliers[0]), mean, std_dev**2", "pass": false}
{"task_id": "808", "program": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n\n    pass\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n    # Remove duplicate and stopwords from the text\n    text = re.sub(r'\\b(' + r'|'.join(STOPWORDS) + r')\\b\\s*', '', text)\n    text = re.sub(r'\\s+', ' ', text)\n\n    # Analyze the sentiment of the text using TextBlob\n    blob = TextBlob(text)\n    sentiment = blob.sentiment.polarity\n\n    # Output the sentiment of the text\n    return f\"Sentiment: {sentiment}\"\ntext = \"This is a sample text for testing the sentiment analysis.\"", "problem": "Remove duplicate and stopwords from a string \"text.\" Then, analyze the sentiment of the text using TextBlob.\nThe function should output with:\n    Sentiment: The sentiment of the text.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n```", "solution": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n    words = [word for word in re.findall(r'\\b\\w+\\b', text.lower()) if word not in STOPWORDS]\n    text = ' '.join(words)\n    blob = TextBlob(text)\n    \n    return blob.sentiment", "pass": false}
{"task_id": "809", "program": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n\n    pass\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n    \"\"\"\n    Apply KMeans clustering to a 2D numeric array and find the indices of the data points in each cluster.\n\n    Parameters\n    ----------\n    data : array-like, shape (n_samples, n_features)\n        The input data.\n    n_clusters : int\n        The number of clusters to form.\n\n    Returns\n    -------\n    dict\n        A dictionary where keys are cluster labels and values are lists of indices for data points in the cluster.\n    \"\"\"\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n\n    # Get the cluster labels for each data point\n    labels = kmeans.labels_\n\n    # Create a dictionary to store the cluster labels and indices\n    cluster_dict = {}\n\n    # Loop over the unique cluster labels and add the corresponding indices to the dictionary\n    for label in np.unique(labels):\n        cluster_dict[label] = np.where(labels == label)[0]\n\n    return cluster_dict\ndata = np.array([[1, 1], [2, 2]])", "problem": "Apply KMeans clustering to a 2D numeric array and find the indices of the data points in each cluster. >>> data = np.array([[1, 1], [2, 2]]) >>> cluster = task_func(data, 2) >>> cluster_list = list(cluster.values()) >>> cluster_list.sort(key=lambda x: x[0]) >>> print(cluster_list) [array([0]), array([1])]\nThe function should output with:\n    dict: A dictionary where keys are cluster labels and values are lists of indices for data points in the cluster.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n```", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n    clusters = {i: np.where(labels == i)[0] for i in range(n_clusters)}\n    return clusters", "pass": true}
{"task_id": "810", "program": "import re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n\n    pass\nimport re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n    \"\"\"\n    Searches for executable files in a specified directory that match a given regular expression pattern.\n    Optionally executes any matching files and returns a list of standard outputs from the executed files or the paths of the found files.\n\n    Args:\n        dir_path (str): The path to the directory to search in.\n        exe_pattern (str): The regular expression pattern to match against the file names.\n        execute_files (bool, optional): Whether to execute the matching files. Defaults to True.\n\n    Returns:\n        results (list): If execute_files is True, a list of standard outputs from the executed files.\n                       If execute_files is False, a list of paths of the found files.\n                       Each element in the list corresponds to an executed file or a found file.\n    \"\"\"\n    results = []\n    for root, _, files in os.walk(dir_path):\n        for file in files:\n            if re.match(exe_pattern, file):\n                if execute_files:\n                    output = subprocess.check_output([os.path.join(root, file)])\n                    results.append(output.decode().strip())\n                else:\n                    results.append(os.path.join(root, file))\n    return results", "problem": "Searches for executable files in a specified directory that match a given regular expression pattern. Optionally executes any matching files and returns a list of standard outputs from the executed files or the paths of the found files.\nThe function should output with:\n    results (list): If execute_files is True, a list of standard outputs from the executed files.\n    If execute_files is False, a list of paths of the found files.\n    Each element in the list corresponds to an executed file or a found file.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n```", "solution": "import re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n    results = []\n    for dirpath, dirnames, filenames in os.walk(os.path.normpath(dir_path)):\n        for filename in filenames:\n            if re.search(exe_pattern, filename):\n                file_path = os.path.join(dirpath, filename)\n                if execute_files:\n                    result = subprocess.run([file_path], stdout=subprocess.PIPE)\n                    results.append(result.stdout.decode('utf-8'))\n                else:\n                    results.append(file_path)\n    return results", "pass": true}
{"task_id": "811", "program": "import pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n\n    pass\nimport pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n    # Convert the dictionary to a pandas DataFrame\n    df = pd.DataFrame.from_dict(dictionary, orient='index')\n\n    # Find the positions of the item in the DataFrame\n    positions = df[df == item].stack().index.tolist()\n\n    # Calculate the frequency distribution of the item\n    frequency = df[df == item].stack().value_counts()\n\n    # Return a random sample of the positions, if requested\n    if sample_size is not None:\n        if random_seed is not None:\n            seed(random_seed)\n        sample = randint(0, len(positions), sample_size)\n        positions = [positions[i] for i in sample]\n\n    return positions, df\ndictionary = {\n    1: ['road', 'car', 'traffic'],\n    2: ['car', 'light', 'candle']\n}", "problem": "Converts a dictionary to a pandas DataFrame and Find the positions of a particular item in a the resulting DataFrame and record its frequency distribution. Optionally, return a random sample of these positions, with an option to set a random seed for reproducibility. >>> dictionary =  { ...         1: ['road', 'car', 'traffic'], ...         2: ['car', 'light', 'candle'] ...     } >>> positions = task_func(dictionary, 'car') >>> print(positions) ([(0, 2), (1, 1)],          1       2 0     road     car 1      car   light 2  traffic  candle)\nThe function should output with:\n    list: A list of positions (row index, column name) where the item is found.\n    DataFrame: The converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n```", "solution": "import pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n    dataframe = pd.DataFrame(dictionary)\n    positions = [(i, col) for i in dataframe.index for col in dataframe.columns if dataframe.at[i, col] == item]\n\n    if random_seed is not None:\n        seed(random_seed)\n\n    if sample_size is not None and sample_size < len(positions):\n        sampled_positions = []\n        for _ in range(sample_size):\n            index = randint(0, len(positions) - 1)\n            sampled_positions.append(positions[index])\n        return sampled_positions, dataframe\n    else:\n        return positions, dataframe", "pass": false}
{"task_id": "812", "program": "import re\nfrom pathlib import Path\nimport tarfile\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n\n    pass\nimport re\nfrom pathlib import Path\nimport tarfile\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n    \"\"\"\n    Look for files that match the pattern of the regular expression '(? <! Distillr)\\\\\\\\ AcroTray\\\\.exe' in the directory 'C:\\\\ SomeDir\\\\'. If found, archive these files in a tar file.\n    The function should output with:\n        str: Path to the created tar file.\n    \"\"\"\n    # Create a list of all files in the directory\n    files = list(Path(directory).glob(\"*\"))\n\n    # Filter the list to only include files that match the pattern\n    matching_files = [file for file in files if re.search(file_pattern, str(file))]\n\n    # Create a tar file with the matching files\n    tar_file = tarfile.open(\"matching_files.tar\", \"w:gz\")\n    for file in matching_files:\n        tar_file.add(file)\n    tar_file.close()\n\n    # Return the path to the created tar file\n    return tar_file.name", "problem": "Look for files that match the pattern of the regular expression '(? <! Distillr)\\\\\\\\ AcroTray\\\\.exe' in the directory 'C:\\\\ SomeDir\\\\'. If found, archive these files in a tar file.\nThe function should output with:\n    str: Path to the created tar file.\nYou should write self-contained code starting with:\n```\nimport re\nfrom pathlib import Path\nimport tarfile\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n```", "solution": "import re\nfrom pathlib import Path\nimport tarfile\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n    tar_path = Path(directory) / 'archive.tar'\n    with tarfile.open(tar_path, 'w') as tar:\n        for path in Path(directory).rglob('*'):\n            if re.match(file_pattern, path.name):\n                try:\n                    tar.add(path, arcname=path.relative_to(directory))\n                except PermissionError as e:\n                    print(f\"Skipping {path} due to permission error: {e}\")\n    return str(tar_path)", "pass": false}
{"task_id": "813", "program": "from itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n\n    pass\nfrom itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n    combinations_list = []\n    for combination in combinations(number_list, 3):\n        if sum(combination) == element:\n            combinations_list.append(combination)\n    if len(combinations_list) == 0:\n        return pd.DataFrame(columns=['Combinations'])\n    else:\n        return pd.DataFrame(combinations_list, columns=['Combinations'])", "problem": "Find all unique combinations of 3 numbers from a list that add up to a certain element. If the number_list is empty, or there is no combination that adds up to the element, an empty dataframe is returned. >>> result = task_func([-1, 1, 0, -2, 2, 3], 0) >>> print(result) Combinations 0  (-1, -2, 3) 1   (-1, 1, 0) 2   (0, -2, 2) >>> result = task_func([], 0) >>> print(result) Empty DataFrame Columns: [Combinations] Index: []\nThe function should output with:\n    Pandas DataFrame: A pandas Dataframe with the column 'Combinations',\n    where each row contains a tuple containing a unique combination of 3 numbers that add up to the element.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n```", "solution": "from itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n    combinations_list = list(combinations(number_list, 3))\n    valid_combinations = [comb for comb in combinations_list if sum(comb) == element]\n    \n    # Return only unique combinations\n    return pd.DataFrame({'Combinations': list(set(valid_combinations))})", "pass": false}
{"task_id": "814", "program": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n\n    pass\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Finds files in a directory that match a regular expression pattern and writes their paths to a configuration file.\n\n    Args:\n        source_dir (str): The directory to search for files.\n        target_dir (str): The directory to write the configuration file to.\n        file_pattern (str): The regular expression pattern to match files against.\n\n    Returns:\n        str: The path to the created configuration file.\n    \"\"\"\n    # Create a list of files in the source directory that match the file pattern\n    file_list = [f for f in os.listdir(source_dir) if re.match(file_pattern, f)]\n\n    # Create a configuration file in the target directory\n    config_file = os.path.join(target_dir, \"config.txt\")\n    with open(config_file, \"w\") as f:\n        # Write the file paths to the configuration file\n        for file in file_list:\n            f.write(os.path.join(source_dir, file) + \"\\n\")\n\n    return config_file\nsource_dir = \"C:\\\\SomeDir\"\ntarget_dir = \"C:\\\\SomeDir\\\\config\"\nfile_pattern = r\"(?<!Distillr)\\\\AcroTray\\.exe\"", "problem": "Look for files that match the pattern of the regular expression '(? <! Distillr)\\\\\\\\ AcroTray\\\\.exe' in the directory 'C:\\\\ SomeDir\\\\'. If found, write these file paths to a configuration file.\nThe function should output with:\n    str: Path to the created configuration file.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n```", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))\n            moved_files_count += 1\n\n    return moved_files_count", "pass": false}
{"task_id": "815", "program": "import pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n    \"\"\"\n    Convert a dictionary of test results into a pandas DataFrame and calculate the average test score and the standard deviation for a particular student from this DataFrame.\n\n    Args:\n        test_scores (dict): A dictionary of test results.\n        student (int): The student ID.\n\n    Returns:\n        np.array([float, float]): A numpy array containing the average score and the standard deviation for the student.\n        DataFrame: the converted dictionary.\n\n    Raises:\n        ValueError: If the student is not present in the test_scores dataframe.\n    \"\"\"\n    df = pd.DataFrame(test_scores)\n    if student not in df['Student'].values:\n        raise ValueError(f\"Student {student} is not present in the test_scores dataframe\")\n    avg_score = df[df['Student'] == student]['Score'].mean()\n    std_dev = df[df['Student'] == student]['Score'].std()\n    return np.array([avg_score, std_dev]), df", "problem": "Convert a dictionary of test results into a pandas DataFrame and Calculate the average test score and the standard deviation for a particular student from this DataFrame. >>> scores = {'Student': [1, 2, 1, 1], 'Score': [10, 1, 1, 1]} >>> task_func(scores, 1) (array([4.        , 5.19615242]),    Student  Score 0        1     10 1        2      1 2        1      1 3        1      1)\nThe function should raise the exception for: ValueError: student is not present in the test_scores dataframe\nThe function should output with:\n    np.array([float, float]): A numpy array containing the average score and the standard deviation for the student.\n    DataFrame: the converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n    test_scores = pd.DataFrame(test_scores)\n    if student not in test_scores['Student'].values:\n        raise ValueError(f\"The student with ID {student} is not present in the test scores DataFrame.\")\n    student_scores = test_scores[test_scores['Student'] == student]['Score']\n    average_score = student_scores.mean()\n    std = student_scores.std()\n    \n    return np.array([average_score, std]), test_scores", "pass": true}
{"task_id": "816", "program": "from collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n\n    pass\nfrom collections import Counter\nimport random\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n    # Generate a random poker hand consisting of five cards\n    hand = [f\"{random.choice(HAND_RANKS)}{random.choice(SUITS)}\" for _ in range(5)]\n\n    # Count the frequency of each card rank\n    rank_count = Counter(card[0] for card in hand)\n\n    return hand, rank_count", "problem": "Generate a random poker hand consisting of five cards, and count the frequency of each card rank. The function creates a list of five cards where each card is a string made up of a rank and a suit (e.g., \"10H\" for Ten of Hearts). It then counts the frequency of each card rank in the hand using a Counter dictionary.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    hand (list): A list of five cards.\n    rank_count (counter): A Counter dictionary of card ranks with their frequencies in the hand.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n```", "solution": "from collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n\n    hand = []\n    for _ in range(5):\n        rank = random.choice(HAND_RANKS)\n        suit = random.choice(SUITS)\n        card = f'{rank}{suit}'\n        hand.append(card)\n\n    rank_counts = Counter([card[:-1] for card in hand])\n\n    return hand, rank_counts", "pass": true}
{"task_id": "817", "program": "from collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n\n    pass\nfrom collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n    # Set up logging\n    logging.basicConfig(filename=log_path + 'task_func.log', encoding='utf-8', level=logging.DEBUG)\n    logger = logging.getLogger(__name__)\n\n    # Log function call\n    logger.info(f\"Function called with list: {letter_list} and element: {element}\")\n\n    # Check if element is in letter list\n    if element not in letter_list:\n        logger.error(f\"The element is not in the letter list\")\n        raise ValueError(\"The element is not in the letter list\")\n\n    # Count frequency of element\n    element_frequency = Counter(letter_list)[element]\n\n    # Log frequency\n    logger.info(f\"Frequency of '{element}' is {element_frequency}\")\n\n    # Shut down logging\n    logging.shutdown()\n\n    return element_frequency", "problem": "Count the frequency of a particular letter in a given list of letters with logging. Logs are written to a file named 'task_func.log' with encoding 'utf-8' and logging level DEBUG. The log file is created by the function or overwritten if already exists. For each function call the following is logged with the respective logging level: - info: f\"Function called with list: {letter_list} and element: {element}\" - error: if the element is not in the letter list - info: f\"Frequency of '{element}' is {element_frequency}\" After the last info has been logged, the logging is shutdown, such that all files are released. >>> task_func(['x', 'y', 'z'], 'y', log_path='./') 1 >>> with open('task_func.log') as log: ...     print(log.read()) INFO:Function called with list: ['x', 'y', 'z'] and element: y INFO:Frequency of 'y' is 1 <BLANKLINE> >>> try: ...     task_func(['x', 'y', 'z'], 'a', log_path='./') ... except: ...     with open('task_func.log') as log: ...        print(log.read()) INFO:Function called with list: ['x', 'y', 'z'] and element: a ERROR:The element is not in the letter list. <BLANKLINE>\nThe function should raise the exception for: ValueError: If element is not in letter_list.\nThe function should output with:\n    int: The frequency of the letter.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n```", "solution": "from collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n    formatter = logging.Formatter('%(levelname)s:%(message)s')\n    handler = logging.FileHandler(log_path+'/task_func.log', mode='w')\n    logger = logging.getLogger()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    logger.setLevel(logging.DEBUG)\n    logger.info(f\"Function called with list: {letter_list} and element: {element}\")\n\n    if element not in letter_list:\n        logger.error(\"The element is not in the letter list.\")\n        logger.handlers[0].close\n        logger.removeHandler(logger.handlers[0])\n        logging.shutdown()\n\n        raise ValueError(\"The element is not in the letter list.\")\n        \n    letter_frequencies = Counter(letter_list)\n    element_frequency = letter_frequencies[element]\n    \n    logger.info(f\"Frequency of '{element}' is {element_frequency}\")\n    logger.handlers[0].close\n    logger.removeHandler(logger.handlers[0])\n    logging.shutdown()\n\n    return element_frequency", "pass": false}
{"task_id": "818", "program": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n\n    pass\nimport re\nimport string\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    \"\"\"\n    Divide a string into words, remove punctuation marks and convert them to lowercase letters.\n    The function should output with:\n        cleaned_words (list): A list of cleaned words.\n    \"\"\"\n    # Split the text into words\n    words = text.split()\n\n    # Remove punctuation from each word\n    cleaned_words = []\n    for word in words:\n        word = re.sub(f\"[{PUNCTUATION}]\", \"\", word)\n        cleaned_words.append(word.lower())\n\n    return cleaned_words\ntext = \"Hello, World! This is a test.\"", "problem": "Divide a string into words, remove punctuation marks and convert them to lowercase letters.\nThe function should output with:\n    cleaned_words (list): A list of cleaned words.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n```", "solution": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    words = re.split(r'\\s+', text)\n    cleaned_words = [re.sub(f'[{PUNCTUATION}]', '', word).lower() for word in words]\n\n    return cleaned_words", "pass": false}
{"task_id": "819", "program": "import time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n\n    pass\nimport time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n    if not isinstance(iterations, int) or iterations < 1:\n        raise ValueError(\"iterations must be a positive integer\")\n    if not isinstance(min_delay, float) or min_delay < 0:\n        raise ValueError(\"min_delay must be a positive floating point value\")\n    if not isinstance(max_delay, float) or max_delay < 0:\n        raise ValueError(\"max_delay must be a positive floating point value\")\n    if min_delay > max_delay:\n        raise ValueError(\"min_delay must be less than or equal to max_delay\")\n\n    random.seed(seed)\n    messages = []\n    total_delay = 0\n\n    for i in range(iterations):\n        delay = random.uniform(min_delay, max_delay)\n        time.sleep(delay)\n        total_delay += delay\n        messages.append(f\"{delay:.2f} seconds have passed\")\n\n    return messages, total_delay", "problem": "Simulates a delay and then returns a message indicating the elapsed time. This is repeated for a specified number of iterations. For each iteration the delay is randomly sampled from a uniform distribution specified by min_delay and max_delay. After each iteration the message: '{delay} seconds have passed', where {delay} is replaces with the actual delay of the iteration with 2 positions after the decimal point, is saved to an array. The function returns a list of all messages, as well as the total delay. >>> messages, delay = task_func(2, 2.0, 4.2, seed=12) >>> print(messages) ['3.04 seconds have passed', '3.45 seconds have passed'] >>> print(delay) 6.490494998960768\nThe function should raise the exception for: ValueError: If iterations is not a positive integer or if min_delay/max_delay is not a positive floating point value.\nThe function should output with:\n    list of str: A list of messages indicating the elapsed time for each iteration.\n    float: The total amount of delay\nYou should write self-contained code starting with:\n```\nimport time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n```", "solution": "import time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n    random.seed(seed)\n\n    # Input validation\n    if not isinstance(iterations, int) or iterations <= 0:\n        raise ValueError(\"iterations must be a positive integer.\")\n    if not isinstance(min_delay, (int, float)) or min_delay <= 0:\n        raise ValueError(\"min_delay must be a positive floating point value.\")\n    if not isinstance(max_delay, (int, float)) or max_delay <= min_delay:\n        raise ValueError(\"max_delay must be a floating point value larger than min_delay.\")\n\n    total_delay = 0\n    messages = []\n\n    for _ in range(iterations):\n        delay = random.uniform(min_delay, max_delay)\n        total_delay += delay\n        time.sleep(delay)\n        message_string = f'{delay:.2f} seconds have passed'\n        messages.append(message_string)\n    \n    return messages, total_delay", "pass": true}
{"task_id": "820", "program": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n\n    pass\nimport random\nimport string\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n    \"\"\"\n    Create a list of random words of a certain length.\n\n    Args:\n        num_words (int): The number of words to generate.\n        word_length (int): The length of each word.\n\n    Returns:\n        words (list): A list of random words.\n\n    Raises:\n        ValueError: If num_words or word_length is negative.\n    \"\"\"\n    if num_words < 0 or word_length < 0:\n        raise ValueError(\"num_words and word_length must be non-negative\")\n\n    words = []\n    for _ in range(num_words):\n        word = ''.join(random.choice(LETTERS) for _ in range(word_length))\n        words.append(word)\n\n    return words", "problem": "Create a list of random words of a certain length.\nThe function should raise the exception for: ValueError: If num_words or word_length is negative.\nThe function should output with:\n    words (list): A list of random words.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n```", "solution": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n    # Validate input parameters\n    if num_words < 0 or word_length < 0:\n        raise ValueError(\"num_words and word_length must be non-negative\")\n\n    random.seed(42)\n    words = [''.join(random.choice(LETTERS) for _ in range(word_length)) for _ in range(num_words)]\n    \n    return words", "pass": true}
{"task_id": "821", "program": "import time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n\n    pass\nimport time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n    \"\"\"\n    Introduces a delay of 'delay_time' seconds in a specified number of separate threads and returns the thread completion messages.\n\n    Args:\n        delay_time (float, optional): The delay time in seconds. Defaults to 1.0.\n        num_threads (int, optional): The number of threads. Defaults to 5.\n\n    Returns:\n        list: A list of strings containing the completion messages of the threads.\n    \"\"\"\n    def delay_thread(thread_id):\n        \"\"\"\n        Introduces a delay of 'delay_time' seconds in a separate thread.\n\n        Args:\n            thread_id (int): The thread ID.\n        \"\"\"\n        time.sleep(delay_time)\n        return f\"Delay in thread {thread_id} completed\"\n\n    threads = [threading.Thread(target=delay_thread, args=(i,)) for i in range(num_threads)]\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    return [thread.result() for thread in threads]", "problem": "Introduces a delay of 'delay_time' seconds in a specified number of separate threads and returns the thread completion messages. >>> task_func(1, 10) ['Delay in thread 0 completed', 'Delay in thread 1 completed', 'Delay in thread 2 completed', 'Delay in thread 3 completed', 'Delay in thread 4 completed', 'Delay in thread 5 completed', 'Delay in thread 6 completed', 'Delay in thread 7 completed', 'Delay in thread 8 completed', 'Delay in thread 9 completed']\nThe function should output with:\n    list: A list of strings containing the completion messages of the threads.\n    The completion message looks as follow:\n    'Delay in thread x completed'\nYou should write self-contained code starting with:\n```\nimport time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n```", "solution": "import time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n\n    results = []\n\n    def delay():\n        time.sleep(delay_time)\n        results.append(f'Delay in thread {threading.current_thread().name} completed')\n\n    for i in range(num_threads):\n        t = threading.Thread(target=delay, name=str(i))\n        t.start()\n        t.join()  # Ensure that the thread completes before moving to the next\n\n    return results", "pass": false}
{"task_id": "822", "program": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n\n    pass\nimport random\nimport string\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n    The function creates a random password consisting of letters and digits.\n    The total length of the password and the number of digits in it are specified by the user.\n    The characters in the password are randomly shuffled to ensure variability.\n\n    Args:\n        length (int): The length of the password to generate.\n        num_digits (int): The number of digits in the password.\n\n    Returns:\n        str: A string representing the randomly generated password.\n    \"\"\"\n    # Initialize an empty password\n    password = \"\"\n\n    # Generate a list of letters and digits\n    letters = list(LETTERS)\n    digits = list(DIGITS)\n\n    # Shuffle the letters and digits\n    random.shuffle(letters)\n    random.shuffle(digits)\n\n    # Add the letters and digits to the password\n    for i in range(length):\n        if i < num_digits:\n            password += digits[i]\n        else:\n            password += letters[i - num_digits]\n\n    return password", "problem": "Generate a random password with a specified length and number of digits. The function creates a random password consisting of letters and digits. The total length of the password and the number of digits in it are specified by the user. The characters in the password are randomly shuffled to ensure variability.\nThe function should output with:\n    str: A string representing the randomly generated password.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n```", "solution": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n\n    random.shuffle(password)\n\n    return ''.join(password)", "pass": false}
{"task_id": "823", "program": "import time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n\n    pass\nimport time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n    \"\"\"\n    Make a delay for a given amount of time for a specified number of samples, measure the actual delay and calculate the statistical properties of the delay times.\n    The function should output with:\n        tuple: The mean and standard deviation of the delay times.\n    \"\"\"\n    delay_times = []\n    for i in range(samples):\n        start_time = time.time()\n        time.sleep(delay)\n        end_time = time.time()\n        delay_times.append(end_time - start_time)\n    return np.mean(delay_times), np.std(delay_times)\nsamples = 10\ndelay = 0.1", "problem": "Make a delay for a given amount of time for a specified number of samples, measure the actual delay and calculate the statistical properties of the delay times.\nThe function should output with:\n    tuple: The mean and standard deviation of the delay times.\nYou should write self-contained code starting with:\n```\nimport time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n```", "solution": "import time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n    delay_times = []\n\n    for _ in range(samples):\n        t1 = time.time()\n        time.sleep(delay)\n        t2 = time.time()\n        delay_times.append(t2 - t1)\n\n    delay_times = np.array(delay_times)\n\n    mean = np.mean(delay_times)\n    std = np.std(delay_times)\n\n    return mean, std", "pass": true}
{"task_id": "824", "program": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n\n    pass\nimport re\nimport string\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    \"\"\"\n    Count the number of words and punctuation marks in a string.\n    The function should output with:\n        tuple: A tuple containing the number of words and punctuation marks.\n    \"\"\"\n    # Remove all punctuation from the text\n    text = re.sub(f\"[{PUNCTUATION}]\", \"\", text)\n    # Split the text into individual words\n    words = text.split()\n    # Count the number of words and punctuation marks\n    num_words = len(words)\n    num_punctuation = len(re.findall(f\"[{PUNCTUATION}]\", text))\n    # Return a tuple containing the number of words and punctuation marks\n    return num_words, num_punctuation\ntext = \"This is a string with punctuation! And, it has multiple words.\"", "problem": "Count the number of words and punctuation marks in a string.\nThe function should output with:\n    tuple: A tuple containing the number of words and punctuation marks.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n```", "solution": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    # Use a regex that matches sequences of alphanumeric characters as words\n    words = re.findall(r'\\b\\w+\\b', text)\n    punctuation_marks = [char for char in text if char in PUNCTUATION]\n\n    return len(words), len(punctuation_marks)", "pass": false}
{"task_id": "825", "program": "import numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n\n    pass\nimport numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n    \"\"\"\n    Generate a list of randomly picked strings from all possible strings of a given length from the provided series of characters, using a specific seed for reproducibility.\n\n    Args:\n        length (int): The length of the strings to generate.\n        seed (int, optional): The seed to use for reproducibility. Defaults to None.\n        alphabets (list, optional): The series of characters to use for generating the strings. Defaults to list(string.ascii_lowercase).\n\n    Returns:\n        list: A list of generated strings.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    return [\n        \"\".join(np.random.choice(alphabets, size=length))\n        for _ in range(10)\n    ]", "problem": "Generate a list of 10 randomly picked strings from all possible strings of a given length from the provided series of characters, using a specific seed for reproducibility. >>> task_func(2, 123, alphabets=['x', 'y', 'z']) ['xz', 'xz', 'zx', 'xy', 'yx', 'zx', 'xy', 'xx', 'xy', 'xx']\nThe function should output with:\n    list: A list of generated strings.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n```", "solution": "import numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n    np.random.seed(seed)\n    all_combinations = [''.join(p) for p in product(alphabets, repeat=length)]\n    return np.random.choice(all_combinations, size=10).tolist()", "pass": false}
{"task_id": "826", "program": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n\n    pass\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from the source directory to the target directory based on a specified pattern.\n    This function iterates through all files in the source directory, and if a file's name matches the specified pattern, it is moved to the target directory.\n    The function should output with:\n        moved_files_count (int): The number of files that were successfully moved from the source directory to the target directory.\n    \"\"\"\n    moved_files_count = 0\n    for file in os.listdir(source_dir):\n        if re.match(file_pattern, file):\n            shutil.move(os.path.join(source_dir, file), target_dir)\n            moved_files_count += 1\n    return moved_files_count\nsource_dir = 'source_dir'\ntarget_dir = 'target_dir'\nfile_pattern = r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'", "problem": "Move files from the source directory to the target directory based on a specified pattern. This function iterates through all files in the source directory, and if a file's name matches the specified pattern, it is moved to the target directory.\nThe function should output with:\n    moved_files_count (int): The number of files that were successfully moved from the source directory to the target directory.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n```", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))\n            moved_files_count += 1\n\n    return moved_files_count", "pass": false}
{"task_id": "827", "program": "import math\nfrom sympy import isprime\ndef task_func(input_list):\n\n    pass\nimport math\nfrom sympy import isprime\ndef task_func(input_list):\n    prime_numbers = []\n    for num in input_list:\n        if isprime(num):\n            prime_numbers.append(num)\n    sorted_prime_numbers = sorted(prime_numbers, key=lambda x: math.degrees(x))\n    return sorted_prime_numbers", "problem": "Filter the prime numbers from the specified list, sort the prime numbers ascending based on their radian value converted to degrees, and return the sorted list. The function uses the isprime function from the sympy library to determine prime numbers and the degrees function from the math library to sort the numbers based on their degree value. >>> task_func([101, 102, 103, 104]) [101, 103]\nThe function should output with:\n    list[int]: A sorted list of prime numbers based on their degree value.\nYou should write self-contained code starting with:\n```\nimport math\nfrom sympy import isprime\ndef task_func(input_list):\n```", "solution": "import math\nfrom sympy import isprime\ndef task_func(input_list):\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "pass": true}
{"task_id": "828", "program": "import os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n\n    pass\nimport os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n    \"\"\"\n    Copy a file to a specified destination directory and clear its contents.\n    This function takes in the path to a file and a destination directory path.\n    It copies the file to the destination directory. Once the file is copied,\n    the function will erase the content of the original file, leaving it empty.\n    Note that:\n    - If the destination directory already contains a file with the same name,\n      the function will overwrite that file without warning.\n    - The original file will not be deleted from the filesystem, only its\n      content will be cleared.\n    The function should raise the exception for:\n    - OSError: If the destination directory cannot be created and does not exist,\n      or if the file cannot be copied for reasons other than a pre-existing\n      directory.\n    The function should output with:\n    - str: The absolute path to the copied file within the destination directory.\n    \"\"\"\n    # Check if the destination directory exists\n    if not os.path.isdir(dest_dir):\n        # If the destination directory does not exist, create it\n        try:\n            os.makedirs(dest_dir)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n\n    # Copy the file to the destination directory\n    try:\n        shutil.copy(filename, dest_dir)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise\n\n    # Clear the content of the original file\n    with open(filename, \"w\") as f:\n        f.truncate()\n\n    # Return the absolute path to the copied file within the destination directory\n    return os.path.join(dest_dir, os.path.basename(filename))\nfilename = \"test.txt\"\ndest_dir = \"destination\"", "problem": "Copy a file to a specified destination directory and clear its contents. This function takes in the path to a file and a destination directory path. It copies the file to the destination directory. Once the file is copied, the function will erase the content of the original file, leaving it empty.\nNote that: Notes: If the destination directory already contains a file with the same name, the function will overwrite that file without warning. The original file will not be deleted from the filesystem, only its content will be cleared.\nThe function should raise the exception for: OSError: If the destination directory cannot be created and does not exist, or if the file cannot be copied for reasons other than a pre-existing directory.\nThe function should output with:\n    str: The absolute path to the copied file within the destination directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n```", "solution": "import os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n    # Ensure the destination directory exists\n    try:\n        os.makedirs(dest_dir, exist_ok=True)  # Simplified directory creation\n    except OSError as e:\n        # Reraise the exception if it's not related to existing directory\n        if e.errno != errno.EEXIST:\n            raise\n\n    # Copy the file\n    dest = shutil.copy(filename, dest_dir)\n\n    # Erase the original file content by opening in write mode and closing it\n    with open(filename, 'w') as original_file:\n        original_file.truncate(0)\n\n    return os.path.abspath(dest)", "pass": true}
{"task_id": "829", "program": "import pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n\n    pass\nimport pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n    \"\"\"\n    Convert a Pandas DataFrame into a dictionary of generator objects in which each generator generates a sequence of tuples that contain a unique name and the corresponding average score for that name.\n\n    Args:\n        df (pd.DataFrame): The Pandas DataFrame to convert.\n\n    Returns:\n        dict: A dictionary of generator objects. Each generator generates a tuple containing a unique name and the corresponding average score for that name.\n\n    Raises:\n        ValueError: If the DataFrame does not have the 'Name' and 'Score' columns.\n    \"\"\"\n    if 'Name' not in df.columns or 'Score' not in df.columns:\n        raise ValueError(\"DataFrame does not have the 'Name' and 'Score' columns.\")\n\n    gen_dict = {}\n    for name, group in df.groupby('Name'):\n        gen_dict[name] = (name, mean(group['Score']))\n\n    return gen_dict\ndf_sample = pd.DataFrame({\n    'Name': ['Micky', 'Donald', 'Girl'],\n    'Score': [25.2, 9, -1]\n})", "problem": "Convert a Pandas DataFrame into a dictionary of generator objects in which each generator generates a sequence of tuples that contain a unique name and the corresponding average score for that name. >>> df_sample = pd.DataFrame({ ...     'Name': ['Micky', 'Donald', 'Girl'], ...     'Score': [25.2, 9, -1] ... }) >>> gen_dict = task_func(df_sample) >>> {key: next(value) for key, value in gen_dict.items()} {'Donald': ('Donald', 9.0), 'Girl': ('Girl', -1.0), 'Micky': ('Micky', 25.2)}\nThe function should raise the exception for: ValueError: If the DataFrame does not have the 'Name' and 'Score' columns.\nThe function should output with:\n    dict: A dictionary of generator objects. Each generator generates a tuple\n    containing a unique name and the corresponding average score for that name.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n```", "solution": "import pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n\n    if 'Name' not in df.columns or 'Score' not in df.columns:\n        raise ValueError('The DataFram should have the columns \"Name\" and \"Score\".')\n\n    grouped = df.groupby('Name')\n    result_dict = {}\n    for name, group in grouped:\n        avg_score = mean(group['Score'])\n        result_dict[name] = iter([(name, avg_score)])\n\n    return result_dict", "pass": false}
{"task_id": "830", "program": "import json\nimport os\ndef task_func(filename, data):\n\n    pass\nimport json\nimport os\ndef task_func(filename, data):\n    \"\"\"\n    Write a dictionary to a file as a JSON object and return the written content for verification.\n    This function performs a write operation to store the dictionary data in JSON format and then reads it back to verify the content.\n    Additionally, checks if the file exists using the os library.\n\n    Args:\n        filename (str): The name of the file to write to.\n        data (dict): The dictionary data to write to the file.\n\n    Returns:\n        tuple: A tuple containing a boolean indicating the success of the operation and the content that was written.\n        bool: indicating the success of the operation.\n        written_data (json): the content that was written.\n    \"\"\"\n    # Check if the file exists\n    if os.path.exists(filename):\n        # If the file exists, return False and an empty string\n        return False, \"\"\n\n    # Write the data to the file\n    with open(filename, \"w\") as f:\n        json.dump(data, f)\n\n    # Read the data back from the file\n    with open(filename, \"r\") as f:\n        written_data = json.load(f)\n\n    # Check if the written data matches the original data\n    if written_data == data:\n        # If the data matches, return True and the written data\n        return True, written_data\n    else:\n        # If the data doesn't match, return False and an empty string\n        return False, \"\"\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nfilename = \"data.json\"", "problem": "Write a dictionary to a file as a JSON object and return the written content for verification. This function performs a write operation to store the dictionary data in JSON format and then reads it back to verify the content. Additionally, checks if the file exists using the os library.\nThe function should output with:\n    tuple: A tuple containing a boolean indicating the success of the operation and the content that was written.\n    bool: indicating the success of the operation.\n    written_data (json): the content that was written.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\ndef task_func(filename, data):\n```", "solution": "import json\nimport os\ndef task_func(filename, data):\n    try:\n        # Write the dictionary to the file as JSON\n        with open(filename, 'w') as f:\n            json.dump(data, f)\n        \n        # Verify the file exists after writing, using os.path.exists\n        file_exists = os.path.exists(filename)\n        if not file_exists:\n            return False, None\n\n        # Read the file back to verify content\n        with open(filename, 'r') as f:\n            written_data = json.load(f)\n            if written_data != data:\n                return False, None\n\n        return True, written_data\n    except Exception as e:\n        return False, None", "pass": true}
{"task_id": "831", "program": "import random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n\n    pass\nimport random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    random.seed(random_seed)\n    for _ in range(pairs_count):\n        num1 = random.randint(range_start, range_end)\n        num2 = random.randint(range_start, range_end)\n        yield (num1, num2, math.sqrt(abs(num1 - num2)))", "problem": "Create a generator object that generates a sequence of tuples. Each tuple contains two random numbers and the square root of their absolute difference. A random seed is used to have reproducability in the outputs. >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14) >>> print(next(pairs)) (1, 3, 1.4142135623730951)\nThe function should output with:\n    generator: A generator object that produces tuples in the format\n    (num1, num2, square root of absolute difference).\nYou should write self-contained code starting with:\n```\nimport random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n```", "solution": "import random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "pass": false}
{"task_id": "832", "program": "import pickle\nimport os\ndef task_func(filename, data):\n\n    pass\nimport pickle\nimport os\ndef task_func(filename, data):\n    \"\"\"\n    Serialize an object using pickle and overwrite the specified file with this serialized data.\n    Before writing, checks if the directory exists, creating it if necessary.\n    The function should output with:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"\n    # Check if the directory exists, creating it if necessary\n    directory = os.path.dirname(filename)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    # Serialize the data using pickle\n    serialized_data = pickle.dumps(data)\n\n    # Overwrite the file with the serialized data\n    with open(filename, \"wb\") as f:\n        f.write(serialized_data)\n\n    return True", "problem": "Serialize an object using pickle and overwrite the specified file with this serialized data. Before writing, checks if the directory exists, creating it if necessary.\nThe function should output with:\n    bool: True if the operation is successful, False otherwise.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\ndef task_func(filename, data):\n```", "solution": "import pickle\nimport os\ndef task_func(filename, data):\n    try:\n        directory = os.path.dirname(filename)\n        if directory and not os.path.exists(directory):\n            os.makedirs(directory)\n\n        # Serialize the object and write it to the file\n        with open(filename, 'wb') as f:\n            pickle.dump(data, f)\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "pass": false}
{"task_id": "833", "program": "import random\nfrom collections import Counter\nfrom statistics import mode\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n\n    pass\nimport random\nfrom collections import Counter\nfrom statistics import mode\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    numbers = [random.randint(range_start, range_end) for _ in range(list_length)]\n    counter = Counter(numbers)\n    mode = counter.most_common(1)[0][0]\n    return mode, ((number, counter[number]) for number in numbers)", "problem": "Generate a random list of integers within a specified range. Convert this list to a generator object that yields tuples. Each tuple contains a number from the list and its frequency. Additionally, find and return the mode of the list. >>> mode, numbers = task_func(20, -12, 334, random_seed=23) >>> print(mode) 136 >>> print([_ for _ in numbers]) [(136, 1), (30, 1), (-4, 1), (291, 1), (145, 1), (204, 1), (182, 1), (259, 1), (171, 1), (54, 1), (86, 1), (124, 1), (215, 1), (-5, 1), (101, 1), (305, 1), (220, 1), (0, 1), (42, 1), (31, 1)]\nThe function should output with:\n    tuple: A tuple containing:\n    int: The mode of the generated list.\n    generator: A generator object yielding tuples with each number from the list and its frequency.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\nfrom statistics import mode\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n```", "solution": "import random\nfrom collections import Counter\nfrom statistics import mode\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n    random.seed(random_seed)\n    random_list = [random.randint(range_start, range_end) for _ in range(list_length)]\n    counter = Counter(random_list)\n    numbers = ((number, count) for number, count in counter.items())\n    return mode(random_list), numbers", "pass": false}
{"task_id": "834", "program": "import binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n\n    pass\nimport binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n    \"\"\"\n    Uncompress a gzip-compressed hexadecimal string and decrypt the result to UTF-8.\n    The function should output with:\n        decoded_string (str): The decoded and decompressed string in UTF-8 format, or an error message.\n    \"\"\"\n    try:\n        # Decode the hexadecimal string to binary\n        binary_data = binascii.unhexlify(compressed_hex)\n\n        # Decompress the binary data using gzip\n        decompressed_data = gzip.decompress(binary_data)\n\n        # Decode the decompressed data to UTF-8\n        decoded_string = decompressed_data.decode(\"utf-8\")\n\n        return decoded_string\n\n    except Exception as e:\n        return \"Error: {}\".format(e)", "problem": "Uncompress a gzip-compressed hexadecimal string and decrypt the result to UTF-8.\nThe function should output with:\n    decoded_string (str): The decoded and decompressed string in UTF-8 format, or an error message.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n```", "solution": "import binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n    try:\n        compressed_bytes = binascii.unhexlify(compressed_hex)\n        decompressed_bytes = gzip.GzipFile(fileobj=io.BytesIO(compressed_bytes)).read()\n        decoded_string = decompressed_bytes.decode('utf-8')\n        return decoded_string\n    except gzip.BadGzipFile as e:\n        return \"Error during decompression: \" + str(e)", "pass": true}
{"task_id": "835", "program": "import numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    \"\"\"\n    Generate a DataFrame with columns 'columns' and fill them with random integer values between 0 and 100.\n    Remove some columns based on the provided indexes.\n\n    Parameters:\n    n_rows (int): Number of rows in the DataFrame.\n    remove_cols (list): List of column indexes to remove.\n    columns (list): List of column names.\n    random_seed (int): Random seed for generating random values.\n\n    Returns:\n    DataFrame: The resulting DataFrame after removal of columns.\n    \"\"\"\n    # Generate random values\n    np.random.seed(random_seed)\n    data = np.random.randint(0, 100, size=(n_rows, len(columns)))\n\n    # Create a DataFrame with the generated values\n    df = pd.DataFrame(data, columns=columns)\n\n    # Remove the specified columns\n    df = df.drop(columns=df.columns[remove_cols])\n\n    return df", "problem": "Generate a DataFrame with columns 'columns' and fill them with random integer values between 0 and 100. Remove some columns based on the provided indexes. >>> df = task_func(3, [1, 3], columns=['test', 'rem1', 'apple', 'remove'], random_seed=12) >>> print(df) test  apple 0    75      6 1     3     76 2    22     52\nThe function should output with:\n    DataFrame: The resulting DataFrame after removal of columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df = df.drop(df.columns[remove_cols], axis=1)\n\n    return df", "pass": true}
{"task_id": "836", "program": "import os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n\n    pass\nimport os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n    result = {}\n    for file in os.listdir(csv_dir):\n        if file.endswith('.csv'):\n            with open(os.path.join(csv_dir, file), 'r') as f:\n                reader = csv.reader(f)\n                for i, row in enumerate(reader):\n                    if row[0] == target_value:\n                        result[file] = i\n                        break\n    if simulate:\n        for file in result:\n            shutil.move(os.path.join(csv_dir, file), os.path.join(processed_dir, file))\n    return result", "problem": "Scans a directory for CSV files, finds for each file the index of the row with the first cell equal to the target value, and optionally moves the processed files to another directory. The above example assumes that '332' is found at index 10 in 'file1.csv' and index 15 in 'file2.csv' and that the file moving is simulated.\nThe function should output with:\n    result (dict): A dictionary with file names as keys and the row indices as values where the target value was found.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n```", "solution": "import os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n    result = {}\n\n    # Scan the CSV files in the directory\n    for filename in os.listdir(csv_dir):\n        if filename.endswith('.csv'):\n            with open(os.path.join(csv_dir, filename), 'r') as f:\n                reader = csv.reader(f)\n                for i, row in enumerate(reader):\n                    if row[0] == target_value:\n                        result[filename] = i\n                        break\n\n            # Move the file to the processed directory if not simulating\n            if not simulate:\n                shutil.move(os.path.join(csv_dir, filename), processed_dir)\n    \n    return result", "pass": false}
{"task_id": "837", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    \"\"\"\n    Generate a DataFrame with columns 'columns' and fill them with random values.\n    Scale the columns at the provided indexes with sklearn StandardScaler.\n    If scale_cols is empty no column is scaled.\n\n    Parameters:\n    n_rows (int): Number of rows in the DataFrame.\n    scale_cols (list): List of column indexes to be scaled.\n    columns (list): List of column names.\n    random_seed (int): Random seed for reproducibility.\n\n    Returns:\n    DataFrame: The resulting DataFrame after scaling the selected columns.\n    \"\"\"\n    # Generate random data\n    np.random.seed(random_seed)\n    data = np.random.rand(n_rows, len(columns))\n\n    # Create a DataFrame with the generated data\n    df = pd.DataFrame(data, columns=columns)\n\n    # Scale the selected columns\n    if scale_cols:\n        scaler = StandardScaler()\n        df[scale_cols] = scaler.fit_transform(df[scale_cols])\n\n    return df", "problem": "Generate a DataFrame with columns 'columns' and fill them with random values. Scale the columns at the provided indexes with sklearn StandardScaler. If scale_cols is empty no column is scaled >>> df = task_func(5, [1, 2, 3], random_seed=12) >>> print(df) A         B         C         D   E 0  75 -0.840307 -0.791926 -1.462784   3 1  67  0.673481  1.517859 -0.855820  49 2  52 -1.519967 -0.406962  1.177511  34 3  75  0.611694 -1.121896  0.782984  13 4  82  1.075099  0.802925  0.358109  35\nThe function should output with:\n    DataFrame: The resulting DataFrame after scaling the selected columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    \n    for i in scale_cols:\n        scaler = StandardScaler()\n        df[columns[i]] = scaler.fit_transform(df[[columns[i]]])\n    \n    return df", "pass": false}
{"task_id": "838", "program": "import re\nfrom nltk.stem import PorterStemmer\ndef task_func(text_series):\n\n    pass\nimport re\nfrom nltk.stem import PorterStemmer\nimport pandas as pd\ndef task_func(text_series):\n    \"\"\"\n    Process a pandas Series of text data by lowercasing all letters, removing non-alphanumeric characters (except spaces), removing punctuation, and stemming each word to its root form. Stemming is done using the NLTK's PorterStemmer, which applies a series of rules to find the stem of each word.\n\n    Args:\n        text_series (pandas.Series): A Series of text data.\n\n    Returns:\n        pandas.Series: A Series where each string has been processed to remove non-alphanumeric characters, punctuation, converted to lowercase, and where each word has been stemmed.\n    \"\"\"\n    # Lowercase all letters\n    text_series = text_series.str.lower()\n\n    # Remove non-alphanumeric characters (except spaces)\n    text_series = text_series.str.replace(r'[^a-zA-Z0-9\\s]', '')\n\n    # Remove punctuation\n    text_series = text_series.str.replace(r'[^\\w\\s]', '')\n\n    # Stem each word using the PorterStemmer\n    stemmer = PorterStemmer()\n    text_series = text_series.apply(lambda x: ' '.join([stemmer.stem(word) for word in x.split()]))\n\n    return text_series\ntext_series = pd.Series(['This is a test sentence.', 'This is another test sentence!', 'This is a third test sentence...'])", "problem": "Process a pandas Series of text data by lowercasing all letters, removing non-alphanumeric characters (except spaces), removing punctuation, and stemming each word to its root form. Stemming is done using the NLTK's PorterStemmer, which applies a series of rules to find the stem of each word.\nThe function should output with:\n    pandas.Series: A Series where each string has been processed to remove non-alphanumeric characters,\n    punctuation, converted to lowercase, and where each word has been stemmed.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk.stem import PorterStemmer\ndef task_func(text_series):\n```", "solution": "import re\nfrom nltk.stem import PorterStemmer\ndef task_func(text_series):\n    stemmer = PorterStemmer()\n\n    def process_text(text):\n        # Remove non-alphanumeric characters (except spaces)\n        text = re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()\n        # Stem each word in the text\n        text = \" \".join([stemmer.stem(word) for word in text.split()])\n\n        return text\n\n    # Apply the processing to each entry in the Series\n    return text_series.apply(process_text)", "pass": false}
{"task_id": "839", "program": "import csv\nimport random\ndef task_func(file_path,\n          num_rows,\n          gender=['Male', 'Female', 'Non-Binary'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          seed=None):\n\n    pass\nimport csv\nimport random\ndef task_func(file_path,\n              num_rows,\n              gender=['Male', 'Female', 'Non-Binary'],\n              countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n              seed=None):\n    \"\"\"\n    Generates a CSV file with random data for the fields ['Name', 'Age', 'Gender', 'Country'].\n    The number of rows in the CSV file is determined by the 'num_rows' parameter.\n    The Ages are randomly sampled integers in the range [20, 60].\n    The names are generated by randomly choosing 5 uppercase characters from the english alphabet.\n    If num_rows <= 0 a csv containing only the headers is generated.\n\n    Args:\n        file_path (str): The file path of the CSV file to be generated.\n        num_rows (int): The number of rows in the CSV file.\n        gender (list): A list of gender options.\n        countries (list): A list of country options.\n        seed (int): A random seed for reproducibility.\n\n    Returns:\n        str: The file path of the generated CSV file.\n    \"\"\"\n    if num_rows <= 0:\n        # If num_rows is <= 0, generate a CSV file with only the headers\n        with open(file_path, 'w', newline='') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['Name', 'Age', 'Gender', 'Country'])\n        return file_path\n\n    # If num_rows is > 0, generate a CSV file with random data\n    random.seed(seed)\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age', 'Gender', 'Country'])\n        for _ in range(num_rows):\n            name = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(5))\n            age = random.randint(20, 60)\n            gender = random.choice(gender)\n            country = random.choice(countries)\n            writer.writerow([name, age, gender, country])\n    return file_path", "problem": "Generates a CSV file with random data for the fields ['Name', 'Age', 'Gender', 'Country']. The number of rows in the CSV file is determined by the 'num_rows' parameter. The Ages are randomly sampled integers in the range [20, 60]. The names are generated by randomly choosing 5 uppercase characters from the english alphabet. If num_rows <= 0 a csv containing only the headers is generated. >>> task_func('/test.csv', 100, gender=['test'], countries['Albania', 'Germany', 'Austria'], seed=12) 'test.csv'\nThe function should output with:\n    str: The file path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\ndef task_func(file_path,\n          num_rows,\n          gender=['Male', 'Female', 'Non-Binary'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          seed=None):\n```", "solution": "import csv\nimport random\ndef task_func(file_path,\n          num_rows,\n          gender=['Male', 'Female', 'Non-Binary'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          seed=None):\n    FIELDS = ['Name', 'Age', 'Gender', 'Country']\n    random.seed(seed)\n\n    with open(file_path, 'w', newline='') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=FIELDS)\n        writer.writeheader()\n\n        for _ in range(num_rows):\n            writer.writerow({\n                'Name': ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=5)),\n                'Age': random.randint(20, 60),\n                'Gender': random.choice(gender),\n                'Country': random.choice(countries)\n            })\n\n    return file_path", "pass": false}
{"task_id": "840", "program": "import pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n    \"\"\"\n    Creates a CSV file on a given file path with random numeric data.\n    The number of rows in the CSV file is determined by the 'num_rows' parameter,\n    and the number of columns (features) is determined by the 'data_dimensions' parameter.\n    Columns are named following the convention: 'Feature_x', where x is the number of the feature column starting at 1.\n    The function should output with:\n        str: The file path of the generated CSV file.\n    \"\"\"\n    # Set random seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # Generate random data\n    data = np.random.rand(num_rows, data_dimensions)\n\n    # Create a Pandas DataFrame from the data\n    df = pd.DataFrame(data, columns=['Feature_' + str(i+1) for i in range(data_dimensions)])\n\n    # Write the DataFrame to a CSV file\n    df.to_csv(file_path, index=False)\n\n    return file_path", "problem": "Creates a CSV file on a given file path with random numeric data. The number of rows in the CSV file is determined by the 'num_rows' parameter, and the number of columns (features) is determined by the 'data_dimensions' parameter. Columns are named following the convention: 'Feature_x', where x is the number of the feature column starting at 1.\nThe function should output with:\n    str: The file path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.rand(num_rows, data_dimensions),\n                      columns=[f'Feature_{i + 1}' for i in range(data_dimensions)])\n\n    df.to_csv(file_path, index=False)\n\n    return file_path", "pass": true}
{"task_id": "841", "program": "import re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n\n    pass\nimport re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n    \"\"\"\n    Process a JSON string containing a \"text\" field: convert to lowercase, remove punctuation, and count word frequency.\n    This function takes a JSON string with a field named \"text\", and returns a dictionary with word counts.\n    It processes the text by converting it to lowercase, removing all punctuation and non-alphanumeric characters (except spaces),\n    and then counting the frequency of each word.\n    Note that:\n    - Punctuation is removed using the `string.punctuation` constant.\n    - The function is case-insensitive and treats words like \"Hello\" and \"hello\" as the same word.\n    - If the JSON string is malformed or the \"text\" field is missing, an empty dictionary is returned.\n    The function should output with:\n        dict: A dictionary with words as keys and their frequency counts as values. If the \"text\" field is missing,\n        returns an empty dictionary.\n    \"\"\"\n    # Convert the JSON string to a Python dictionary\n    data = json.loads(json_string)\n\n    # Check if the \"text\" field is present in the dictionary\n    if \"text\" not in data:\n        return {}\n\n    # Convert the text to lowercase and remove punctuation\n    text = data[\"text\"].lower()\n    text = re.sub(f\"[{string.punctuation}]\", \"\", text)\n\n    # Split the text into individual words and remove non-alphanumeric characters\n    words = re.split(r\"\\W+\", text)\n\n    # Create a dictionary to store the word counts\n    word_counts = defaultdict(int)\n\n    # Iterate over the words and increment the count for each unique word\n    for word in words:\n        word_counts[word] += 1\n\n    # Return the word counts as a dictionary\n    return dict(word_counts)\njson_string = '{\"text\": \"Hello, World! This is a sample text.\"}'", "problem": "Process a JSON string containing a \"text\" field: convert to lowercase, remove punctuation, and count word frequency. This function takes a JSON string with a field named \"text\", and returns a dictionary with word counts. It processes the text by converting it to lowercase, removing all punctuation and non-alphanumeric characters (except spaces), and then counting the frequency of each word.\nNote that: Notes: Punctuation is removed using the `string.punctuation` constant. The function is case-insensitive and treats words like \"Hello\" and \"hello\" as the same word. If the JSON string is malformed or the \"text\" field is missing, an empty dictionary is returned.\nThe function should output with:\n    dict: A dictionary with words as keys and their frequency counts as values. If the \"text\" field is missing,\n    returns an empty dictionary.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n```", "solution": "import re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n    try:\n        # Load JSON and extract text\n        data = json.loads(json_string)\n        text = data.get('text', '')\n    except json.JSONDecodeError:\n        return {}\n\n    # Lowercase, remove non-alphanumeric characters except spaces, remove punctuation\n    text = re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()\n    text = text.translate({ord(c): None for c in string.punctuation})\n\n    # Count words\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return dict(word_counts)", "pass": false}
{"task_id": "842", "program": "import sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n\n    pass\nimport sqlite3\nimport random\ndef task_func(db_path,\n              num_entries,\n              users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n              countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n              random_seed=None):\n    \"\"\"\n    Generate an SQLite database to a given file path with random user data.\n    The user data consists of a table named 'users' with columns:\n    - id (integer): Used as Primary Key. numbering of entries starting at 0.\n    - name (string): name of the user. sampled from 'users'\n    - age (int): age of the user, where 20 <= age <= 60.\n    - country (string): sampled from 'countries'\n    The number of entries in the database is determined by num_entries.\n\n    Args:\n        db_path (str): The file path of the generated SQLite database.\n        num_entries (int): The number of entries in the database.\n        users (list): A list of user names to sample from.\n        countries (list): A list of countries to sample from.\n        random_seed (int): A random seed to use for generating random data.\n\n    Returns:\n        str: The file path of the generated SQLite database.\n    \"\"\"\n    # Set the random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # Create a new SQLite database\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n\n    # Create the 'users' table\n    c.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, country TEXT)\")\n\n    # Generate random user data\n    for i in range(num_entries):\n        name = random.choice(users)\n        age = random.randint(20, 60)\n        country = random.choice(countries)\n        c.execute(\"INSERT INTO users VALUES (?, ?, ?, ?)\", (i, name, age, country))\n\n    # Save the changes to the database\n    conn.commit()\n\n    # Close the database connection\n    conn.close()\n\n    return db_path", "problem": "Generate an SQLite database to a given file path with random user data. The user data consists of a table named 'users' with columns: - id (integer): Used as Primary Key. numbering of entries starting at 0. - name (string): name of the user. sampled from 'users' - age (int): age of the user, where 20 <= age <= 60. - country (string): sampled from 'countries' The number of entries in the database is determined by num_entries. >>> path = task_func('test.db', num_entries=3, random_seed=2, users=['Simon', 'Albert']) >>> conn = sqlite3.connect('test.db') >>> c = conn.cursor() >>> c.execute(\"SELECT * FROM users\") >>> c.fetchall() [(1, 'Simon', 25, 'USA'), (2, 'Viola', 30, 'Canada'), (3, 'Viola', 58, 'UK')] >>> c.execute(\"PRAGMA table_info(users)\") >>> c.fetchall() [(0, 'id', 'INTEGER', 0, None, 1), (1, 'name', 'TEXT', 0, None, 0), (2, 'age', 'INTEGER', 0, None, 0), (3, 'country', 'TEXT', 0, None, 0)]\nThe function should output with:\n    str: The file path of the generated SQLite database.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n```", "solution": "import sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n    random.seed(random_seed)\n\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n\n    c.execute('''\n        CREATE TABLE users\n        (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, country TEXT)\n    ''')\n\n    for _ in range(num_entries):\n        user = random.choice(users)\n        age = random.randint(20, 60)\n        country = random.choice(countries)\n        c.execute('INSERT INTO users (name, age, country) VALUES (?, ?, ?)', (user, age, country))\n\n    conn.commit()\n    conn.close()\n\n    return db_path", "pass": false}
{"task_id": "843", "program": "import random\nimport re\n# Constants\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n\n    pass\nimport random\nimport re\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n    \"\"\"\n    Generate a string of random sentences using a predefined word list.\n    Each sentence is guaranteed to have one period at the end, and no period within the sentence.\n    The generated sentences will be concatenated into a single string, with all letters in lowercase and all non-alphanumeric characters except spaces removed.\n\n    Args:\n        n_sentences (int): The number of sentences to generate.\n\n    Returns:\n        str: A string containing the generated sentences in lowercase with non-alphanumeric characters removed (except for single periods ending sentences).\n    \"\"\"\n    sentences = []\n    for _ in range(n_sentences):\n        sentence = \"\"\n        for word in random.sample(WORD_LIST, random.randint(1, len(WORD_LIST))):\n            sentence += word + \" \"\n        sentence = sentence.strip() + \".\"\n        sentences.append(sentence)\n    return \" \".join(sentences)", "problem": "Generate a string of random sentences using a predefined word list. Each sentence is guaranteed to have one period at the end, and no period within the sentence. The generated sentences will be concatenated into a single string, with all letters in lowercase and all non-alphanumeric characters except spaces removed.\nNote that: The actual output will vary due to the randomness of sentence generation.\nThe function should output with:\n    str: A string containing the generated sentences in lowercase\n    with non-alphanumeric characters removed (except for single periods ending sentences).\nYou should write self-contained code starting with:\n```\nimport random\nimport re\n# Constants\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n```", "solution": "import random\nimport re\n# Constants\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n    sentences = []\n    for _ in range(n_sentences):\n        sentence_len = random.randint(5, 10)\n        sentence = \" \".join(random.choice(WORD_LIST) for _ in range(sentence_len)) + \".\"\n        sentences.append(sentence)\n\n    # Join sentences and ensure no extra spaces around periods\n    text = \" \".join(sentences)\n    # Remove unwanted characters, ensure only letters, spaces, or periods remain\n    text = re.sub(r'[^\\w\\s.]', '', text).lower()\n    # Normalize spaces ensuring single space between words and no trailing spaces before periods\n    text = re.sub(r'\\s+\\.', '.', text)\n    text = re.sub(r'\\s+', ' ', text)\n\n    return text.strip()", "pass": false}
{"task_id": "844", "program": "import csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n\n    pass\nimport csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n    \"\"\"\n    Generate a CSV file on a specific file path with fake personal data.\n    The personal data consists of the following columns:\n    - Name: random names generated with faker\n    - Age: random age values: 20<=age<=60\n    - Address: random adresses generated with faker\n    - Email: random email adresses generated with faker\n    Newlines '\\n' in the generated addresses get replaced with ', '.\n    The number of rows in the CSV file is determined by num_rows.\n    :param file_path: The file path of the generated CSV file.\n    :param num_rows: The number of rows in the CSV file.\n    :param random_seed: The random seed for the faker library.\n    :return: The file path of the generated CSV file.\n    \"\"\"\n    if not isinstance(num_rows, int) or num_rows < 0:\n        raise ValueError(\"num_rows must be an integer >= 0\")\n\n    # Initialize the faker library\n    fake = Faker()\n    if random_seed is not None:\n        fake.seed(random_seed)\n\n    # Generate the fake data\n    data = []\n    for _ in range(num_rows):\n        name = fake.name()\n        age = fake.random.randint(20, 60)\n        address = fake.address().replace(\"\\n\", \", \")\n        email = fake.email()\n        data.append([name, age, address, email])\n\n    # Write the data to a CSV file\n    with open(file_path, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    return file_path", "problem": "Generate a CSV file on a specific file path with fake personal data. The personal data consists of the following columns: - Name: random names generated with faker - Age: random age values: 20<=age<=60 - Address: random adresses generated with faker - Email: random email adresses generated with faker Newlines '\\n' in the generated addresses get replaced with ', '. The number of rows in the CSV file is determined by num_rows. >>> path = task_func('test.csv', 5, random_seed=12) >>> with open(path, 'r') as file: >>>     reader = csv.reader(file) >>>     rows = list(reader) >>> print(rows) [ ['Name', 'Age', 'Address', 'Email'], ['Matthew Estrada', '50', '7479 Angela Shore, South Michael, MA 28059', 'johnstonjames@example.net'], ['Gabrielle Sullivan', '37', '83167 Donna Dale, Nicoleside, GA 91836', 'peterswilliam@example.org'], ['Jason Carlson', '53', '013 Kelly Lake Suite 414, West Michael, NY 75635', 'anthonycarson@example.com'], ['Alexander Lowe', '42', '183 Christian Harbor, South Joshuastad, PA 83984', 'palmermicheal@example.com'], ['John Benjamin', '29', '8523 Rhonda Avenue, Rosemouth, HI 32166', 'masonjohn@example.org'] ]\nThe function should raise the exception for: ValueError: If num_rows is not an integer >= 0.\nThe function should output with:\n    str: The file path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n```", "solution": "import csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n\n    if num_rows < 0 or not isinstance(num_rows, int):\n        raise ValueError('num_rows should be an integer >=0.')\n\n    fake = Faker()\n    fake.seed_instance(random_seed)\n    random.seed(random_seed)\n    with open(file_path, 'w', newline='') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerow(['Name', 'Age', 'Address', 'Email'])\n        for _ in range(num_rows):\n            name = fake.name()\n            age = random.randint(20, 60)\n            address = fake.address().replace('\\n', ', ')\n            email = fake.email()\n            writer.writerow([name, age, address, email])\n    return file_path", "pass": false}
{"task_id": "845", "program": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n\n    pass\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean and preprocess the texts\n    text1 = ALPHANUMERIC.sub(' ', text1.lower())\n    text2 = ALPHANUMERIC.sub(' ', text2.lower())\n\n    # Compute the cosine similarity\n    text1_tokens = text1.split()\n    text2_tokens = text2.split()\n    text1_counter = Counter(text1_tokens)\n    text2_counter = Counter(text2_tokens)\n    numerator = sum(text1_counter & text2_counter)\n    denominator = np.sqrt(sum(text1_counter.values()) * sum(text2_counter.values()))\n    cosine_similarity = numerator / denominator\n\n    # Compute the Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    # Return the similarity values\n    return cosine_similarity, levenshtein_ratio\ntext1 = \"This is an example text.\"\ntext2 = \"This is another example text.\"", "problem": "Calculate the similarity values between two texts based on the cosine similarity and the Levenshtein ratio. The texts are first cleaned by removing all non-alphanumeric characters except spaces and converted to lowercase. Cosine similarity is computed based on term frequency in each text. The Levenshtein ratio is computed using the 'ratio' function from the 'python-Levenshtein' library, which measures the similarity of two strings as a number between 0 and 1.\nThe function should output with:\n    tuple: A tuple containing the cosine similarity and Levenshtein ratio as floats.\n    cosine similarity (float): The cosine similarity ranges from 0 to 1,\n    where 1 means identical term frequency, and 0 indicates no common terms.\n    levenshtein_ratio (float): The Levenshtein ratio also ranges from 0 to 1,\n    where 1 means the strings are identical, and 0 means they are completely different.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n```", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean and lowercase the texts\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Calculate term frequency vectors\n    vec1 = Counter(text1.split())\n    vec2 = Counter(text2.split())\n\n    # Compute cosine similarity\n    intersection = set(vec1.keys()) & set(vec2.keys())\n    numerator = sum([vec1[x] * vec2[x] for x in intersection])\n\n    sum1 = sum([vec1[x]**2 for x in vec1.keys()])\n    sum2 = sum([vec2[x]**2 for x in vec2.keys()])\n    denominator = np.sqrt(sum1) * np.sqrt(sum2)\n\n    if not denominator:\n        cosine_similarity = 0.0\n    else:\n        cosine_similarity = float(numerator) / denominator\n\n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio", "pass": false}
{"task_id": "846", "program": "import collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n\n    pass\nimport collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n    \"\"\"\n    Count the frequency of each value of the given attribute from a list of objects.\n    This function returns a pandas Dataframe containing frequency count of the specified attribute from the objects in the list.\n    The DataFrame consist of two columns ('attribute' and 'count'), which contain the attribute and its specific count respectively.\n    If no attributes are found, an empty DataFrame is returned.\n    \"\"\"\n    # Create an empty dictionary to store the frequency count of each attribute\n    attr_count = {}\n\n    # Iterate over the list of objects and count the frequency of each attribute\n    for obj in obj_list:\n        # Get the value of the specified attribute from the object\n        attr_value = getattr(obj, attr)\n\n        # If the attribute is not already in the dictionary, add it with a count of 1\n        if attr_value not in attr_count:\n            attr_count[attr_value] = 1\n        # Otherwise, increment the count of the attribute\n        else:\n            attr_count[attr_value] += 1\n\n    # Create a pandas DataFrame from the dictionary of attribute counts\n    df = pd.DataFrame.from_dict(attr_count, orient='index', columns=['count'])\n\n    # Add a column for the attribute name\n    df['attribute'] = df.index\n\n    # Return the DataFrame\n    return df\nclass ExampleObject:\n    def __init__(self, animal, shape):\n        self.animal = animal\n        self.shape = shape\nobj_list = [ExampleObject('tiger', 'Square'), ExampleObject('leopard', 'Circle'), ExampleObject('cat', 'Rectangle'), ExampleObject('elephant', 'Rectangle')]", "problem": "Count the frequency of each value of the given attribute from a list of objects. This function returns a pandas Dataframe containing frequency count of the specified attribute from the objects in the list. The DataFrame consist of two columns ('attribute' and 'count'), which contain the attribute and its specific count respectively. If no attributes are found, an empty DataFrame is returned. >>> class ExampleObject: ...     def __init__(self, animal, shape): ...         self.animal = animal ...         self.shape = shape ... >>> obj_list = [ExampleObject('tiger', 'Square'), ExampleObject('leopard', 'Circle'), ExampleObject('cat', 'Rectangle'), ExampleObject('elephant', 'Rectangle')] >>> count = task_func(obj_list, 'shape') >>> print(count) attribute  count 0     Square      1 1     Circle      1 2  Rectangle      2\nThe function should output with:\n    collections.Counter: The frequency count of each value of the attribute.\nYou should write self-contained code starting with:\n```\nimport collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n```", "solution": "import collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n    count = collections.Counter(attr_values)\n    if len(count.keys()) == 0:\n        return pd.DataFrame()\n\n    df = pd.DataFrame.from_dict(count, orient='index').reset_index()\n    df = df.rename(columns={'index':'attribute', 0:'count'})\n    return df", "pass": false}
{"task_id": "847", "program": "import re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n\n    pass\nimport re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n    \"\"\"\n    Split a multi-line string into separate strings, remove special characters, and save each string as a separate text file.\n    The function should output with:\n        file_paths (list): A list of file paths where the text is saved.\n    \"\"\"\n    # Split the input string into separate lines\n    lines = input_string.splitlines()\n\n    # Create a directory to store the text files\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    # Create a list to store the file paths\n    file_paths = []\n\n    # Iterate over the lines and save each line as a separate text file\n    for line in lines:\n        # Remove special characters from the line\n        line = re.sub(r'[^a-zA-Z0-9\\s]', '', line)\n\n        # Create a random file name\n        file_name = ''.join(random.choice(string.ascii_letters) for _ in range(10))\n\n        # Save the line as a text file\n        file_path = os.path.join(directory, file_name + '.txt')\n        with open(file_path, 'w') as f:\n            f.write(line)\n\n        # Add the file path to the list\n        file_paths.append(file_path)\n\n    return file_paths\ninput_string = \"\"\"\nThis is a multi-line string with special characters!@#$%^&*()_+-=[]{}|;':\",./<>?\nIt has multiple lines and special characters.\n\"\"\"", "problem": "Split a multi-line string into separate strings, remove special characters, and save each string as a separate text file.\nThe function should output with:\n    file_paths (list): A list of file paths where the text is saved.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n```", "solution": "import re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n    lines = input_string.split('\\n')\n    file_paths = []\n    for line in lines:\n        line = re.sub('['+string.punctuation+']', '', line)\n        filename = str(random.randint(10000, 99999)) + '.txt'\n        filepath = os.path.join(directory, filename)\n        file_paths.append(filepath)\n        with open(filepath, 'w') as file:\n            file.write(line)\n    return file_paths", "pass": false}
{"task_id": "848", "program": "import heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n\n    pass\nimport heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n    \"\"\"\n    Find the top N values of the specified attribute in a list of objects.\n    Return the top N values as well as a randomly sampled value of all attributes.\n\n    Args:\n        obj_list (list): List of objects to search.\n        attr (str): Name of the attribute to search.\n        top_n (int): Number of top values to return. Default is 5.\n        seed (int): Random seed for sampling. Default is None.\n\n    Returns:\n        list[int]: The top N values as a list of integers. Empty list if there are no attributes.\n        float: A randomly chosen value of all attributes, None if there are no attributes.\n    \"\"\"\n    if not obj_list or not attr:\n        return [], None\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Extract the attribute values from the objects\n    values = [getattr(obj, attr) for obj in obj_list]\n\n    # Use a heap to find the top N values\n    top_values = heapq.nlargest(top_n, values)\n\n    # Randomly sample a value from all attributes\n    random_value = random.choice(values)\n\n    return top_values, random_value\nclass Object:\n    def __init__(self, value):\n        self.test = value\nobj_list = [Object(random.randint(1, 12)) for _ in range(13)]", "problem": "Find the top N values of the specified attribute in a list of objects. Return the top N values as well a a randomly sampled value of all attributes. >>> class Object: ...     def __init__(self, value): ...         self.test = value ... >>> random.seed(2) >>> obj_list = [Object(random.randint(1, 12)) for _ in range(13)] >>> top_values, random_value = task_func(obj_list, 'test', 2, 12) >>> print(top_values) [12, 11] >>> print(random_value) 5\nThe function should output with:\n    list[int]: The top N values as a list of integers. Empty list if there are no attributes.\n    float: A randomly chosen value of all attributes, None if there are no attributes.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n```", "solution": "import heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n    random.seed(seed)\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n    if len(attr_values) == 0:\n        return [], None\n\n    top_values = heapq.nlargest(top_n, attr_values)\n    random_value = random.choice(attr_values)\n\n    return top_values, random_value", "pass": true}
{"task_id": "849", "program": "import re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n\n    pass\nimport re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n    # Split the input string into individual lines\n    lines = input_string.splitlines()\n\n    # Remove stopwords from each line\n    lines = [re.sub(r'\\b(' + r'|'.join(STOPWORDS) + r')\\b\\s*', '', line) for line in lines]\n\n    # Flatten the list of lines into a single string\n    text = ' '.join(lines)\n\n    # Tokenize the text into individual words\n    words = text.split()\n\n    # Count the frequency of each word\n    word_freq = Counter(words)\n\n    # Return the dictionary with word frequencies\n    return word_freq\ntext = \"\"\"\nThis is a sample text that contains some stopwords like \"the\" and \"a\".\nIt also contains some punctuation like \".\" and \",\" which should be removed.\n\"\"\"", "problem": "Divide a multi-line string into individual lines, remove stopwords, and count the frequency of each word.\nThe function should output with:\n    dict: A dictionary with word frequencies where each key is a unique word and the value is its frequency.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n```", "solution": "import re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n    lines = input_string.split('\\n')\n    word_count = Counter()\n    for line in lines:\n        words = re.findall(r'\\b\\w+\\b', line)\n        words = [word for word in words if word not in STOPWORDS]\n        word_count.update(words)\n    return dict(word_count)", "pass": false}
{"task_id": "850", "program": "import pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n\n    pass\nimport pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n    # Initialize the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a DataFrame with the specified columns\n    df = pd.DataFrame(columns=['Student', 'Subject1', 'Subject2', 'Average Grade'])\n\n    # Add rows to the DataFrame for each student\n    for student in students:\n        # Generate random grades for each subject\n        grades = [random.randint(0, 100) for _ in range(len(subjects))]\n\n        # Calculate the average grade for the student\n        average_grade = statistics.mean(grades)\n\n        # Add a row to the DataFrame for the student\n        df = df.append({'Student': student, 'Subject1': grades[0], 'Subject2': grades[1], 'Average Grade': average_grade}, ignore_index=True)\n\n    return df\nstudents = ['Alice', 'Bob', 'Charlie']\nsubjects = ['Math', 'English', 'Science']", "problem": "Create a grade report for a list of students across various subjects. Each student's grades are randomly generated, and the report includes the average grade for each student. The randomness is seeded for reproducibility if a seed is provided.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing each student's grades across the subjects and their average grade.\n    Columns are ['Student', 'Subject1', 'Subject2', ..., 'Average Grade'].\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n```", "solution": "import pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    report_data = []\n\n    for student in students:\n        grades = [random.randint(0, 100) for _ in subjects]\n        avg_grade = statistics.mean(grades)\n        report_data.append((student,) + tuple(grades) + (avg_grade,))\n\n    report_df = pd.DataFrame(report_data, columns=['Student'] + subjects + ['Average Grade'])\n\n    return report_df", "pass": false}
{"task_id": "851", "program": "import textwrap\nimport re\ndef task_func(input_string, width):\n\n    pass\nimport textwrap\nimport re\ndef task_func(input_string, width):\n    \"\"\"\n    Divide a multi-line string into separate strings and wrap each line to a certain width.\n    The function should output with:\n        str: The wrapped string where each line is wrapped to the specified width.\n    \"\"\"\n    # Split the input string into separate lines\n    lines = input_string.splitlines()\n\n    # Initialize an empty list to store the wrapped lines\n    wrapped_lines = []\n\n    # Iterate over each line and wrap it to the specified width\n    for line in lines:\n        # Use textwrap.wrap to wrap the line to the specified width\n        wrapped_line = textwrap.wrap(line, width=width)\n\n        # Add the wrapped line to the list of wrapped lines\n        wrapped_lines.extend(wrapped_line)\n\n    # Join the wrapped lines into a single string\n    wrapped_string = \"\\n\".join(wrapped_lines)\n\n    return wrapped_string\ninput_string = \"This is a sample input string that is longer than the specified width.\"\nwidth = 10", "problem": "Divide a multi-line string into separate strings and wrap each line to a certain width.\nThe function should output with:\n    str: The wrapped string where each line is wrapped to the specified width.\nYou should write self-contained code starting with:\n```\nimport textwrap\nimport re\ndef task_func(input_string, width):\n```", "solution": "import textwrap\nimport re\ndef task_func(input_string, width):\n    lines = input_string.split('\\\\n')\n    wrapped_lines = [textwrap.fill(line, width, break_long_words=False) for line in lines]\n    # Join wrapped lines into a single string\n    wrapped_string = '\\\\n'.join(wrapped_lines)\n    \n    # Additional processing using regular expressions (re)\n    # For example, let's replace all whole-word instances of 'is' with 'was'\n    wrapped_string = re.sub(r'\\bis\\b', 'was', wrapped_string)\n    \n    return wrapped_string", "pass": false}
{"task_id": "852", "program": "import random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n\n    pass\nimport random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n    \"\"\"\n    Generate a list containing random strings of lowercase letters. Each string's length varies from 1 to `max_length`. An optional seed can be set for the random number generator for reproducible results.\n    Note that: The function utilizes the `random.choices` function to generate random strings and combines them into a list.\n    The function should raise the exception for: ValueError: If max_length is smaller than 1.\n    The function should output with:\n        list: A list containing random strings. Each string is a random combination of lowercase letters,\n        and their lengths will vary from 1 to `max_length`.\n    \"\"\"\n    if max_length < 1:\n        raise ValueError(\"max_length must be greater than or equal to 1\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    return [\n        \"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, max_length)))\n        for _ in range(n_samples)\n    ]", "problem": "Generate a list containing random strings of lowercase letters. Each string's length varies from 1 to `max_length`. An optional seed can be set for the random number generator for reproducible results.\nNote that: The function utilizes the `random.choices` function to generate random strings and combines them into a list.\nThe function should raise the exception for: ValueError: If max_length is smaller than 1.\nThe function should output with:\n    list: A list containing random strings. Each string is a random combination of lowercase letters,\n    and their lengths will vary from 1 to `max_length`.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n```", "solution": "import random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n    # Handling negative input\n    if max_length < 1:\n        raise ValueError(\"max_length must be larger than or equal to 1.\")\n\n    # Constants within the function for better encapsulation\n    LETTERS = string.ascii_lowercase\n\n    # Setting the seed for the random number generator for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    all_combinations = []\n\n    for i in range(n_samples):\n        random_length = random.randint(1, max_length)\n        combination = ''.join(random.choices(LETTERS, k=random_length))\n        all_combinations.append(combination)\n\n\n    # Simplifying the reduction using native functionality\n    return all_combinations", "pass": true}
{"task_id": "853", "program": "import os\nimport shutil\nimport string\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\ndef task_func(directory_path):\n\n    pass\nimport os\nimport shutil\nimport string\nINVALID_CHARACTERS = string.punctuation + string.whitespace\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings.\n    Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n    The function should output with:\n        summary (dict): A summary dictionary containing the count of files moved to each directory.\n    \"\"\"\n    # Initialize the summary dictionary\n    summary = {}\n\n    # Get a list of all files in the directory\n    files = os.listdir(directory_path)\n\n    # Create a new directory for invalid files\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    os.mkdir(invalid_dir)\n\n    # Iterate over the files and move them to the appropriate directory\n    for file in files:\n        # Check if the file name contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in file):\n            # Move the file to the invalid directory\n            shutil.move(os.path.join(directory_path, file), invalid_dir)\n            # Increment the count for the invalid directory\n            summary[invalid_dir] = summary.get(invalid_dir, 0) + 1\n        else:\n            # Get the file extension\n            extension = os.path.splitext(file)[1]\n            # Create a new directory for the file extension if it doesn't exist\n            if extension not in summary:\n                summary[extension] = 0\n            # Move the file to the appropriate directory\n            shutil.move(os.path.join(directory_path, file), os.path.join(directory_path, extension))\n            # Increment the count for the file extension\n            summary[extension] += 1\n\n    return summary", "problem": "Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\" The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\nThe function should output with:\n    summary (dict): A summary dictionary containing the count of files moved to each directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport string\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\ndef task_func(directory_path):\n```", "solution": "import os\nimport shutil\nimport string\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\ndef task_func(directory_path):\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "pass": false}
{"task_id": "854", "program": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n\n    pass\nfrom functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers must be a list\")\n    if any(not isinstance(n, int) for n in numbers):\n        raise TypeError(\"numbers must be a list of integers\")\n    if any(n < 0 for n in numbers):\n        raise ValueError(\"numbers must be non-negative\")\n\n    factorials = [math.factorial(n) for n in numbers]\n    permutations = list(permutations(numbers))\n    sums = [sum(factorials) for factorials in permutations]\n\n    return sums, permutations", "problem": "Generate all permutations of a given list of numbers and calculate the sum of the factorials of each number in each permutation. If an empty list is given, the function returns empty lists. >>> fac, perm = task_func([0, 4]) >>> print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\nThe function should raise the exception for: TypeError: If numbers is not a list of integers. ValueError: If input numbers are negative.\nThe function should output with:\n    list of int: A list containing the sums of the factorials of each number\n    in each permutation.\n    list of list of int: A list containing all permutations of numbers.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n```", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers should be a list of integers.\")\n    \n    if not all(isinstance(number, int) for number in numbers):\n        raise TypeError(\"numbers should be a list of integers.\")\n    \n    if not all(number >= 0 for number in numbers):\n        raise ValueError(\"each number in numbers should be non negative.\")\n\n    if len(numbers) == 0:\n        return [], []\n\n    all_permutations = list(permutations(numbers))\n    sums = [reduce(lambda a, b: a + b, [math.factorial(n) for n in permutation]) for permutation in all_permutations]\n    return sums, all_permutations", "pass": false}
{"task_id": "855", "program": "import random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n\n    pass\nimport random\nimport string\nimport collections\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n    \"\"\"\n    Generate n random strings of a specified length, count the frequency of each character across all strings, and return the result as a dictionary.\n\n    Args:\n        n_strings (int): The number of random strings to generate.\n        string_length (int): The length of each random string.\n\n    Returns:\n        dict: A dictionary containing character counts with characters as keys and their frequencies as values.\n    \"\"\"\n    # Generate n random strings of the specified length\n    random_strings = [\n        \"\".join(random.choice(VALID_CHARACTERS) for _ in range(string_length))\n        for _ in range(n_strings)\n    ]\n\n    # Count the frequency of each character across all strings\n    char_counts = collections.Counter()\n    for random_string in random_strings:\n        char_counts.update(random_string)\n\n    # Return the character counts as a dictionary\n    return dict(char_counts)", "problem": "Generate n random strings of a specified length, count the frequency of each character across all strings, and return the result as a dictionary. Constants: - VALID_CHARACTERS: A string containing all valid characters (ASCII letters and digits) that can be used in the random strings.\nThe function should output with:\n    dict: A dictionary containing character counts with characters as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n```", "solution": "import random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n    strings = [''.join(random.choice(VALID_CHARACTERS) for _ in range(string_length)) for _ in range(n_strings)]\n    character_counts = collections.Counter(''.join(strings))\n    return dict(character_counts)", "pass": true}
{"task_id": "856", "program": "from functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n\n    pass\nfrom functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n    if high <= low:\n        raise ValueError(\"high must be greater than low\")\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    matrix = np.random.randint(low, high, size=shape)\n    pairs = list(combinations(matrix.ravel(), 2))\n    sum_of_products = reduce(lambda x, y: x + y, [x * y for x, y in pairs])\n\n    return sum_of_products, matrix", "problem": "Generate a matrix of specified shape and random numbers within a specified range. Generate a list of all possible number pairs (all possible combinations of two numbers which are in the matrix) in the matrix. Calculate the sum of the products of all pairs. >>> task_func((5, 4), seed=1) (4401, array([[6, 9, 6, 1], [1, 2, 8, 7], [3, 5, 6, 3], [5, 3, 5, 8], [8, 2, 8, 1]]))\nThe function should raise the exception for: ValueError: If high <= low\nThe function should output with:\n    int: The sum of products of all possible number pairs within the generated matrix.\n    np.array: The generated matrix.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n```", "solution": "from functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    if high <= low:\n        raise ValueError(\"The 'high' parameter must be greater than 'low'.\")\n\n    matrix = np.random.randint(low, high, shape)\n    values = matrix.flatten()\n\n    all_pairs = list(combinations(values, 2))\n\n    sum_of_products = reduce(lambda a, b: a + b, [np.prod(pair) for pair in all_pairs])\n\n    return sum_of_products, matrix", "pass": true}
{"task_id": "857", "program": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n\n    pass\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory to another based on the specified file extensions.\n    It also issues warnings for files that could not be transferred due to any issues.\n\n    Parameters:\n        SOURCE_DIR (str): The source directory to transfer files from.\n        DEST_DIR (str): The destination directory to transfer files to.\n        EXTENSIONS (list): A list of file extensions to transfer.\n\n    Returns:\n        transferred_files (list): A list containing the names of files that were successfully transferred.\n    \"\"\"\n    transferred_files = []\n    for extension in EXTENSIONS:\n        source_files = glob.glob(os.path.join(SOURCE_DIR, f\"*.{extension}\"))\n        for source_file in source_files:\n            try:\n                shutil.copy(source_file, DEST_DIR)\n                transferred_files.append(os.path.basename(source_file))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {source_file}: {e}\")\n    return transferred_files\nSOURCE_DIR = \"source_dir\"\nDEST_DIR = \"dest_dir\"\nEXTENSIONS = [\"txt\", \"pdf\"]", "problem": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \n    warnings.simplefilter('always')\n    transferred_files = []  # Ensure this is reset each time the function is called\n\n    for ext in EXTENSIONS:\n        for src_file in glob.glob(os.path.join(SOURCE_DIR, '*' + ext)):\n            try:\n                shutil.move(src_file, DEST_DIR)\n                transferred_files.append(os.path.basename(src_file))\n            except Exception as e:\n                warnings.warn(f\"Unable to move file {src_file}: {str(e)}\")\n\n    time.sleep(1)  # To ensure all warnings are processed\n    return transferred_files", "pass": false}
{"task_id": "858", "program": "import string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n\n    pass\nimport string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n    \"\"\"\n    Generate a number of random lowercase letters and count their occurrences.\n    This function takes an integer input to determine how many random letters to generate and an optional seed for consistent randomness.\n    It then creates a list of these letters, chosen from the English lowercase alphabet, and counts each letter's occurrences.\n    The result is returned as a Counter object (from the collections module) which behaves like a dictionary where the keys are the letters, and the values are their counts.\n    Note that: The function internally uses a list to store the randomly generated letters before counting them. The randomness of letter selection can be consistent by providing a seed.\n    The function should output with:\n        Counter: A collections.Counter object with the count of each letter.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    letters = [random.choice(string.ascii_lowercase) for _ in range(n)]\n    return Counter(letters)", "problem": "Generate a number of random lowercase letters and count their occurrences. This function takes an integer input to determine how many random letters to generate and an optional seed for consistent randomness. It then creates a list of these letters, chosen from the English lowercase alphabet, and counts each letter's occurrences. The result is returned as a Counter object (from the collections module) which behaves like a dictionary where the keys are the letters, and the values are their counts.\nNote that: The function internally uses a list to store the randomly generated letters before counting them. The randomness of letter selection can be consistent by providing a seed.\nThe function should output with:\n    Counter: A collections.Counter object with the count of each letter.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n```", "solution": "import string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n    LETTERS = string.ascii_lowercase\n    if seed is not None:\n        random.seed(seed)\n    letters = [random.choice(LETTERS) for _ in range(n)]\n    letter_counts = Counter(letters)\n    return letter_counts", "pass": true}
{"task_id": "859", "program": "import warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n\n    pass\nimport warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n    # Load the iris dataset\n    iris = datasets.load_iris()\n    X = iris.data[:, :2]  # we only take the first two features.\n    y = iris.target\n\n    # Train/Test Split\n    X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.33)\n\n    # Train an SVM classification model\n    clf = svm.SVC(kernel='linear', C=1)\n    clf.fit(X_train, y_train)\n\n    # Predict the labels of the test set\n    y_pred = clf.predict(X_test)\n\n    # Evaluate the accuracy of the model\n    accuracy = metrics.accuracy_score(y_test, y_pred)\n\n    # Set the warning action to 'always'\n    warnings.simplefilter('always')\n\n    # Check if the accuracy is below 0.9\n    if accuracy < 0.9:\n        warning_msg = f'Warning: Accuracy is below 0.9 ({accuracy:.2f}).'\n    else:\n        warning_msg = None\n\n    # Return the accuracy and warning message\n    return accuracy, warning_msg", "problem": "Perform an SVM classification of the iris dataset and warn if the accuracy is less than 0.9. The warning action is set to 'always'. The test size for the train-test split is 0.33.\nThe function should output with:\n    tuple: A tuple containing:\n    accuracy (float): The accuracy of the SVM classification.\n    warning_msg (str or None): A warning message if the accuracy is below 0.9, None otherwise.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n```", "solution": "import warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n    warnings.simplefilter('always')\n    iris = datasets.load_iris()\n    # Set random_state to any fixed number to ensure consistency in data splitting\n    X_train, X_test, y_train, y_test = model_selection.train_test_split(\n        iris.data, iris.target, test_size=0.33, random_state=42)\n    \n    # Initialize the classifier with a fixed random_state\n    clf = svm.SVC(random_state=42)\n    clf.fit(X_train, y_train)\n    predictions = clf.predict(X_test)\n    accuracy = metrics.accuracy_score(y_test, predictions)\n\n    warning_msg = None\n    if accuracy < 0.9:\n        warning_msg = \"The accuracy of the SVM classification is below 0.9.\"\n        warnings.warn(warning_msg)\n\n    return accuracy, warning_msg", "pass": false}
{"task_id": "860", "program": "import re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n\n    pass\nimport re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n    \"\"\"\n    Generate a random string of length 'n' and find all non-overlapping matches of the regex 'pattern'.\n    The function generates a random string of ASCII Letters and Digits using the random module.\n    By providing a seed the results are reproducable.\n    Non overlapping matches of the provided pattern are then found using the re module.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n))\n    matches = re.findall(pattern, random_string)\n    return matches", "problem": "Generate a random string of length 'n' and find all non-overlapping matches of the regex 'pattern'. The function generates a random string of ASCII Letters and Digits using the random module. By providing a seed the results are reproducable. Non overlapping matches of the provided pattern are then found using the re module. >>> task_func(1000, r'[1-9]{2}', seed=1) ['51', '84', '16', '79', '16', '28', '63', '82', '94', '18', '68', '42', '95', '33', '64', '38', '69', '56', '32', '16', '18', '19', '27']\nThe function should output with:\n    list: A list of all non-overlapping matches of the regex pattern in the generated string.\nYou should write self-contained code starting with:\n```\nimport re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n```", "solution": "import re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    rand_str = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n))\n    matches = re.findall(pattern, rand_str)\n    return matches", "pass": true}
{"task_id": "861", "program": "from collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n\n    pass\nfrom collections import Counter\nfrom random import choice, seed\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n    \"\"\"\n    Create a \"shopping cart\" (Counter object) for each list in list_of_lists. The items in the cart are randomly selected from a predefined list of possible items (POSSIBLE_ITEMS). The frequency of each item in the cart corresponds to the length of the list.\n    The function should output with:\n        baskets (list): A list of Counters, each representing a 'shopping cart'.\n    \"\"\"\n    baskets = []\n    for lst in list_of_lists:\n        basket = Counter()\n        for _ in range(len(lst)):\n            basket[choice(POSSIBLE_ITEMS)] += 1\n        baskets.append(basket)\n    return baskets", "problem": "Create a \"shopping cart\" (Counter object) for each list in list_of_lists. The items in the cart are randomly selected from a predefined list of possible items (POSSIBLE_ITEMS). The frequency of each item in the cart corresponds to the length of the list.\nThe function should output with:\n    baskets (list): A list of Counters, each representing a 'shopping cart'.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n```", "solution": "from collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n    seed(42)  # Set the seed for reproducibility\n    baskets = []\n    for list_ in list_of_lists:\n        basket = Counter()\n        for _ in list_:\n            basket[choice(POSSIBLE_ITEMS)] += 1\n        baskets.append(basket)\n\n    return baskets", "pass": true}
{"task_id": "862", "program": "import random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n\n    pass\nimport random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n    \"\"\"\n    Generate a dictionary with lists of random lowercase English letters.\n    Each key in the dictionary represents a unique letter from the alphabet, and the\n    associated value is a list, containing randomly generated instances of that letter\n    based on a seed. The function randomly selects 'n' letters from the alphabet\n    (a-z) and places each occurrence in the corresponding list within the dictionary.\n    The randomness is based on the provided seed value; the same seed will produce\n    the same distribution of letters. The dictionary has only those keys for which a\n    letter was generated.\n\n    Args:\n        n (int): The number of letters to generate.\n        seed (int, optional): The seed value to use for random number generation.\n            If not provided, a random seed will be used.\n\n    Returns:\n        defaultdict: A dictionary where the keys are characters ('a' to 'z') and the\n        values are lists of randomly generated letters. Each list may have 0 to 'n'\n        occurrences of its associated letter, depending on the randomness and seed.\n    \"\"\"\n    # Set the random seed if not provided\n    if seed is None:\n        seed = random.randint(0, 1000000)\n    random.seed(seed)\n\n    # Create a dictionary to store the results\n    result = defaultdict(list)\n\n    # Generate 'n' random letters from the alphabet\n    letters = [random.choice(string.ascii_lowercase) for _ in range(n)]\n\n    # Add each letter to the corresponding list in the dictionary\n    for letter in letters:\n        result[letter].append(letter)\n\n    return result", "problem": "Generate a dictionary with lists of random lowercase english letters. Each key in the dictionary  represents a unique letter from the alphabet, and the associated value is a list, containing randomly generated instances of that letter based on a seed. The function randomly selects 'n' letters from the alphabet (a-z) and places each occurrence in the corresponding list within the dictionary. The randomness is based on the provided seed value; the same seed will produce the same distribution of letters. The dictionary has only those keys for which a letter was generated. >>> task_func(30, seed=1) defaultdict(<class 'list'>, {'e': ['e'], 's': ['s'], 'z': ['z', 'z', 'z'], 'y': ['y', 'y', 'y', 'y'], 'c': ['c'], 'i': ['i', 'i'], 'd': ['d', 'd'], 'p': ['p', 'p', 'p'], 'o': ['o', 'o'], 'u': ['u'], 'm': ['m', 'm'], 'g': ['g'], 'a': ['a', 'a'], 'n': ['n'], 't': ['t'], 'w': ['w'], 'x': ['x'], 'h': ['h']})\nThe function should output with:\n    defaultdict: A dictionary where the keys are characters ('a' to 'z') and the values\n    are lists of randomly generated letters. Each list may have 0 to 'n' occurrences of\n    its associated letter, depending on the randomness and seed.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n```", "solution": "import random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n    LETTERS = string.ascii_lowercase\n    random.seed(seed)\n    letter_dict = defaultdict(list)\n    for _ in range(n):\n        letter = random.choice(LETTERS)\n        letter_dict[letter].append(letter)\n    return letter_dict", "pass": true}
{"task_id": "863", "program": "import numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n\n    pass\nimport numpy as np\nimport math\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n    sums = []\n    for lst in list_of_lists:\n        lst_sum = 0\n        for i in range(len(lst)):\n            lst_sum += math.pow(POSSIBLE_NUMBERS[i], 2)\n        sums.append(lst_sum)\n    return sums\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Calculate the sum of the squares of numbers from a predefined range (POSSIBLE_NUMBERS) for each list in list_of_lists. The number of elements considered from POSSIBLE_NUMBERS is determined by the length of each list.\nThe function should output with:\n    sums (list): A list of sums of squares.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n```", "solution": "import numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n    sums = []\n    for list_ in list_of_lists:\n        sum_ = sum(math.pow(x, 2) for x in POSSIBLE_NUMBERS[:len(list_)])\n        sums.append(sum_)\n\n    return sums", "pass": true}
{"task_id": "864", "program": "import pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n    if not fruit_data:\n        return pd.DataFrame()\n\n    fruit_counts = pd.DataFrame(fruit_data, columns=['Fruit', 'Count'])\n    fruit_counts['Total Count'] = fruit_counts.groupby('Fruit')['Count'].transform('sum')\n    fruit_counts['Average Count'] = fruit_counts['Total Count'] / fruit_counts['Count']\n    return fruit_counts.sort_index()", "problem": "Calculate and return the total and average counts for each type of fruit. This function takes a list of tuples, each containing a fruit name and its count, then calculates the total count and the average count for each type of fruit. The results are returned as a pandas DataFrame with each row representing a different fruit. If fruit_data is an empty list, an empty dataFrame is returned. >>> fruit = [('apple', 1), ('orange', 25), ('apple', 111)] >>> df = task_func(fruit) >>> df.sort_index(inplace=True) >>> print(df) Total Count  Average Count apple           112           56.0 orange           25           25.0\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Total Count' and 'Average Count'.\n    Each row's index is the fruit name.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n\n    if len(fruit_data) == 0:\n        return pd.DataFrame()\n\n    # Unpacking the fruit names and counts separately\n    fruits, counts = zip(*fruit_data)\n    fruits = unique_values = list(set(fruits))\n    # Calculating total counts\n    total_counts = {fruit: np.sum([count for fruit_, count in fruit_data if fruit_ == fruit])\n                  for fruit in fruits}\n    # Calculating average counts\n    avg_counts = {fruit: np.mean([count for fruit_, count in fruit_data if fruit_ == fruit])\n                  for fruit in fruits}\n\n    # Creating a DataFrame to hold the report\n    report_df = pd.DataFrame(list(zip(total_counts.values(), avg_counts.values())),\n                             index=fruits,\n                             columns=['Total Count', 'Average Count'])\n\n    return report_df", "pass": false}
{"task_id": "865", "program": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Convert the input data to a pandas DataFrame\n    data = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n\n    # Normalize the counts using z-score normalization\n    data['Normalized Count'] = zscore(data['Count'])\n\n    # Normalize the weights using min-max scaling\n    scaler = MinMaxScaler()\n    data['Normalized Weight'] = scaler.fit_transform(data['Weight'].values.reshape(-1, 1))\n\n    # Return the normalized data as a pandas DataFrame\n    return data[['Item', 'Normalized Count', 'Normalized Weight']]\ndata = [('A', 10, 0.5), ('B', 20, 1.0), ('C', 30, 1.5)]", "problem": "This function takes a list of tuples containing elements and their respective counts and weights. It normalizes the counts using z-score normalization and the weights using min-max scaling. Finally, it returns a pandas DataFrame with the items, normalized counts, and normalized weights.\nThe function should output with:\n    DataFrame: A pandas DataFrame with three columns: 'Item', 'Normalized Count', and 'Normalized Weight'.\n    Each row corresponds to an entry from the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Extracting items, counts, and weights from the input data\n    items, counts, weights = zip(*data)\n    \n    # Normalizing the counts and weights\n    counts_normalized = zscore(counts)\n    scaler = MinMaxScaler()\n    weights_normalized = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n\n    # Creating a DataFrame with the normalized data\n    report_df = pd.DataFrame({\n        'Item': items,\n        'Normalized Count': counts_normalized,\n        'Normalized Weight': weights_normalized\n    })\n\n    return report_df", "pass": false}
{"task_id": "866", "program": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n\n    pass\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n    # Convert the data to a numpy array\n    data = np.array(data)\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state).fit(data[:, 1:])\n\n    # Get the cluster labels\n    labels = kmeans.labels_\n\n    return labels\ndata = [('T1', 1, 1), ('T2', 1, 1.1), ('T2', 1.1, 1), ('C1', 400, 400), ('C2', 401, 401), ('B1', 35, 35)]", "problem": "Perform KMeans clustering on a list of data points with 2D coordinates and return the cluster labels. The function takes a list of tuples, each containing an identifier and its 2D coordinates. It applies KMeans clustering to categorize the points. >>> data = [('T1', 1, 1), ('T2', 1, 1.1), ('T2', 1.1, 1), ('C1', 400, 400), ('C2', 401, 401), ('B1', 35, 35)] >>> labels = task_func(data, n_clusters=3, random_state=42) >>> print(labels) [0 0 0 1 1 2]\nThe function should output with:\n    ndarray: A numpy array with the cluster labels for each item.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n```", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n    items, x_values, y_values = zip(*data)\n    coordinates = np.array(list(zip(x_values, y_values)))\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state).fit(coordinates)\n    labels = kmeans.labels_\n\n    return labels", "pass": false}
{"task_id": "867", "program": "import re\nimport string\ndef task_func(text1, text2):\n\n    pass\nimport re\nimport string\ndef task_func(text1, text2):\n    \"\"\"\n    This function takes two strings, removes any ASCII punctuation using regular expressions, and returns the cleaned strings as a tuple.\n    It targets punctuation characters defined in `string.punctuation`, which includes the following characters: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    >>> cleaned_text1, cleaned_text2 = task_func(\"test (with parenthesis []!!)\", \"And, other; stuff ^_`\")\n    >>> print(cleaned_text1, cleaned_text2)\n    test with parenthesis  And other stuff\n    Note that: This function may not remove non-ASCII or uncommon punctuation symbols.\n    The function should output with:\n        tuple: A tuple containing the cleaned texts (text1, text2) with punctuation removed.\n    \"\"\"\n    # Create a regular expression to match any punctuation characters\n    punctuation = re.compile('[%s]' % re.escape(string.punctuation))\n\n    # Use the regular expression to remove punctuation from the input strings\n    cleaned_text1 = punctuation.sub('', text1)\n    cleaned_text2 = punctuation.sub('', text2)\n\n    # Return the cleaned strings as a tuple\n    return cleaned_text1, cleaned_text2", "problem": "This function takes two strings, removes any ASCII punctuation using regular expressions, and returns the cleaned strings as a tuple. It targets punctuation characters defined in `string.punctuation`, which includes the following characters: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' >>> cleaned_text1, cleaned_text2 = task_func(\"test (with parenthesis []!!)\", \"And, other; stuff ^_`\") >>> print(cleaned_text1, cleaned_text2) test with parenthesis  And other stuff\nNote that: This function may not remove non-ASCII or uncommon punctuation symbols.\nThe function should output with:\n    tuple: A tuple containing the cleaned texts (text1, text2) with punctuation removed.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\ndef task_func(text1, text2):\n```", "solution": "import re\nimport string\ndef task_func(text1, text2):\n    # Constants\n    PUNCTUATION = string.punctuation\n\n    cleaned_texts = []\n\n    # Remove punctuation from each text string\n    for text in [text1, text2]:\n        cleaned_text = re.sub('['+re.escape(PUNCTUATION)+']', '', text)\n        cleaned_texts.append(cleaned_text)\n\n    return tuple(cleaned_texts)", "pass": true}
{"task_id": "868", "program": "from itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n\n    pass\nfrom itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n    if n_colors <= 0:\n        return []\n    if rng_seed is not None:\n        seed(rng_seed)\n    color_pattern = []\n    for i in range(n_colors):\n        if i % 2 == 0:\n            color_pattern.append(choice(colors))\n        else:\n            color_pattern.append(next(cycle(colors)))\n    return color_pattern\ncolors = ['Brown', 'Green', 'Black']", "problem": "Generates a list representing a color pattern. The pattern consists of 'n_colors' elements and alternates between a cyclic sequence of colors as defined in the parameter 'colors', and random colors from the same list. Optionally, a seed for the random number generator can be provided for repeatable randomness. If n_colors is smaller than or equal to zero an empty list is returned. >>> colors = ['Brown', 'Green', 'Black'] >>> color_pattern = task_func(12, colors=colors, rng_seed=42) >>> print(color_pattern) ['Brown', 'Black', 'Green', 'Brown', 'Black', 'Brown', 'Brown', 'Black', 'Green', 'Green', 'Black', 'Brown']\nThe function should output with:\n    list: A list representing the color pattern. Each element of the list is a string indicating\n    the color. For example, with n_colors=4 and a specific seed, the result could be consistent\n    across calls with the same seed.\nYou should write self-contained code starting with:\n```\nfrom itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n```", "solution": "from itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n\n    # Setting the seed for the random number generator\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    color_cycle = cycle(colors)\n    color_pattern = []\n\n    for _ in range(n_colors):\n        color = next(color_cycle) if _ % 2 == 0 else choice(colors)\n        color_pattern.append(color)\n\n    return color_pattern", "pass": false}
{"task_id": "869", "program": "import pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n\n    pass\nimport pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n    if not students:\n        raise ValueError(\"List of students is empty.\")\n\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    grades = [randint(*grade_range) for _ in range(n_grades)]\n    students = cycle(students)\n\n    return pd.DataFrame({\n        'Student': [next(students) for _ in range(n_grades)],\n        'Grade': grades\n    })", "problem": "Generates a grade report for a specified number of grades. The function cycles through the given list of students, assigning each a random grade from a predefined range, and compiles this information into a pandas DataFrame. The random grades can be made reproducable by providing a seed in 'rng_seed'. >>> grade_report = task_func(5, rng_seed=12) >>> print(grade_report) Student  Grade 0    Alice      8 1      Bob      5 2  Charlie      9 3    David      6 4      Eve      3\nThe function should raise the exception for: ValueError: If list of students is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Student' and 'Grade'. Each row represents a student's grade.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n```", "solution": "import pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n\n    if len(students) == 0:\n        raise ValueError(\"The students list should contain at least one student.\")\n\n    seed(rng_seed)\n\n    student_cycle = cycle(students)\n    grade_data = []\n\n    for _ in range(n_grades):\n        student = next(student_cycle)\n        grade = randint(min(grade_range), max(grade_range))\n        grade_data.append([student, grade])\n\n    grade_df = pd.DataFrame(grade_data, columns=['Student', 'Grade'])\n\n    return grade_df", "pass": false}
{"task_id": "870", "program": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[]):\n    # Create an empty DataFrame with the correct index\n    df = pd.DataFrame(index=range(len(data_list[0])), columns=['Mean Value'])\n\n    # Iterate over the list of tuples and calculate the mean of the numerical values\n    for i, tup in enumerate(data_list):\n        # Extract the numerical values from the tuple\n        num_vals = [val for val in tup if isinstance(val, (int, float))]\n\n        # Calculate the mean of the numerical values\n        mean = np.mean(num_vals)\n\n        # Add the mean to the DataFrame\n        df.loc[i] = mean\n\n    return df\ndata = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)]", "problem": "Calculate the mean of numerical values in each position across tuples in a list. Non-numeric values are ignored, and means are computed only from available data. That means that missing data in some of the tuples is simply ignored. A DataFrame with one columns named 'Mean Value' which contains the mean values for all tuple positions. The index is according to this scheme: 'Position i' where i is the current position. If an empty list is passed, then an empty DataFrame is returned. >>> data = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)] >>> df = task_func() >>> print(df) Mean Value Position 0         NaN Position 1         3.0 Position 2         4.3\nThe function should output with:\n    DataFrame: A pandas DataFrame with the mean values of the numerical data at each position.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n\n    # Unzip the data, filling missing values with NaN so they don't affect the mean calculation\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n\n    # Calculate the mean of numerical values, skipping the first column assuming it's non-numerical\n    # Filter out non-numeric values from the column before calculating the mean\n    mean_values = []\n    for column in unzipped_data[:]:\n        numeric_values = [val for val in column if isinstance(val, (int, float))]\n        if numeric_values:\n            mean_values.append(np.nanmean(numeric_values))\n        else:\n            mean_values.append(np.nan)\n\n    # Create a DataFrame with the results\n    df = pd.DataFrame(mean_values, columns=['Mean Value'], \n                      index=['Position {}'.format(i) for i in range(len(mean_values))])\n\n    return df", "pass": false}
{"task_id": "871", "program": "import numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n\n    pass\nimport numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n    \"\"\"\n    This function takes a list of tuples. The first value of each tuple is a string, the other values are numeric. E.g. ('test', 2, 12.4, -2)\n    It calculates the mean over all tuples of the numerical values for each tuple position excluding the first position, and writes the results into a specified text file.\n    The content in the text file is formated as follows: 'Position 'x': 'mean', where x is the current tuple position and 'mean' denotes the computed mean value.\n    Each Position is written in a new line. It returns a list of the calculated mean values.\n    Missing values and non numeric values at positions other than the first are filled / replaced with np.nan.\n    If an empty list is handed to the function an empty list is returned and an empty file is created.\n    The function utilizes the 'numpy' library for numerical operations and the 'itertools' library to handle the iteration through the data structure.\n    \"\"\"\n    # Check if the data_list is empty\n    if not data_list:\n        # If the data_list is empty, return an empty list and create an empty file\n        with open(file_name, \"w\") as f:\n            f.write(\"\")\n        return []\n\n    # Initialize the list of mean values\n    mean_values = []\n\n    # Iterate over the data_list and calculate the mean for each tuple position\n    for i, values in enumerate(zip(*data_list)):\n        # Calculate the mean for the current tuple position\n        mean = np.nanmean(values)\n        # Add the mean to the list of mean values\n        mean_values.append(mean)\n        # Write the mean to the file\n        with open(file_name, \"a\") as f:\n            f.write(f\"Position {i}: {mean}\\n\")\n\n    return mean_values", "problem": "This function takes a list of tuples. The first value of each tuple is a string, the other values are numeric. E.g. ('test', 2, 12.4, -2) It calculates the mean over all tuples of the numerical values for each tuple position excluding the first position, and writes the results into a specified text file. The content in the text file is formated as follows: 'Position 'x': 'mean', where x is the current tuple position and 'mean' denotes the computed mean value. Each Position is written in a new line. It returns a list of the calculated mean values. Missing values and non numeric values at positions other than the first are filled / replaced with np.nan. If an empty list is handed to the function an empty list is returned and an empty file is created. The function utilizes the 'numpy' library for numerical operations and the 'itertools' library to handle the iteration through the data structure.\nThe function should output with:\n    list: A list of mean values calculated from the numerical data in the tuples.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n```", "solution": "import numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n    # Unzipping the data to separate the elements of the tuples\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    mean_values = []\n    # Calculating the mean values excluding the first position (non-numerical)\n    for column in unzipped_data[1:]:\n        numeric_values = [val for val in column if isinstance(val, (int, float))]\n        if numeric_values:\n            mean_values.append(np.nanmean(numeric_values))\n        else:\n            mean_values.append(np.nan)\n\n    # Writing the mean values to the specified file\n    with open(file_name, 'w') as f:\n        for i, mean_value in enumerate(mean_values, start=1):\n            f.write('Position {}: {}\\n'.format(i, mean_value))\n    \n    # Returning the list of mean values for testing purposes\n    return mean_values", "pass": false}
{"task_id": "872", "program": "import numpy as np\nimport itertools\ndef task_func(data_list):\n\n    pass\nimport numpy as np\nimport itertools\ndef task_func(data_list):\n    \"\"\"\n    Unzips a list of tuples and calculates the mean of the numeric values for each position.\n    The function accepts a list of tuples, where each tuple consists of alphanumeric values.\n    It unzips the tuples, and calculates the mean of numeric values at each position using numpy,\n    where non numeric values are ignores. If all values at a position are non numeric, the mean at\n    this position is set to be np.nan. If the provided tuples have different number of entries,\n    missing values are treated as zeros.\n    The function should output with:\n        list: A list of mean values for each numeric position across the tuples. Non-numeric positions are ignored.\n        An empty list is returned if the input list (data_list) is empty.\n    \"\"\"\n    if not data_list:\n        return []\n\n    # Unzip the tuples\n    unzipped_data = list(zip(*data_list))\n\n    # Get the number of tuples\n    num_tuples = len(data_list)\n\n    # Initialize the mean values\n    means = [0] * len(unzipped_data)\n\n    # Iterate over each position\n    for i, position in enumerate(unzipped_data):\n        # Get the numeric values at this position\n        numeric_values = [value for value in position if isinstance(value, (int, float))]\n\n        # If all values are non-numeric, set the mean to np.nan\n        if not numeric_values:\n            means[i] = np.nan\n        else:\n            # Calculate the mean of the numeric values\n            means[i] = np.mean(numeric_values)\n\n    return means\ndata_list = [('a', 1, 2), ('b', 3, 4), ('c', 5, 6)]", "problem": "Unzips a list of tuples and calculates the mean of the numeric values for each position. The function accepts a list of tuples, where each tuple consists of alphanumeric values. It unzips the tuples, and calculates the mean of numeric values at each position using numpy, where non numeric values are ignores. If all values at a position are non numeric, the mean at this position is set to be np.nan. If the provided tuples have different number of entries, missing values are treated as zeros.\nThe function should output with:\n    list: A list of mean values for each numeric position across the tuples. Non-numeric positions are ignored.\n    An empty list is returned if the input list (data_list) is empty.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(data_list):\n```", "solution": "import numpy as np\nimport itertools\ndef task_func(data_list):\n    # Unzip the data while handling uneven tuple lengths by filling missing values with NaN\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n\n    # Calculate the mean of numeric values, ignoring non-numeric ones\n    mean_values = [np.nanmean([val for val in column if isinstance(val, (int, float))]) for column in unzipped_data]\n\n    return mean_values", "pass": false}
{"task_id": "873", "program": "import csv\nimport os\ndef task_func(data, file_path, headers):\n\n    pass\nimport csv\nimport os\ndef task_func(data, file_path, headers):\n    if file_path is None:\n        raise ValueError(\"'file_path' cannot be None\")\n\n    # Create a CSV file with the given headers\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)\n\n        # Write the data to the CSV file\n        for row in data:\n            writer.writerow(row)\n\n    return os.path.abspath(file_path)\ndata = [('test', 123, 2), (3, -3, -15), ('hallo', 1, -2)]\nfile_path = 'data.csv'\nheaders = ['test1', 'test2', 'test3']", "problem": "Writes a list of tuples to a CSV file. Each tuple in the 'data' list represents a row in the CSV file, with each element of the tuple corresponding to a cell in the row. If a tuple contains fewer elements than there are headers, the missing elements are filled with None. >>> task_func([('test', 123, 2), (3, -3, -15), ('hallo', 1, -2)], 'data.csv', ['test1', 'test2', 'test3']) '/user/data/data.csv' #full path depends on os and individual folder structure >>> with open('data.csv', 'r', newline='') as csvfile: >>>     reader = csv.reader(csvfile) >>>     for row in reader: >>>         print(row) ['test1', 'test2', 'test3'] ['test', '123', '2'] ['3', '-3', '-15'] ['hallo', '1', '-2'] ['1', 'hi', 'hello']\nThe function should raise the exception for: ValueError: If 'file_path' is None.\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\ndef task_func(data, file_path, headers):\n```", "solution": "import csv\nimport os\ndef task_func(data, file_path, headers):\n    if file_path is None:\n        raise ValueError(\"The file path is invalid.\")\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)\n        for row in data:\n            if len(row) < len(headers):\n                row += (None,) * (len(headers) - len(row))\n            writer.writerow(row)\n    return os.path.abspath(file_path)", "pass": true}
{"task_id": "874", "program": "from itertools import zip_longest\nfrom scipy.spatial import distance\ndef task_func(points):\n\n    pass\nfrom itertools import zip_longest\nfrom scipy.spatial import distance\ndef task_func(points):\n    if len(points) < 2:\n        return []\n    return [distance.euclidean(p1, p2) for p1, p2 in zip_longest(points, points[1:])]", "problem": "Calculate the Euclidean distances between consecutive points in a provided list of 2D coordinates. This function takes a list of tuples, where each tuple contains two numbers representing a point in 2D space. It computes the Euclidean distance between each consecutive pair of points. If an empty list or a single point is passed, the function returns an empty list. If a tuple contains just one number it is assumed that both coordinates are equal to this number. >>> task_func([(1, 2), (4), (-1.2, 4)]) [3.605551275463989, 5.2]\nThe function should output with:\n    list of floats: A list containing the Euclidean distances between\n    consecutive points. Each distance is a float.\nYou should write self-contained code starting with:\n```\nfrom itertools import zip_longest\nfrom scipy.spatial import distance\ndef task_func(points):\n```", "solution": "from itertools import zip_longest\nfrom scipy.spatial import distance\ndef task_func(points):\n    distances = []\n    for point1, point2 in zip_longest(points, points[1:]):\n        if point2 is not None:\n            distances.append(distance.euclidean(point1, point2))\n            \n    return distances", "pass": false}
{"task_id": "875", "program": "import pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n    \"\"\"\n    Create a Pandas DataFrame from a list of tuples, each representing a row.\n    Tuples of unequal lengths are allowed, and missing elements are filled with None.\n    Optionally, missing numeric values can be filled with random data.\n\n    Parameters:\n        data (list): A list of tuples, each representing a row.\n        columns (list): A list of column names.\n        fill_missing (bool): Whether to fill missing elements with None or random data.\n        num_range (tuple): A tuple of two integers representing the range of random numbers to use for filling missing numeric values.\n        seed (int): A seed to use for generating random numbers.\n\n    Returns:\n        A pandas DataFrame with specified columns.\n        Missing elements are represented as None or filled with random data.\n    \"\"\"\n    # Create a dictionary with the column names as keys and the data as values\n    data_dict = {column: [] for column in columns}\n    for row in data:\n        for i, value in enumerate(row):\n            if i < len(columns):\n                data_dict[columns[i]].append(value)\n            else:\n                data_dict[columns[-1]].append(None)\n\n    # Create a pandas DataFrame from the dictionary\n    df = pd.DataFrame(data_dict)\n\n    # Fill missing elements with None or random data\n    if fill_missing:\n        for column in columns:\n            if df[column].dtype == 'float64':\n                df[column] = df[column].fillna(random.uniform(*num_range, seed=seed))\n            else:\n                df[column] = df[column].fillna(None)\n\n    return df\ndata = [('Mango', 20), ('Apple', ), ('Banana', )]", "problem": "Create a Pandas DataFrame from a list of tuples, each representing a row. Tuples of unequal lengths are allowed, and missing elements are filled with None. Optionally, missing numeric values can be filled with random data. >>> data = [('Mango', 20), ('Apple', ), ('Banana', )] >>> df = task_func(data, columns=['Fruit', 'Quantity'], fill_missing=False, seed=42) >>> print(df) Fruit  Quantity 0   Mango      20.0 1   Apple       NaN 2  Banana       NaN\nThe function should output with:\n    DataFrame: A pandas DataFrame with specified columns.\n    Missing elements are represented as None or filled with random data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n```", "solution": "import pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df.columns:\n            if df[col].dtype in ['float64', 'int64']:\n                df[col] = df[col].apply(lambda x: random.randint(*num_range) if pd.isnull(x) else x)\n\n    return df", "pass": false}
{"task_id": "876", "program": "import collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n\n    pass\nimport collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n    # Add a key 'a' with value 1 to the input dictionary\n    data_dict['a'] = 1\n\n    # Sort the dictionary by the frequency of its values in descending order\n    value_frequencies = sorted(data_dict.items(), key=operator.itemgetter(1), reverse=True)\n\n    # Back up all files from the specified source directory to a backup directory\n    backup_status = True\n    for file in os.listdir(source_directory):\n        try:\n            shutil.copy(os.path.join(source_directory, file), backup_directory)\n        except:\n            backup_status = False\n            break\n\n    return data_dict, value_frequencies, backup_status\ndata_dict = {'avc': '1', 'hello': 'world', 'test': 'world', 'cat': 'meow'}", "problem": "Modifies a dictionary, sorts it by the frequency of its values, and backs up files from a source directory. This function performs three main tasks: 1. Updates the input dictionary by adding a key 'a' with the value 1. 2. Sorts the dictionary by the frequency of its values in descending order. 3. Backs up all files from the specified source directory to a backup directory. >>> data_dict = {'avc': '1', 'hello': 'world', 'test': 'world', 'cat': 'meow'} >>> updated_dict, value_frequencies, backup_status = task_func(data_dict, 'to_backup', 'backup') >>> print(updated_dict) {'a': 1, 'avc': '1', 'hello': 'world', 'test': 'world', 'cat': 'meow'} >>> print(value_frequencies) [('avc', 1), ('world', 2), ('meow', 1), (1, 2)] >>> print(backup_status) True\nThe function should output with:\n    tuple:\n    dict: The modified dictionary with the added key and value.\n    list: A list of tuples representing the sorted items of the dictionary by their frequency.\n    bool: A boolean indicating whether the backup was successful (True) or not (False).\nYou should write self-contained code starting with:\n```\nimport collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n```", "solution": "import collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n    # Add the key 'a' with value 1\n    data_dict.update({'a': 1})\n\n    # Count the frequency of the values\n    counter = collections.Counter(data_dict.values())\n\n    # Sort the dictionary by the frequency\n    sorted_dict = sorted(counter.items(), key=operator.itemgetter(1), reverse=True)\n\n    # Backup files\n    backup_status = False\n    if os.path.isdir(source_directory):\n        shutil.copytree(source_directory, backup_directory, dirs_exist_ok=True)\n        backup_status = True\n\n    return data_dict, sorted_dict, backup_status", "pass": false}
{"task_id": "877", "program": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform PCA (Principal Component Analysis) on the provided DataFrame.\n    This function takes a pandas DataFrame, scales the data using sklearn StandardScaler, and then applies PCA to reduce the number of dimensions of the data to the number specified by n_components, maintaining as much information as possible.\n\n    Parameters\n    ----------\n    data : pandas.DataFrame\n        The input data to perform PCA on.\n    n_components : int, optional\n        The number of principal components to retain. The default is 2.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A new DataFrame with the original data transformed into 'n_components' principal components.\n\n    Raises\n    ------\n    ValueError\n        If input data is not a DataFrame or contains non-numeric data.\n        If n_components is greater than the number of columns in the data.\n        If input data is empty.\n    \"\"\"\n    # Check if data is a pandas DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n\n    # Check if data contains non-numeric data\n    if not data.applymap(lambda x: isinstance(x, (int, float))).all().all():\n        raise ValueError(\"Input data must contain only numeric data.\")\n\n    # Check if n_components is greater than the number of columns in the data\n    if n_components > data.shape[1]:\n        raise ValueError(\"n_components must be less than or equal to the number of columns in the data.\")\n\n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"Input data must not be empty.\")\n\n    # Scale the data using StandardScaler\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n\n    # Apply PCA to reduce the number of dimensions of the data\n    pca = PCA(n_components=n_components)\n    principal_components = pca.fit_transform(scaled_data)\n\n    # Return the principal components as a new DataFrame\n    return pd.DataFrame(principal_components, columns=[\"Principal Component {}\".format(i+1) for i in range(n_components)])", "problem": "Perform PCA (Principal Component Analysis) on the provided DataFrame. This function takes a pandas DataFrame, scales the data using sklearn StandardScaler, and then applies PCA to reduce the number of dimensions of the data to the number specified by n_components, maintaining as much information as possible. >>> data = pd.DataFrame({ ...         'A': [-43, 212, 1, -12, 5], ...         'B': [-1, 0, 0, 9.76, 12.34], ...         'C': [1, 42, -13.2, 31, 1.23], ... }) >>> res = task_func(data, n_components=1) >>> print(res) 0 0 -0.793152 1  2.511947 2 -0.940253 3  0.069179 4 -0.847722\nThe function should raise the exception for: ValueError: If input data is not a DataFrame or contains non-numeric data. ValueError: If n_components is greater than the number of columns in the data. ValueError: If input data is empty.\nThe function should output with:\n    DataFrame: A new DataFrame with the original data transformed into 'n_components' principal\n    components.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data should be a DataFrame.\")\n\n    if not data.apply(lambda s: pd.to_numeric(s, errors='coerce').notnull().all()).all():\n        raise ValueError(\"DataFrame should only contain numeric values.\")\n    \n    if n_components > len(data.columns):\n        raise ValueError(\"n_components should not be greater than the number of columns in data.\")\n    \n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data)\n    pca = PCA(n_components=n_components)\n    data_reduced = pca.fit_transform(data_scaled)\n    return pd.DataFrame(data_reduced)", "pass": true}
{"task_id": "878", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n    \"\"\"\n    Trains a RandomForestRegressor model and returns the mean squared error (MSE) of the predictions and the model.\n    First the data is converted into a pandas DataFrame and then split into a train and test set.\n    The fractional size of the test set is determined by 'test_size'.\n    Then a RandomForestRegressor is trained on the data, using the in 'target' specified column as target.\n    The MSE on the test set is calculated.\n\n    The function should raise the exception for:\n        ValueError: If the input DataFrame is empty or the target column name is not in the DataFrame.\n\n    The function should output with:\n        float: The mean squared error of the model's predictions on the test set.\n        RandomForestRegressor: The trained model.\n        DataFrame: The converted dictionary input data.\n    \"\"\"\n    # Convert input data to pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n\n    # Check if target column is in DataFrame\n    if target not in df.columns:\n        raise ValueError(f\"Target column '{target}' is not in the DataFrame\")\n\n    # Split data into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(df.drop(target, axis=1), df[target], test_size=test_size, random_state=random_state)\n\n    # Train RandomForestRegressor on train set\n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n\n    # Make predictions on test set\n    y_pred = model.predict(X_test)\n\n    # Calculate MSE on test set\n    mse = mean_squared_error(y_test, y_pred)\n\n    return mse, model, df", "problem": "Trains a RandomForestRegressor model and returns the mean squared error (MSE) of the predictions and the model. First the data is converted into a pandas DataFrame and then split into a train and test set. The fractional size of the test set is determined by 'test_size'. Then a RandomForestRegressor is trained on the data, using the in 'target' specified column as target. The MSE on the test set is calculated.\nThe function should raise the exception for: ValueError: If the input DataFrame is empty or the target column name is not in the DataFrame.\nThe function should output with:\n    float: The mean squared error of the model's predictions on the test set.\n    RandomForestRegressor: The trained model.\n    DataFrame: The converted dictionary input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n    data = pd.DataFrame(data)\n    if data.empty or target not in data.columns:\n        raise ValueError(\"Data must not be empty and target column must exist in the DataFrame.\")\n\n    # Splitting the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(columns=[target]), data[target], test_size=test_size, random_state=random_state\n    )\n\n    # Training the model\n    model = RandomForestRegressor(random_state=random_state)\n    model.fit(X_train, y_train)\n\n    # Making predictions and returning the MSE\n    predictions = model.predict(X_test)\n    mse = mean_squared_error(y_test, predictions)\n    return mse, model, data", "pass": false}
{"task_id": "879", "program": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform a chi-square test of independence of variables in a contingency table.\n\n    This function takes a DataFrame containing categorical data and two column names,\n    then constructs a contingency table from the two categorical columns and performs\n    a chi-square test of independence. It returns the p-value of the test, which\n    indicates the probability of observing the data if the null hypothesis\n    (independence of the variables) is true.\n\n    Parameters\n    ----------\n    data : pandas.DataFrame\n        A DataFrame containing categorical data.\n    col1 : str\n        The name of the first column to use for the contingency table.\n    col2 : str\n        The name of the second column to use for the contingency table.\n\n    Returns\n    -------\n    float\n        The p-value of the chi-square test of independence.\n\n    Raises\n    ------\n    ValueError\n        If 'data' is empty, if 'col1' or 'col2' are not in 'data', if one or both of\n        the columns do not have multiple categories, or if some categories have less\n        than 5 observations (violating the chi-square test assumptions).\n    TypeError\n        If one or both of the columns contain non-categorical data.\n    \"\"\"\n    # Check if data is empty\n    if data.empty:\n        raise ValueError(\"'data' is empty\")\n\n    # Check if col1 and col2 are in data\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"'col1' or 'col2' are not in 'data'\")\n\n    # Check if col1 and col2 have multiple categories\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"one or both of the columns do not have multiple categories\")\n\n    # Check if some categories have less than 5 observations\n    if data[col1].value_counts().min() < 5 or data[col2].value_counts().min() < 5:\n        raise ValueError(\"some categories have less than 5 observations\")\n\n    # Check if col1 and col2 contain non-categorical data\n    if not pd.api.types.is_categorical_dtype(data[col1]) or not pd.api.types.is_categorical_dtype(data[col2]):\n        raise TypeError(\"one or both of the columns contain non-categorical data\")\n\n    # Construct contingency table\n    table = pd.crosstab(data[col1], data[col2])\n\n    # Perform chi-square test of independence\n    chi2, p, dof, expected = chi2_contingency(table)\n\n    # Return p-value\n    return p\ndata = pd.DataFrame({\n    'a': np.random.choice(['A', 'B'], size=100),\n    'b': np.random.choice(['X', 'Y'], size=100)\n})", "problem": "Perform a chi-square test of independence of variables in a contingency table. This function takes a DataFrame containing categorical data and two column names, then constructs a contingency table from the two categorical columns and performs a chi-square test of independence. It returns the p-value of the test, which indicates the probability of observing the data if the null hypothesis (independence of the variables) is true. >>> np.random.seed(42) >>> data = pd.DataFrame({ ...     'a': np.random.choice(['A', 'B'], size=100), ...     'b': np.random.choice(['X', 'Y'], size=100) ... }) >>> task_func(data, 'a', 'b') 1.0\nThe function should raise the exception for: ValueError: If 'data' is empty, if 'col1' or 'col2' are not in 'data', if one or both of the columns do not have multiple categories, or if some categories have less than 5 observations (violating the chi-square test assumptions). TypeError: If one or both of the columns contain non-categorical data.\nThe function should output with:\n    float: The p-value of the chi-square test of independence.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if DataFrame is empty\n    if data.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    # Check if specified columns exist\n    if col1 not in data or col2 not in data:\n        raise ValueError(f\"One or both of the columns '{col1}' and '{col2}' do not exist in the DataFrame.\")\n\n    # Check for non-categorical data (numerical values)\n    if np.issubdtype(data[col1].dtype, np.number) or np.issubdtype(data[col2].dtype, np.number):\n        raise TypeError(\"One or both of the columns contain non-categorical data. The chi-square test requires categorical data.\")\n\n    # Check for single category (no variability)\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories. The chi-square test requires variability in data.\")\n\n    # Check for small counts in numerous categories\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations. This violates the assumptions of the chi-square test.\")\n\n    # Perform the chi-square test\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p", "pass": false}
{"task_id": "880", "program": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n    \"\"\"\n    Perform K-Means clustering on the given DataFrame using the sklearn KMeans algorithm.\n\n    Parameters\n    ----------\n    data : pandas.DataFrame\n        A DataFrame with numerical values.\n    n_clusters : int, optional\n        The number of clusters to form.\n    seed : int, optional\n        The random seed to use for the KMeans algorithm.\n\n    Returns\n    -------\n    labels : numpy.ndarray\n        An array of integers (cluster labels) corresponding to the input data.\n        Each label is an integer representing the cluster to which a row of data has been assigned.\n    model : sklearn.cluster.KMeans\n        The fitted KMeans model.\n\n    Raises\n    ------\n    ValueError\n        If the DataFrame contains non numeric entries.\n    \"\"\"\n    # Check if the DataFrame contains non-numeric entries\n    if not data.applymap(lambda x: isinstance(x, (int, float))).all().all():\n        raise ValueError(\"DataFrame contains non-numeric entries\")\n\n    # Perform K-Means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=seed)\n    labels = kmeans.fit_predict(data)\n\n    return labels, kmeans\ndata = pd.DataFrame({\n    'a': [1, 20, 2, 22, 100],\n    'b': [1, 20, 2, 22, 100]\n})", "problem": "Perform K-Means clustering on the given DataFrame using the sklearn KMeans algorithm. The function expects a DataFrame with numerical values, as KMeans cannot handle categorical data. It applies standard KMeans clustering from the sklearn library to form clusters. The number of clusters is configurable via the 'n_clusters' parameter, defaulting to 3. The Number of times the k-means algorithm is run with different centroid seeds (n_init) is set to 10. The function returns an array of cluster labels corresponding to each data point in the input as well as the fitted KMeans model. >>> data = pd.DataFrame({ ...     'a': [1, 20, 2, 22, 100], ...     'b': [1, 20, 2, 22, 100] ... }) >>> labels, model = task_func(data, seed=213) >>> print(labels) [2 0 2 0 1] >>> print(model) KMeans(n_clusters=3, n_init=10, random_state=213)\nThe function should raise the exception for: ValueError: If the DataFrame contains non numeric entries.\nThe function should output with:\n    numpy.ndarray: An array of integers (cluster labels) corresponding to the input data. Each label is an integer\n    representing the cluster to which a row of data has been assigned.\n    sklearn.cluster.KMeans: The fitted KMeans Model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n    if not data.apply(lambda s: pd.to_numeric(s, errors='coerce').notnull().all()).all():\n        raise ValueError(\"DataFrame should only contain numeric values.\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=seed, n_init=10)\n    kmeans.fit(data)\n\n    return kmeans.labels_, kmeans", "pass": true}
{"task_id": "881", "program": "import pandas as pd\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n\n    pass\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n    \"\"\"\n    Search for matches with a specified regex pattern in a given column of a CSV file and optionally return a random sample of these matches.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n        column_name (str): The name of the column to search in.\n        pattern (str): The regex pattern to search for.\n        sample_size (int): The number of rows to return. If None, return all rows.\n        seed (int): The random seed.\n\n    Returns:\n        DataFrame: A pandas DataFrame containing either all the rows with matches or a random sample of them.\n    \"\"\"\n    # Read the CSV file\n    df = pd.read_csv(csv_file)\n\n    # Extract the column of interest\n    column = df[column_name]\n\n    # Find the matches\n    matches = column.str.contains(pattern)\n\n    # If sample_size is not None, generate a random sample of indices\n    if sample_size is not None:\n        # Set the random seed\n        random.seed(seed)\n\n        # Generate a random list of indices\n        indices = random.sample(range(len(matches)), sample_size)\n\n        # Return a random sample of the rows\n        return df.iloc[indices]\n\n    # Otherwise, return all rows with matches\n    return df[matches]", "problem": "Search for matches with a specified regex pattern in a given column of a CSV file and optionally return a random sample of these matches. The random sampling is implemented by generating a random list of integers which are used as indices. The number of generated indices is given by sample_size.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing either all the rows with matches or a random sample of them.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n```", "solution": "import pandas as pd\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n    df = pd.read_csv(csv_file)\n    matches = df[df[column_name].str.contains(pattern, na=False)]\n\n    if sample_size is not None:\n        random.seed(seed)  # Set the seed for reproducibility\n        sample_size = min(sample_size, len(matches))  # Ensure sample size is not greater than the number of matches\n        sampled_indices = random.sample(range(len(matches)), sample_size)  # Randomly select indices\n        matches = matches.iloc[sampled_indices]  # Select rows corresponding to sampled indices\n\n    return matches", "pass": false}
{"task_id": "882", "program": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n\n    pass\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n    \"\"\"\n    Find all matches with a regex pattern in a list of strings in an SQL database.\n    The function loads an sql database and selects all entries from the specified table.\n    Matches are returned in a DataFrame.\n\n    Args:\n        db_file (str): The path to the SQL database file.\n        table_name (str): The name of the table to query.\n        column_name (str): The name of the column to search.\n        pattern (str): The regex pattern to match. Defaults to '\\d+[xX]'.\n\n    Returns:\n        DataFrame: A pandas DataFrame with the matches.\n\n    Raises:\n        ValueError: If db_file does not exist.\n    \"\"\"\n    if not os.path.exists(db_file):\n        raise ValueError(f\"Database file {db_file} does not exist.\")\n\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(f\"SELECT * FROM {table_name} WHERE {column_name} REGEXP '{pattern}'\", conn)\n    conn.close()\n    return df\ndb_file = \"example.db\"\ntable_name = \"example_table\"\ncolumn_name = \"example_column\"\npattern = \"\\d+[xX]\"", "problem": "Find all matches with a regex pattern in a list of strings in an SQL database. The function loads an sql database and selects all entries from the specified table. Matches are returned in a DataFrame.\nThe function should raise the exception for: ValueError: If db_file does not exist.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the matches.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n```", "solution": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n\n    if not os.path.isfile(db_file):\n        raise ValueError('db_file does not exist.')\n\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n\n    if df[column_name].dtype == 'object':  # Check if the column data type is a string\n        matches = df[df[column_name].str.contains(pattern)]\n    else:\n        matches = pd.DataFrame(columns=df.columns)  # Return an empty DataFrame\n\n    return matches", "pass": false}
{"task_id": "883", "program": "import pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n\n    pass\nimport pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n    \"\"\"\n    Determines if a specific subset of data is stationary by filtering rows where column_b bigger than 50 and column_c equal to 900.\n    Data is considered to be stationary if the p_value returned by the Augmented Dickey-Fuller test is smaller than 0.05.\n    If column_a is empty after filtering or if its values are constant, True is returned.\n\n    Args:\n        df (pd.DataFrame): The input data.\n        column_a (str): The name of the column to check for stationarity.\n        column_b (str): The name of the column to filter on.\n        column_c (str): The name of the column to filter on.\n\n    Returns:\n        bool: True if the data in column_a (after filtering based on column_b and column_c) is stationary, False otherwise.\n    \"\"\"\n    # Filter the data based on column_b and column_c\n    filtered_df = df[(df[column_b] > 50) & (df[column_c] == 900)]\n\n    # Check if the filtered data is empty or if its values are constant\n    if filtered_df.empty or filtered_df[column_a].nunique() == 1:\n        return True\n\n    # Perform the Augmented Dickey-Fuller test\n    adf_test = adfuller(filtered_df[column_a])\n\n    # Check if the p-value is smaller than 0.05\n    if adf_test[1] < 0.05:\n        return True\n    else:\n        return False", "problem": "Determines if a specific subset of data is stationary by filtering rows where column_b bigger than 50 and column_c equal to 900. Data is considered to be stationary if the p_value returned by the Augmented Dickey-Fuller test is smaller than 0.05. If column_a is empty after filtering or if its values are constant, True is returned.\nThe function should output with:\n    bool: True if the data in column_a (after filtering based on column_b and column_c) is stationary, False otherwise.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n```", "solution": "import pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n    # Filter rows based on column_b and column_c\n    filtered_df = df[(df[column_b] > 50) & (df[column_c] == 900)]\n\n    if filtered_df[column_a].nunique() <= 1:\n        return True\n\n    # If dataframe is empty after filtering, return False\n    if filtered_df.empty:\n        return True\n\n    # Perform Augmented Dickey-Fuller test\n    adf_result = adfuller(filtered_df[column_a])\n    p_value = adf_result[1]\n    return p_value <= 0.05", "pass": true}
{"task_id": "884", "program": "import pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n\n    pass\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n    \"\"\"\n    Filters a pandas DataFrame based on the values of specific rows, and performs a chi-square independence test on the first two columns.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to filter and test.\n        columns (list): The columns to filter and test.\n        larger (int): The value to filter on the second column.\n        equal (int): The value to filter on the third column.\n\n    Returns:\n        float: The p-value from the chi-square independence test, indicating the statistical significance.\n\n    Raises:\n        ValueError: If there's insufficient data for the test (no rows meeting the criteria).\n        ValueError: If the number of specified columns is not 3.\n        ValueError: If the specified columns are not contained in df.\n    \"\"\"\n    # Check if the number of specified columns is 3\n    if len(columns) != 3:\n        raise ValueError(\"The number of specified columns must be 3.\")\n\n    # Check if the specified columns are contained in df\n    if not all(col in df.columns for col in columns):\n        raise ValueError(\"The specified columns are not contained in df.\")\n\n    # Filter the DataFrame based on the values of the second and third columns\n    df_filtered = df[(df[columns[1]] > larger) & (df[columns[2]] == equal)]\n\n    # Check if there are sufficient rows for the test\n    if len(df_filtered) < 2:\n        raise ValueError(\"Insufficient data for the test.\")\n\n    # Compute the congency table of the first two columns\n    table = pd.crosstab(df_filtered[columns[0]], df_filtered[columns[1]])\n\n    # Perform the chi-square independence test\n    chi2, p_value, _, _ = chi2_contingency(table)\n\n    return p_value\ndf = pd.DataFrame({\n    'test': ['A', 'b', 'b', 'a', 'c', 'd'],\n    'hi': [45, 2, 2, 3, 4, 4],\n    'column3': [50, 50, 50, 50, 50, 50]\n})", "problem": "Filters a pandas DataFrame based on the values of specific rows, and performs a chi-square independence test on the first two columns. The function filters rows based on the following criteria: Keep only rows where: The value of the second column: df['second'] > larger and The value of the third column: df['third'] == equal After filtering a conigency table of the first two columns is computed, which is then used in the chi2 independence test. The p_value of the test is returned. >>> df = pd.DataFrame({ ...     'test': ['A', 'b', 'b', 'a', 'c', 'd'], ...     'hi': [45, 2, 2, 3, 4, 4], ...     'column3': [50, 50, 50, 50, 50, 50, ] ... }) >>> task_func(df, ['test', 'hi', 'column3'], larger=2, equal=50) 0.23810330555354436\nThe function should raise the exception for: ValueError: If there's insufficient data for the test (no rows meeting the criteria). ValueError: If the number of specified columns is not 3. ValueError: If the specified columns are not contained in df.\nThe function should output with:\n    float: The p-value from the chi-square independence test, indicating the statistical significance.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n```", "solution": "import pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n    if len(columns) != 3:\n        raise ValueError(\"Exactly three columns should be specified.\")\n    \n    for column in columns:\n        if column not in df.columns:\n            raise ValueError('The specified columns should exist in the DataFrame.')\n    \n    col_categorical, col_numerical, col_filter = columns\n\n    # Filtering the data based on the specified conditions\n    selected = df[(df[col_numerical] > larger) & (df[col_filter] == equal)][[col_categorical, col_numerical]]\n\n    # Creating a contingency table for the chi-square test\n    contingency_table = pd.crosstab(selected[col_categorical], selected[col_numerical])\n    \n    # Check if the contingency table is empty (no data meeting the criteria)\n    if contingency_table.size == 0:\n        raise ValueError(\"Insufficient data - no matching data for the applied conditions.\")\n    \n    # Performing the chi-square test\n    _, p_value, _, _ = chi2_contingency(contingency_table)\n    \n    return p_value", "pass": true}
{"task_id": "885", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n    # Check if the input DataFrame is empty or contains non-numeric data\n    if df.empty or not df[col_a].dtype.kind == 'f' or not df[col_b].dtype.kind == 'f' or not df[col_c].dtype.kind == 'f':\n        return None\n\n    # Check if the specified columns are contained in the DataFrame\n    if col_a not in df.columns or col_b not in df.columns or col_c not in df.columns:\n        return None\n\n    # Filter rows based on conditions in columns 'B' and 'C'\n    df = df[(df[col_b] > 50) & (df[col_c] == 900)]\n\n    # Perform train-test split\n    X_train, X_test, y_train, y_test = train_test_split(df[col_a], df[col_b], test_size=0.2, random_state=seed)\n\n    # Train a LinearRegression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Generate predictions for the test set\n    y_pred = model.predict(X_test)\n\n    # Return the predicted values and the trained model\n    return y_pred, model\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [10, 80, 80, 80, 80], 'C': [900, 900, 900, 900, 900]})", "problem": "This function filters rows from the input DataFrame 'df' based on conditions in columns 'B' and 'C', then uses linear regression to predict values in column 'B' using data from column 'A'. Specifically, it selects rows where column 'B' values are greater than 50 and column 'C' values equal 900. A train test split of the remaining data is performed, where the test_size = 0.2 and col_a is used as X value and col_b is used as Y values / target. This data is used to train a LinearRegression model. The test split is used to generate predictions for col_b. These predictions are returned as well as the trained model. If df is empty or empty after the filtering, None is returned. If df does contain non numeric data None is returned. If the specified columns are not contained in df, None is returned. >>> df = pd.DataFrame({'A': [1, 2, 3, 4, 5], ...                    'B': [10, 80, 80, 80, 80], ...                    'C': [900, 900, 900, 900, 900]}) >>> predictions, model = task_func(df, seed=12) >>> print(predictions) [80.] >>> print(model) LinearRegression()\nThe function should output with:\n    ndarray: The predicted values for the filtered rows in column 'B', or None if input is invalid.\n    LinearRegression: The trained linear regression model is returned, if\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n    # Validating the input dataframe\n    if df.empty or not all(col in df for col in [col_a, col_b, col_c]):\n        return None  # Invalid input scenario\n    \n    try:\n        # Ensuring the columns contain numeric data\n        df[[col_a, col_b, col_c]] = df[[col_a, col_b, col_c]].apply(pd.to_numeric, errors='raise')\n    except ValueError:\n        return None  # Non-numeric data encountered\n\n    # Filtering the data based on the conditions\n    selected = df[(df[col_b] > 50) & (df[col_c] == 900)][[col_a, col_b]]\n\n    if selected.empty:\n        return None\n    \n    # Preparing the data for linear regression\n    X_train, X_test, y_train, _ = train_test_split(selected[col_a].values.reshape(-1, 1),\n                                                   selected[col_b].values,\n                                                   test_size=0.2,\n                                                   random_state=seed)\n\n    # Applying linear regression\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n\n    return predictions, model", "pass": false}
{"task_id": "886", "program": "import pandas as pd\nfrom collections import Counter\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom collections import Counter\ndef task_func(data):\n    \"\"\"\n    Analyze a dictionary of student data to return a dataframe sorted by name and age in ascending order, the average score per student as a pandas Series, and the most common age as an integer.\n    The function should raise the exception for: ValueError: If the dictionary does not have the required keys.\n    The function should output with:\n        pd.DataFrame, pd.Series, int or None:\n        A dataframe sorted by 'Name' and 'Age' in ascending order.\n        A series representing average scores indexed by student names.\n        An integer representing the most common age or None if no data is available.\n    \"\"\"\n    # Check if the dictionary has the required keys\n    required_keys = ['Name', 'Age', 'Score']\n    if not all(key in data for key in required_keys):\n        raise ValueError(\"The dictionary does not have the required keys.\")\n\n    # Create a dataframe from the dictionary\n    df = pd.DataFrame(data)\n\n    # Sort the dataframe by 'Name' and 'Age' in ascending order\n    df = df.sort_values(['Name', 'Age'])\n\n    # Calculate the average score per student\n    avg_scores = df.groupby('Name')['Score'].mean()\n\n    # Calculate the most common age\n    age_counts = Counter(df['Age'])\n    most_common_age = age_counts.most_common(1)[0][0] if age_counts else None\n\n    return df, avg_scores, most_common_age\ndata = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n        'Age': [25, 29, 23, 27, 25],\n        'Score': [90, 80, 70, 85, 95]}", "problem": "Analyze a dictionary of student data to return a dataframe sorted by name and age in ascending order, the average score per student as a pandas Series, and the most common age as an integer.\nThe function should raise the exception for: ValueError: If the dictionary does not have the required keys.\nThe function should output with:\n    pd.DataFrame, pd.Series, int or None:\n    A dataframe sorted by 'Name' and 'Age' in ascending order.\n    A series representing average scores indexed by student names.\n    An integer representing the most common age or None if no data is available.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(data):\n\n    if not all(key in data for key in ['Name', 'Age', 'Score']):\n        raise ValueError(\"The dictionary must have the keys 'Name', 'Age', 'Score'\")\n\n    # Creating a dataframe and sorting it\n    df = pd.DataFrame(data).sort_values(['Name', 'Age'])\n\n    # Calculating average scores\n    avg_scores = df.groupby('Name')['Score'].mean()\n\n    # Getting the most common age\n    age_counts = Counter(df['Age'])\n    most_common_age = age_counts.most_common(1)[0][0] if age_counts else None\n\n    return df, avg_scores, most_common_age", "pass": true}
{"task_id": "887", "program": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n    # Convert elements in T1 to integers\n    T1 = [int(x) for x in T1]\n\n    # Create a list of column names\n    col_names = [f\"Col_{i+1}\" for i in range(sum(T1))]\n\n    # Create a DataFrame with random numbers\n    df = pd.DataFrame(np.random.randint(0, 100, size=(row_num, sum(T1))), columns=col_names)\n\n    # Set the seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    return df\nT1 = (('1', '12'), ('1', '-12'))", "problem": "Convert elements in 'T1' to integers and create a Pandas DataFrame with random numbers. The number of columns in the DataFrame is determined by the sum of the integers in 'T1', and the number of rows is defined by the 'row_num' parameter. >>> df = task_func(('1', ('1', '3')), row_num=2, seed=32) >>> print(df) Col_1  Col_2  Col_3  Col_4  Col_5 0     87     43      5     54     62 1     88     19     71     89      3 >>> T1 = (('1', '12'), ('1', '-12')) >>> df = task_func(T1, row_num=6, seed=21) >>> print(df) Col_1  Col_2 0     73     79 1     56      4 2     48     35 3     60     98 4     74     72 5     63     44\nThe function should output with:\n    DataFrame: A pandas DataFrame with random numbers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n    np.random.seed(seed)\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_cols = sum(flattened_list)\n\n    data = np.random.randint(0, 100, size=(row_num, total_cols))\n    df = pd.DataFrame(data, columns=[f'Col_{i+1}' for i in range(total_cols)])\n\n    return df", "pass": false}
{"task_id": "888", "program": "import pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n    \"\"\"\n    Merge / Concatenate multiple CSV files from a specified directory into a single Pandas DataFrame.\n    If an empty list of files is passed, an empty DataFrame is returned.\n\n    Parameters\n    ----------\n    data_dir : str\n        The directory containing the CSV files.\n    csv_files : list\n        A list of CSV file names to be merged.\n\n    Returns\n    -------\n    pd.DataFrame\n        A pandas DataFrame with the merged data.\n    \"\"\"\n    if not csv_files:\n        return pd.DataFrame()\n\n    dfs = []\n    for file in csv_files:\n        df = pd.read_csv(os.path.join(data_dir, file))\n        dfs.append(df)\n\n    return pd.concat(dfs, ignore_index=True)", "problem": "Merge / Concatenate multiple CSV files from a specified directory into a single Pandas DataFrame. If an empty list of files is passed, an empty DataFrame is returned.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with the merged data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n    merged_df = pd.DataFrame()\n\n    for file in csv_files:\n        file_path = os.path.join(data_dir, file)\n        df = pd.read_csv(file_path)\n        merged_df = pd.concat([merged_df, df], ignore_index=True)\n\n    return merged_df", "pass": true}
{"task_id": "889", "program": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n\n    pass\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n    \"\"\"\n    Load a CSV file into a pandas DataFrame and replace the NaN values in numeric columns with the mean of the corresponding column.\n    The resulting DataFrame is returned. If an empty csv is passed, an empty DataFrame is returned.\n    The function should raise the exception for: FileNotFoundError: If csv_file does not exist.\n    The function should output with:\n        pd.DataFrame: A pandas DataFrame with the processed data.\n    \"\"\"\n    # Check if the csv file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist in {data_dir}\")\n\n    # Load the csv file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Get the numeric columns\n    numeric_cols = df.select_dtypes(include=np.number).columns\n\n    # Replace the NaN values in the numeric columns with the mean of the column\n    for col in numeric_cols:\n        df[col].fillna(df[col].mean(), inplace=True)\n\n    return df", "problem": "Load a CSV file into a pandas DataFrame and replace the NaN values in numeric columns with the mean of the corresponding column. The resulting DataFrame is returned. If an empty csv is passed, an empty DataFrame is returned.\nThe function should raise the exception for: FileNotFoundError: If csv_file does not exist.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with the processed data.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n```", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n    file_path = os.path.join(data_dir, csv_file)\n    try:\n        df = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return pd.DataFrame()\n\n    for column in df.columns:\n        if np.issubdtype(df[column].dtype, np.number):  # checking for numeric columns\n            df[column].fillna(df[column].mean(), inplace=True)\n\n    return df", "pass": false}
{"task_id": "890", "program": "import os\nimport random\nimport pandas as pd\ndef task_func(data_dir,\n          csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n          seed=None):\n\n    pass\nimport os\nimport random\nimport pandas as pd\ndef task_func(data_dir, csv_files=['file1.csv', 'file2.csv', 'file3.csv'], seed=None):\n    \"\"\"\n    Randomly select one of the provided csv_files and select a certain number of records from the file at random.\n    The selected records are returned in a DataFrame. The name of the selected csv_file is also returned.\n    If the csv_file is empty return an empty DataFrame.\n\n    Args:\n        data_dir (str): The directory where the csv files are located.\n        csv_files (list): A list of csv file names to select from.\n        seed (int): A random seed to use for reproducibility.\n\n    Returns:\n        tuple: A tuple containing two elements:\n            str: The name of the randomly selected file.\n            DataFrame: A pandas DataFrame with the selected rows.\n    \"\"\"\n    # Set the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Get a random csv file from the list\n    csv_file = random.choice(csv_files)\n\n    # Get the full path to the csv file\n    csv_path = os.path.join(data_dir, csv_file)\n\n    # Read the csv file into a pandas DataFrame\n    df = pd.read_csv(csv_path)\n\n    # Select a random subset of rows from the DataFrame\n    num_rows = 10\n    selected_rows = df.sample(n=num_rows)\n\n    # Return the name of the selected csv file and the selected rows\n    return csv_file, selected_rows\ndata_dir = 'path/to/data/directory'\ncsv_files = ['file1.csv', 'file2.csv', 'file3.csv']\nseed = 42", "problem": "Randomly select one of the provided csv_files and select a certain number of records from the file at random. The selected records are returned in a DataFrame. The name of the selected csv_file is also returned. If the csv_file is empty return an empty DataFrame.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    str: The name of the randomly selected file.\n    DataFrame: A pandas DataFrame with the selected rows.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\nimport pandas as pd\ndef task_func(data_dir,\n          csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n          seed=None):\n```", "solution": "import os\nimport random\nimport pandas as pd\ndef task_func(data_dir,\n          csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n          seed=None):\n\n    random.seed(seed)\n\n    file = csv_files[random.randint(0, len(csv_files) - 1)]\n    file_path = os.path.join(data_dir, file)\n\n    try:\n        df = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return file, pd.DataFrame()\n\n    selected_rows = df.sample(n=random.randint(1, len(df)), random_state=seed)\n\n    return file, selected_rows", "pass": false}
{"task_id": "891", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n    # Read the CSV file and create a pandas DataFrame\n    df = pd.read_csv(csv_file_path)\n\n    # Separate the data into training and testing sets\n    X = df.drop(attribute, axis=1)\n    y = df[attribute]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    # Train a linear regression model on the training data\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Predict the values for the testing data\n    predictions = model.predict(X_test)\n\n    return model, predictions\ndf = pd.read_csv(\"data.csv\")\nX = df.drop(\"attribute\", axis=1)\ny = df[\"attribute\"]", "problem": "Train a linear regression model on a dataset and predict the value of a particular attribute. This function reads a CSV file to create a pandas DataFrame, separates the data into training and testing sets, and performs linear regression. It returns the predicted values for the testing set as well as the trained model.\nNote that: The function assumes that the CSV file is correctly formatted and that the specified attribute exists.\nThe function should output with:\n    tuple: A tuple containing:\n    model (LinearRegression): The trained linear regression model.\n    predictions (ndarray): An array of predicted values for the test set.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n    df = pd.read_csv(csv_file_path)\n    X = df.drop(columns=[attribute])\n    y = df[attribute]\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state\n    )\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    return model, predictions", "pass": false}
{"task_id": "892", "program": "import random\nfrom collections import Counter\ndef task_func(strings: list) -> dict:\n\n    pass\nimport random\nfrom collections import Counter\ndef task_func(strings: list) -> dict:\n    \"\"\"\n    Analyzes a given list of strings for the occurrence of a specific pattern and counts the occurrences.\n    The function should output with:\n        dict: A dictionary with results of string analysis showing counts of the pattern.\n    \"\"\"\n    # Initialize an empty dictionary to store the results\n    result = {}\n\n    # Iterate over the list of strings\n    for string in strings:\n        # Check if the string contains the pattern\n        if \"pattern\" in string:\n            # If it does, increment the count in the dictionary\n            result[\"pattern\"] = result.get(\"pattern\", 0) + 1\n\n    # Return the dictionary with the results\n    return result\nstrings = [\"hello\", \"world\", \"pattern\", \"pattern\", \"pattern\"]", "problem": "Analyzes a given list of strings for the occurrence of a specific pattern and counts the occurrences.\nThe function should output with:\n    dict: A dictionary with results of string analysis showing counts of the pattern.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\ndef task_func(strings: list) -> dict:\n```", "solution": "import random\nfrom collections import Counter\ndef task_func(strings: list) -> dict:\n    if not strings:\n        return Counter()\n\n    pattern = '}'\n    random_choices = random.choices(strings, k=10)\n    pattern_counts = Counter([string.count(pattern) for string in random_choices])\n\n    return pattern_counts", "pass": false}
{"task_id": "893", "program": "import re\nfrom datetime import time\ndef task_func(logs: list):\n\n    pass\nimport re\nfrom datetime import time\ndef task_func(logs: list):\n    \"\"\"\n    Analyze the given list of logs for the occurrence of errors and calculate the average time of occurrence of errors.\n    The function should output with:\n        list: A list of times when errors occurred.\n        time: The average time of occurrence of these errors.\n    \"\"\"\n    error_times = []\n    for log in logs:\n        match = re.search(r\"ERROR\", log)\n        if match:\n            error_times.append(time.fromisoformat(log.split(\" \")[0]))\n    if len(error_times) == 0:\n        return None, None\n    return error_times, sum(error_times) / len(error_times)", "problem": "Analyze the given list of logs for the occurrence of errors and calculate the average time of occurrence of errors.\nThe function should output with:\n    list: A list of times when errors occurred.\n    time: The average time of occurrence of these errors.\nYou should write self-contained code starting with:\n```\nimport re\nfrom datetime import time\ndef task_func(logs: list):\n```", "solution": "import re\nfrom datetime import time\ndef task_func(logs: list):\n    \n    error_times = []\n    total_time = 0\n\n    for log in logs:\n        if \"ERROR\" in log:\n            time_match = re.search(r'(\\d{2}):(\\d{2}):\\d{2}', log)\n            if time_match:\n                hour, minute = map(int, time_match.groups())\n                error_times.append(time(hour, minute))\n                total_time += hour * 60 + minute\n\n    if error_times:\n        avg_hour = (total_time // len(error_times)) // 60\n        avg_minute = (total_time // len(error_times)) % 60\n        avg_time = time(avg_hour, avg_minute)\n    else:\n        avg_time = time(0, 0)\n\n    return error_times, avg_time", "pass": false}
{"task_id": "894", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nARRAY_SIZE = 10000\ndef task_func():\n    # Generate random integers between 1 and 100\n    arr = np.random.randint(1, 100, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=50, alpha=0.5, label='Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.axvline(mean, color='red', linestyle='dashed', label='Mean')\n    ax.axvline(mean + std, color='purple', linestyle='dashed', label='Standard Deviation')\n    ax.axvline(mean - std, color='purple', linestyle='dashed')\n    ax.legend()\n\n    return arr, mean, std, fig", "problem": "Create a numeric array of random integers, calculate the mean and standard deviation, and draw a histogram of the distribution.\nNote that: The random integers are generated between 1 and 100. The title of the histogram is \"Histogram of Random Integers\". The x-axis is labeled \"Value\" and the y-axis is labeled \"Frequency\". The mean is plotted as a red dashed line, and the standard deviation is plotted as purple dashed lines.\nThe function should output with:\n    Tuple: A tuple containing the array, mean, standard deviation, and the histogram plot (Axes).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    array = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=1)\n    ax.axvline(mean + std, color='purple', linestyle='dashed', linewidth=1)\n    ax.axvline(mean - std, color='purple', linestyle='dashed', linewidth=1)\n    ax.legend([\"Mean\", \"Standard Deviation\"])\n    plt.show()\n    \n    return array, mean, std, ax", "pass": false}
{"task_id": "895", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nARRAY_SIZE = 10000\ndef task_func():\n    # Generate random integers between 1 and 100\n    arr = np.random.randint(1, 100, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=50, alpha=0.5, label='Random Values')\n    ax.axvline(mean, color='r', linestyle='--', label='Mean')\n    ax.axvline(mean + std, color='purple', linestyle='--', label='Standard Deviation')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.set_title('Histogram of Random Values')\n    ax.legend()\n\n    return arr, mean, std, fig", "problem": "Create a numeric array of random integers, calculate the mean and standard deviation, and draw a histogram of the distribution.\nNote that: The random integers are generated between 1 and 100. The title of the histogram is \"Histogram of Random Values\". The x-axis is labeled \"Val\" and the y-axis is labeled \"Freq\". The mean is plotted as a red dashed line, and the standard deviation is plotted as purple dashed lines.\nThe function should output with:\n    Tuple: A tuple containing the array, mean, standard deviation, and the histogram plot (Axes).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    array = np.random.randint(1, 500, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    return array, mean, std, ax", "pass": false}
{"task_id": "896", "program": "from collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n\n    pass\nfrom collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n    \"\"\"\n    Generate a number of random strings with a specified length from a fixed set of letters ('a', 'b', 'c', 'd', 'e'), and analyze the frequency of each letter in the generated strings.\n\n    Args:\n        length (int): The length of each generated string.\n        count (int): The number of strings to generate.\n        seed (int, optional): The random seed. Defaults to 0.\n\n    Returns:\n        Counter: A collections.Counter object containing the frequency of each letter in the generated strings.\n    \"\"\"\n    random.seed(seed)\n    letters = 'abcde'\n    strings = [\n        ''.join(random.choice(letters) for _ in range(length))\n        for _ in range(count)\n    ]\n    counter = Counter(itertools.chain(*strings))\n    return counter", "problem": "Generate a number of random strings with a specified length from a fixed set of letters ('a', 'b', 'c', 'd', 'e'), and analyze the frequency of each letter in the generated strings.\nThe function should output with:\n    Counter: A collections.Counter object containing the frequency of each letter in the generated strings.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n```", "solution": "from collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n    random.seed(seed)\n    strings = [''.join(random.choices(['a', 'b', 'c', 'd', 'e'], k=length)) for _ in range(count)]\n    letter_frequency = Counter(itertools.chain(*strings))\n    \n    return letter_frequency", "pass": false}
{"task_id": "897", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\ndef task_func(rolls, seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nNUMBERS = list(range(1, 7))\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate a number of dice rolls, calculate the frequency of each result, and return both the frequency array and a histogram of the results.\n\n    Parameters\n    ----------\n    rolls : int\n        Number of dice rolls to simulate.\n    seed : int, optional\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    tuple\n        A tuple containing:\n        np.array\n            A numpy array with the frequency of each outcome.\n        matplotlib.Axes\n            Axes object representing the histogram.\n    \"\"\"\n    # Set random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize frequency array\n    freq = np.zeros(len(NUMBERS))\n\n    # Simulate rolls\n    for _ in range(rolls):\n        outcome = random.choice(NUMBERS)\n        freq[outcome - 1] += 1\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.bar(NUMBERS, freq)\n    ax.set_title(\"Histogram of Dice Rolls\")\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return freq, ax\nrolls = 1000\nseed = 123", "problem": "Simulate a number of dice rolls, calculate the frequency of each result, and return both the frequency array and a histogram of the results.\nNote that: The dice rolls have 6 possible outcomes. The title of the histogram is \"Histogram of Dice Rolls\". The x-axis is labeled \"Dice Value\" and the y-axis is labeled \"Frequency\".\nThe function should output with:\n    tuple: A tuple containing:\n    np.array: A numpy array with the frequency of each outcome.\n    matplotlib.Axes: Axes object representing the histogram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\ndef task_func(rolls, seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\ndef task_func(rolls, seed=None):\n    if seed is not None:\n        random.seed(seed)\n        \n    outcomes = [random.choice(NUMBERS) for _ in range(rolls)]\n    frequencies = np.bincount(outcomes, minlength=7)[1:]  # Excluding 0 as dice starts from 1\n\n    # Creating histogram\n    fig, ax = plt.subplots()\n    ax.hist(outcomes, bins=np.arange(1, 7+1.5)-0.5, edgecolor='black')\n    ax.set_title('Histogram of Dice Rolls')\n    ax.set_xlabel('Dice Value')\n    ax.set_ylabel('Frequency')\n\n    return frequencies, ax", "pass": true}
{"task_id": "898", "program": "from collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n\n    pass\nfrom collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n    random.seed(seed)\n    pairs = [random.choice(LETTERS) + random.choice(LETTERS) for _ in range(count)]\n    counter = Counter(pairs)\n    return counter", "problem": "Generate a specific number of random letter pairs, each from a predefined list, and analyze the frequency of each pair.\nThe function should output with:\n    Counter: A Counter object representing the frequency of each generated letter pair.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n```", "solution": "from collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n    random.seed(seed)\n\n    pairs = [tuple(random.choices(LETTERS, k=2)) for _ in range(count)]\n    pair_frequency = Counter(pairs)\n\n    return pair_frequency", "pass": false}
{"task_id": "899", "program": "import numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n\n    pass\nimport numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n    \"\"\"\n    Generates a random walk of a specified length.\n\n    A random walk is a path that consists of a series of random steps on some mathematical space. In this case, the steps are either +1 or -1, chosen with equal probability.\n\n    The function should raise the exception for:\n        ValueError: If `length` is negative.\n\n    The function should output with:\n        np.array: A numpy array representing the positions of the walk at each step. Starts at 0.\n\n    Args:\n        length (int): The length of the random walk.\n        seed (int): The random seed.\n\n    Returns:\n        np.array: A numpy array representing the positions of the walk at each step. Starts at 0.\n    \"\"\"\n    if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n\n    random.seed(seed)\n    walk = np.zeros(length)\n\n    for i in range(length):\n        step = random.choice([1, -1])\n        walk[i] = walk[i-1] + step\n\n    return walk", "problem": "Generates a random walk of a specified length. A random walk is a path that consists of a series of random steps on some mathematical space. In this case, the steps are either +1 or -1, chosen with equal probability.\nThe function should raise the exception for: ValueError: If `length` is negative.\nThe function should output with:\n    np.array: A numpy array representing the positions of the walk at each step. Starts at 0.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n```", "solution": "import numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n    if length < 0:\n        raise ValueError(\"length must be a non-negative integer\")\n    random.seed(seed)\n    steps = [1 if random.random() > 0.5 else -1 for _ in range(length)]\n    walk = np.cumsum([0] + steps)  # Starts at 0\n    return walk", "pass": false}
{"task_id": "900", "program": "import pandas as pd\nimport numpy as np\ndef task_func(d):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(d):\n    if not isinstance(d, list):\n        raise ValueError(\"Input is not a list of dictionaries.\")\n    df = pd.DataFrame(d)\n    return {\n        \"x\": {\"mean\": df[\"x\"].mean(), \"sum\": df[\"x\"].sum(), \"max\": df[\"x\"].max(), \"min\": df[\"x\"].min(), \"std\": df[\"x\"].std()},\n        \"y\": {\"mean\": df[\"y\"].mean(), \"sum\": df[\"y\"].sum(), \"max\": df[\"y\"].max(), \"min\": df[\"y\"].min(), \"std\": df[\"y\"].std()},\n        \"z\": {\"mean\": df[\"z\"].mean(), \"sum\": df[\"z\"].sum(), \"max\": df[\"z\"].max(), \"min\": df[\"z\"].min(), \"std\": df[\"z\"].std()}\n    }\nd = [{\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 4, \"y\": 5, \"z\": 6}, {\"x\": 7, \"y\": 8, \"z\": 9}]", "problem": "Calculate mean, sum, max, min and standard deviation for the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d.\"\nThe function should raise the exception for: ValueError: If input is not a list of dictionaries.\nThe function should output with:\n    dict: A dictionary with keys as 'x', 'y', and 'z' and values as dictionaries of statistics.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(d):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(d):\n    if not isinstance(d, list) or any(not isinstance(item, dict) for item in d):\n        raise ValueError(\"Input must be a list of dictionaries.\")\n    \n    if not d:\n        return {key: None for key in ['x', 'y', 'z']}\n\n    df = pd.DataFrame(d).fillna(0)  # Replace missing values with 0 to allow computations\n    stats = {}\n\n    for key in ['x', 'y', 'z']:\n        if key in df.columns:\n            stats[key] = {\n                'mean': np.mean(df[key]),\n                'sum': np.sum(df[key]),\n                'max': np.max(df[key]),\n                'min': np.min(df[key]),\n                'std': np.std(df[key], ddof=0)  # Population standard deviation\n            }\n        else:\n            stats[key] = None\n\n    return stats", "pass": false}
{"task_id": "901", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(d):\n    # Check if input list is empty\n    if not d:\n        return pd.DataFrame()\n\n    # Create a DataFrame from the input list\n    df = pd.DataFrame(d)\n\n    # Scale the values with the keys \"x,\" \"y,\" and \"z\" using MinMaxScaler\n    scaler = MinMaxScaler()\n    df[[\"x\", \"y\", \"z\"]] = scaler.fit_transform(df[[\"x\", \"y\", \"z\"]])\n\n    # Return the scaled DataFrame\n    return df", "problem": "Scale all values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d\" with MinMaxScaler. >>> data = [{'x': -1, 'y': 0, 'z': 5}, {'x': 3, 'y': -15, 'z': 0}, {'x': 0, 'y': 1, 'z': -7}] >>> print(task_func(data)) x       y         z 0  0.00  0.9375  1.000000 1  1.00  0.0000  0.583333 2  0.25  1.0000  0.000000\nThe function should output with:\n    DataFrame: A pandas DataFrame with scaled values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n    if not d:  # Check if the input list is empty\n        return pd.DataFrame(columns=['x', 'y', 'z'])  # Return an empty DataFrame with specified columns\n    \n    df = pd.DataFrame(d)\n    scaler = MinMaxScaler()\n    scaled_df = pd.DataFrame(scaler.fit_transform(df[['x', 'y', 'z']]), columns=['x', 'y', 'z'])\n\n    return scaled_df", "pass": false}
{"task_id": "902", "program": "import pandas as pd\nfrom collections import Counter\ndef task_func(d):\n\n    pass\nimport pandas as pd\nfrom collections import Counter\ndef task_func(d):\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the list of dictionaries\n    for item in d:\n        # Check if the key is in the dictionary\n        if \"x\" in item:\n            # If the key is in the dictionary, increment the count\n            counts[\"x\"] = counts.get(\"x\", 0) + 1\n        if \"y\" in item:\n            counts[\"y\"] = counts.get(\"y\", 0) + 1\n        if \"z\" in item:\n            counts[\"z\"] = counts.get(\"z\", 0) + 1\n\n    # Return the counts as a dictionary with Counter objects\n    return {key: Counter(counts[key]) for key in counts}\nd = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"z\": 4}, {\"y\": 5, \"z\": 6}]", "problem": "Count the occurrence of values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d.\"\nThe function should output with:\n    dict: A dictionary with keys as 'x', 'y', and 'z' and values as Counter objects.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(d):\n```", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(d):\n    df = pd.DataFrame(d)\n    counts = {}\n\n    for key in ['x', 'y', 'z']:\n        if key in df.columns:\n            counts[key] = Counter(df[key].dropna().tolist())\n        else:\n            counts[key] = Counter()\n\n    return counts", "pass": false}
{"task_id": "903", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(d)\n\n    # Select the columns to use for the regression\n    X = df[['x', 'z']]\n    y = df[target]\n\n    # Fit the linear regression model\n    model = LinearRegression().fit(X, y)\n\n    # Return the model\n    return model\ndata = [{'x': 4, 'y': 20, 'z': 10}, {'x': 5, 'y': 25, 'z': 15}, {'x': 6, 'y': 5, 'z': 20}]", "problem": "Perform linear regression to \"x,\" \"y,\" against \"z\" from a list of dictionaries \"d.\" >>> data = [{'x': 4, 'y': 20, 'z': 10}, {'x': 5, 'y': 25, 'z': 15}, {'x': 6, 'y': 5, 'z': 20}] >>> model = task_func(data, target='y') >>> isinstance(model, LinearRegression) True\nThe function should output with:\n    LinearRegression: A LinearRegression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n    df = pd.DataFrame(d)\n    predictors = [k for k in df.columns if k != target]\n\n    X = df[predictors]\n    y = df[target]\n\n    model = LinearRegression().fit(X, y)\n\n    return model", "pass": false}
{"task_id": "904", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n    \"\"\"\n    Plot values from a list of dictionaries based on specified keys and return the plot as a Matplotlib Axes object.\n\n    Parameters\n    ----------\n    d : list of dictionaries\n        The list of dictionaries to plot.\n    keys : list of str, optional\n        The keys to plot. The default is ['x', 'y', 'z'].\n\n    Returns\n    -------\n    ax : Matplotlib Axes object\n        The plot showing the values of specified keys from the input list of dictionaries.\n    \"\"\"\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(d)\n\n    # Plot the values of the specified keys\n    ax = df[keys].plot()\n\n    return ax\ndata = [{'x': 1, 'y': 2, 'z': 3}, {'x': 4, 'y': 5, 'z': 6}, {'x': 7, 'y': 8, 'z': 9}]", "problem": "Plot values from a list of dictionaries based on specified keys and return the plot as a Matplotlib Axes object. >>> ax = task_func(data, keys=['x', 'y']) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\nThe function should output with:\n    Matplotlib Axes object: The plot showing the values of specified keys from the input list of dictionaries.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(d)\n\n    # Initialize a plot\n    fig, ax = plt.subplots()\n    \n    # Plot the values for the specified keys\n    plotted_keys = []\n    for key in keys:\n        if key in df.columns:\n            ax.plot(df[key], label=key)\n            plotted_keys.append(key)\n    \n    # Add a legend if there are any lines plotted\n    if plotted_keys:\n        ax.legend()\n    \n    # Return the Axes object\n    return ax", "pass": false}
{"task_id": "905", "program": "import os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n\n    pass\nimport os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n    data = {}\n    for file_path in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n        with open(file_path, 'r') as f:\n            reader = csv.reader(f)\n            data[os.path.splitext(os.path.basename(file_path))[0]] = list(reader)\n    return data", "problem": "Reads all files with a specified extension in a given directory and returns their data in a dictionary. - Reads all files with the specified extension in the given directory. - Uses the filename without the extension as a key in the output dictionary. - The value for each key is a list of rows from the file, where each row is represented as a list of values. >>> data = task_func('/home/user/data', '.txt') >>> print(data) {}\nThe function should output with:\n    Returns a dictionary where each key is the filename (without extension) and the value is a list of rows from the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n```", "solution": "import os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n    data = {}\n\n    for file in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n        filename = os.path.splitext(os.path.basename(file))[0]\n        with open(file, 'r') as f:\n            reader = csv.reader(f)\n            data[filename] = list(reader)\n\n    return data", "pass": true}
{"task_id": "906", "program": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n\n    pass\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a target directory.\n    The function identifies processed files by the '_processed' suffix in the filename.\n\n    Args:\n        source_dir (str): The path to the source directory.\n        target_dir (str): The path to the target directory.\n        archive_name (str): The name of the archive file.\n\n    Returns:\n        str: The path to the created archive.\n    \"\"\"\n    # Create a regular expression to match files with the '_processed' suffix\n    processed_regex = re.compile(r'_processed$')\n\n    # Create a list of all files in the source directory\n    files = os.listdir(source_dir)\n\n    # Filter the list to only include files with the '_processed' suffix\n    processed_files = [file for file in files if processed_regex.search(file)]\n\n    # Create a zip file in the target directory\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w') as archive:\n        # Add each processed file to the zip file\n        for file in processed_files:\n            file_path = os.path.join(source_dir, file)\n            archive.write(file_path, arcname=file)\n\n    return archive_path", "problem": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```", "solution": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \n    # Create directories if they don't exist\n    os.makedirs(source_dir, exist_ok=True)\n    os.makedirs(target_dir, exist_ok=True)\n    \n    archive_path = os.path.join(target_dir, archive_name)\n    \n    with zipfile.ZipFile(archive_path, 'w') as archive:\n        for file in os.listdir(source_dir):\n            if re.search(r'_processed$', os.path.splitext(file)[0]):\n                archive.write(os.path.join(source_dir, file), arcname=file)\n                shutil.move(os.path.join(source_dir, file), target_dir)\n                \n    return archive_path", "pass": false}
{"task_id": "907", "program": "import os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n\n    pass\nimport os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n    \"\"\"\n    Renames all files in a directory that match a particular pattern with a given replacement string.\n    The function should output with:\n        Returns a boolean value. True if the operation was successful, otherwise False.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.isdir(directory):\n        return False\n\n    # Get a list of all files in the directory\n    files = os.listdir(directory)\n\n    # Create a regular expression object\n    regex = re.compile(pattern)\n\n    # Iterate over the files and rename them\n    for file in files:\n        if regex.match(file):\n            new_name = regex.sub(replacement, file)\n            os.rename(os.path.join(directory, file), os.path.join(directory, new_name))\n\n    return True", "problem": "Renames all files in a directory that match a particular pattern with a given replacement string.\nThe function should output with:\n    Returns a boolean value. True if the operation was successful, otherwise False.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n```", "solution": "import os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n    try:\n        for file in os.listdir(directory):\n            if re.search(pattern, file):\n                new_filename = re.sub(pattern, replacement, file)\n                os.rename(os.path.join(directory, file), os.path.join(directory, new_filename))\n        return True\n    except Exception as e:\n        return False", "pass": false}
{"task_id": "908", "program": "import os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n\n    pass\nimport os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n    \"\"\"\n    Searches a directory for CSV files matching a given regular expression pattern, reads sales data from these files, and plots the sales data with month on the x-axis and sales on the y-axis.\n    :param directory: The directory to search for CSV files.\n    :param pattern: The regular expression pattern to match against the file names.\n    :return: A list of matplotlib.axes._axes.Axes objects, each representing a plot of sales data from a matched CSV file.\n    \"\"\"\n    # Find all CSV files in the directory that match the pattern\n    csv_files = [os.path.join(directory, f) for f in os.listdir(directory) if re.match(pattern, f)]\n\n    # Read the sales data from each CSV file\n    sales_data = []\n    for csv_file in csv_files:\n        sales_data.append(pd.read_csv(csv_file))\n\n    # Plot the sales data for each CSV file\n    plots = []\n    for data in sales_data:\n        ax = plt.plot(data['Month'], data['Sales'])\n        plots.append(ax)\n\n    return plots", "problem": "Searches a directory for CSV files matching a given regular expression pattern, reads sales data from these files, and plots the sales data with month on the x-axis and sales on the y-axis.\nNote that: Each CSV file contains two columns: 'Month' and 'Sales'.\nThe function should output with:\n    A list of matplotlib.axes._axes.Axes objects, each representing a plot of sales data from a matched CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n```", "solution": "import os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n\n    plots = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            df = pd.read_csv(os.path.join(directory, file))\n            ax = df.plot(x='Month', y='Sales', title=file)\n            plots.append(ax)\n    plt.show()\n    return plots", "pass": false}
{"task_id": "909", "program": "import pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n\n    pass\nimport pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n    \"\"\"\n    Create a Pandas DataFrame by associating each element from a list of letters to a category from a list of categories. The categories are randomly shuffled.\n    The function should output with:\n        DataFrame: A Pandas DataFrame with two columns: 'Letter' and 'Category'. Each letter is randomly associated with a category.\n    \"\"\"\n    # Create a list of tuples with each letter and category\n    letter_category_pairs = list(itertools.product(letters, categories))\n\n    # Shuffle the list of tuples\n    shuffle(letter_category_pairs)\n\n    # Create a Pandas DataFrame with the shuffled list of tuples\n    df = pd.DataFrame(letter_category_pairs, columns=['Letter', 'Category'])\n\n    return df\nletters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\ncategories = ['Category 1', 'Category 2', 'Category 3']", "problem": "Create a Pandas DataFrame by associating each element from a list of letters to a category from a list of categories. The categories are randomly shuffled.\nThe function should output with:\n    DataFrame: A Pandas DataFrame with two columns: 'Letter' and 'Category'. Each letter is randomly associated with a category.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n```", "solution": "import pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n    \n    flattened_list = list(itertools.chain(*[letters for _ in range(len(categories))]))\n    expanded_categories = list(itertools.chain(*[[category] * len(letters) for category in categories]))\n    shuffle(expanded_categories)\n\n    df = pd.DataFrame({'Letter': flattened_list, 'Category': expanded_categories})\n\n    return df", "pass": true}
{"task_id": "910", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n    \"\"\"\n    Create a bar chart to visualize the frequency of each letter in a flattened list formed by multiple repetitions of the original list. Each repetition of the list is associated with a different color in the chart.\n    :param letters: A list of letters\n    :param repetitions: A list of integers representing the number of repetitions of each letter\n    :param colors: A list of colors corresponding to each repetition of the list\n    :return: A Matplotlib Axes object representing the created bar chart\n    \"\"\"\n    # Check if the input lists are empty\n    if not letters or not repetitions or not colors:\n        raise ValueError(\"The input lists cannot be empty\")\n\n    # Check if the lengths of the input lists match\n    if len(letters) != len(repetitions) or len(repetitions) != len(colors):\n        raise ValueError(\"The lengths of the input lists do not match\")\n\n    # Flatten the list of letters and count the frequency of each letter\n    flattened_letters = [item for sublist in letters for item in sublist]\n    letter_counts = {letter: flattened_letters.count(letter) for letter in set(flattened_letters)}\n\n    # Create a bar chart to visualize the frequency of each letter\n    fig, ax = plt.subplots()\n    ax.bar(letter_counts.keys(), letter_counts.values(), color=colors)\n    ax.set_xlabel(\"Letters\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Frequency of Letters\")\n\n    return ax\nletters = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nrepetitions = [3, 2, 1]\ncolors = ['red', 'blue', 'green']", "problem": "Create a bar chart to visualize the frequency of each letter in a flattened list formed by multiple repetitions of the original list. Each repetition of the list is associated with a different color in the chart.\nNote that: Generate a bar chart for the frequency of letters, where each letter's frequency is determined by its number of repetitions. Each letter's bar in the chart is colored according to the specified color. The length of the list `colors` should match the number of repetitions of `letters`. The lists 'letters' and 'colors' cannot be empty.\nThe function should raise the exception for: ValueError: If the lengths of the input lists do not match or if any list is empty.\nThe function should output with:\n    Returns the Matplotlib Axes object representing the created bar chart, with the x-axis labeled 'Letters', y-axis labeled 'Frequency', and title 'Frequency of Letters'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n    if len(letters) != len(repetitions) or len(letters) != len(colors) or len(letters) == 0:\n        raise ValueError(\"All lists must be the same length and non-empty.\")\n        \n    # Count the frequency of each letter based on repetitions\n    counts = np.array(repetitions)\n    \n    # Create the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(letters, counts, color=colors)\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Letters')\n    \n    return ax", "pass": false}
{"task_id": "911", "program": "from functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n\n    pass\nfrom functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n    # Create a dictionary to map each uppercase letter to its corresponding number\n    letter_to_num = {letter: i for i, letter in enumerate(string.ascii_uppercase, 1)}\n\n    # Use reduce to calculate the product of the numbers corresponding to the input letters\n    product = reduce(operator.mul, (letter_to_num[letter] for letter in letters))\n\n    return product", "problem": "Calculate the product of the corresponding numbers for a list of uppercase letters, where \\\"A\\\" corresponds to 1, \\\"B\\\" to 2, etc. >>> task_func([\\\"A\\\", \\\"E\\\", \\\"I\\\"]) 45\nNote that: The function uses a predefined dictionary to map each uppercase letter to its corresponding number.\nThe function should output with:\n    int: The product of the numbers corresponding to the input letters.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n```", "solution": "from functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n    # Creating a dictionary to map each letter to its corresponding number\n    letter_to_number = {letter: i+1 for i, letter in enumerate(string.ascii_uppercase)}\n    \n    # Convert the letters to numbers\n    numbers = [letter_to_number[letter] for letter in letters]\n    \n    # Calculate the product using functools.reduce and operator.mul\n    product = reduce(operator.mul, numbers, 1)\n    \n    return product", "pass": true}
{"task_id": "912", "program": "from collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n\n    pass\nfrom collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n    \"\"\"\n    Count the frequency of each letter in a list after repeating it a given number of times.\n    The function should output with:\n        Returns a dictionary where the keys are the letters and the values are their frequencies.\n    \"\"\"\n    # Repeat each letter in the list the given number of times\n    repeated_letters = [letter for letter in itertools.chain.from_iterable(itertools.repeat(letter, repetitions) for letter in letters)]\n\n    # Count the frequency of each letter\n    letter_counts = Counter(repeated_letters)\n\n    return letter_counts\nletters = ['a', 'b', 'c', 'd', 'e']\nrepetitions = 3", "problem": "Count the frequency of each letter in a list after repeating it a given number of times.\nThe function should output with:\n    Returns a dictionary where the keys are the letters and the values are their frequencies.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n```", "solution": "from collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n    # Create a flattened list by repeating the original list\n    flattened_list = list(itertools.chain(*[letters for _ in range(repetitions)]))\n    \n    # Count the occurrences of each letter in the flattened list\n    counts = dict(Counter(flattened_list))\n    \n    return counts", "pass": true}
{"task_id": "913", "program": "from typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n\n    pass\nfrom typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n    \"\"\"\n    Calculates the mode(s), their count(s), and the fast fourier transform of the data after repeating it a specified number of times.\n    :param data: A list of elements that can be repeated a specified number of times.\n    :param repetitions: The number of times to repeat the data.\n    :return: A dictionary with two keys:\n        'mode': a numpy array of the mode(s), sorted in ascending order.\n        'count': a numpy array of the count(s) of the mode(s).\n    \"\"\"\n    if not data or repetitions <= 0:\n        return {}\n\n    # Repeat the data\n    repeated_data = np.repeat(data, repetitions)\n\n    # Calculate the mode(s) and their count(s)\n    mode, count = np.unique(repeated_data, return_counts=True)\n\n    # Calculate the fast fourier transform of the repeated data\n    fft = scipy.fft.fft(repeated_data)\n\n    # Return the results\n    return {'mode': mode, 'count': count, 'fft': fft}\ndata = [1, 2, 3, 4, 5]\nrepetitions = 3", "problem": "Calculates the mode(s), their count(s), and the fast fourier transform of the data after repeating it a specified number of times. in a list of elements that can be repeated a specified number of times.\nNote that: If the data is empty or the number of repetitions is less than or equal to 0, the function will return empty arrays.\nThe function should output with:\n    dict: A dictionary with two keys:\n    'mode': a numpy array of the mode(s), sorted in ascending order.\n    'count': a numpy array of the count(s) of the mode(s).\nYou should write self-contained code starting with:\n```\nfrom typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n```", "solution": "from typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n    \n    def calculate_mode(data):\n        # Use a dictionary to count occurrences, considering both value and type\n        counts = {}\n        for item in data:\n            key = (item, type(item))  # Distinguish between types\n            counts[key] = counts.get(key, 0) + 1\n\n        # Find the maximum count and corresponding values\n        max_count = max(counts.values())\n        mode_items = [value for (value, value_type), count in counts.items() if count == max_count]\n\n        return mode_items, [max_count] * len(mode_items)\n    \n    if not data or repetitions <= 0:  # Handle empty data or no repetitions\n        return {'mode': np.array([], dtype='object'), 'count': np.array([], dtype=int), 'fft': np.array([])}\n\n    # Repeat the data\n    repeated_data = data * repetitions\n\n    # Calculate mode\n    mode, count = calculate_mode(repeated_data)\n    # using scipy.stats to calculate fft\n    return {'mode': np.sort(mode), 'count': count, 'fft': scipy.fft.fft(data)}", "pass": false}
{"task_id": "914", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Extract the date and closing price columns\n    date = df['Date']\n    closing_price = df['Close']\n\n    # Convert the date column to a datetime format\n    date = pd.to_datetime(date)\n\n    # Create a new column with the time step\n    time_step = 24*60*60\n    df['Time'] = date.apply(lambda x: x.timestamp() + time_step)\n\n    # Create a new dataframe with the predicted closing prices\n    predicted_prices = []\n    for i in range(7):\n        # Fit the linear regression model\n        model = LinearRegression().fit(date, closing_price)\n\n        # Predict the closing price for the next day\n        predicted_price = model.predict(df['Time'][i])\n        predicted_prices.append(predicted_price)\n\n    # Create a new dataframe with the predicted closing prices\n    predicted_df = pd.DataFrame({'Date': df['Time'], 'Close': predicted_prices})\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(date, closing_price, label='Actual Closing Price')\n    ax.plot(predicted_df['Date'], predicted_df['Close'], label='Predicted Closing Price')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n\n    return (predicted_prices, ax)", "problem": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Convert date to timestamp\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].map(pd.Timestamp.timestamp)\n    \n    # Prepare data\n    X = df['date'].values.reshape(-1, 1)\n    y = df['closing_price'].values\n    \n    # Fit model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict future prices\n    future_dates = np.array([df['date'].max() + i*24*60*60 for i in range(1, 8)]).reshape(-1, 1)\n    pred_prices = model.predict(future_dates)\n    \n    # Plot\n    fig, ax = plt.subplots()\n    ax.scatter(df['date'], df['closing_price'], color='black')\n    ax.plot(future_dates, pred_prices, color='blue', linewidth=3)\n    \n    return pred_prices.tolist(), ax", "pass": false}
{"task_id": "915", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies and plots outliers in the 'closing_price' column of a given DataFrame using the Z-Score method.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to analyze.\n        z_threshold (float, optional): The Z-Score threshold for identifying outliers. Defaults to 2.\n\n    Returns:\n        tuple: A tuple containing the following elements:\n            pandas.DataFrame: A DataFrame containing the outliers in the 'closing_price' column.\n            matplotlib.axes._axes.Axes: The plot object displaying the outliers, if x-axis label 'Index', y-axis label 'Closing Price', and title 'Outliers in Closing Prices'.\n    \"\"\"\n    # Calculate the Z-Scores for each value in the 'closing_price' column\n    z_scores = zscore(df['closing_price'])\n\n    # Identify outliers using the Z-Score threshold\n    outliers = df[np.abs(z_scores) > z_threshold]\n\n    # Plot the outliers\n    fig, ax = plt.subplots()\n    ax.plot(outliers.index, outliers['closing_price'], 'ro')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n\n    return outliers, ax\ndf = pd.DataFrame({'closing_price': [10, 20, 30, 40, 50, 100]})", "problem": "Identifies and plots outliers in the 'closing_price' column of a given DataFrame using the Z-Score method. Constants: - Z-Score threshold for identifying outliers is customizable via the 'z_threshold' parameter. >>> df2 = pd.DataFrame({ ...     'closing_price': [10, 20, 30, 40, 50, 100] ... }) >>> outliers2, plot2 = task_func(df2, z_threshold=1.5)\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    pandas.DataFrame: A DataFrame containing the outliers in the 'closing_price' column.\n    matplotlib.axes._axes.Axes: The plot object displaying the outliers, if x-axis label 'Index', y-axis label 'Closing Price', and title 'Outliers in Closing Prices'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n    # Calculate Z-Scores for the 'closing_price' column\n    df['Z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on Z-Score threshold\n    outliers = df[np.abs(df['Z_score']) > z_threshold]\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(df['closing_price'], color='blue', label='Normal')\n    ax.plot(outliers['closing_price'], linestyle='none', marker='X', color='red', markersize=12, label='Outlier')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend(loc='best')\n    \n    return outliers, ax", "pass": false}
{"task_id": "916", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize the distribution of stock closing prices using both a box plot and a histogram within a single figure.\n    This function is designed to help understand the spread, central tendency, and the distribution shape of stock closing prices.\n    The tile of the box plot is set to 'Box Plot of Closing Prices' and the title of the histogram is set to 'Histogram of Closing Prices'.\n    The function should output with:\n        tuple: A tuple containing two matplotlib.axes._axes.Axes objects: the first for the boxplot\n        and the second for the histogram.\n    \"\"\"\n    # Create a figure with two subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Create a box plot of the closing prices\n    sns.boxplot(x=df['Date'], y=df['Close'], ax=ax1)\n    ax1.set_title('Box Plot of Closing Prices')\n\n    # Create a histogram of the closing prices\n    sns.histplot(x=df['Close'], ax=ax2)\n    ax2.set_title('Histogram of Closing Prices')\n\n    # Return the two axes objects\n    return ax1, ax2", "problem": "Visualize the distribution of stock closing prices using both a box plot and a histogram within a single figure. This function is designed to help understand the spread, central tendency, and the distribution shape of stock closing prices.\nNote that: The tile of the box plot is set to 'Box Plot of Closing Prices' and the title of the histogram is set to 'Histogram of Closing Prices'.\nThe function should output with:\n    tuple: A tuple containing two matplotlib.axes._axes.Axes objects: the first for the boxplot\n    and the second for the histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n    \n    boxplot_ax = sns.boxplot(x=df['closing_price'], ax=axes[0])\n    boxplot_ax.set_title('Box Plot of Closing Prices')\n    \n    histplot_ax = sns.histplot(df['closing_price'], kde=True, ax=axes[1])\n    histplot_ax.set_title('Histogram of Closing Prices')\n    \n    plt.tight_layout()\n    plt.close(fig)  # Prevent automatic figure display within Jupyter notebooks or interactive environments.\n    \n    return boxplot_ax, histplot_ax", "pass": false}
{"task_id": "917", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\n    The function should output with:\n        Tuple[List[float], Axes]: A tuple containing:\n        A list with forecasted prices for the next 7 days.\n        A matplotlib Axes object containing the subplot.\n    \"\"\"\n    # Extract the share closing prices from the dataframe\n    prices = df[\"Close\"]\n\n    # Fit an ARIMA model to the share closing prices\n    model = ARIMA(prices, order=(1, 1, 1))\n    model_fit = model.fit()\n\n    # Make forecasts for the next 7 days\n    forecasts = model_fit.forecast(steps=7)\n\n    # Plot the forecasts\n    fig, ax = plt.subplots()\n    ax.plot(prices, label=\"Actual\")\n    ax.plot(forecasts, label=\"Forecast\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Share Price\")\n    ax.legend()\n\n    return forecasts, ax", "problem": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Creating the ARIMA model\n    model = ARIMA(df['closing_price'], order=(5, 1, 0))\n    model_fit = model.fit()\n    \n    # Forecasting the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    # Plotting the forecast\n    fig, ax = plt.subplots()\n    ax.plot(df['date'], df['closing_price'], label='Historical Closing Prices')\n    forecast_dates = pd.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=7)\n    ax.plot(forecast_dates, forecast, label='Forecasted Closing Prices')\n    ax.legend()\n    \n    return forecast.tolist(), ax", "pass": false}
{"task_id": "918", "program": "import pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n\n    pass\nimport pandas as pd\nimport re\ndef task_func(data, mapping):\n    # Create a regular expression to match acronyms\n    pattern = re.compile('|'.join(mapping.keys()))\n\n    # Create a function to replace acronyms with their full words\n    def replace_acronyms(match):\n        return mapping[match.group()]\n\n    # Apply the function to the DataFrame\n    data = data.applymap(lambda x: pattern.sub(replace_acronyms, x))\n\n    return data\ndata = pd.DataFrame({'Name': ['John Doe', 'Jane Doe'], 'Age': [25, 30], 'Occupation': ['Software Engineer', 'Data Scientist']})\nmapping = {'SE': 'Software Engineer', 'DS': 'Data Scientist'}", "problem": "Replace all acronyms in a DataFrame with their full words according to a provided dictionary.\nThe function should output with:\n    pd.DataFrame: A DataFrame where all acronyms in string cells have been replaced with their full words.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n```", "solution": "import pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n    df = pd.DataFrame(data)\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    \n    def replace_match(match):\n        return mapping.get(match.group(0), match.group(0))\n\n    df = df.applymap(lambda x: pattern.sub(replace_match, x) if isinstance(x, str) else x)\n\n    return df", "pass": false}
{"task_id": "919", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n    \"\"\"\n    Draw and return a bar chart that shows the distribution of categories in a specific column of a dictionary.\n    The categories are defined by the constant CATEGORIES, which is a list containing ['A', 'B', 'C', 'D', 'E'].\n    If some categories are missing in the DataFrame, they will be included in the plot with a count of zero.\n    The x label of the plot is set to 'Category', the y label is set to 'Count', and the title is set to 'Distribution of {column}'.\n    The function should output with:\n        matplotlib.axes._axes.Axes: The Axes object for the generated plot.\n    \"\"\"\n    CATEGORIES = ['A', 'B', 'C', 'D', 'E']\n    data = pd.DataFrame(data)\n    counts = data[column].value_counts()\n    counts = counts.reindex(CATEGORIES, fill_value=0)\n    ax = counts.plot.bar(title=f'Distribution of {column}', xlabel='Category', ylabel='Count')\n    return ax", "problem": "Draw and return a bar chart that shows the distribution of categories in a specific column of a dictionary.\nNote that: The categories are defined by the constant CATEGORIES, which is a list containing ['A', 'B', 'C', 'D', 'E']. If some categories are missing in the DataFrame, they will be included in the plot with a count of zero. The x label of the plot is set to 'Category', the y label is set to 'Count', and the title is set to 'Distribution of {column}'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object for the generated plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n    df = pd.DataFrame(data)\n    # Define the categories\n    CATEGORIES = ['A', 'B', 'C', 'D', 'E']\n    \n    # Count occurrences of each category\n    counts = df[column].value_counts()\n    missing_categories = list(set(CATEGORIES) - set(counts.index))\n    for category in missing_categories:\n        counts[category] = 0\n\n    counts = counts.reindex(CATEGORIES)\n    \n    # Plotting\n    ax = counts.plot(kind='bar')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    ax.set_title(f'Distribution of {column}')\n    plt.show()\n    \n    return ax", "pass": true}
{"task_id": "920", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Create a correlation matrix\n    corr_matrix = data.corr()\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n\n    # Set up the matplotlib figure\n    fig, ax = plt.subplots(figsize=(11, 9))\n\n    # Draw the heatmap\n    sns.heatmap(corr_matrix, mask=mask, annot=True, cmap=\"YlGnBu\", ax=ax)\n\n    # Set the title\n    ax.set_title(\"Correlation Matrix\")\n\n    # Return the Axes object\n    return ax", "problem": "Draw and return a correlation matrix heatmap for a DataFrame containing numerical columns. The title of the heatmap is set to 'Correlation Matrix'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The matplotlib Axes object representing the heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n    df = pd.DataFrame(data)\n    correlation_matrix = df.corr()\n    ax = sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n    ax.set_title('Correlation Matrix')\n    return ax", "pass": false}
{"task_id": "921", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Args:\n        data (pandas.DataFrame): The DataFrame to normalize.\n        columns (list): The columns to normalize.\n\n    Returns:\n        pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n    \"\"\"\n    # Create a MinMaxScaler object\n    scaler = MinMaxScaler()\n\n    # Scale the specified columns\n    scaled_data = scaler.fit_transform(data[columns])\n\n    # Create a new DataFrame with the scaled data\n    normalized_data = pd.DataFrame(scaled_data, columns=columns, index=data.index)\n\n    return normalized_data\ndata = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [5, 4, 3, 2, 1]})", "problem": "Normalizes specified columns of a DataFrame using min-max scaling. Constants: - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\nThe function should output with:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    \n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n\n    return df_copy", "pass": false}
{"task_id": "922", "program": "import pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n\n    pass\nimport pandas as pd\nimport re\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n    \"\"\"\n    Removes English stopwords from a text column in a DataFrame and returns the modified DataFrame.\n\n    Parameters\n    ----------\n    data : pandas.DataFrame\n        The DataFrame containing the text column.\n    column : str\n        The name of the text column.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with the stopwords removed from the specified column.\n    \"\"\"\n    # Remove stopwords from the text column\n    data[column] = data[column].apply(lambda x: \" \".join([word for word in x.split() if word.lower() not in STOPWORDS]))\n    return data\ndata = pd.DataFrame({\"text\": [\"This is a sample text\", \"This is another sample text\"]})", "problem": "Removes English stopwords from a text column in a DataFrame and returns the modified DataFrame. Constants: - STOPWORDS: A set containing common English stopwords.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with the stopwords removed from the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n```", "solution": "import pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n    df = pd.DataFrame(data)\n    df[column] = df[column].apply(lambda x: ' '.join([word for word in re.findall(r'\\b\\w+\\b', x) if word.lower() not in STOPWORDS]))\n    return df", "pass": false}
{"task_id": "923", "program": "import pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n\n    pass\nimport pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails.\n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    The function should raise the exception for:\n        ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    The function should output with:\n        DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than the number of records requested.\")\n    if not email_domains:\n        raise ValueError(\"No email domains provided.\")\n\n    emails = [f\"{random.choice(person_names)}@{random.choice(email_domains)}\" for _ in range(num_records)]\n    emails = [re.sub(r\"@\", \"[at]\", email) for email in emails]\n\n    df = pd.DataFrame({\"Name\": person_names, \"Email\": emails})\n\n    return df\nperson_names = [\"Alice\", \"Bob\", \"Charlie\"]\nemail_domains = [\"example.com\", \"example.org\"]", "problem": "Generate a DataFrame with a specified number of records containing personal names and emails. The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\nThe function should raise the exception for: ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n```", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    \n    data = []\n    \n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "pass": true}
{"task_id": "924", "program": "import pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and return the cleaned DataFrame.\n\n    Parameters\n    ----------\n    file_path : str\n        The path to the CSV file.\n    column_name : str\n        The name of the column to clean.\n\n    Returns\n    -------\n    pd.DataFrame\n        The cleaned Pandas DataFrame.\n    \"\"\"\n    # Load the CSV file into a Pandas DataFrame\n    df = pd.read_csv(file_path)\n\n    # Replace all occurrences of '\\n' with '<br>' in the specified column\n    df[column_name] = df[column_name].str.replace(r'\\n', '<br>')\n\n    # Return the cleaned DataFrame\n    return df\nfile_path = 'data.csv'\ncolumn_name = 'text'", "problem": "Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and return the cleaned DataFrame.\nThe function should output with:\n    pd.DataFrame: The cleaned Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    if not os.path.exists(file_path):\n        print(f'File does not exist: {file_path}')\n        sys.exit(1)\n\n    df = pd.read_csv(file_path)\n    \n    # Check if the column exists\n    if column_name in df.columns:\n        df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    else:\n        print(f\"Column '{column_name}' does not exist in the DataFrame. No changes were made.\")\n\n    return df", "pass": false}
{"task_id": "925", "program": "import pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n    # Generate random numeric values between 1 and 100, inclusive\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Replace all occurrences of values less than 10 with -1\n    data[data < 10] = -1\n\n    # Create a Pandas DataFrame from the data\n    df = pd.DataFrame(data, columns=column_names)\n\n    return df", "problem": "Generate a Pandas DataFrame with random numeric values between 1 and 100, inclusive, and replace all occurrences of values less than 10 with -1.\nThe function should output with:\n    DataFrame: The modified Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n    np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1  # Correctly replace values less than 10 with -1\n    return df", "pass": true}
{"task_id": "926", "program": "import pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Loads data from an SQLite database into a Pandas DataFrame and performs a string replacement operation on a specified column.\n    Specifically, replaces all occurrences of the newline character '\\n' with the HTML line break tag '<br>'.\n\n    Parameters:\n        db_path (str): The path to the SQLite database file.\n        table_name (str): The name of the table in the database to load data from.\n        column_name (str): The name of the column in the table to perform the string replacement on.\n\n    Returns:\n        pd.DataFrame: The modified DataFrame with replaced strings in the specified column.\n    \"\"\"\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_path)\n    # Load the data from the specified table into a Pandas DataFrame\n    df = pd.read_sql_table(table_name, conn)\n    # Close the connection to the SQLite database\n    conn.close()\n    # Perform the string replacement operation on the specified column\n    df[column_name] = df[column_name].str.replace(r'\\n', '<br>')\n    # Return the modified DataFrame\n    return df\ndb_path = 'example.db'\ntable_name = 'example_table'\ncolumn_name = 'example_column'", "problem": "Loads data from an SQLite database into a Pandas DataFrame and performs a string replacement operation on a specified column. Specifically, replaces all occurrences of the newline character '\\n' with the HTML line break tag '<br>'.\nThe function should output with:\n    pd.DataFrame: The modified DataFrame with replaced strings in the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n    try:\n        conn = sqlite3.connect(db_path)\n        df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n        df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    finally:\n        conn.close()\n    return df", "pass": false}
{"task_id": "927", "program": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and encode the specified column as a categorical variable using LabelEncoder from sklearn.\n\n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column to be encoded.\n\n    Returns:\n    pd.DataFrame: The updated and encoded Pandas DataFrame.\n    \"\"\"\n    # Load the CSV file into a Pandas DataFrame\n    df = pd.read_csv(file_path)\n\n    # Replace all occurrences of '\\n' with '<br>' in the specified column\n    df[column_name] = df[column_name].str.replace(r'\\n', '<br>')\n\n    # Encode the specified column as a categorical variable using LabelEncoder from sklearn\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n\n    return df", "problem": "Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and encode the specified column as a categorical variable using LabelEncoder from sklearn.\nThe function should output with:\n    pd.DataFrame: The updated and encoded Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Replace occurrences of '\\n' with '<br>'\n    df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    \n    # Initialize LabelEncoder and fit_transform the specified column\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    \n    return df", "pass": true}
{"task_id": "928", "program": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n\n    pass\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets.\n    The dictionary values represent the frequency of these two-letter combinations in the given word.\n    If a combination does not appear in the word, its value will be 0.\n\n    Args:\n        word (str): The word to analyze.\n\n    Returns:\n        dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\n    \"\"\"\n    # Create a list of all possible two-letter combinations of the lowercase English alphabets\n    combinations = [''.join(combo) for combo in itertools.product(string.ascii_lowercase, repeat=2)]\n\n    # Create a dictionary with all possible two-letter combinations as keys and their counts in the word as values\n    counts = Counter(combinations)\n\n    # Add the counts of each two-letter combination in the word to the dictionary\n    for combo in combinations:\n        counts[combo] += word.count(combo)\n\n    return counts\nword = \"hello\"", "problem": "Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets. The dictionary values represent the frequency of these two-letter combinations in the given word. If a combination does not appear in the word, its value will be 0.\nThe function should output with:\n    dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n```", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    ALPHABETS = string.ascii_lowercase\n    # Generate all two-letter combinations of alphabets\n    permutations = [''.join(x) for x in itertools.permutations(ALPHABETS, 2)]\n    combinations = permutations + [x*2 for x in ALPHABETS]\n    \n    # Generate all two-letter combinations in the word\n    word_combinations = [''.join(x) for x in zip(word, word[1:])]\n    # Count the occurrences of each two-letter combination in the word\n    word_counter = Counter(word_combinations)\n\n    # Create the dictionary with the counts\n    return {key: word_counter.get(key, 0) for key in combinations}", "pass": false}
{"task_id": "929", "program": "import numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n\n    pass\nimport numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n    \"\"\"\n    Calculate the difference between the ASCII values of each pair of adjacent letters in the input word.\n    After calculating the difference, calculate the entropy of the differences.\n\n    Parameters\n    ----------\n    word : str\n        The input word.\n\n    Returns\n    -------\n    np.ndarray\n        A numpy array containing the difference between the ASCII values of each pair of adjacent letters in the word.\n    float\n        The entropy of the differences.\n    \"\"\"\n    # Calculate the difference between the ASCII values of each pair of adjacent letters\n    diffs = np.diff(np.array([ord(c) for c in word]))\n\n    # Calculate the entropy of the differences\n    entropy = stats.entropy(diffs)\n\n    return diffs, entropy\nword = \"hello\"", "problem": "Calculate the difference between the ASCII values of each pair of adjacent letters in the input word. After calculating the difference, calculate the entropy of the differences.\nThe function should output with:\n    np.ndarray: A numpy array containing the difference between the ASCII values of each pair of adjacent letters in the word.\n    float: The entropy of the differences.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n```", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n    if not word:  # Handling the case for empty string\n        return np.array([])\n    word_ascii_values = np.array([ord(x) for x in word])\n    difference = np.diff(word_ascii_values)\n    entropy = stats.entropy(difference)\n    \n    return difference, entropy", "pass": true}
{"task_id": "930", "program": "import random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n\n    pass\nimport random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n    if not all(letter in string.ascii_letters for letter in word):\n        raise ValueError(\"Input contains non-letter characters\")\n    if len(word) < 2:\n        return [\"\"] * len(POSSIBLE_LETTERS)\n    pairs = []\n    for i in range(len(word) - 1):\n        pairs.append(word[i:i+2])\n    random.shuffle(pairs)\n    return pairs", "problem": "Generates a list of random pairs of adjacent letters from the given word. The number of such pairs will be equal to the length of the constant POSSIBLE_LETTERS.\nThe function should raise the exception for: ValueError: If the input contains non-letter characters.\nThe function should output with:\n    list: A list of random pairs of adjacent letters from the word. If the word has fewer than 2 letters, returns a list of empty strings based on POSSIBLE_LETTERS length.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n```", "solution": "import random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n    if not all(char in string.ascii_letters for char in word):\n        raise ValueError(\"Input must only contain letters.\")\n    \n    if len(word) < 2:\n        return ['' for _ in range(len(POSSIBLE_LETTERS))]\n    \n    pairs = [''.join(x) for x in zip(word, word[1:])]\n    random_pairs = [random.choice(pairs) for _ in range(len(POSSIBLE_LETTERS))]\n\n    return random_pairs", "pass": false}
{"task_id": "931", "program": "from collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n\n    pass\nfrom collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Find the occurrences of each two-letter combination in the sanitized word, where only alphabetic characters are considered.\n    The function should output with:\n        collections.defaultdict: A dictionary with keys as two-letter combinations and values as their counts in the sanitized word.\n    \"\"\"\n    # Sanitize the word by removing all non-alphabetic characters\n    sanitized_word = re.sub(r'[^a-zA-Z]', '', word)\n\n    # Create a defaultdict to store the counts of each two-letter combination\n    two_letter_combinations = defaultdict(int)\n\n    # Iterate over the sanitized word and increment the count of each two-letter combination\n    for i in range(len(sanitized_word) - 1):\n        two_letter_combinations[sanitized_word[i:i+2]] += 1\n\n    return two_letter_combinations\nword = \"Hello, World!\"", "problem": "Find the occurrences of each two-letter combination in the sanitized word, where only alphabetic characters are considered.\nThe function should output with:\n    collections.defaultdict: A dictionary with keys as two-letter combinations and values as their counts in the sanitized word.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n```", "solution": "from collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n    # Sanitize the word to include only alphabetic characters\n    sanitized_word = re.sub('[^A-Za-z]', '', word)\n    occurrences = defaultdict(int)\n    pairs = [''.join(x) for x in zip(sanitized_word, sanitized_word[1:])]\n\n    for pair in pairs:\n        occurrences[pair] += 1\n\n    return occurrences", "pass": true}
{"task_id": "932", "program": "from collections import Counter\nimport re\ndef task_func(word: str) -> list:\n\n    pass\nfrom collections import Counter\nimport re\ndef task_func(word: str) -> list:\n    \"\"\"\n    Finds the most common two-letter combination in a given, cleaned word (lowercased and alphabetic characters only) and returns its frequency.\n    The search is case-insensitive and ignores non-alphabetic characters.\n    The function should output with:\n        list: A list containing a single tuple. The tuple consists of the most frequent two-letter combination (str)\n        and its frequency (int). Returns an empty list if the word has fewer than 2 letters, or after cleaning,\n        the word has fewer than 2 alphabetic characters.\n    \"\"\"\n    # Clean the word by removing non-alphabetic characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # Check if the word has fewer than 2 letters after cleaning\n    if len(word) < 2:\n        return []\n\n    # Find the most common two-letter combination in the word\n    counter = Counter(word[i:i+2] for i in range(len(word)-1))\n    most_common = counter.most_common(1)\n\n    # Return the most common two-letter combination and its frequency\n    return [most_common[0]] if most_common else []", "problem": "Finds the most common two-letter combination in a given, cleaned word (lowercased and alphabetic characters only) and returns its frequency. The search is case-insensitive and ignores non-alphabetic characters.\nThe function should output with:\n    list: A list containing a single tuple. The tuple consists of the most frequent two-letter combination (str)\n    and its frequency (int). Returns an empty list if the word has fewer than 2 letters, or after cleaning,\n    the word has fewer than 2 alphabetic characters.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport re\ndef task_func(word: str) -> list:\n```", "solution": "from collections import Counter\nimport re\ndef task_func(word: str) -> list:\n    # Clean the word: lowercase and keep alphabetic characters only\n    clean_word = re.sub('[^a-z]', '', word.lower())\n    \n    if len(clean_word) < 2:\n        return []\n    \n    pairs = [clean_word[i:i+2] for i in range(len(clean_word) - 1)]\n    pair_counter = Counter(pairs)\n    most_common = pair_counter.most_common(1)\n    \n    # This check ensures we return the result directly from most_common without additional filtering\n    return most_common", "pass": true}
{"task_id": "933", "program": "import string\nimport wordninja\ndef task_func(word):\n\n    pass\nimport string\nimport wordninja\ndef task_func(word):\n    \"\"\"\n    Converts a word into a list of tuples, with each tuple containing a lowercase English letter from the word and its position in the alphabet.\n    Then, split the given word into a list of words.\n    The function should output with:\n        list of tuples: Each tuple consists of a letter from the input string and its corresponding position in the alphabet.\n    \"\"\"\n    # Convert the input word to lowercase\n    word = word.lower()\n\n    # Create a list of tuples, where each tuple contains a letter and its position in the alphabet\n    letter_positions = [(letter, i) for i, letter in enumerate(word)]\n\n    # Split the word into a list of words\n    words = wordninja.split(word)\n\n    return letter_positions, words\nword = \"Hello, World!\"", "problem": "Converts a word into a list of tuples, with each tuple containing a lowercase English letter from the word and its position in the alphabet. Then, split the given word into a list of words.\nThe function should output with:\n    list of tuples: Each tuple consists of a letter from the input string and its corresponding position in the alphabet.\nYou should write self-contained code starting with:\n```\nimport string\nimport wordninja\ndef task_func(word):\n```", "solution": "import string\nimport wordninja\ndef task_func(word):\n    ALPHABET = list(string.ascii_lowercase)\n    # Map each letter in the word to its corresponding alphabetical number\n    word_numbers = [ALPHABET.index(letter) + 1 for letter in word]\n    \n    # Combine each letter with its alphabetical number in a tuple\n    return [(word[i], word_numbers[i]) for i in range(len(word))],  wordninja.split(word)", "pass": false}
{"task_id": "934", "program": "from collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n\n    pass\nfrom collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Count the occurrence of each adjacent pair of letters from left to right in a word and encode the result as an MD5 hash.\n    The function should output with:\n        dict: A dictionary where keys are adjacent letter pairs and values are their counts.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the word, counting the occurrences of each adjacent pair of letters\n    for i in range(len(word) - 1):\n        pair = word[i:i+2]\n        if pair not in counts:\n            counts[pair] = 0\n        counts[pair] += 1\n\n    # Encode the counts as an MD5 hash\n    hash_object = hashlib.md5(str(counts).encode(\"utf-8\"))\n    hash_digest = hash_object.hexdigest()\n\n    # Return the dictionary of counts and the MD5 hash\n    return counts, hash_digest\nword = \"hello\"", "problem": "Count the occurrence of each adjacent pair of letters from left to right in a word and encode the result as an MD5 hash.\nThe function should output with:\n    dict: A dictionary where keys are adjacent letter pairs and values are their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n```", "solution": "from collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n    pairs = list(map(''.join, zip(word[:-1], word[1:])))\n    pairs_count = dict(Counter(pairs))\n    # encode the dictionary as a string and return its hash\n    return hashlib.md5(str(pairs_count).encode()).hexdigest()", "pass": false}
{"task_id": "935", "program": "import pandas as pd\nimport string\ndef task_func(word):\n\n    pass\nimport pandas as pd\nimport string\ndef task_func(word):\n    \"\"\"\n    Creates a Pandas DataFrame from a single word, where each row contains a letter from the word and its 1-based position in the alphabet.\n\n    Parameters\n    ----------\n    word : str\n        The word to convert to a DataFrame.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame with two columns: 'Letter' and 'Position',\n        where 'Position' is the letter's position in the English alphabet.\n\n    Raises\n    ------\n    ValueError\n        If the input word is not in lowercase or contains non-alphabetic characters.\n    \"\"\"\n    if not word.islower():\n        raise ValueError(\"Input word must be in lowercase\")\n    if not word.isalpha():\n        raise ValueError(\"Input word must contain only alphabetic characters\")\n\n    letters = [letter for letter in word]\n    positions = [string.ascii_lowercase.index(letter) + 1 for letter in letters]\n\n    return pd.DataFrame({\"Letter\": letters, \"Position\": positions})", "problem": "Creates a Pandas DataFrame from a single word, where each row contains a letter from the word and its 1-based position in the alphabet. >>> task_func('zoo') Letter  Position 0      z        26 1      o        15 2      o        15\nThe function should raise the exception for: ValueError: If the input word is not in lowercase or contains non-alphabetic characters.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Letter' and 'Position',\n    where 'Position' is the letter's position in the English alphabet.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport string\ndef task_func(word):\n```", "solution": "import pandas as pd\nimport string\ndef task_func(word):\n    if not word:  # Check if the input word is empty and return an empty DataFrame\n        return pd.DataFrame({'Letter': [], 'Position': []})\n    elif not word.isalpha() or not word.islower():\n        raise ValueError(\"Input word must be in lowercase alphabetic characters only.\")\n\n    alphabet = string.ascii_lowercase\n    positions = [alphabet.index(char) + 1 for char in word]\n    df = pd.DataFrame({'Letter': list(word), 'Position': positions})\n\n    return df", "pass": false}
{"task_id": "936", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport string\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n    # Convert the word to a list of characters\n    word_list = list(word)\n\n    # Create a numpy array of the word's characters\n    word_array = np.array(word_list)\n\n    # Create a numpy array of the indices of the characters in the word\n    indices = np.arange(1, len(word_array) + 1)\n\n    # Create a bar chart of the word's characters\n    plt.bar(indices, word_array)\n\n    # Set the x-axis labels to the corresponding letters of the alphabet\n    plt.xticks(indices, ALPHABET)\n\n    # Set the y-axis labels to the corresponding characters in the word\n    plt.yticks(indices, word_array)\n\n    # Show the plot\n    plt.show()\n\n    # Return the axes object\n    return plt.gca()\nword = \"hello\"", "problem": "Draws a bar chart representing the positions of each letter in the given word within the English alphabet using numpy and matplotlib.pyplot. Constants: - ALPHABET: A list containing all lowercase letters of the English alphabet.\nNote that: The function uses the index of each letter in the English alphabet to represent its position. For example, 'a' will be represented by 1, 'b' by 2, and so on.\nThe function should output with:\n    Axes: A matplotlib.axes._axes.Axes object representing the generated plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n    # Validate the input word to contain only alphabetic characters\n    if not all(char in ALPHABET for char in word):\n        raise ValueError(\"The word should contain only lowercase alphabetic characters.\")\n        \n    # Calculate the positions of each letter in the word within the alphabet\n    letter_positions = np.array(list(map(lambda x: ALPHABET.index(x) + 1, word)))\n    \n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    \n    # Draw the bar chart on the axis\n    ax.bar(np.arange(len(letter_positions)), letter_positions)\n    \n    # Configure plot settings\n    ax.set_xlabel('Letter Index')\n    ax.set_ylabel('Alphabetical Position')\n    ax.set_title('Alphabetical Position of Letters in Word')\n    \n    plt.show()\n    \n    return ax", "pass": false}
{"task_id": "937", "program": "import re\nfrom collections import Counter\ndef task_func(input_str):\n\n    pass\nimport re\nfrom collections import Counter\ndef task_func(input_str):\n    # Remove all non-alphanumeric characters\n    input_str = re.sub('[^a-zA-Z0-9]', '', input_str)\n\n    # Convert all characters to lowercase\n    input_str = input_str.lower()\n\n    # Count the frequency of each character\n    char_counts = Counter(input_str)\n\n    # Return a dictionary with characters as keys (all lowercase) and their frequencies in the input string as values\n    return {char: count for char, count in char_counts.items()}\ninput_str = \"Hello, World!\"", "problem": "Count the frequency of each alphanumeric character in a given string after removing all non-alphanumeric characters, treating uppercase and lowercase letters as the same.\nThe function should output with:\n    dict: A dictionary with characters as keys (all lowercase) and their frequencies in the input string as values.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\ndef task_func(input_str):\n```", "solution": "import re\nfrom collections import Counter\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9]+', '', input_str).lower()\n    freq_dict = Counter(cleaned_str)\n    return freq_dict", "pass": true}
{"task_id": "938", "program": "import re\nimport pandas as pd\ndef task_func(input_df):\n\n    pass\nimport re\nimport pandas as pd\ndef task_func(input_df):\n    \"\"\"\n    Cleans the text in a pandas DataFrame column named 'text' by removing all special characters, punctuation marks, and spaces, then calculates the length of the cleaned text.\n    The function should output with:\n        pandas.DataFrame: A DataFrame with two new columns 'clean_text' and 'text_length', where 'clean_text' is the cleaned text and 'text_length' is its length.\n    \"\"\"\n    # Remove special characters, punctuation marks, and spaces\n    input_df['clean_text'] = input_df['text'].str.replace(r'[^a-zA-Z0-9\\s]', '')\n\n    # Calculate the length of the cleaned text\n    input_df['text_length'] = input_df['clean_text'].str.len()\n\n    return input_df", "problem": "Cleans the text in a pandas DataFrame column named 'text' by removing all special characters, punctuation marks, and spaces, then calculates the length of the cleaned text.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two new columns 'clean_text' and 'text_length', where 'clean_text' is the cleaned text and 'text_length' is its length.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(input_df):\n```", "solution": "import re\nimport pandas as pd\ndef task_func(input_df):\n    def clean_text_and_calculate_length(row):\n        if pd.isnull(row['text']):\n            return pd.Series(['', 0], index=['clean_text', 'text_length'])\n        cleaned_text = re.sub('[^A-Za-z0-9]+', '', str(row['text']))\n        return pd.Series([cleaned_text, len(cleaned_text)], index=['clean_text', 'text_length'])\n    \n    return input_df.apply(clean_text_and_calculate_length, axis=1)", "pass": false}
{"task_id": "939", "program": "import re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n\n    pass\nimport re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n    \"\"\"\n    Rename all files in the specified directory by removing all special characters, punctuation marks, and spaces, using regular expressions.\n    The function keeps alphanumeric characters and removes the rest.\n\n    Args:\n        dir_path (str): The path to the directory containing the files to be renamed.\n\n    Returns:\n        list[str]: A list containing the new names of all files after renaming.\n    \"\"\"\n    # Get a list of all files in the directory\n    file_list = glob.glob(os.path.join(dir_path, \"*\"))\n\n    # Create a regular expression to match all special characters, punctuation marks, and spaces\n    pattern = re.compile(r\"[^a-zA-Z0-9]\")\n\n    # Loop through each file in the list\n    for file_name in file_list:\n        # Get the file name without the directory path\n        file_name = os.path.basename(file_name)\n\n        # Remove all special characters, punctuation marks, and spaces from the file name\n        new_file_name = pattern.sub(\"\", file_name)\n\n        # Rename the file\n        os.rename(file_name, new_file_name)\n\n    # Return the list of new file names\n    return [os.path.basename(file_name) for file_name in file_list]", "problem": "Rename all files in the specified directory by removing all special characters, punctuation marks, and spaces, using regular expressions. The function keeps alphanumeric characters and removes the rest.\nThe function should output with:\n    list[str]: A list containing the new names of all files after renaming.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n```", "solution": "import re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n    new_names = []\n    for file_path in glob.glob(os.path.join(dir_path, '*')):\n        base_name = os.path.basename(file_path)\n        new_name = re.sub('[^A-Za-z0-9]+', '', base_name)\n        new_path = os.path.join(dir_path, new_name)\n        os.rename(file_path, new_path)\n        new_names.append(new_name)\n    return new_names", "pass": false}
{"task_id": "940", "program": "import re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n\n    pass\nimport re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n    # Remove all special characters, punctuation marks, and spaces from the input string\n    cleaned_str = re.sub(r'[^a-zA-Z0-9\\s]', '', input_str)\n\n    # Tokenize the cleaned string into individual words\n    words = word_tokenize(cleaned_str)\n\n    # Count the frequency of each word\n    word_freq = Counter(words)\n\n    # Return the dictionary with the frequency of each word\n    return word_freq\ninput_str = \"Hello, World! This is a test string.\"", "problem": "Remove all special characters, punctuation marks and spaces from a string called \"input _ str\" using regex and then count the frequency of each word.\nThe function should output with:\n    dict: A dictionary with the frequency of each word.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n```", "solution": "import re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9 ]+', '', input_str)\n    words = word_tokenize(cleaned_str)\n    freq_dict = Counter(words)\n\n    return freq_dict", "pass": true}
{"task_id": "941", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n    \"\"\"\n    Generates and plots a sales forecast starting from a given date, for a specified number of periods and frequency.\n\n    Args:\n        start_date (str): The starting date of the forecast in the format 'YYYY-MM-DD'.\n        periods (int): The number of periods to forecast.\n        freq (str): The frequency of the forecast, e.g. 'D' for daily, 'W' for weekly, 'M' for monthly.\n        random_seed (int, optional): The random seed for generating the forecast. Defaults to 0.\n\n    Returns:\n        A tuple containing:\n            1. A DataFrame with columns ['Date', 'Sales'], where 'Date' is the forecast date and 'Sales' are the forecasted sales.\n            2. A matplotlib Axes object for the sales forecast plot.\n    \"\"\"\n    # Generate a random walk for the sales forecast\n    np.random.seed(random_seed)\n    sales_forecast = np.random.rand(periods)\n\n    # Create a DataFrame for the sales forecast\n    sales_forecast_df = pd.DataFrame({'Date': pd.date_range(start=start_date, periods=periods, freq=freq),\n                                     'Sales': sales_forecast})\n\n    # Plot the sales forecast\n    fig, ax = plt.subplots()\n    ax.plot(sales_forecast_df['Date'], sales_forecast_df['Sales'])\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Forecast')\n\n    return sales_forecast_df, ax\nstart_date = '2022-01-01'\nperiods = 10\nfreq = 'D'\nrandom_seed = 0", "problem": "Generates and plots a sales forecast starting from a given date, for a specified number of periods and frequency.\nThe function should output with:\n    A tuple containing:\n    1. A DataFrame with columns ['Date', 'Sales'], where 'Date' is the forecast date and 'Sales' are the forecasted sales.\n    2. A matplotlib Axes object for the sales forecast plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n    np.random.seed(random_seed)\n    date_range = pd.date_range(start_date, periods=periods, freq=freq)\n    sales_forecast = np.random.randint(100, 500, size=periods)\n    forecast_df = pd.DataFrame({'Date': date_range, 'Sales': sales_forecast}).set_index('Date')\n\n    fig, ax = plt.subplots()\n    forecast_df['Sales'].plot(ax=ax, marker='o')\n    ax.set_title('Sales Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.grid(True)\n    \n    return forecast_df, ax", "pass": false}
{"task_id": "942", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    # Generate random sales data\n    sales_data = pd.DataFrame({\n        'Date': pd.date_range(start_date, periods=periods, freq=freq),\n        'Category': np.random.choice(categories, size=periods),\n        'Sales': np.random.randint(100, 1000, size=periods)\n    })\n\n    # Group sales data by category and date\n    sales_data = sales_data.groupby(['Category', 'Date']).sum()\n\n    # Plot sales data\n    fig, ax = plt.subplots()\n    sales_data.plot(kind='bar', ax=ax)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales Report')\n\n    return sales_data, ax", "problem": "Create and visualize a sales report for different categories over a period of time.\nThe function should output with:\n    Returns a DataFrame containing the sales data with the following columns: 'Date', 'Category', 'Sales'.\n    Returns the Matplotlib Axes object for the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    np.random.seed(0)  # Ensure reproducible sales figures\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    report_data = []\n\n    for date in date_range:\n        for category in categories:\n            sales = np.random.randint(low=100, high=500)\n            report_data.append([date, category, sales])\n\n    sales_df = pd.DataFrame(report_data, columns=['Date', 'Category', 'Sales'])\n\n    fig, ax = plt.subplots(figsize=(12, 8))\n    sales_df.pivot(index='Date', columns='Category', values='Sales').plot(ax=ax)\n    ax.set_title('Category-wise Sales Trends')\n    ax.grid(True)\n    \n    return sales_df, ax", "pass": false}
{"task_id": "943", "program": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n    # Generate a sales time-series\n    sales = pd.Series(np.random.randint(0, 100, periods), index=pd.date_range(start_date, periods=periods, freq=freq))\n\n    # Decompose the time-series into trend, seasonal, and residual components\n    decomposition = seasonal_decompose(sales, model=model)\n\n    # Return a dictionary containing the trend, seasonal, and residual components\n    return {'trend': decomposition.trend, 'seasonal': decomposition.seasonal, 'residual': decomposition.residual}", "problem": "Generate a sales time-series and decompose it into trend, seasonal, and residual components. >>> result = task_func('2020-01-01', 24, 'M', 'multiplicative') >>> len(result['seasonal']) 24\nThe function should output with:\n    A dictionary containing 'trend', 'seasonal', and 'residual' components as Pandas Series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    sales_data = np.random.randint(low=100, high=500, size=periods)\n    sales_series = pd.Series(sales_data, index=date_range)\n    try:\n        decomposition = seasonal_decompose(sales_series, model=model, period=12 if freq == 'M' else 4)\n    except ValueError as e:\n        return {'error': str(e)}\n    \n    return {\n        'trend': decomposition.trend,\n        'seasonal': decomposition.seasonal,\n        'residual': decomposition.resid\n    }", "pass": false}
{"task_id": "944", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n    # Generate a share price series for a specific period of time\n    np.random.seed(seed)\n    dates = pd.date_range(start_date, periods=periods, freq=freq)\n    prices = np.random.uniform(100, 500, size=periods)\n    df = pd.DataFrame({'Date': dates, 'Price': prices})\n\n    # Plot the share prices\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df['Price'])\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.set_title('Share Prices')\n\n    return df, ax", "problem": "Generate a share price series for a specific period of time, plot the share prices, and return the DataFrame and the plot on the share prices over the given date range. The share prices are randomly generated between 100 and 500 from a uniform distribution.\nThe function should output with:\n    A tuple containing a pandas DataFrame with columns ['Date', 'Price'] and a Matplotlib Axes object for the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n    if seed is not None:\n        np.random.seed(seed)\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    stock_prices = np.random.uniform(low=100, high=500, size=periods)\n\n    prices_df = pd.DataFrame({'Date': date_range, 'Price': stock_prices})\n    prices_df.set_index('Date', inplace=True)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    # ax.plot(prices_df.index, prices_df['Price'], marker='o')\n    prices_df.plot(ax=ax, marker='o')\n    pd.plotting.register_matplotlib_converters()\n    ax.set_title('Stock Prices')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.grid(True)\n    \n    return prices_df, ax", "pass": false}
{"task_id": "945", "program": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n\n    pass\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    # Generate sales data if not provided\n    if sales_data is None:\n        sales_data = pd.date_range(start=start_date, periods=periods, freq=freq)\n        sales_data = np.random.randint(low=100, high=1000, size=periods)\n\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Fit the model to the sales data\n    model.fit(sales_data.index.values.reshape(-1, 1), sales_data.values)\n\n    # Generate future sales data\n    future_sales_data = pd.date_range(start=sales_data.index[-1] + pd.DateOffset(1), periods=periods, freq=freq)\n\n    # Forecast future sales\n    future_sales = model.predict(future_sales_data.values.reshape(-1, 1))\n\n    return future_sales\nstart_date = '2016-01-01'\nperiods = 13\nfreq = 'WOM-2FRI'\nsales_data = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300])", "problem": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    sales_data = np.random.randint(low=100, high=500, size=periods)\n    \n    date_range = pd.date_range(start=start_date, freq=freq, periods=periods)\n    sales_df = pd.DataFrame({'Date': date_range, 'Sales': sales_data})\n    \n    X = np.arange(len(sales_df)).reshape(-1, 1)\n    y = sales_df['Sales'].values\n    \n    model = LinearRegression()\n    model.fit(X, y)\n    \n    future_dates = np.arange(len(sales_df), 2*len(sales_df)).reshape(-1, 1)\n    future_sales = model.predict(future_dates)\n    \n    return future_sales", "pass": false}
{"task_id": "946", "program": "import numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n    \"\"\"\n    Creates a matrix of specified dimensions with random integers within a given range, and then converts it into a pandas DataFrame.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the matrix, by default 3\n    cols : int, optional\n        Number of columns in the matrix, by default 2\n    min_val : int, optional\n        Minimum value of the random integers, by default 0\n    max_val : int, optional\n        Maximum value of the random integers, by default 100\n    seed : int, optional\n        Random seed, by default 0\n\n    Returns\n    -------\n    DataFrame\n        A pandas DataFrame containing random integers within the specified range.\n    \"\"\"\n    random.seed(seed)\n    matrix = np.random.randint(min_val, max_val, size=(rows, cols))\n    return pd.DataFrame(matrix)", "problem": "Creates a matrix of specified dimensions with random integers within a given range, and then converts it into a pandas DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing random integers within the specified range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n    random.seed(seed)\n    if min_val == max_val:\n        matrix = np.full((rows, cols), min_val)\n    else:\n        matrix = np.array([[random.randrange(min_val, max_val) for j in range(cols)] for i in range(rows)])\n    df = pd.DataFrame(matrix)\n    return df", "pass": false}
{"task_id": "947", "program": "import numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n\n    pass\nimport numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n    \"\"\"\n    Generates a matrix of given dimensions (rows x columns) containing unique dates between a specified start date and end date.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the output matrix, by default 3\n    columns : int, optional\n        Number of columns in the output matrix, by default 2\n    start_date : datetime.datetime, optional\n        Start date for the range of unique dates, by default datetime(2021, 1, 1)\n    end_date : datetime.datetime, optional\n        End date for the range of unique dates, by default datetime(2021, 12, 31)\n    seed : int, optional\n        Random seed for generating the unique dates, by default 0\n\n    Returns\n    -------\n    ndarray\n        A numpy ndarray with unique dates in the shape (rows, columns).\n    \"\"\"\n    random.seed(seed)\n    dates = np.array([random.randint(start_date.timestamp(), end_date.timestamp()) for _ in range(rows * columns)])\n    dates = np.reshape(dates, (rows, columns))\n    return dates\nstart_date = datetime(2021, 1, 1)\nend_date = datetime(2021, 12, 31)\nrows = 3\ncolumns = 2\nseed = 0", "problem": "Generates a matrix of given dimensions (rows x columns) containing unique dates between a specified start date and end date.\nThe function should output with:\n    ndarray: A numpy ndarray with unique dates in the shape (rows, columns).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n```", "solution": "import numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n    # Convert start_date and end_date to numpy datetime64 objects\n    if seed is not None:\n        random.seed(seed)\n    \n    # Convert start_date and end_date to numpy datetime64 objects\n    start_date_np = np.datetime64(start_date)\n    end_date_np = np.datetime64(end_date)\n\n    # Calculate the number of days between start_date and end_date\n    total_days = int((end_date_np - start_date_np).astype('timedelta64[D]').astype(int) + 1)\n\n    # Randomly select unique dates within the range without replacement using random.sample\n    selected_dates = sorted(random.sample(range(total_days), rows * columns))\n\n    # Generate the matrix with selected unique dates\n    matrix = (start_date_np + np.array(selected_dates).astype('timedelta64[D]')).reshape(rows, columns)\n\n    return matrix", "pass": false}
{"task_id": "948", "program": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n    \"\"\"\n    Generate a matrix of random values with specified dimensions and scale it between 0 and 1.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the matrix, by default 3\n    columns : int, optional\n        Number of columns in the matrix, by default 2\n    seed : int, optional\n        Random seed, by default 42\n\n    Returns\n    -------\n    ndarray\n        A numpy ndarray with scaled values between 0 and 1.\n    \"\"\"\n    np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    return scaler.fit_transform(data)", "problem": "Generate a matrix of random values with specified dimensions and scale it between 0 and 1. >>> task_func(2, 2) array([[0., 1.], [1., 0.]])\nThe function should output with:\n    ndarray: A numpy ndarray with scaled values between 0 and 1.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n    np.random.seed(seed) # Ensure reproducibility for consistent outputs across different runs\n    matrix = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    scaled_matrix = scaler.fit_transform(matrix)\n\n    return scaled_matrix", "pass": true}
{"task_id": "949", "program": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n    \"\"\"\n    Generate a DataFrame with random values within a specified range.\n\n    This function creates a matrix of given dimensions filled with random values between 0 and 1 and returns it as a Pandas DataFrame.\n    Users have the option to set a random seed for reproducible results.\n\n    Parameters\n    ----------\n    rows : int\n        Number of rows in the DataFrame.\n    columns : int\n        Number of columns in the DataFrame.\n    seed : int, optional\n        Random seed for reproducible results.\n\n    Returns\n    -------\n    DataFrame\n        A Pandas DataFrame containing the generated random values.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    return pd.DataFrame(data)", "problem": "Generate a DataFrame with random values within a specified range. This function creates a matrix of given dimensions filled with random values between 0 and 1 and returns it as a Pandas DataFrame. Users have the option to set a random seed for reproducible results.\nThe function should output with:\n    DataFrame: A Pandas DataFrame containing the generated random values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(matrix)\n    \n    return df", "pass": true}
{"task_id": "950", "program": "import numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n\n    pass\nimport numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n    \"\"\"\n    Generate a matrix of random values with specified dimensions and perform Singular Value Decomposition (SVD) on it.\n    The function should output with:\n        tuple: A tuple containing three elements:\n        U (ndarray): The unitary matrix U.\n        s (ndarray): The singular values, sorted in descending order.\n        Vh (ndarray): The conjugate transpose of the unitary matrix V.\n    \"\"\"\n    np.random.seed(seed)\n    A = np.random.rand(rows, columns)\n    U, s, Vh = svd(A)\n    return U, s, Vh\nrows = 3\ncolumns = 2\nseed = 0", "problem": "Generate a matrix of random values with specified dimensions and perform Singular Value Decomposition (SVD) on it.\nThe function should output with:\n    tuple: A tuple containing three elements:\n    U (ndarray): The unitary matrix U.\n    s (ndarray): The singular values, sorted in descending order.\n    Vh (ndarray): The conjugate transpose of the unitary matrix V.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n```", "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n    np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    U, s, Vh = svd(matrix)\n\n    return U, s, Vh", "pass": true}
{"task_id": "951", "program": "import pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n    \"\"\"\n    Create a product catalog DataFrame where each row represents a product with the following columns:\n    - 'Product Name': The name of the product with spaces replaced by underscores.\n    - 'Category': The category to which the product belongs.\n    - 'Price': The price of the product, generated randomly based on a normal distribution with a mean of 50 and a standard deviation of 10.\n\n    Args:\n        mystrings (list): A list of strings to use as the product names.\n        n_products (int): The number of products to generate.\n        seed (int, optional): The random seed to use for generating the prices. Defaults to 0.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the product catalog information.\n    \"\"\"\n    # Set the random seed\n    random.seed(seed)\n\n    # Create a list of product names\n    product_names = [name.replace(\" \", \"_\") for name in mystrings]\n\n    # Create a list of prices\n    prices = [np.random.normal(50, 10) for _ in range(n_products)]\n\n    # Create a list of categories\n    categories = [random.choice(CATEGORIES) for _ in range(n_products)]\n\n    # Create a DataFrame with the product information\n    df = pd.DataFrame({\"Product Name\": product_names, \"Category\": categories, \"Price\": prices})\n\n    return df", "problem": "Create a product catalog DataFrame where each row represents a product with the following columns: - 'Product Name': The name of the product with spaces replaced by underscores. - 'Category': The category to which the product belongs. - 'Price': The price of the product, generated randomly based on a normal distribution with a mean of 50 and a standard deviation of 10. Constants: - CATEGORIES: A list of categories used to randomly assign a category to each product.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame containing the product catalog information.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n    catalogue_data = []\n    random.seed(seed)\n    np.random.seed(seed)\n    for _ in range(n_products):\n        product_name = mystrings[randint(0, len(mystrings) - 1)].replace(' ', '_')\n        category = CATEGORIES[randint(0, len(CATEGORIES) - 1)]\n        price = round(np.random.normal(50, 10), 2)\n        catalogue_data.append([product_name, category, price])\n\n    catalogue_df = pd.DataFrame(catalogue_data, columns=['Product Name', 'Category', 'Price'])\n\n    return catalogue_df", "pass": false}
{"task_id": "952", "program": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n\n    pass\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    task_names = [task.replace(\" \", \"_\") for task in task_list]\n    assigned_tasks = []\n    for i in range(n_tasks):\n        task_name = task_names[i]\n        employee = random.choice(employees)\n        due_date = datetime.now().date()\n        assigned_tasks.append((task_name, employee, due_date))\n\n    return pd.DataFrame(assigned_tasks, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\ntask_list = [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\"]\nn_tasks = 5\nseed = 42", "problem": "Randomly assigns a specified number of tasks to employees with a due date of the current day and returns a DataFrame with these assignments.\nNote that: Task names are sanitized by replacing spaces with underscores. Due dates are set to the current system date.\nThe function should raise the exception for: ValueError: If n_tasks is negative.\nThe function should output with:\n    pd.DataFrame: Contains columns 'Task Name', 'Assigned To', and 'Due Date', with each row representing an assigned task.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n```", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    if seed is not None:\n        random.seed(seed)\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    assignment_data = []\n    for _ in range(n_tasks):\n        if not task_list:\n            break\n        task_name = random.choice(task_list).replace(\" \", \"_\")\n        employee = random.choice(employees)\n        due_date = datetime.today().strftime(\"%Y-%m-%d\")\n        assignment_data.append([task_name, employee, due_date])\n\n    assignment_df = pd.DataFrame(\n        assignment_data, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"]\n    )\n\n    return assignment_df", "pass": false}
{"task_id": "953", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n    \"\"\"\n    Generates random data points to plot bar charts for each in a given list of plot names, then saves them in a specified directory.\n    This function takes a list of plot names, for each generating 10 random data points in [0, 1) to create a bar chart, then saves the bar charts as .png files in the specified directory, creating the directory if it does not exist.\n\n    Args:\n        mystrings (list): List of plot names.\n        folder_path (str): Path to the directory where the plots should be saved.\n        seed (int, optional): Random seed for generating random data points. Defaults to None.\n\n    Returns:\n        list: Names of the files where the plots are saved. Each file corresponds to a title from `mystrings`.\n\n    Raises:\n        FileNotFoundError: If the provided directory path does not exist and cannot be created.\n    \"\"\"\n    # Check if the directory exists and create it if it doesn't\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path)\n\n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate random data points for each plot\n    data = [np.random.rand(10) for _ in range(len(mystrings))]\n\n    # Create a bar chart for each plot\n    for i, title in enumerate(mystrings):\n        plt.bar(range(10), data[i])\n        plt.title(title)\n        plt.savefig(os.path.join(folder_path, f\"{title}.png\"))\n        plt.close()\n\n    # Return the names of the files where the plots are saved\n    return [os.path.join(folder_path, f\"{title}.png\") for title in mystrings]", "problem": "Generates random data points to plot bar charts for each in a given list of plot names, then saves them in a specified directory. This function takes a list of plot names, for each generating 10 random data points in [0, 1) to create a bar chart, then saves the bar charts as .png files in the specified directory, creating the directory if it does not exist. >>> task_func(['First Plot', 'Second Plot'], './another_folder/') ['First_Plot.png', 'Second_Plot.png']\nNote that: This function deduplicates mystrings while maintaining its original order. Random data points for bar charts are generated in the range [0, 1). Each bar chart contains 10 data points.\nThe function should raise the exception for: FileNotFoundError: If the provided directory path does not exist and cannot be created.\nThe function should output with:\n    list: Names of the files where the plots are saved. Each file corresponds to a title from `mystrings`.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    saved_plots = []\n    processed_names = set()\n\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path, exist_ok=True)\n\n    for name in mystrings:\n        if name in processed_names:\n            continue\n        data = np.random.rand(10)\n        plt.bar(range(len(data)), data)\n        plt.title(name)\n        file_name = name.replace(\" \", \"_\") + \".png\"\n        plt.savefig(os.path.join(folder_path, file_name))\n        saved_plots.append(file_name)\n        processed_names.add(name)\n\n    return saved_plots", "pass": false}
{"task_id": "954", "program": "import random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n\n    pass\nimport random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n    \"\"\"\n    Generate sentences with spaces in certain target words replaced by underscores.\n    :param target_words: A list of target words to be underscored.\n    :param n_sentences: The number of sentences to generate.\n    :param vocabulary: A list of words to sample from.\n    :return: A list of generated sentences in all lowercase, with specified words/phrases underscored.\n    \"\"\"\n    if n_sentences < 0 or len(vocabulary) == 0:\n        raise ValueError(\"Invalid input\")\n\n    sentences = []\n    for _ in range(n_sentences):\n        sentence = \" \".join(random.sample(vocabulary, 10))\n        for word in target_words:\n            sentence = re.sub(r\"\\b\" + word + r\"\\b\", word.replace(\" \", \"_\"), sentence)\n        sentences.append(sentence.lower())\n\n    return sentences\ntarget_words = [\"hello\", \"world\"]\nn_sentences = 5\nvocabulary = [\"hello\", \"world\", \"python\", \"is\", \"awesome\"]", "problem": "Generate sentences with spaces in certain target words replaced by underscores.\nNote that: Notes: Each sentence is generated by randomly sampling 10 words with replacement from a vocabulary, then concatenating with a single whitespace. Then, if any words from the target_words list appear in these sentences, spaces within those words are replaced with underscores; here the modification is insensitive to the case of the letters. The function returns the processed sentences as a list of all lowercase strings.\nThe function should raise the exception for: ValueError: If n_sentences is negative or if the vocabulary is empty.\nThe function should output with:\n    list of str: A list of generated sentences in all lowercase, with specified words/phrases underscored.\nYou should write self-contained code starting with:\n```\nimport random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n```", "solution": "import random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n    if n_sentences < 0:\n        raise ValueError(\"n_sentences cannot be negative.\")\n    if not vocabulary:\n        raise ValueError(\"Vocabulary cannot be empty.\")\n\n    sentences = []\n    for _ in range(n_sentences):\n        sentence = \" \".join(random.choices(vocabulary, k=10))\n        for word in target_words:\n            pattern = re.compile(re.escape(word), re.IGNORECASE)\n            sentence = pattern.sub(word.replace(\" \", \"_\"), sentence)\n        sentences.append(sentence.lower())\n    return sentences", "pass": false}
{"task_id": "955", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in given words with underscores, then plots the frequency of each unique word.\n    Note that:\n        - All operations are case-insensitive.\n        - The frequency plot displays each unique word on the x-axis in the order they appear after modification with its corresponding frequency on the y-axis.\n    The function should raise the exception for:\n        - ValueError: If the input text is empty.\n    The function should output with:\n        - matplotlib.axes.Axes: The Axes object of the plot.\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text is empty\")\n\n    # Replace spaces with underscores\n    modified_text = re.sub(r\"\\s+\", \"_\", text)\n\n    # Split the text into individual words\n    words = modified_text.split()\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Create a list of unique words and their corresponding frequencies\n    unique_words = [word for word, count in word_counts.items()]\n    frequencies = [count for word, count in word_counts.items()]\n\n    # Create a bar plot of the word frequencies\n    fig, ax = plt.subplots()\n    ax.bar(unique_words, frequencies)\n\n    # Set the x-axis label\n    ax.set_xlabel(\"Unique Words\")\n\n    # Set the y-axis label\n    ax.set_ylabel(\"Frequency\")\n\n    # Set the title\n    ax.set_title(\"Word Frequency Plot\")\n\n    # Show the plot\n    plt.show()\n\n    return ax\ntext = \"The quick brown fox jumps over the lazy dog\"", "problem": "Replace spaces in given words with underscores, then plots the frequency of each unique word.\nNote that: Notes: All operations are case-insensitive. The frequency plot displays each unique word on the x-axis in the order they appear after modification with its corresponding frequency on the y-axis.\nThe function should raise the exception for: ValueError: If the input text is empty.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n\n    if not text:\n        raise ValueError(\"text cannot be empty.\")\n\n    for word in mystrings:\n        text = re.sub(word, word.replace(\" \", \"_\"), text, flags=re.IGNORECASE)\n\n    word_counts = Counter(text.split())\n\n    words, frequencies = zip(*word_counts.items())\n    indices = np.arange(len(word_counts))\n\n    fig, ax = plt.subplots()\n    ax.bar(indices, frequencies)\n    ax.set_xticks(indices)\n    ax.set_xticklabels(words)\n\n    return ax", "pass": false}
{"task_id": "956", "program": "import re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n\n    pass\nimport re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n    \"\"\"\n    Transforms a given string by removing special characters, normalizing whitespace, and randomizing character casing.\n    Note that: This function considers special characters to be string punctuations. Spaces, tabs, and newlines are replaced with with '_', '__', and '___' respectively. To randomize casing, this function converts characters to uppercase with a 50% probability.\n    The function should output with:\n        str: The preprocessed text string.\n    \"\"\"\n    # Remove special characters\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n\n    # Normalize whitespace\n    text = re.sub(r'\\s+', ' ', text)\n\n    # Randomize casing\n    if seed is not None:\n        random.seed(seed)\n    text = ''.join([random.choice([c.lower(), c.upper()]) for c in text])\n\n    # Replace spaces, tabs, and newlines with '_', '__', and '___' respectively\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '__')\n    text = text.replace('\\n', '___')\n\n    return text\ntext = \"Hello, World! This is a test string.\"", "problem": "Transforms a given string by removing special characters, normalizing whitespace, and randomizing character casing.\nNote that: This function considers special characters to be string punctuations. Spaces, tabs, and newlines are replaced with with '_', '__', and '___' respectively. To randomize casing, this function converts characters to uppercase with a 50% probability.\nThe function should output with:\n    str: The preprocessed text string.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n```", "solution": "import re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n\n    if seed is not None:\n        random.seed(seed)\n\n    text = re.sub(\"[%s]\" % re.escape(string.punctuation), \"\", text)\n\n    REPLACEMENTS = {\" \": \"_\", \"\\t\": \"__\", \"\\n\": \"___\"}\n    for k, v in REPLACEMENTS.items():\n        text = text.replace(k, v)\n\n    text = \"\".join(random.choice([k.upper(), k]) for k in text)\n\n    return text", "pass": false}
{"task_id": "957", "program": "import string\nimport re\ndef task_func(text: str) -> tuple:\n\n    pass\nimport string\nimport re\ndef task_func(text: str) -> tuple:\n    \"\"\"\n    Counts the number of words, characters, and unique characters in a given text.\n    Note that: This function considers whitespace-separated substrings as words. When counting characters, this function excludes whitespace and special characters (i.e. string.punctuation).\n    The function should output with:\n        tuple: A tuple containing three integers: the number of words,\n        the number of characters,\n        the number of unique characters.\n    \"\"\"\n    # Remove all punctuation and whitespace from the text\n    text = re.sub(f\"[{string.punctuation}]\", \"\", text)\n    text = re.sub(r\"\\s+\", \" \", text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Count the number of words, characters, and unique characters\n    num_words = len(words)\n    num_chars = len(text)\n    num_unique_chars = len(set(text))\n\n    return num_words, num_chars, num_unique_chars\ntext = \"Hello, World! This is a test string.\"", "problem": "Counts the number of words, characters, and unique characters in a given text.\nNote that: This function considers whitespace-separated substrings as words. When counting characters, this function excludes whitespace and special characters (i.e. string.punctuation).\nThe function should output with:\n    tuple: A tuple containing three integers: the number of words,\n    the number of characters,\n    the number of unique characters.\nYou should write self-contained code starting with:\n```\nimport string\nimport re\ndef task_func(text: str) -> tuple:\n```", "solution": "import string\nimport re\ndef task_func(text: str) -> tuple:\n    words = text.split()\n    chars = re.sub(\"\\s\", \"\", re.sub(f\"[{string.punctuation}]\", \"\", text))\n\n    return len(words), len(chars), len(set(chars))", "pass": false}
{"task_id": "958", "program": "import random\nimport re\ndef task_func(text, seed=None):\n\n    pass\nimport random\nimport re\ndef task_func(text, seed=None):\n    \"\"\"\n    Scramble the letters in each word of a given text, keeping the first and last letters of each word intact.\n    Notes:\n    - Words are determined by regex word boundaries.\n    - The scrambling only affects words longer than three characters, leaving shorter words unchanged.\n    - The function should output with:\n        str: The scrambled text.\n    \"\"\"\n    # Set the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Split the text into words using regex word boundaries\n    words = re.split(r'\\W+', text)\n\n    # Scramble each word longer than three characters\n    scrambled_words = []\n    for word in words:\n        if len(word) > 3:\n            scrambled_word = ''.join(random.sample(word, len(word)))\n        else:\n            scrambled_word = word\n        scrambled_words.append(scrambled_word)\n\n    # Join the scrambled words back into a string\n    scrambled_text = ' '.join(scrambled_words)\n\n    return scrambled_text\ntext = \"The quick brown fox jumps over the lazy dog.\"", "problem": "Scramble the letters in each word of a given text, keeping the first and last letters of each word intact.\nNote that: Notes: Words are determined by regex word boundaries. The scrambling only affects words longer than three characters, leaving shorter words unchanged.\nThe function should output with:\n    str: The scrambled text.\nYou should write self-contained code starting with:\n```\nimport random\nimport re\ndef task_func(text, seed=None):\n```", "solution": "import random\nimport re\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) > 3:\n            middle = list(word[1:-1])\n            random.shuffle(middle)\n            return word[0] + \"\".join(middle) + word[-1]\n        else:\n            return word\n\n    pattern = r\"\\b\\w+\\b\"\n    scrambled_text = re.sub(pattern, scramble_word, text)\n\n    return scrambled_text", "pass": false}
{"task_id": "959", "program": "import string\nimport random\ndef task_func(text, seed=None):\n\n    pass\nimport string\nimport random\ndef task_func(text, seed=None):\n    \"\"\"\n    Transforms the input text by replacing each alphabetic character with a random letter, while preserving the case and non-alphabetic characters of the original text.\n    :param text: The input text to be transformed.\n    :param seed: An optional random seed to use for generating random letters.\n    :return: A transformed string with random letters replacing the alphabetic characters of the input text, preserving non-alphabetic characters and the original case.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a list of all uppercase and lowercase letters\n    letters = list(string.ascii_letters)\n\n    # Create a list of all non-alphabetic characters\n    non_letters = [char for char in text if char not in letters]\n\n    # Create a list of all alphabetic characters\n    alphabetic_chars = [char for char in text if char in letters]\n\n    # Create a list of random letters with the same case as the original text\n    random_letters = [random.choice(letters) if char.islower() else random.choice(string.ascii_uppercase) for char in alphabetic_chars]\n\n    # Create a list of transformed characters by replacing alphabetic characters with random letters\n    transformed_chars = [char if char not in alphabetic_chars else random_letters.pop(0) for char in text]\n\n    # Join the transformed characters with the non-alphabetic characters\n    transformed_text = \"\".join(non_letters + transformed_chars)\n\n    return transformed_text\ntext = \"The quick brown fox jumps over the lazy dog\"", "problem": "Transforms the input text by replacing each alphabetic character with a random letter, while preserving the case and non-alphabetic characters of the original text.\nNote that: Notes: Alphabet replacements are chosen from ascii characters of the same case as the original.\nThe function should output with:\n    str: A transformed string with random letters replacing the alphabetic characters of the input text,\n    preserving non-alphabetic characters and the original case.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\ndef task_func(text, seed=None):\n```", "solution": "import string\nimport random\ndef task_func(text, seed=None):\n\n    def replace_with_random_char(c):\n        if c.isalpha():\n            if c.islower():\n                return random.choice(string.ascii_lowercase)\n            else:\n                return random.choice(string.ascii_uppercase)\n        return c\n\n    if seed is not None:\n        random.seed(seed)\n    return \"\".join(replace_with_random_char(c) for c in text)", "pass": false}
{"task_id": "960", "program": "import string\nimport random\ndef task_func(text, seed=None):\n\n    pass\nimport string\nimport random\ndef task_func(text, seed=None):\n    \"\"\"\n    Generates a password that mirrors the structure of the given text by replacing alphabetic characters with random ascii lowercase letters, digits with random single-digit numbers, spaces with either a random digit or random lowercase letter at equal probabilities, and leaving other characters unchanged.\n    Note that: This function does not handle high Unicode characters and focuses only on ASCII values.\n    The function should raise the exception for: ValueError: If the input text is empty.\n    The function should output with:\n        str: The generated password.\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    # Set the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Define the character sets for each type of character\n    alphabetic_chars = string.ascii_lowercase\n    digit_chars = \"123456789\"\n    space_chars = \"123456789abcdefghijklmnopqrstuvwxyz\"\n    other_chars = string.printable.replace(alphabetic_chars + digit_chars + space_chars, \"\")\n\n    # Create a list of characters for each type of character\n    alphabetic_list = list(alphabetic_chars)\n    digit_list = list(digit_chars)\n    space_list = list(space_chars)\n    other_list = list(other_chars)\n\n    # Create a list of all characters in the input text\n    text_list = list(text)\n\n    # Create an empty list to store the generated password\n    password = []\n\n    # Iterate through the input text and replace each character with a random character from the corresponding character set\n    for char in text_list:\n        if char in alphabetic_chars:\n            password.append(random.choice(alphabetic_list))\n        elif char in digit_chars:\n            password.append(random.choice(digit_list))\n        elif char in space_chars:\n            password.append(random.choice(space_list))\n        else:\n            password.append(char)\n\n    # Join the list of characters to create the generated password\n    password = \"\".join(password)\n\n    return password\ntext = \"Hello World!\"", "problem": "Generates a password that mirrors the structure of the given text by replacing alphabetic characters with random ascii lowercase letters, digits with random single-digit numbers, spaces wth either a random digit or random lowercase letter at equal probabilities, and leaving other characters unchanged.\nNote that: This function does not handle high Unicode characters and focuses only on ASCII values.\nThe function should raise the exception for: ValueError: If the input text is empty.\nThe function should output with:\n    str: The generated password.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\ndef task_func(text, seed=None):\n```", "solution": "import string\nimport random\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    if not text:\n        raise ValueError(\"text cannot be empty.\")\n    password = \"\"\n    for char in text:\n        random_lowercase = random.choice(string.ascii_lowercase)\n        random_digit = random.choice(string.digits)\n        if char.isalpha():\n            password += random_lowercase\n        elif char.isdigit():\n            password += random_digit\n        elif char == \" \":\n            if random.random() < 0.5:\n                password += random_lowercase\n            else:\n                password += random_digit\n        else:\n            password += char\n    return password", "pass": false}
{"task_id": "961", "program": "import os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n\n    pass\nimport os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n    \"\"\"\n    Traverses a given directory recursively to count files by specified extensions.\n    Note that: This function counts files in a case-sensitive manner.\n    The function should raise the exception for: OSError: If the specified directory does not exist.\n    The function should output with:\n        Counter: An object containing counts of files for each of the specified extensions.\n    \"\"\"\n    if not os.path.exists(directory):\n        raise OSError(\"Directory does not exist\")\n\n    counter = Counter()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extensions):\n                counter[file.split(\".\")[-1]] += 1\n\n    if not keep_zero:\n        counter = {ext: count for ext, count in counter.items() if count > 0}\n\n    return counter\ndirectory = \"path/to/directory\"\nextensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]", "problem": "Traverses a given directory recursively to count files by specified extensions.\nNote that: This function counts files in a case-sensitive manner.\nThe function should raise the exception for: OSError: If the specified directory does not exist.\nThe function should output with:\n    Counter: An object containing counts of files for each of the specified extensions.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n```", "solution": "import os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n    if not os.path.exists(directory):\n        raise OSError(\"directory must exist.\")\n\n    counter = Counter()\n\n    for suffix in extensions:\n        count = len(\n            glob.glob(os.path.join(directory, \"**\", \"*\" + suffix), recursive=True)\n        )\n        if count:\n            counter[suffix] += count\n        else:\n            if keep_zero:\n                counter[suffix] += count\n    return counter", "pass": false}
{"task_id": "962", "program": "import os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str):\n\n    pass\nimport os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str):\n    \"\"\"\n    Moves files with specific extensions from a source directory to a target directory, handling naming conflicts by renaming duplicates.\n    Notes: This function scans the source directory recursively to find files. Files are filtered by the extensions: \".txt\", \".docx\", \".xlsx\", \".csv\". Renaming of files due to naming conflicts follows the pattern '<original_name>-n.<extension>'.\n    The function should raise the exception for: FileNotFoundError: If source_directory does not exist.\n    The function should output with:\n        int: The number of files successfully moved.\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist.\")\n\n    # Create target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Define the extensions to filter\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Initialize the number of files moved\n    num_files_moved = 0\n\n    # Iterate over all files in the source directory\n    for file in glob.iglob(os.path.join(source_directory, \"**\"), recursive=True):\n        # Check if the file has a valid extension\n        if os.path.splitext(file)[1].lower() in extensions:\n            # Get the file name and extension\n            file_name, file_extension = os.path.splitext(file)\n\n            # Check if the file already exists in the target directory\n            if os.path.exists(os.path.join(target_directory, file_name + file_extension)):\n                # Rename the file with a unique name\n                new_file_name = file_name + \"-\" + str(num_files_moved) + file_extension\n                shutil.move(file, os.path.join(target_directory, new_file_name))\n            else:\n                # Move the file to the target directory\n                shutil.move(file, os.path.join(target_directory, file_name + file_extension))\n\n            # Increment the number of files moved\n            num_files_moved += 1\n\n    return num_files_moved", "problem": "Moves files with specific extensions from a source directory to a target directory, handling naming conflicts by renaming duplicates.\nNote that: Notes: This function scans the source directory recursively to find files. Files are filtered by the extensions: \".txt\", \".docx\", \".xlsx\", \".csv\". Renaming of files due to naming conflicts follows the pattern '<original_name>-n.<extension>'.\nThe function should raise the exception for: FileNotFoundError: If source_directory does not exist.\nThe function should output with:\n    int: The number of files successfully moved.\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str):\n```", "solution": "import os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str):\n    moved_files = 0\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"source_directory must exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    for extension in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n        filepaths = glob.glob(\n            os.path.join(source_directory, \"**\", \"*\" + extension), recursive=True\n        )\n        for filepath in filepaths:\n            filename = Path(filepath).name\n            stem = Path(filepath).stem\n            target_filepath = os.path.join(target_directory, filename)\n\n            count = 1\n            while os.path.exists(target_filepath):\n                new_filename = f\"{stem}-{count}{extension}\"\n                target_filepath = os.path.join(target_directory, new_filename)\n                count += 1\n\n            shutil.move(filepath, target_filepath)\n            moved_files += 1\n\n    return moved_files", "pass": false}
{"task_id": "963", "program": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n\n    pass\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\n    The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\n    The function should raise the exception for: OSError: If the source_directory does not exist.\n    The function should output with:\n        str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\n    \"\"\"\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n\n    # Get a list of all files in the source directory with the valid extensions\n    files = [f for f in glob.glob(os.path.join(source_directory, \"*.txt\"), recursive=True)]\n    files += [f for f in glob.glob(os.path.join(source_directory, \"*.docx\"), recursive=True)]\n    files += [f for f in glob.glob(os.path.join(source_directory, \"*.xlsx\"), recursive=True)]\n    files += [f for f in glob.glob(os.path.join(source_directory, \"*.csv\"), recursive=True)]\n\n    # Create the target directory if it does not exist\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    # Create the zip file\n    zip_file = zipfile.ZipFile(os.path.join(target_directory, zip_name + \".zip\"), \"w\")\n    for file in files:\n        zip_file.write(file, os.path.basename(file))\n    zip_file.close()\n\n    # Return the full path to the created zip file\n    return str(target_directory.joinpath(zip_name + \".zip\"))\nsource_directory = \"path/to/source/directory\"\ntarget_directory = \"path/to/target/directory\"\nzip_name = \"my_zip_file\"", "problem": "Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\nNote that: The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\nThe function should raise the exception for: OSError: If the source_directory does not exist.\nThe function should output with:\n    str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n```", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    if not os.path.exists(source_directory):\n        raise OSError(\"source_directory must exist.\")\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory, exist_ok=True)\n\n    zip_path = os.path.join(target_directory, f\"{zip_name.strip()}.zip\")\n    with zipfile.ZipFile(zip_path, \"w\") as zipf:\n        for extension in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n            for file in glob.glob(\n                f\"{source_directory}/**/*{extension}\", recursive=True\n            ):\n                zipf.write(file, arcname=Path(file).name)\n\n    return os.path.abspath(zip_path)", "pass": false}
{"task_id": "964", "program": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n\n    pass\nimport os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files with specific extensions (.txt, .docx, .xlsx, .csv) from a source directory to CSV files and saves them in a target directory.\n    :param source_directory: The source directory containing the files to be converted.\n    :param target_directory: The target directory where the converted files will be saved.\n    :return: The number of files successfully converted to CSV.\n    \"\"\"\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Define the file extensions to convert\n    file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Initialize the number of files converted to 0\n    num_converted = 0\n\n    # Iterate over the files in the source directory\n    for file in os.listdir(source_directory):\n        # Get the file extension\n        file_extension = os.path.splitext(file)[1]\n\n        # Check if the file extension is in the list of file extensions to convert\n        if file_extension in file_extensions:\n            # Open the file and read its contents\n            with open(os.path.join(source_directory, file), \"r\") as f:\n                file_contents = f.read()\n\n            # Create a Pandas DataFrame with the file contents\n            df = pd.DataFrame({\"Text\": [file_contents]})\n\n            # Save the DataFrame to a CSV file in the target directory\n            df.to_csv(os.path.join(target_directory, file + \".csv\"), index=False)\n\n            # Increment the number of files converted\n            num_converted += 1\n\n    return num_converted", "problem": "Converts files with specific extensions (.txt, .docx, .xlsx, .csv) from a source directory to CSV files and saves them in a target directory.\nNote that: Notes: Each file's text content is captured and stored in a CSV with a single 'Text' column and no row indices. This function will overwrite existing files in the target directory if they have the same names as the converted files.\nThe function should raise the exception for: FileNotFoundError: If the source directory does not exist.\nThe function should output with:\n    int: The number of files successfully converted to CSV.\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n```", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n    converted_files = 0\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"source_directory must exist.\")\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory, exist_ok=True)\n\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            extension = Path(file).suffix\n            if extension in extensions:\n                filepath = os.path.join(root, file)\n                target_filepath = os.path.join(\n                    target_directory, Path(file).stem + \".csv\"\n                )\n                if extension == \".csv\":\n                    df = pd.read_csv(filepath)\n                elif extension == \".xlsx\":\n                    df = pd.read_excel(filepath, engine=\"openpyxl\")\n                elif extension == \".docx\":\n                    doc = docx.Document(filepath)\n                    data = [p.text for p in doc.paragraphs]\n                    df = pd.DataFrame({\"Text\": data})\n                elif extension == \".txt\":\n                    with open(filepath, \"r\") as f:\n                        data = f.readlines()\n                    df = pd.DataFrame({\"Text\": data})\n\n                df.to_csv(target_filepath, index=False)\n                converted_files += 1\n\n    return converted_files", "pass": false}
{"task_id": "965", "program": "import os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n\n    pass\nimport os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n    \"\"\"\n    Moves files matching a specific regex pattern from a source directory to a target directory.\n    Note that: If source_directory does not exist or is not a directory, this function returns 0. If target_directory does not exist, this function will create it.\n    The function should output with:\n        int: The number of files successfully moved.\n    \"\"\"\n    if not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    num_moved = 0\n    for filename in os.listdir(source_directory):\n        if re.match(pattern, filename):\n            shutil.move(os.path.join(source_directory, filename), target_directory)\n            num_moved += 1\n\n    return num_moved", "problem": "Moves files matching a specific regex pattern from a source directory to a target directory.\nNote that: If source_directory does not exist or is not a directory, this function returns 0. If target_directory does not exist, this function will create it.\nThe function should output with:\n    int: The number of files successfully moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n```", "solution": "import os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n    moved_files_count = 0\n\n    if not os.path.exists(source_directory) or not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    for root, _, files in os.walk(source_directory):\n        for file in files:\n            if re.search(pattern, file):\n                shutil.move(\n                    os.path.join(root, file), os.path.join(target_directory, file)\n                )\n                moved_files_count += 1\n\n    return moved_files_count", "pass": false}
{"task_id": "966", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Calculate the cumulative sum for each column in a given DataFrame and plot the results in a bar chart.\n    Note that: NaN values are ignored in the cumulative sum calculation, i.e. treated as zero for the purpose of the sum without changing existing values to NaN.\n    The plot title is set to 'Cumulative Sum per Column'. X-axis label is 'Index' and Y-axis label is 'Cumulative Sum'. A legend is included in the plot.\n    The function should raise the exception for: ValueError: If the DataFrame is empty or contains non-numeric data.\n    The function should output with:\n        tuple: A tuple containing:\n        (1) A DataFrame with cumulative sums for each column.\n        (2) A matplotlib bar chart Figure of these cumulative sums.\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if not df.applymap(lambda x: isinstance(x, (int, float))).all().all():\n        raise ValueError(\"DataFrame contains non-numeric data\")\n\n    # Calculate cumulative sum for each column\n    cumsum_df = df.cumsum(axis=0)\n\n    # Plot the cumulative sum\n    fig, ax = plt.subplots()\n    ax.bar(cumsum_df.index, cumsum_df.values)\n    ax.set_title(\"Cumulative Sum per Column\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.legend(cumsum_df.columns)\n\n    return cumsum_df, fig\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})", "problem": "Calculate the cumulative sum for each column in a given DataFrame and plot the results in a bar chart.\nNote that: NaN values are ignored in the cumulative sum calculation, i.e. treated as zero for the purpose of the sum without changing existing values to NaN. The plot title is set to 'Cumulative Sum per Column'. X-axis label is 'Index' and Y-axis label is 'Cumulative Sum'. A legend is included in the plot.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or contains non-numeric data.\nThe function should output with:\n    tuple: A tuple containing:\n    (1) A DataFrame with cumulative sums for each column.\n    (2) A matplotlib bar chart Figure of these cumulative sums.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    cumsum_df = df.cumsum()\n\n    fig, ax = plt.subplots()\n    cumsum_df.plot(kind=\"bar\", ax=ax)\n    ax.set_title(\"Cumulative Sum per Column\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.legend()\n\n    return cumsum_df, fig", "pass": false}
{"task_id": "967", "program": "import numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n\n    pass\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n    \"\"\"\n    Calculates and plots both a given function and its cumulative integral over a specified range, using a linearly spaced range of x-values.\n\n    Parameters\n    ----------\n    func : function\n        The function to be plotted.\n    x_range : tuple, optional\n        The range of x-values over which to plot the function and its integral.\n        The default is (-2, 2).\n    num_points : int, optional\n        The number of points to use when plotting the function and its integral.\n        The default is 1000.\n\n    Returns\n    -------\n    matplotlib.axes.Axes\n        The Axes object containing the plots of the function and its integral.\n    \"\"\"\n    # Create a linearly spaced range of x-values\n    x = np.linspace(*x_range, num_points)\n\n    # Calculate the function and its integral\n    y = func(x)\n    integral = integrate.cumtrapz(y, x)\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the function and its integral\n    ax.plot(x, y, label='Function')\n    ax.plot(x, integral, label='Cumulative Integral')\n\n    # Add a legend and labels for the x and y axes\n    ax.legend()\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n    return ax\ndef f(x):\n    return np.sin(x)", "problem": "Calculates and plots both a given function and its cumulative integral over a specified range, using a linearly spaced range of x-values.\nNote that: The plot includes a legend and labels for the x and y axes that include the function's name.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the plots of the function and its integral.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n```", "solution": "import numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n    X = np.linspace(x_range[0], x_range[1], num_points)\n    y = func(X)\n    y_int = integrate.cumulative_trapezoid(y, X, initial=0)\n\n    fig, ax = plt.subplots()\n    ax.plot(X, y, label=f\"{func.__name__}(x)\")\n    ax.plot(X, y_int, label=f\"Integral of {func.__name__}(x)\")\n    ax.legend()\n\n    return ax", "pass": false}
{"task_id": "968", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n    \"\"\"\n    Creates and returns a heatmap of the cumulative sum of each column in a dictionary.\n    Only numeric columns are considered for the heatmap. Non-numeric columns are ignored.\n    The function should raise the exception for:\n        ValueError: If the DataFrame is empty or if no numeric columns are present.\n    The function should output with:\n        matplotlib.axes._axes.Axes: The Axes object of the Seaborn heatmap.\n    \"\"\"\n    # Check if the DataFrame is empty\n    if data.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Get the numeric columns\n    numeric_cols = data.select_dtypes(include=[\"number\"]).columns\n\n    # Check if there are any numeric columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"No numeric columns present.\")\n\n    # Create a new DataFrame with the cumulative sum of each column\n    cumulative_sum = data[numeric_cols].cumsum()\n\n    # Create a heatmap of the cumulative sum\n    ax = sns.heatmap(cumulative_sum, annot=True, cmap=\"YlGnBu\")\n\n    return ax\ndata = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [\"a\", \"b\", \"c\"]})", "problem": "Creates and return a heatmap of the cumulative sum of each column in a dictionary.\nNote that: Notes: Only numeric columns are considered for the heatmap. Non-numeric columns are ignored.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if no numeric columns are present.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the Seaborn heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n    df = pd.DataFrame(data)\n    numeric_df = df.select_dtypes(include=[\"number\"])\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns present\")\n\n    df_cumsum = numeric_df.cumsum()\n    ax = sns.heatmap(df_cumsum)\n    return ax", "pass": false}
{"task_id": "969", "program": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n\n    pass\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame.\n\n    Returns:\n        pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n        respective column in the input DataFrame, retaining the original column names.\n\n    Raises:\n        TypeError: If the DataFrame contains non-numeric data types.\n        ValueError: If the DataFrame is empty or contains NaN values.\n    \"\"\"\n    # Check if the DataFrame is empty or contains NaN values\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"The DataFrame is empty or contains NaN values.\")\n\n    # Check if the DataFrame contains non-numeric data types\n    if not df.select_dtypes(include=np.number).empty:\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n\n    # Compute the MinMax-normalized cumulative sum for each numeric column\n    scaler = MinMaxScaler()\n    df_scaled = scaler.fit_transform(df)\n    df_cumsum = df_scaled.cumsum()\n\n    # Return the normalized cumulative sum DataFrame\n    return pd.DataFrame(df_cumsum, columns=df.columns, index=df.index)\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})", "problem": "Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\nThe function should raise the exception for: TypeError: If the DataFrame contains non-numeric data types. ValueError: If the DataFrame is empty or contains NaN values.\nThe function should output with:\n    pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n    respective column in the input DataFrame, retaining the original column names.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n```", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    if df.select_dtypes(include=np.number).shape[1] != df.shape[1]:\n        raise TypeError(\"Input DataFrame contains non-numeric data types.\")\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"Input DataFrame is empty or contains NaN values.\")\n\n    df_cumsum = df.cumsum()\n    scaler = MinMaxScaler()\n    df_norm_cumsum = pd.DataFrame(scaler.fit_transform(df_cumsum), columns=df.columns)\n\n    return df_norm_cumsum", "pass": false}
{"task_id": "970", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers, representing how the cumulative probability increases with the sorted data indexes.\n    Note that: In case of an all-zeros input, the cumulative probability remains at 0 across all indexes. The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve. The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and \"Cumulative Probability\" on the y-axis.\n    The function should raise the exception for: ValueError: If the input array contains negative numbers or NaNs. TypeError: If the input array contains non-numeric inputs.\n    The function should output with:\n        matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n    \"\"\"\n    # Check if the input array contains negative numbers or NaNs\n    if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs\")\n\n    # Check if the input array contains non-numeric inputs\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs\")\n\n    # Sort the input array and calculate the cumulative probabilities\n    sorted_data = np.sort(data)\n    cumulative_probabilities = np.cumsum(sorted_data) / np.sum(sorted_data)\n\n    # Plot the cumulative probabilities\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_probabilities, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n\n    return ax\ndata = np.array([1, 2, 3, 4, 5])", "problem": "Plots the cumulative probability distribution of a given NumPy array of numbers, representing how the cumulative probability increases with the sorted data indexes.\nNote that: In case of an all-zeros input, the cumulative probability remains at 0 across all indexes. The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve. The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and \"Cumulative Probability\" on the y-axis.\nThe function should raise the exception for: ValueError: If the input array contains negative numbers or NaNs. TypeError: If the input array contains non-numeric inputs.\nThe function should output with:\n    matplotlib.pyplot.Axes: The plot of cumulative probabilities.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n\n    return ax", "pass": false}
{"task_id": "971", "program": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n\n    pass\nimport os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes a given directory, listing each file it contains along with its size, creation time, and last modification time without recursing into subdirectories.\n\n    Args:\n        directory_path (str): The path to the directory to analyze.\n\n    Returns:\n        list of tuples: Each tuple contains (file name, file size in bytes, creation time in ISO format, modification time in ISO format).\n\n    Raises:\n        ValueError: If the provided directory does not exist.\n    \"\"\"\n    if not os.path.exists(directory_path):\n        raise ValueError(f\"Directory '{directory_path}' does not exist.\")\n\n    result = []\n    for file in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            creation_time = datetime.fromtimestamp(os.path.getctime(file_path), tz=timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(os.path.getmtime(file_path), tz=timezone.utc).isoformat()\n            result.append((file, file_size, creation_time, modification_time))\n\n    return result\ndirectory_path = \"/path/to/empty_directory\"", "problem": "Analyzes a given directory, listing each file it contains along with its size, creation time, and last modification time without recursing into subdirectories. >>> result = task_func('/path/to/empty_directory') >>> print(result) []\nNote that: Notes: The function assumes the directory exists and contains only files (no subdirectories are processed). Times are reported in system time, UTC. The creation and modification times are platform dependent; on some systems, the creation time might not be available and might be replaced by the last metadata change time.\nThe function should raise the exception for: ValueError: If the provided directory does not exist.\nThe function should output with:\n    list of tuples: Each tuple contains (file name, file size in bytes,\n    creation time in ISO format, modification time in ISO format).\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n```", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    if not Path(directory_path).is_dir():\n        raise ValueError(f\"The path {directory_path} is not a valid directory.\")\n\n    file_details = []\n    for entry in os.scandir(directory_path):\n        if entry.is_file():\n            file_info = os.stat(entry.path)\n            file_size = file_info.st_size\n            creation_time = datetime.fromtimestamp(\n                file_info.st_ctime, timezone.utc\n            ).isoformat()\n            modification_time = datetime.fromtimestamp(\n                file_info.st_mtime, timezone.utc\n            ).isoformat()\n            file_details.append(\n                (entry.name, file_size, creation_time, modification_time)\n            )\n\n    return file_details", "pass": false}
{"task_id": "972", "program": "import pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n\n    pass\nimport pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n    \"\"\"\n    Validates that a given file path does not contain invalid characters for file paths then splits it into path components using a specified delimiter.\n    Note that:\n    - Backslashes ('\\\\') are internally converted to forward slashes ('/') before processing.\n    - This function treats '<', '>', ':', '\"', '|', '?', '*' as invalid characters in paths.\n    The function should raise the exception for:\n    - ValueError: If the path contains invalid characters.\n    The function should output with:\n        - list: A list of the path components if the path is valid;\n        - otherwise, an empty list if the path contains invalid characters.\n    \"\"\"\n    # Convert backslashes to forward slashes\n    path = path.replace('\\\\', '/')\n\n    # Check if the path contains invalid characters\n    if any(char in path for char in '<>:\"|?*'):\n        raise ValueError(\"Invalid character in path\")\n\n    # Split the path into components using the specified delimiter\n    path_components = path.split(delimiter)\n\n    return path_components\npath = \"C:/Users/John/Documents/example.txt\"\ndelimiter = \"/\"", "problem": "Validates that a given file path does not contain invalid characters for file paths then splits it into path components using a specified delimiter.\nNote that: Notes: Backslashes ('\\\\') are internally converted to forward slashes ('/') before processing. This function treats '<', '>', ':', '\"', '|', '?', '*' as invalid characters in paths.\nThe function should raise the exception for: ValueError: If the path contains invalid characters.\nThe function should output with:\n    list: A list of the path components if the path is valid;\n    otherwise, an empty list if the path contains invalid characters.\nYou should write self-contained code starting with:\n```\nimport pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n```", "solution": "import pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n\n    if not path:\n        return []\n\n    path = path.replace(\"\\\\\", \"/\")\n\n    path_obj = pathlib.Path(path)\n\n    invalid_chars = set('<>:\"|?*')\n    if any(\n        set(str(component)).intersection(invalid_chars) for component in path_obj.parts\n    ):\n        return []\n\n    return [\n        component\n        for component in path_obj.parts\n        if component and component != delimiter\n    ]", "pass": false}
{"task_id": "973", "program": "import os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n\n    pass\nimport os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n    \"\"\"\n    Splits a given file path by a specific delimiter and computes disk usage for each directory component.\n\n    Args:\n        path (str): The file path to split and compute disk usage for.\n        delimiter (str): The delimiter to use for splitting the path. Defaults to '/'.\n\n    Returns:\n        list: A list of tuples where each tuple contains a path component and its disk usage as a dictionary.\n            The disk usage dictionary contains keys 'total', 'used', and 'free'.\n\n    Raises:\n        ValueError: If the 'path' is empty, not a string, or contain invalid components.\n        FileNotFoundError: If the 'path' does not exist in the filesystem.\n    \"\"\"\n    if not isinstance(path, str):\n        raise ValueError(\"'path' must be a string\")\n    if not path:\n        raise ValueError(\"'path' cannot be empty\")\n    if delimiter not in path:\n        raise ValueError(\"'path' must contain the delimiter\")\n\n    path_components = path.split(delimiter)\n    disk_usage = []\n    for component in path_components:\n        try:\n            usage = shutil.disk_usage(component)\n            disk_usage.append((component, usage))\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"'{component}' does not exist in the filesystem\")\n\n    return disk_usage", "problem": "Splits a given file path by a specific delimiter and computes disk usage for each directory component. >>> task_func('a/b', '/') [('a', {'total': 300, 'used': 150, 'free': 150}), ('b', {'total': 400, 'used': 200, 'free': 200})]\nThe function should raise the exception for: ValueError: If the 'path' is empty, not a string, or contain invalid components. FileNotFoundError: If the 'path' does not exist in the filesystem.\nThe function should output with:\n    list: A list of tuples where each tuple contains a path component and its disk usage as a dictionary.\n    The disk usage dictionary contains keys 'total', 'used', and 'free'.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n```", "solution": "import os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n    if not path or not isinstance(path, str):\n        raise ValueError(\"Path must be a non-empty string\")\n    if not os.path.exists(path):\n        raise FileNotFoundError(f\"Path '{path}' does not exist\")\n\n    path_components = path.strip(delimiter).split(delimiter)\n    if not all(path_components):\n        raise ValueError(\"Path contains invalid components\")\n\n    results = []\n    for index, component in enumerate(path_components):\n        sub_path = delimiter.join(path_components[: index + 1])\n        if not sub_path.startswith(delimiter):\n            sub_path = delimiter + sub_path\n        usage = shutil.disk_usage(sub_path)\n        results.append(\n            (component, {\"total\": usage.total, \"used\": usage.used, \"free\": usage.free})\n        )\n\n    return results", "pass": false}
{"task_id": "974", "program": "import shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n\n    pass\nimport shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory\")\n\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True)\n\n    files = [f for f in source_path.iterdir() if f.is_file()]\n    for file in files:\n        shutil.copy(file, destination_path)\n\n    return source_path.name, [file.name for file in files]\nsource_path = \"path/to/source/directory\"\ndestination_path = \"path/to/destination/directory\"", "problem": "Lists files in the specified source directory without descending into subdirectories and copies them to a destination directory.\nThe function should raise the exception for: ValueError: If source_path does not exist or is not a directory.\nThe function should output with:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n    full paths) that were copied.\nYou should write self-contained code starting with:\n```\nimport shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n```", "solution": "import shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n\n    destination_path.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "pass": true}
{"task_id": "975", "program": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n\n    pass\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n    \"\"\"\n    Create a Pandas DataFrame with a specified number of rows filled with random values in [0, 1) and shuffled columns.\n    Note that: The columns should be unique and sorted in the ascending order.\n    The function should output with:\n        pd.DataFrame: A pandas DataFrame with shuffled columns.\n    \"\"\"\n    np.random.seed(seed)\n    data = np.random.rand(rows, len(columns))\n    df = pd.DataFrame(data, columns=columns)\n    df = df.sample(frac=1, axis=1)\n    return df", "problem": "Create a Pandas DataFrame with a specified number of rows filled with random values in [0, 1) and shuffled columns.\nNote that: The columns should be unique and sorted in the ascending order.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with shuffled columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n```", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n    np.random.seed(seed)\n    columns = sorted(list(set(columns)))\n    data = np.random.rand(rows, len(columns))\n    np.random.shuffle(columns)\n    df = pd.DataFrame(data, columns=columns)\n    return df", "pass": false}
{"task_id": "976", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n    \"\"\"\n    Randomly shuffle the given array's features, normalize its values, then convert to a DataFrame with shuffled feature names.\n    Note that: This function normalizes data by subtracting the mean and scaling to unit variance. Feature names are of format f{n}; for example, if the records have 5 features, feature names will be [\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"] shuffled.\n    The function should raise the exception for: ValueError: If records is not 2D.\n    The function should output with:\n        pd.DataFrame: A pandas DataFrame containing the preprocessed data, with shuffled feature names.\n    \"\"\"\n    if len(records.shape) != 2:\n        raise ValueError(\"records must be 2D\")\n\n    # Shuffle the feature names\n    feature_names = [\"f\" + str(i) for i in range(1, records.shape[1] + 1)]\n    np.random.seed(random_seed)\n    np.random.shuffle(feature_names)\n\n    # Normalize the data\n    scaler = StandardScaler()\n    normalized_data = scaler.fit_transform(records)\n\n    # Convert to a DataFrame with shuffled feature names\n    df = pd.DataFrame(normalized_data, columns=feature_names)\n\n    return df\nrecords = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Randomly shuffle the given array's features, normalize its values, then convert to a DataFrame with shuffled feature names.\nNote that: Notes: This function normalizes data by subtracting the mean and scaling to unit variance. Feature names are of format f{n}; for example, if the records have 5 features, feature names will be [\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"] shuffled.\nThe function should raise the exception for: ValueError: If records is not 2D.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame containing the preprocessed data, with shuffled feature names.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    if not (records.ndim == 2):\n        raise ValueError(\"Input must be a 2D numpy array.\")\n\n    records_copy = records.copy()\n    np.random.shuffle(records_copy.T)\n\n    scaler = StandardScaler()\n    normalized_records = scaler.fit_transform(records_copy)\n\n    features = [f\"f{i+1}\" for i in range(records[0].shape[0])]\n    np.random.shuffle(features)\n\n    df = pd.DataFrame(normalized_records, columns=features)\n\n    return df", "pass": true}
{"task_id": "977", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n    \"\"\"\n    Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\n    :param array: The 2D numpy array to shuffle and visualize.\n    :param features: A list of strings to use as labels for the heatmap's x-axis.\n    :param seed: A random seed to use for shuffling the columns.\n    :return: Axes: The matplotlib Axes object containing the heatmap.\n    \"\"\"\n    if not isinstance(array, np.ndarray) or array.ndim != 2:\n        raise ValueError(\"'array' must be a 2D numpy array.\")\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"'features' must match the number of columns in 'array'.\")\n    if seed is not None:\n        np.random.seed(seed)\n    shuffled_array = np.random.permutation(array.T).T\n    if features is None:\n        features = [str(i) for i in range(1, array.shape[1] + 1)]\n    fig, ax = plt.subplots()\n    sns.heatmap(shuffled_array, annot=True, cmap=\"Blues\", xticklabels=features, yticklabels=False)\n    return ax\narray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\nNote that: Notes: This function uses the features list as labels for the heatmap's x-axis if features is provided; otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of columns in the array.\nThe function should raise the exception for: ValueError: If 'features' is provided and does not match the number of columns in 'array'; and if 'array' is empty or not 2-dimensional.\nThe function should output with:\n    Axes: The matplotlib Axes object containing the heatmap.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n\n    shuffled_array = np.random.permutation(array.T).T\n\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n\n    return ax", "pass": true}
{"task_id": "978", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n    \"\"\"\n    Shuffles the columns of a numpy array randomly, performs Principal Component Analysis (PCA) to reduce the dimensionality to 2 principal components, and returns these components as a pandas DataFrame.\n    Note that: PCA reduction will default to the number of features if fewer than 2. An named but empty DataFrame is returned for arrays without features or with empty content.\n    The function should raise the exception for: ValueError: If the input array is not 2D.\n    The function should output with:\n        pandas.DataFrame: DataFrame with columns 'PC1' and 'PC2' representing the two principal components.\n    \"\"\"\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2D\")\n    if array.size == 0:\n        return pd.DataFrame(columns=[\"PC1\", \"PC2\"])\n    pca = PCA(n_components=2, random_state=seed)\n    pca.fit(array.T)\n    return pd.DataFrame(pca.components_, columns=[\"PC1\", \"PC2\"])", "problem": "Shuffles the columns of a numpy array randomly, performs Principal Component Analysis (PCA) to reduce the dimensionality to 2 principal components, and returns these components as a pandas DataFrame.\nNote that: PCA reduction will default to the number of features if fewer than 2. An named but empty DataFrame is returned for arrays without features or with empty content.\nThe function should raise the exception for: ValueError: If the input array is not 2D.\nThe function should output with:\n    pandas.DataFrame: DataFrame with columns 'PC1' and 'PC2' representing the two principal components.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    if not isinstance(array, np.ndarray) or len(array.shape) != 2:\n        raise ValueError(\"Input must be a 2D numpy array.\")\n\n    if array.size == 0 or array.shape[1] == 0:\n        return pd.DataFrame(columns=[\"PC1\", \"PC2\"])\n\n    shuffled_array = np.copy(array)\n    np.random.shuffle(np.transpose(shuffled_array))\n\n    n_components = min(2, shuffled_array.shape[1])\n    pca = PCA(n_components=n_components)\n    principal_components = pca.fit_transform(shuffled_array)\n\n    column_labels = [\"PC1\", \"PC2\"][:n_components]\n    df = pd.DataFrame(data=principal_components, columns=column_labels)\n\n    return df", "pass": false}
{"task_id": "979", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\ndef task_func(feature_array, target_array, feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"], target_name=\"target\", seed=None):\n    # Shuffle the columns of the feature array\n    np.random.seed(seed)\n    shuffled_feature_array = feature_array[:, np.random.permutation(feature_array.shape[1])]\n\n    # Create a DataFrame with the shuffled feature array and the target array\n    df = pd.DataFrame(data=shuffled_feature_array, columns=feature_names)\n    df[target_name] = target_array\n\n    # Train a Random Forest Classifier on the shuffled data\n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(df[feature_names], df[target_name])\n\n    return clf", "problem": "Shuffle the columns of a given numpy array and train a Random Forest Classifier on the shuffled data.\nThe function should output with:\n    sklearn.ensemble.RandomForestClassifier: A trained Random Forest Classifier on the shuffled feature data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n    if seed is not None:\n        np.random.seed(seed)\n\n    shuffled_array = feature_array.copy()\n    np.random.shuffle(shuffled_array.T)\n\n    df = pd.DataFrame(shuffled_array, columns=feature_names)\n    df[target_name] = target_array\n\n    clf = RandomForestClassifier()\n    clf.fit(df[feature_names], df[target_name])\n\n    return clf", "pass": true}
{"task_id": "980", "program": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    pass\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Get the numeric columns\n    numeric_cols = df.select_dtypes(include=np.number).columns\n\n    # Check if there are any numeric columns\n    if len(numeric_cols) == 0:\n        raise ValueError(\"No numeric columns present\")\n\n    # Standardize the numeric columns\n    scaler = StandardScaler()\n    df_scaled = scaler.fit_transform(df[numeric_cols])\n\n    # Create a correlation matrix\n    corr_matrix = df_scaled.corr()\n\n    # Plot the correlation matrix\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\", ax=ax)\n    ax.set_title(\"Correlation Matrix\")\n    ax.set_xlabel(\"Standardized Numeric Columns\")\n    ax.set_ylabel(\"Standardized Numeric Columns\")\n\n    return df_scaled, fig\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [\"a\", \"b\", \"c\"]})", "problem": "Plots the correlation matrix from numeric columns in a DataFrame and returns a DataFrame where the numeric columns are standardized to have mean 0 and variance 1.\nNote that: Notes: Only numeric columns are considered for the heatmap. Non-numeric columns are ignored.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if no numeric columns are present.\nThe function should output with:\n    pandas.DataFrame: Standardized DataFrame.\n    matplotlib.figure.Figure: Figure object containing the heatmap of the correlation matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```", "solution": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    numeric_df = df.select_dtypes(include=[np.number])\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns present\")\n\n    correlation = numeric_df.corr()\n    fig, ax = plt.subplots()\n    sns.heatmap(correlation, ax=ax)\n\n    numeric_cols = numeric_df.columns\n    scaler = StandardScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    return df, fig", "pass": false}
{"task_id": "981", "program": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(start_date, end_date, num_series, seed=None):\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than end_date\")\n    if num_series < 1:\n        raise ValueError(\"num_series must be at least 1\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    dates = pd.date_range(start_date, end_date)\n    data = {}\n    for i in range(num_series):\n        data[\"series_{}\".format(i)] = random.sample(range(100), len(dates))\n\n    df = pd.DataFrame(data, index=dates)\n\n    fig, ax = plt.subplots()\n    ax.set_title(\"Random Time Series\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Value\")\n    for i, (name, series) in enumerate(df.iteritems()):\n        ax.plot(series, label=name)\n\n    ax.legend()\n    return df, ax\nstart_date = datetime(2022, 1, 1)\nend_date = datetime(2022, 1, 31)\nnum_series = 5", "problem": "Generates a DataFrame with multiple random integer time series (each ranging from 0 to 100) from a start date to an end date, then returns the generated time series on a line plot.\nNote that: Notes: The line plot's title is set to \"Random Time Series\", the x-axis label to \"Date\", and the y-axis label to \"Value\". Each time series is plotted as a separate line with automatic coloring and legend entry labeled as \"series_x\" where x is the series number.\nThe function should raise the exception for: ValueError: If start_date is later than end_date; or if num_series is less than 1.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame containing the generated time series, indexed by date.\n    plt.Axes: A matplotlib line plot of the time series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n```", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    start_date_dt = datetime.strptime(start_date, \"%Y-%m-%d\")\n    end_date_dt = datetime.strptime(end_date, \"%Y-%m-%d\")\n    if start_date_dt > end_date_dt:\n        raise ValueError(\"start_date must be earlier than or equal to end_date.\")\n    if num_series < 1:\n        raise ValueError(\"num_series must be at least 1.\")\n\n    date_range = pd.date_range(start_date_dt, end_date_dt)\n\n    data = {}\n    for i in range(num_series):\n        series_name = f\"series_{i+1}\"\n        data[series_name] = [random.randint(0, 100) for _ in range(len(date_range))]\n\n    df = pd.DataFrame(data, index=date_range)\n\n    ax = df.plot()\n    ax.set_title(\"Random Time Series\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Value\")\n\n    return df, ax", "pass": false}
{"task_id": "982", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n    \"\"\"\n    Plots a histogram for a specified column of a pandas DataFrame and overlays it with a fitted normal distribution curve.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to plot.\n    column : str\n        The name of the column to plot.\n    bins : int, optional\n        The number of bins to use for the histogram.\n    density : bool, optional\n        Whether to normalize the histogram by the number of samples.\n    alpha : float, optional\n        The transparency of the histogram.\n    color : str, optional\n        The color of the histogram.\n    seed : int, optional\n        The random seed for the normal distribution.\n\n    Returns\n    -------\n    matplotlib.axes._axes.Axes\n        The matplotlib Axes object with the plot.\n    \"\"\"\n    # Extract the data from the DataFrame\n    data = df[column].values\n\n    # Create a histogram of the data\n    ax = plt.hist(data, bins=bins, density=density, alpha=alpha, color=color)\n\n    # Fit a normal distribution to the data\n    mu, sigma = norm.fit(data)\n\n    # Plot the normal distribution curve\n    x = np.linspace(data.min(), data.max(), 1000)\n    y = norm.pdf(x, mu, sigma)\n    ax.plot(x, y, label=f\"Normal distribution (\u03bc={mu:.2f}, \u03c3={sigma:.2f})\")\n\n    # Set the title and labels\n    ax.set_title(f\"Histogram of {column}\")\n    ax.set_xlabel(column)\n    ax.set_ylabel(\"Frequency\")\n\n    # Add a legend\n    ax.legend()\n\n    return ax", "problem": "Plots a histogram for a specified column of a pandas DataFrame and overlays it with a fitted normal distribution curve.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The matplotlib Axes object with the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    data = df[column]\n    mu, std = norm.fit(data)\n\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=bins, density=density, alpha=alpha, color=color)\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, \"k\", linewidth=2)\n\n    title = f\"Normal Fit for '{column}'\"\n    ax.set_title(title)\n    ax.set_ylabel(\"Density\")\n    ax.set_xlabel(column)\n\n    return ax", "pass": false}
{"task_id": "983", "program": "import seaborn as sns\nimport numpy as np\ndef task_func(df):\n\n    pass\nimport seaborn as sns\nimport numpy as np\ndef task_func(df):\n    \"\"\"\n    Generates a pair plot from a numeric DataFrame and calculates its covariance matrix.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n\n    Returns:\n        tuple:\n            covariance_df (pandas.DataFrame): The covariance matrix of the input DataFrame.\n            pair_plot (sns.axisgrid.PairGrid): Pair plot of the input DataFrame.\n\n    Raises:\n        ValueError: If the DataFrame is empty.\n        TypeError: If the DataFrame contains non-numeric data types.\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if not np.issubdtype(df.dtypes, np.number):\n        raise TypeError(\"DataFrame contains non-numeric data types\")\n\n    covariance_df = df.cov()\n    pair_plot = sns.pairplot(df)\n\n    return covariance_df, pair_plot", "problem": "Generates a pair plot from a numeric DataFrame and calculates its covariance matrix.\nThe function should raise the exception for: ValueError: If the DataFrame is empty. TypeError: If the DataFrame contains non-numeric data types.\nThe function should output with:\n    tuple:\n    covariance_df (pandas.DataFrame): The covariance matrix of the input DataFrame.\n    pair_plot (sns.axisgrid.PairGrid): Pair plot of the input DataFrame.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport numpy as np\ndef task_func(df):\n```", "solution": "import seaborn as sns\nimport numpy as np\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty. Non-empty DataFrame required.\")\n    if not all(df.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\n            \"DataFrame contains non-numeric data. Only numeric data types are supported.\"\n        )\n    covariance_df = df.cov()\n    pair_plot = sns.pairplot(df)\n\n    return covariance_df, pair_plot", "pass": false}
{"task_id": "984", "program": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n    # Plot the scatter plot\n    plt.scatter(df[x_column], df[y_column])\n    plt.xlabel(x_column)\n    plt.ylabel(y_column)\n    plt.title(\"Scatter Plot of {} vs {}\".format(x_column, y_column))\n\n    # Fit a linear regression model\n    X = df[x_column].values.reshape(-1, 1)\n    y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, y)\n\n    # Overlay the predicted regression line on the scatter plot\n    plt.plot(df[x_column], reg.predict(X), color='red')\n\n    return plt.gca()", "problem": "Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\nNote that: Notes: After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n```", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n\n    return ax", "pass": false}
{"task_id": "985", "program": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n\n    pass\nimport pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates a population report DataFrame and CSV file based on provided JSON data.\n    Note that:\n    - Output DataFrame has no extra index column.\n    - If this function encounters a float population that is otherwise valid, it will round it down to the nearest integer.\n    - The function should raise the exception for:\n        - ValueError: If the JSON data is malformed, empty, contains non-string country names, non-numeric or negative populations.\n        - IOError: If the file cannot be written to the specified directory.\n    - The function should output with:\n        - str: The file path of the generated CSV report.\n        - pd.DataFrame: The country-population data loaded from the input JSON, with columns:\n            - \"Country\", \"Population\".\n    \"\"\"\n    # Load the JSON data into a dictionary\n    data = json.loads(json_data)\n\n    # Check if the JSON data is malformed, empty, or contains non-string country names\n    if not isinstance(data, dict) or not data or not all(isinstance(country, str) for country in data.keys()):\n        raise ValueError(\"Invalid JSON data\")\n\n    # Check if the JSON data contains non-numeric or negative populations\n    if not all(isinstance(population, (int, float)) and population >= 0 for population in data.values()):\n        raise ValueError(\"Invalid population data\")\n\n    # Create a DataFrame with the country-population data\n    df = pd.DataFrame(data.items(), columns=[\"Country\", \"Population\"])\n\n    # Round any float populations to the nearest integer\n    df[\"Population\"] = df[\"Population\"].apply(lambda x: math.floor(x) if isinstance(x, float) else x)\n\n    # Save the DataFrame to a CSV file\n    file_path = os.path.join(output_dir, file_name)\n    df.to_csv(file_path, index=False)\n\n    return file_path, df", "problem": "Generates a population report DataFrame and CSV file based on provided JSON data.\nNote that: Notes: Output DataFrame has no extra index column. If this function encounters a float population that is otherwise valid, it will round it down to the nearest integer.\nThe function should raise the exception for: ValueError: If the JSON data is malformed, empty, contains non-string country names, non-numeric or negative populations. IOError: If the file cannot be written to the specified directory.\nThe function should output with:\n    str: The file path of the generated CSV report.\n    pd.DataFrame: The country-population data loaded from the input JSON, with columns:\n    \"Country\", \"Population\".\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n```", "solution": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    os.makedirs(output_dir, exist_ok=True)\n    file_path = os.path.join(output_dir, file_name)\n\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data provided.\")\n\n    country_data_dict = data.get(\"Countries\")\n\n    if country_data_dict is None:\n        raise ValueError(\"No valid country population data found in JSON.\")\n\n    for country, population in country_data_dict.items():\n        if not isinstance(country, str):\n            raise ValueError(f\"Country name must be a string. Invalid entry: {country}\")\n        if not isinstance(population, int):\n            if isinstance(population, float):\n                country_data_dict[country] = math.floor(population)\n            else:\n                raise ValueError(\n                    f\"Population must be an integer. Invalid entry for {country}: {population}\"\n                )\n        if population < 0:\n            raise ValueError(\"Population cannot be negative.\")\n\n    country_data = [\n        [country, population] for country, population in country_data_dict.items()\n    ]\n    df = pd.DataFrame(country_data, columns=[\"Country\", \"Population\"])\n\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Failed to write the CSV file to {output_dir}: {e}\")\n\n    return file_path, df", "pass": false}
{"task_id": "986", "program": "import json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n\n    pass\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n    \"\"\"\n    Extracts and visualizes numerical data from a JSON structure based on a specified path of keys.\n\n    Args:\n        json_data (str): The JSON data to be processed.\n        key_path (list): The path of keys to be used for data extraction.\n\n    Returns:\n        matplotlib.figure.Figure: A matplotlib figure showing a boxplot of the data values.\n\n    Raises:\n        KeyError: If a specified key is not found.\n        ValueError: If no numeric data is found, or the data string is empty or corrupted.\n    \"\"\"\n    # Parse the JSON data\n    data = json.loads(json_data)\n\n    # Extract the data values based on the key path\n    values = []\n    for key in key_path:\n        try:\n            values.append(data[key])\n        except KeyError:\n            raise KeyError(f\"Key '{key}' not found in JSON data\")\n\n    # Check if the data is numeric\n    if not all(isinstance(value, (int, float)) for value in values):\n        raise ValueError(\"No numeric data found in JSON data\")\n\n    # Create a pandas dataframe from the data\n    df = pd.DataFrame(values)\n\n    # Create a boxplot of the data\n    fig, ax = plt.subplots()\n    sns.boxplot(data=df, ax=ax)\n\n    return fig\njson_data = '{\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}'\nkey_path = [\"a\", \"b\", \"c\"]", "problem": "Extracts and visualizes numerical data from a JSON structure based on a specified path of keys.\nThe function should raise the exception for: KeyError: If a specified key is not found. ValueError: If no numeric data is found, or the data string is empty or corrupted.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure showing a boxplot of the data values.\nYou should write self-contained code starting with:\n```\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n```", "solution": "import json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n    try:\n        data = json.loads(json_data)\n        for key in key_path:\n            data = data[key]\n        values = np.fromstring(data, sep=\",\")\n\n        if values.size == 0:\n            raise ValueError(\"No numeric data found or empty data string.\")\n        df = pd.DataFrame(values, columns=[\"Values\"])\n\n        fig, ax = plt.subplots()\n        sns.boxplot(data=df, ax=ax)\n        return fig\n\n    except json.decoder.JSONDecodeError as e:\n        raise ValueError(f\"Input malformed: {e}\")\n    except KeyError as e:\n        raise KeyError(f\"Key error occurred: {e}\")\n    except ValueError as e:\n        raise ValueError(f\"Value error occurred: {e}\")", "pass": false}
{"task_id": "987", "program": "import json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n\n    pass\nimport json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n    \"\"\"\n    Processes a JSON string to extract numerical data, Min-Max normalize them, and generate a line plot.\n    :param json_data: JSON string containing numerical data.\n    :param data_key: Key path to the numerical data in the JSON string.\n    :return: Tuple containing:\n        pd.Series: Original dataset in float64.\n        pd.Series or None: Dataset after Min-Max scaling in float64, or None if data is empty.\n        plt.Axes or None: Line plot of normalized data, or None if data is empty.\n    \"\"\"\n    # Load JSON data into a dictionary\n    data = json.loads(json_data)\n\n    # Extract numerical data from the dictionary\n    try:\n        data_array = data[data_key]\n    except KeyError:\n        raise KeyError(f\"Key {data_key} not found in the given data.\")\n\n    # Convert data to a pandas Series\n    data_series = pd.Series(data_array)\n\n    # Min-Max normalize the data\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data_series.values.reshape(-1, 1))\n\n    # Create a line plot of the normalized data\n    fig, ax = plt.subplots()\n    ax.plot(normalized_data, label=\"Normalized Data\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Value\")\n    ax.set_title(\"Comparison of Original and Normalized Data\")\n    ax.legend()\n\n    return data_series, normalized_data, ax\njson_data = '{\"data\": [1, 2, 3, 4, 5]}'\ndata_key = \"data\"", "problem": "Processes a JSON string to extract numerical data, Min-Max normalize them, and generate a line plot.\nNote that: Notes: The line plot includes labeled axes and a legend. It visualizes the original data with label \"Original Data\" and normalized ones as \"Normalized Data\". The function sets the plot title to \"Comparison of Original and Normalized Data\", with \"Index\" on the x-axis and \"Value\" on the y-axis.\nThe function should raise the exception for: KeyError: if key path is not found in the given data.\nThe function should output with:\n    Tuple:\n    pd.Series: Original dataset in float64.\n    pd.Series or None: Dataset after Min-Max scaling in float64, or None if data is empty.\n    plt.Axes or None: Line plot of normalized data, or None if data is empty.\nYou should write self-contained code starting with:\n```\nimport json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n```", "solution": "import json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n    data = json.loads(json_data)\n    try:\n        data = json.loads(json_data)\n        for key in data_key.split(\".\"):\n            data = data[key]\n        values = pd.Series(data, dtype=pd.Float64Dtype)\n    except KeyError:\n        raise KeyError(f\"Key path '{data_key}' not found in the provided JSON data.\")\n\n    if values.empty:\n        return values, None, None\n\n    scaler = MinMaxScaler()\n    normalized_values = pd.Series(\n        scaler.fit_transform(values.values.reshape(-1, 1)).flatten(),\n        dtype=pd.Float64Dtype,\n    )\n\n    fig, ax = plt.subplots()\n    ax.plot(values, label=\"Original Data\")\n    ax.plot(normalized_values, label=\"Normalized Data\")\n    ax.set_title(\"Comparison of Original and Normalized Data\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Value\")\n    ax.legend()\n\n    return values, normalized_values, ax", "pass": false}
{"task_id": "988", "program": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n\n    pass\nimport os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files and directories) in a given directory against specified conditions.\n    Note that: This function evaluates file/directory names, rather than their full path. Predicates are deduplicated.\n    The function should raise the exception for:\n        ValueError: If no valid predicates are provided.\n        FileNotFoundError: If the specified directory does not exist or is not a directory.\n    The function should output with:\n        dict: A dictionary with directory items as keys and the results of condition checks as values.\n    \"\"\"\n    # Check if the directory exists and is a directory\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"{dir_path} is not a directory or does not exist\")\n\n    # Check if predicates are provided\n    if not predicates:\n        raise ValueError(\"No predicates provided\")\n\n    # Deduplicate predicates\n    predicates = list(set(predicates))\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over the items in the directory\n    for item in os.listdir(dir_path):\n        # Check if the item matches any of the predicates\n        for predicate in predicates:\n            if re.match(predicate, item):\n                results[item] = True\n                break\n        else:\n            results[item] = False\n\n    return results\ndir_path = \"path/to/directory\"\npredicates = [\"^file1\", \"^file2\", \"^file3\"]", "problem": "Evaluates each item (files and directories) in a given directory against specified conditions.\nNote that: This function evaluates file/directory names, rather than their full path. Predicates are deduplicated.\nThe function should raise the exception for: ValueError: If no valid predicates are provided. FileNotFoundError: If the specified directory does not exist or is not a directory.\nThe function should output with:\n    dict: A dictionary with directory items as keys and the results of condition checks as values.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n```", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    predicate_functions = {\n        \"is_file\": lambda x: x.is_file(),\n        \"is_dir\": lambda x: x.is_dir(),\n        \"has_special_chars\": lambda x: bool(re.search(r\"\\W\", x.stem)),\n        \"has_numbers\": lambda x: bool(re.search(r\"\\d\", x.name)),\n    }\n    predicates = [p for p in set(predicates) if p in predicate_functions]\n    if not predicates:\n        raise ValueError(\"No valid predicates provided.\")\n\n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(\n            f\"The directory {dir_path} does not exist or is not a directory.\"\n        )\n\n    results = {}\n    for item in os.listdir(dir_path):\n        full_path = Path(os.path.join(dir_path, item))\n        results[item] = {\n            predicate_name: predicate_fn(full_path)\n            for predicate_name, predicate_fn in predicate_functions.items()\n            if predicate_name in predicates\n        }\n    return results", "pass": false}
{"task_id": "989", "program": "import random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n\n    pass\nimport random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n    \"\"\"\n    Generates a random string of specified length and evaluates it for specific characteristics.\n    Notes:\n        - Predicates are deduplicated.\n        - Characters are randomly sampled from string.ascii_letters, string.digits, and string.punctuation with replacement.\n        - Any invalid predicates provided will result in a KeyError.\n        - If no predicates are provided, the result dictionary will be empty.\n    The function should raise the exception for:\n        - ValueError: If the specified length is negative.\n        - KeyError: If any predicate is not recognized.\n    The function should output with:\n        - tuple:\n            - string: the generated random text\n            - dict: the text's characteristics\n    \"\"\"\n    if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    predicates = set(predicates)\n    if not predicates:\n        return \"\", {}\n\n    text = \"\".join(random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(length))\n\n    characteristics = {}\n    for predicate in predicates:\n        if predicate == \"has_lowercase\":\n            characteristics[predicate] = any(c.islower() for c in text)\n        elif predicate == \"has_uppercase\":\n            characteristics[predicate] = any(c.isupper() for c in text)\n        elif predicate == \"has_digits\":\n            characteristics[predicate] = any(c.isdigit() for c in text)\n        elif predicate == \"has_punctuation\":\n            characteristics[predicate] = any(c in string.punctuation for c in text)\n        else:\n            raise KeyError(f\"Invalid predicate: {predicate}\")\n\n    return text, characteristics", "problem": "Generates a random string of specified length and evaluates it for specific characteristics.\nNote that: Notes: Predicates are deduplicated. Characters are randomly sampled from string ascii_letters, digits, and punctuation with replacement. Any invalid predicates provided will result in a KeyError. If no predicates are provided, the result dictionary will be empty.\nThe function should raise the exception for: ValueError: If the specified length is negative. KeyError: If any predicate is not recognized.\nThe function should output with:\n    tuple:\n    string: the generated random text\n    dict: the text's characteristics\nYou should write self-contained code starting with:\n```\nimport random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n```", "solution": "import random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n    if seed is not None:\n        random.seed(seed)\n\n    if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n\n    predicate_functions = {\n        \"has_uppercase\": lambda x: any(c.isupper() for c in x),\n        \"has_lowercase\": lambda x: any(c.islower() for c in x),\n        \"has_special_chars\": lambda x: any(c in string.punctuation for c in x),\n        \"has_numbers\": lambda x: any(c.isdigit() for c in x),\n    }\n\n    predicates = list(set(predicates))\n    if any(p not in predicate_functions for p in predicates):\n        raise KeyError(f\"Invalid predicate provided.\")\n\n    characters = string.ascii_letters + string.digits + string.punctuation\n    generated_string = \"\".join(random.choices(characters, k=length))\n\n    results = {\n        predicate: predicate_functions[predicate](generated_string)\n        for predicate in predicates\n    }\n\n    return generated_string, results", "pass": false}
{"task_id": "990", "program": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n\n    pass\nimport binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    # Decode the hexadecimal string to bytes\n    bytes_string = binascii.unhexlify(hex_string)\n\n    # Convert the bytes to a UTF-8 string\n    utf8_string = bytes_string.decode(\"utf-8\")\n\n    # Encode the UTF-8 string to different formats\n    encodings = {\n        \"hex\": binascii.hexlify(bytes_string).decode(\"ascii\"),\n        \"base64\": base64.b64encode(bytes_string).decode(\"ascii\"),\n        \"utf-8\": utf8_string,\n        \"utf-16\": utf8_string.encode(\"utf-16\").decode(\"ascii\"),\n        \"utf-32\": utf8_string.encode(\"utf-32\").decode(\"ascii\"),\n        \"ASCII\": \"Not representable in ASCII\" if not all(ord(c) < 128 for c in utf8_string) else utf8_string,\n        \"URL\": urllib.parse.quote(utf8_string),\n        \"ROT13\": codecs.encode(utf8_string, \"rot13\")\n    }\n\n    return encodings", "problem": "Convert a hexadecimal string to various encodings. This function takes a hexadecimal string as input and performs several encoding operations. Initially, it decodes the hexadecimal string to bytes and then converts these bytes into a UTF-8 string. This UTF-8 string is subsequently encoded into different formats: hexadecimal, base64, UTF-8, UTF-16, UTF-32, ASCII (if possible), URL encoding, and ROT13. Note that if ASCII not possible, returns 'Not representable in ASCII'. >>> task_func(\"68656c6c6f\") {'hex': '68656c6c6f', 'base64': 'aGVsbG8=', 'utf-8': 'hello', 'utf-16': 'hello', 'utf-32': 'hello', 'ASCII': 'hello', 'URL': 'hello', 'ROT13': 'uryyb'}\nThe function should output with:\n    dict: A dictionary containing the input string encoded in various formats. The dictionary's keys\n    are the encoding types ('hex', 'base64', 'utf-8', 'utf-16', 'utf-32', 'ASCII', 'URL', 'ROT13'),\n    and the values are the corresponding encoded strings. If the string cannot be represented in ASCII,\n    the 'ASCII' key maps to 'Not representable in ASCII'.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n```", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    encodings = {}\n\n    # Convert hex string to its string representation\n    decoded_str = bytes.fromhex(hex_string).decode(\"utf-8\")\n\n    # Hexadecimal encoding\n    encodings[\"hex\"] = binascii.hexlify(decoded_str.encode()).decode()\n\n    # Base64 encoding\n    encodings[\"base64\"] = base64.b64encode(decoded_str.encode()).decode()\n\n    # UTF-8 encoding\n    encodings[\"utf-8\"] = decoded_str.encode(\"utf-8\").decode()\n\n    # UTF-16 encoding\n    encodings[\"utf-16\"] = decoded_str.encode(\"utf-16\").decode(\"utf-16\")\n\n    # UTF-32 encoding\n    encodings[\"utf-32\"] = decoded_str.encode(\"utf-32\").decode(\"utf-32\")\n\n    # ASCII encoding - only if characters are in ASCII range\n    try:\n        encodings[\"ASCII\"] = decoded_str.encode(\"ascii\").decode()\n    except UnicodeEncodeError:\n        encodings[\"ASCII\"] = \"Not representable in ASCII\"\n\n    # URL encoding\n    encodings[\"URL\"] = urllib.parse.quote(decoded_str)\n\n    # ROT13 encoding\n    encodings[\"ROT13\"] = codecs.encode(decoded_str, \"rot_13\")\n\n    return encodings", "pass": false}
{"task_id": "991", "program": "import binascii\nimport string\nimport random\ndef task_func(length):\n\n    pass\nimport binascii\nimport string\nimport random\ndef task_func(length):\n    \"\"\"\n    Generate a random hexadecimal string of a given length and then attempt to decode it in ASCII.\n    The resulting ASCII string may contain non-printable characters or be shorter than the input length.\n\n    Args:\n        length (int): The length of the hexadecimal string to generate.\n\n    Returns:\n        str: The decoded ASCII string.\n    \"\"\"\n    hex_string = ''.join(random.choice(string.hexdigits) for _ in range(length))\n    ascii_string = binascii.unhexlify(hex_string).decode('ascii')\n    return ascii_string", "problem": "Generate a random hexadecimal string of a given length and then attempt to decode it in ASCII. The resulting ASCII string may contain non-printable characters or be shorter than the input length.\nThe function should output with:\n    str: The decoded ASCII string.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport string\nimport random\ndef task_func(length):\n```", "solution": "import binascii\nimport string\nimport random\ndef task_func(length):\n    HEX_CHARS = string.hexdigits.lower()\n    hex_string = \"\".join(random.choice(HEX_CHARS) for _ in range(length))\n    return binascii.unhexlify(hex_string).decode(\"utf-8\", \"ignore\")", "pass": false}
{"task_id": "992", "program": "import sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n\n    pass\nimport sys\nimport sqlite3\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n    # Append the path to sys.path\n    sys.path.append(path_to_append)\n\n    # Connect to the database\n    conn = sqlite3.connect(database)\n    c = conn.cursor()\n\n    # Create the table if it doesn't exist\n    c.execute(\"CREATE TABLE IF NOT EXISTS paths (path TEXT PRIMARY KEY)\")\n\n    # Insert the path into the database\n    c.execute(\"INSERT OR IGNORE INTO paths VALUES (?)\", (path_to_append,))\n\n    # Commit the changes\n    conn.commit()\n\n    # Return the path that was appended to sys.path and inserted into the database\n    return path_to_append", "problem": "This function appends a given path to sys.path and updates an SQLite database with the path, creating the table if needed and avoiding duplicates.\nThe function should output with:\n    str: The path that was appended to sys.path and inserted into the database.\nYou should write self-contained code starting with:\n```\nimport sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n```", "solution": "import sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n    sys.path.append(path_to_append)\n\n    conn = sqlite3.connect(database)\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE IF NOT EXISTS paths (path TEXT UNIQUE)\")\n    cur.execute(\"INSERT OR IGNORE INTO paths (path) VALUES (?)\", (path_to_append,))\n    conn.commit()\n    conn.close()\n\n    return path_to_append", "pass": true}
{"task_id": "993", "program": "import re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n\n    pass\nimport re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Split the text into individual words\n    words = re.split(r'\\W+', text)\n\n    # Calculate the lengths of the words\n    lengths = [len(word) for word in words]\n\n    # Create a histogram of the word lengths\n    plt.hist(lengths, bins=50, alpha=0.5, label='Histogram')\n\n    # Calculate the KDE of the word lengths\n    kde = gaussian_kde(lengths)\n\n    # Plot the KDE curve\n    x_values = np.linspace(0, 50, 1000)\n    y_values = kde(x_values)\n    plt.plot(x_values, y_values, label='KDE')\n\n    # Add a title and labels to the plot\n    plt.title('Distribution of Word Lengths')\n    plt.xlabel('Word Length')\n    plt.ylabel('Frequency')\n\n    # Show the plot\n    plt.show()\n\n    return plt.gca()\ntext = \"The quick brown fox jumps over the lazy dog\"", "problem": "This code takes a text input, calculates the lengths of the words, and visualizes the distribution of word lengths using a histogram and a KDE curve (if applicable) on a matplotlib subplot.\nThe function should output with:\n    matplotlib.axes._axes.Axes: An Axes object showing the histogram and optionally the KDE\n    plot of word lengths. This visual representation helps in\n    understanding the distribution of word lengths in the given text.\nYou should write self-contained code starting with:\n```\nimport re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```", "solution": "import re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    words = re.split(r\"\\W+\", text)\n    word_counts = [len(word) for word in words if word]\n\n    _, ax = plt.subplots()\n\n    if word_counts:  # Check if word_counts is not empty\n        ax.hist(word_counts, bins=30, edgecolor='black', alpha=0.7)\n\n        # Add KDE plot if applicable\n        if len(word_counts) > 1 and np.var(word_counts) != 0:\n            try:\n                kde = gaussian_kde(word_counts)\n                x_range = np.linspace(min(word_counts), max(word_counts), 100)\n                ax.plot(x_range, kde(x_range), color='red')  # KDE line in red\n            except linalg.LinAlgError:\n                # Handle the singular matrix error\n                pass\n\n    return ax", "pass": false}
{"task_id": "994", "program": "import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n\n    pass\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n    \"\"\"\n    Extracts title, date, and author information from a webpage and writes the data to a CSV file.\n    The function iterates through each 'div' element with a class 'container', extracting the text of 'h1', and 'span' elements with classes 'date' and 'author', respectively. Default values ('No Title', 'No Date', or 'No Author') are used if an element is not found. The extracted data is stored in a list of tuples. The list of tuples is then converted into a Pandas DataFrame and saved to a CSV file at the specified file path. The DataFrame's columns are labeled as 'Title', 'Date', and 'Author'. The function returns the list of tuples.\n    The function should raise the exception for: RuntimeError: If the URL is incorrect or the server is down, the error message might be \"Error fetching URL: HTTP Error 404: Not Found\" or \"Error fetching URL: ConnectionError\". The function begins by making an HTTP request to the specified URL. It sets a timeout of 5 seconds to avoid prolonged waiting in case of unresponsive webpages. If the request encounters any exceptions such as connection errors, timeouts, or HTTP errors, a 'requests.RequestException' is raised. The function raises a '' with a message that includes the details of the exception. For example,, depending on the specific issue encountered.\n    The function should output with:\n        list: A list of tuples containing the (title, date, author) extracted from the webpage. Default placeholders\n        are used for missing information.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching URL: {e}\")\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    containers = soup.find_all(\"div\", class_=\"container\")\n\n    data = []\n    for container in containers:\n        title = container.find(\"h1\").text.strip() or \"No Title\"\n        date = container.find(\"span\", class_=\"date\").text.strip() or \"No Date\"\n        author = container.find(\"span\", class_=\"author\").text.strip() or \"No Author\"\n        data.append((title, date, author))\n\n    df = pd.DataFrame(data, columns=[\"Title\", \"Date\", \"Author\"])\n    df.to_csv(csv_file_path, index=False)\n\n    return data", "problem": "Extracts title, date, and author information from a webpage and writes the data to a CSV file. The function iterates through each 'div' element with a class 'container', extracting the text of 'h1', and 'span' elements with classes 'date' and 'author', respectively. Default values ('No Title', 'No Date', or 'No Author') are used if an element is not found. The extracted data is stored in a list of tuples. The list of tuples is then converted into a Pandas DataFrame and saved to a CSV file at the specified file path. The DataFrame's columns are labeled as 'Title', 'Date', and 'Author'. The function returns the list of tuples.\nThe function should raise the exception for: RuntimeError: If the URL is incorrect or the server is down, the error message might be \"Error fetching URL: HTTP Error 404: Not Found\" or \"Error fetching URL: ConnectionError\". The function begins by making an HTTP request to the specified URL. It sets a timeout of 5 seconds to avoid prolonged waiting in case of unresponsive webpages. If the request encounters any exceptions such as connection errors, timeouts, or HTTP errors, a 'requests.RequestException' is raised. The function raises a '' with a message that includes the details of the exception. For example,, depending on the specific issue encountered.\nThe function should output with:\n    list: A list of tuples containing the (title, date, author) extracted from the webpage. Default placeholders\n    are used for missing information.\nYou should write self-contained code starting with:\n```\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n```", "solution": "import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching URL: {e}\")\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    data = []\n    for div in soup.find_all(\"div\", class_=\"container\"):\n        title = div.find(\"h1\").text.strip() if div.find(\"h1\") else \"No Title\"\n        date = (\n            div.find(\"span\", class_=\"date\").text.strip()\n            if div.find(\"span\", class_=\"date\")\n            else \"No Date\"\n        )\n        author = (\n            div.find(\"span\", class_=\"author\").text.strip()\n            if div.find(\"span\", class_=\"author\")\n            else \"No Author\"\n        )\n        data.append((title, date, author))\n\n    df = pd.DataFrame(data, columns=[\"Title\", \"Date\", \"Author\"])\n    df.to_csv(csv_file_path, index=False)\n\n    return data", "pass": true}
{"task_id": "995", "program": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n\n    pass\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n    \"\"\"\n    Processes a CSV file at the given path by reading its contents, cleaning the data, performing statistical analysis, and generating a plot, which is saved to the specified path. Sets the title of the plot to \"Data Visualization\". Labels the x-axis as \"Index\" and the y-axis as \"Value\". Saves the generated plot to the file path specified in 'plot_path'.\n    The function should raise the exception for: FileNotFoundError: If the CSV file at 'file_path' does not exist.\n    The function should output with:\n        tuple: A tuple containing the following elements:\n        Mean (float): The average value of the data. Returns NaN if data is empty or non-numeric.\n        Median (float): The middle value of the data when sorted. Returns NaN if data is empty or non-numeric.\n        Plot Path (str): The path where the plot is saved.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File {file_path} does not exist.\")\n\n    # Read the CSV file\n    df = pd.read_csv(file_path)\n\n    # Clean the data\n    df = df.dropna()\n    df = df.astype(float)\n\n    # Perform statistical analysis\n    mean = df.mean()\n    median = df.median()\n\n    # Generate the plot\n    plt.plot(df.index, df.values)\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Value\")\n    plt.title(\"Data Visualization\")\n\n    # Save the plot to the specified path\n    plt.savefig(plot_path)\n\n    return mean, median, plot_path", "problem": "Processes a CSV file at the given path by reading its contents, cleaning the data, performing statistical analysis, and generating a plot, which is saved to the specified path. Sets the title of the plot to \"Data Visualization\". Labels the x-axis as \"Index\" and the y-axis as \"Value\". Saves the generated plot to the file path specified in 'plot_path'.\nThe function should raise the exception for: FileNotFoundError: If the CSV file at 'file_path' does not exist.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    Mean (float): The average value of the data. Returns NaN if data is empty or non-numeric.\n    Median (float): The middle value of the data when sorted. Returns NaN if data is empty or non-numeric.\n    Plot Path (str): The path where the plot is saved.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n```", "solution": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n    # Check if file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File {file_path} does not exist.\")\n\n    # Load data and handle empty file\n    try:\n        data = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return np.nan, np.nan, plot_path\n\n    # Convert data to numeric, coerce errors to NaN\n    data = pd.to_numeric(data.squeeze(), errors=\"coerce\")\n\n    # Ensure data is a Pandas Series\n    if not isinstance(data, pd.Series):\n        data = pd.Series(data)\n\n    # Clean data\n    data = data.dropna()\n\n    # Perform analysis\n    if data.empty:\n        mean = median = np.nan\n    else:\n        # Calculate mean and median\n        mean = float(np.mean(data))\n        median = float(np.median(data))\n\n    # Create plot and save it\n    plt.figure(figsize=(10, 6))\n    plt.plot(data)\n    plt.title(\"Data Visualization\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Value\")\n    plt.savefig(plot_path)\n    plt.close()\n\n    return mean, median, plot_path", "pass": false}
{"task_id": "996", "program": "import requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n\n    pass\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n    \"\"\"\n    Scrape the 'title' from a specified web page, save it in JSON format to a given file, and append to the file if it exists.\n    If the web page does not have a title, 'None' is saved as the title value in the JSON data.\n    Data is appended to the specified file in JSON format, with each title on a new line.\n    :param url: The URL of the web page to scrape.\n    :param file_name: The name of the file to save the scraped title to.\n    :return: The file path where the scraped title is saved.\n    \"\"\"\n    # Make a GET request to the URL\n    response = requests.get(url)\n\n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find the title element\n    title = soup.find(\"title\")\n\n    # If the title element is not found, set the title to None\n    if title is None:\n        title = \"None\"\n\n    # Convert the title to a JSON object\n    title_json = {\"title\": title}\n\n    # Open the file in append mode\n    with open(file_name, \"a\") as f:\n        # Write the JSON object to the file\n        json.dump(title_json, f)\n        # Add a newline character to the file\n        f.write(\"\\n\")\n\n    # Return the file path\n    return file_name\nurl = \"https://www.example.com\"\nfile_name = \"Output.txt\"", "problem": "Scrape the 'title' from a specified web page, save it in JSON format to a given file, and append to the file if it exists.`\nNote that: Notes: If the web page does not have a title, 'None' is saved as the title value in the JSON data. Data is appended to the specified file in JSON format, with each title on a new line.\nThe function should output with:\n    str: The file path where the scraped title is saved.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n```", "solution": "import requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n    response = requests.get(url, timeout=5)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    title = soup.title.string if soup.title else None\n    data = {\"title\": title}\n    json_data = json.dumps(data)\n    with open(file_name, \"a\", encoding=\"utf-8\") as f:\n        f.write(json_data + \"\\n\")\n    return file_name", "pass": false}
{"task_id": "997", "program": "import urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n\n    pass\nimport urllib.request\nimport os\nimport zipfile\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n    # Create the target directory if it does not exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file from the given URL\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the contents of the zip file to the target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    # Return the path of the directory where the contents of the zip file are extracted\n    return TARGET_DIR\nurl = \"https://www.example.com/example.zip\"", "problem": "Download and extract a zip file from a specified URL to a designated directory. Behavior: - If the target directory TARGET_DIR does not exist, it is created. - The zip file is downloaded from the given URL and saved locally as TARGET_ZIP_FILE. - The local zip file TARGET_ZIP_FILE is deleted after extraction. Error Handling: - The function does not explicitly handle errors that may occur during the download or extraction process. Errors such as a failed download, invalid URL, or corrupted zip file will result in an unhandled exception.\nThe function should output with:\n    str: The path of the directory where the contents of the zip file are extracted.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n```", "solution": "import urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n\n    os.makedirs(TARGET_DIR, exist_ok=True)\n\n    # context = ssl._create_unverified_context()\n    # urllib.request.urlretrieve(url, TARGET_ZIP_FILE, context=context)\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    if os.path.exists(TARGET_ZIP_FILE):\n        os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "pass": false}
{"task_id": "998", "program": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n\n    pass\nimport urllib.request\nimport os\nimport hashlib\nimport tarfile\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    \"\"\"\n    Downloads a tar.gz file from a specified URL, then validates its MD5 checksum against a predefined expected value.\n    If the checksum matches, it extracts the contents of the tar.gz file. Otherwise, it deletes the downloaded file.\n\n    Args:\n        url (str): The URL of the tar.gz file to download.\n\n    Returns:\n        bool: Returns True if the file is successfully downloaded, its MD5 checksum matches the expected value, and\n        it is extracted. Returns False if the checksum does not match the expected value or if the download fails.\n    \"\"\"\n    # Download the tar.gz file\n    try:\n        with urllib.request.urlopen(url) as response:\n            with open(TARGET_TAR_FILE, \"wb\") as f:\n                f.write(response.read())\n    except Exception as e:\n        print(f\"Error downloading file: {e}\")\n        return False\n\n    # Validate the MD5 checksum\n    try:\n        with open(TARGET_TAR_FILE, \"rb\") as f:\n            md5_checksum = hashlib.md5(f.read()).hexdigest()\n    except Exception as e:\n        print(f\"Error calculating MD5 checksum: {e}\")\n        return False\n\n    if md5_checksum != EXPECTED_MD5_CHECKSUM:\n        print(f\"MD5 checksum does not match expected value: {md5_checksum} != {EXPECTED_MD5_CHECKSUM}\")\n        return False\n\n    # Extract the contents of the tar.gz file\n    try:\n        with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n            tar.extractall()\n    except Exception as e:\n        print(f\"Error extracting tar.gz file: {e}\")\n        return False\n\n    return True", "problem": "Downloads a tar.gz file from a specified URL, then validates its MD5 checksum against a predefined expected value. If the checksum matches, it extracts the contents of the tar.gz file. Otherwise, it deletes the downloaded file.\nThe function should output with:\n    bool: Returns True if the file is successfully downloaded, its MD5 checksum matches the expected value, and\n    it is extracted. Returns False if the checksum does not match the expected value or if the download fails.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n```", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n    except Exception as e:\n        print(e)\n        return False\n\n    md5_hash = hashlib.md5()\n    with open(TARGET_TAR_FILE, \"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096), b\"\"):\n            md5_hash.update(byte_block)\n    if md5_hash.hexdigest() != EXPECTED_MD5_CHECKSUM:\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n    with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar_ref:\n        tar_ref.extractall()\n\n    os.remove(TARGET_TAR_FILE)\n\n    return True", "pass": false}
{"task_id": "999", "program": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n\n    pass\nimport urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    # Download the CSV file from the given URL\n    response = urllib.request.urlopen(url)\n    csv_file = response.read()\n\n    # Save the CSV file to the specified path\n    with open(csv_file_path, \"wb\") as f:\n        f.write(csv_file)\n\n    # Count the occurrences of each value in the specified column\n    with open(csv_file_path, \"r\") as f:\n        reader = csv.DictReader(f)\n        occurrences = collections.defaultdict(int)\n        for row in reader:\n            if column_name in row:\n                occurrences[row[column_name]] += 1\n\n    # Delete the downloaded CSV file\n    os.remove(csv_file_path)\n\n    # Raise a ValueError if the specified column does not exist\n    if column_name not in reader.fieldnames:\n        raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n\n    # Return a dictionary mapping the values from the specified column to their occurrence counts\n    return {value: occurrences[value] for value in occurrences}\nurl = \"https://example.com/data.csv\"\ncolumn_name = \"age\"\ncsv_file_path = \"data.csv\"", "problem": "Download a CSV file from a given URL, save it to a specified path, and count the occurrences of each value in a particular column. The function handles various scenarios including missing columns and file download errors.\nNote that: Notes: The downloaded CSV file is deleted after its contents have been processed. The function only counts values in the specified column and ignores other data.\nThe function should raise the exception for: ValueError: If the specified column_name does not exist in the CSV file, the function will delete the downloaded file and raise a ValueError with a message stating \"The provided column_name '{column_name}' does not exist in the CSV file.\"\nThe function should output with:\n    dict: A dictionary mapping the values from the specified column to their\n    corresponding occurrence counts.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n```", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    urllib.request.urlretrieve(url, csv_file_path)\n\n    with open(csv_file_path, \"r\", encoding=\"utf-8\") as f:\n        reader = csv.DictReader(f)\n        if column_name not in reader.fieldnames:\n            os.remove(csv_file_path)\n            raise ValueError(\n                f\"The provided column_name '{column_name}' does not exist in the CSV file.\"\n            )\n        values = [row[column_name] for row in reader]\n\n    os.remove(csv_file_path)\n\n    return collections.Counter(values)", "pass": false}
{"task_id": "1000", "program": "import urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n\n    pass\nimport urllib.request\nimport os\nimport json\nimport pandas as pd\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n    # Download the JSON file\n    urllib.request.urlretrieve(url, TARGET_JSON_FILE)\n\n    # Open and read the JSON file\n    with open(TARGET_JSON_FILE, \"r\") as f:\n        json_data = json.load(f)\n\n    # Convert the JSON data into a pandas DataFrame\n    df = pd.DataFrame(json_data)\n\n    # Delete the temporary JSON file\n    os.remove(TARGET_JSON_FILE)\n\n    return df", "problem": "This function retrieves a JSON file from the given URL using urllib.request.urlretrieve, temporarily saving it as 'downloaded_file.json'. It then opens and reads this file, converts the JSON content into a pandas DataFrame, and finally deletes the temporary JSON file.\nThe function should output with:\n    pandas.DataFrame: A DataFrame constructed from the JSON data in the downloaded file.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n```", "solution": "import urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n    urllib.request.urlretrieve(url, TARGET_JSON_FILE)\n\n    with open(TARGET_JSON_FILE, \"r\") as f:\n        data = json.load(f)\n\n    os.remove(TARGET_JSON_FILE)\n\n    return pd.DataFrame(data)", "pass": true}
{"task_id": "1001", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n    # Read data from CSV file\n    df = pd.read_csv(csv_file_path)\n\n    # Normalize column1\n    df['column1'] = (df['column1'] - df['column1'].mean()) / df['column1'].std()\n\n    # Create plot\n    fig, ax = plt.subplots()\n    ax.plot(df['column1'])\n\n    # Set title, x-label, and y-label\n    title = 'Plot Title: Normalized Column 1'\n    x_label = 'Index: Normalized Value'\n    y_label = 'Frequency: Normalized Value'\n    ax.set_title(title.center(20))\n    ax.set_xlabel(x_label.center(20))\n    ax.set_ylabel(y_label.center(20))\n\n    return ax", "problem": "This function reads data from a CSV file, normalizes a specific column named 'column1', and then plots the normalized data. - The title is created using Python's string formatting, aligning 'Plot Title' and 'Normalized Column 1' on either side of a colon, each padded to 20 characters. - Similarly, the x-label is formatted with 'Index' and 'Normalized Value' on either side of a colon, each padded to 20 characters. - The y-label is set in the same manner, with 'Frequency' and 'Normalized Value' on either side of a colon.\nThe function should output with:\n    The matplotlib.axes.Axes object with the plot of the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n    df = pd.read_csv(csv_file_path)\n    mean = df[\"column1\"].mean()\n    std = df[\"column1\"].std()\n    df[\"column1_normalized\"] = (df[\"column1\"] - mean) / std\n\n    # Creating a figure and axes\n    _, ax = plt.subplots()\n    # Plotting on the created axes\n    ax.plot(df[\"column1_normalized\"])\n    title = \"%*s : %*s\" % (20, \"Plot Title\", 20, \"Normalized Column 1\")\n    xlabel = \"%*s : %*s\" % (20, \"Index\", 20, \"Normalized Value\")\n    ylabel = \"%*s : %*s\" % (20, \"Frequency\", 20, \"Normalized Value\")\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n\n    # Return the axes object for further manipulation\n    return ax", "pass": false}
{"task_id": "1002", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n    \"\"\"\n    Converts a given JSON data into a Pandas DataFrame and plots a histogram of a specified column.\n    The function handles non-numeric columns by converting them to categorical type and then to numeric codes.\n    It also checks if the specified column exists in the DataFrame.\n\n    Args:\n        data (dict): A dictionary containing the JSON data.\n        column_name (str): The name of the column to plot the histogram for.\n\n    Returns:\n        DataFrame: A pandas DataFrame created from the input JSON data.\n        Axes: A matplotlib Axes object showing the histogram plot of the specified column.\n\n    Raises:\n        ValueError: If the specified column name does not exist in the DataFrame.\n    \"\"\"\n    # Convert the JSON data to a Pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Check if the specified column exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} does not exist in the DataFrame\")\n\n    # Convert non-numeric columns to categorical type and then to numeric codes\n    df = pd.get_dummies(df, columns=df.select_dtypes(exclude=[\"number\"]).columns)\n\n    # Plot the histogram of the specified column\n    ax = df[column_name].plot.hist(title=f\"Histogram of {column_name}\", xlabel=column_name)\n\n    return df, ax\ndata = {\"column1\": [1, 2, 3, 4, 5], \"column2\": [\"a\", \"b\", \"c\", \"d\", \"e\"]}", "problem": "Converts a given JSON data into a Pandas DataFrame and plots a histogram of a specified column. The function handles non-numeric columns by converting them to categorical type and then to numeric codes. It also checks if the specified column exists in the DataFrame. - The histogram's title is set to 'Histogram of <column_name>'. - The histogram's x-label are set to the name of the specified column. Exceptions: - ValueError: Raised if the specified column name does not exist in the DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the input JSON data.\n    Axes: A matplotlib Axes object showing the histogram plot of the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n    df = pd.DataFrame(data)\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the DataFrame.\")\n\n    if not pd.api.types.is_numeric_dtype(df[column_name]):\n        df[column_name] = df[column_name].astype(\"category\").cat.codes\n\n    _, ax = plt.subplots()\n    df[column_name].hist(ax=ax)\n    ax.set_title(f\"Histogram of {column_name}\")\n    ax.set_xlabel(column_name)\n    return df, ax", "pass": false}
{"task_id": "1003", "program": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n\n    pass\nimport urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    # Fetch the XML file from the specified URL\n    response = urllib.request.urlopen(url)\n    xml_data = response.read()\n\n    # Parse the XML data using lxml\n    root = etree.fromstring(xml_data)\n\n    # Create a list to store the data\n    data = []\n\n    # Iterate over the 'item' elements in the XML file\n    for item in root.findall('.//item'):\n        # Create a dictionary to store the data for this item\n        item_data = {}\n\n        # Iterate over the child elements of the 'item' element\n        for child in item:\n            # Add the child element's text to the dictionary\n            item_data[child.tag] = child.text\n\n        # Add the dictionary to the list of data\n        data.append(item_data)\n\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Return the DataFrame\n    return df", "problem": "Fetches and parses an XML file from a specified URL, then converts it into a Pandas DataFrame. # Example with an invalid XML structure >>> df = task_func('http://example.com/invalid_structure.xml') ValueError: XML structure does not match expected format.\nThe function should raise the exception for: ValueError This error is raised in several scenarios: 1. If the URL is invalid or the XML file cannot be fetched from the URL. 2. If the XML file has invalid syntax. 3. If the XML structure does not conform to the expected format.\nThe function should output with:\n    pandas.DataFrame\n    A DataFrame constructed from the parsed XML data. Each row of the DataFrame corresponds to an 'item' element\n    in the XML file, with child elements of 'item' becoming columns in the DataFrame.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n```", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        with urllib.request.urlopen(url) as response:\n            xml_data = response.read()\n    except Exception as e:\n        raise ValueError(f\"Error fetching the XML file: {e}\")\n\n    try:\n        xml_tree = etree.XML(xml_data)\n    except etree.XMLSyntaxError:\n        raise ValueError(\"Invalid XML syntax\")\n\n    data = []\n    for item in xml_tree.findall(\".//item\"):\n        data_item = {child.tag: child.text for child in item}\n        data.append(data_item)\n\n    if not data:\n        raise ValueError(\"XML structure does not match expected format.\")\n\n    return pd.DataFrame(data)", "pass": false}
{"task_id": "1004", "program": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n\n    pass\nimport urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    # Download the text file from the specified URL\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode('utf-8')\n\n    # Use a regular expression to identify words in the text\n    words = re.findall(r'\\w+', text)\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the ten most frequently occurring words\n    top_words = word_counts.most_common(10)\n\n    # Create a bar chart of the top words\n    fig, ax = plt.subplots()\n    ax.bar(range(len(top_words)), [word[1] for word in top_words])\n    ax.set_xticks(range(len(top_words)))\n    ax.set_xticklabels([word[0] for word in top_words], rotation=90)\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Words in Text')\n\n    return word_counts, ax\nurl = 'https://www.gutenberg.org/files/1342/1342-0.txt'", "problem": "Downloads a text file from a specified URL, processes the text to count the frequency of each word, and then plots a bar chart showing the ten most frequently occurring words.\nNote that: The function assumes the URL points to a plain text file and may not handle binary files or non-text content correctly. Words are identified using a basic regular expression and are case-sensitive. The function does not remove common stopwords; all words are counted as is. Requires internet access to download the file from the URL.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    Counter: A Counter object from the collections module, containing word frequencies in the text.\n    Axes: A matplotlib Axes object that represents the plotted bar chart of the ten most common words.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n```", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode()\n        words = re.findall(r\"\\b\\w+\\b\", text)\n        word_freq = Counter(words)\n        top_words = word_freq.most_common(10)\n\n        _, ax = plt.subplots()\n        ax.bar([word[0] for word in top_words], [word[1] for word in top_words])\n        ax.set_title(\"Top 10 Most Common Words\")\n        ax.set_xlabel(\"Words\")\n        ax.set_ylabel(\"Frequency\")\n\n        return word_freq, ax", "pass": true}
{"task_id": "1005", "program": "import urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n\n    pass\nimport urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(url: str, save_path: str = \"downloaded_file.zip\", extract_path: str = \"extracted_files\") -> str:\n    \"\"\"Downloads, extracts, and deletes a ZIP file from a specified URL.\n\n    Args:\n        url (str): The URL of the ZIP file to download.\n        save_path (str, optional): The path to save the downloaded ZIP file. Defaults to \"downloaded_file.zip\".\n        extract_path (str, optional): The path to extract the contents of the ZIP file. Defaults to \"extracted_files\".\n\n    Returns:\n        str: The path to the directory where the ZIP file's contents have been extracted.\n    \"\"\"\n    try:\n        # Download the ZIP file\n        with urllib.request.urlopen(url) as response, open(save_path, \"wb\") as out_file:\n            data = response.read()\n            out_file.write(data)\n\n        # Extract the contents of the ZIP file\n        with zipfile.ZipFile(save_path, \"r\") as zip_file:\n            zip_file.extractall(extract_path)\n\n        # Delete the downloaded ZIP file\n        os.remove(save_path)\n\n        return extract_path\n\n    except urllib.error.URLError as e:\n        return f\"URL Error: {e.reason}\"\n\n    except zipfile.BadZipFile as e:\n        return f\"Bad ZIP file: {e}\"\n\n    except OSError as e:\n        return f\"File I/O error: {e}\"", "problem": "Downloads, extracts, and deletes a ZIP file from a specified URL. The function includes comprehensive error handling to manage issues such as invalid URLs, unreachable servers, corrupted ZIP files, and file I/O errors. In the event of a failure, it provides a descriptive error message.\nThe function should raise the exception for: urllib.error.URLError: If the URL is invalid or the server cannot be reached. In this case, the function returns a string in the format \"URL Error: [error reason]\".\nThe function should output with:\n    str: The path to the directory where the ZIP file's contents have been extracted. Returns an error message in case of failure.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n```", "solution": "import urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n    try:\n        # Check if save_path already exists, if so, remove it\n        if os.path.exists(save_path):\n            os.remove(save_path)\n\n        # Download the file from the URL\n        urllib.request.urlretrieve(url, save_path)\n\n        # Create the extraction directory if it doesn't exist\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n\n        # Extract the zip file\n        with zipfile.ZipFile(save_path, \"r\") as zip_ref:\n            zip_ref.extractall(extract_path)\n\n        # Remove the downloaded zip file\n        os.remove(save_path)\n\n        return extract_path\n    except urllib.error.URLError as e:\n        return f\"URL Error: {e.reason}\"", "pass": false}
{"task_id": "1006", "program": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n\n    pass\nimport os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads and extracts a ZIP file from a specified URL to a given directory.\n    The function should raise the exception for:\n        Network Issues or Invalid URL: Returns \"Error: Unable to download the file from the provided URL.\" if there are issues in reaching the URL or downloading the file.\n        Incorrect File Type: Returns \"Error: The URL does not point to a ZIP file.\" if the downloaded file's content type is not 'application/zip'.\n        Corrupt ZIP File: Returns \"Error: The downloaded file is not a valid ZIP file.\" if the downloaded file is a ZIP file but is corrupt or cannot be extracted.\n        General Exceptions: Catches and reports any other exceptions (like runtime errors) that occur during the process with a specific error message, formatted as \"Error: [exception message]\".\n    The function should output with:\n        str: Path to the directory containing the extracted contents. If an error occurs, a descriptive\n        message is returned. The message starts with \"Error: \".\n        If the specific descrption is either \"The URL does not point to a ZIP file.\",\n        or \"The downloaded file is not a valid ZIP file.\", or \"Unable to download the file from the provided URL.\".\n    \"\"\"\n    try:\n        # Download the file from the URL\n        response = requests.get(url)\n\n        # Check if the file is a ZIP file\n        if response.headers['Content-Type'] != 'application/zip':\n            raise Exception(\"The URL does not point to a ZIP file.\")\n\n        # Create a ZipFile object and extract the contents\n        zip_file = ZipFile(BytesIO(response.content))\n        zip_file.extractall(download_path)\n\n        # Return the path to the extracted contents\n        return download_path\n\n    except BadZipFile as e:\n        # If the ZIP file is corrupt or cannot be extracted, raise an exception\n        raise Exception(\"The downloaded file is not a valid ZIP file.\")\n\n    except Exception as e:\n        # Catch any other exceptions and raise an exception with a specific error message\n        raise Exception(f\"Error: {e}\")", "problem": "Downloads and extracts a ZIP file from a specified URL to a given directory.\nThe function should raise the exception for: Network Issues or Invalid URL: Returns \"Error: Unable to download the file from the provided URL.\" if there are issues in reaching the URL or downloading the file. Incorrect File Type: Returns \"Error: The URL does not point to a ZIP file.\" if the downloaded file's content type is not 'application/zip'. Corrupt ZIP File: Returns \"Error: The downloaded file is not a valid ZIP file.\" if the downloaded file is a ZIP file but is corrupt or cannot be extracted. General Exceptions: Catches and reports any other exceptions (like runtime errors) that occur during the process with a specific error message, formatted as \"Error: [exception message]\".\nThe function should output with:\n    str: Path to the directory containing the extracted contents. If an error occurs, a descriptive\n    message is returned. The message starts with \"Error: \".\n    If the specific descrption is either \"The URL does not point to a ZIP file.\",\n    or \"The downloaded file is not a valid ZIP file.\", or \"Unable to download the file from the provided URL.\".\nYou should write self-contained code starting with:\n```\nimport os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n```", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    if not os.path.exists(download_path):\n        os.makedirs(download_path)\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n\n        # Verify content type\n        if \"application/zip\" not in response.headers.get(\"Content-Type\", \"\"):\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        file_name = os.path.join(download_path, os.path.basename(url))\n\n        with open(file_name, \"wb\") as f:\n            f.write(response.content)\n\n        extract_path = os.path.splitext(file_name)[0]\n\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n\n        with ZipFile(file_name, \"r\") as zip_ref:\n            zip_ref.extractall(extract_path)\n\n        return extract_path\n\n    except requests.RequestException:\n        return \"Error: Unable to download the file from the provided URL.\"\n    except BadZipFile:\n        return \"Error: The downloaded file is not a valid ZIP file.\"\n    except RuntimeError as e:\n        return f\"Error: {str(e)}\"", "pass": false}
{"task_id": "1007", "program": "import requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n\n    pass\nimport requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n    \"\"\"\n    Fetches JSON data from a specified URL and converts it into a Pandas DataFrame.\n    The function expects the JSON to be in a format that is directly convertible to a DataFrame, typically a list of dictionaries.\n    The function handles various scenarios including successful data retrieval and conversion, network issues, and invalid JSON format.\n    :param url: The URL to fetch the JSON data from.\n    :return: A DataFrame constructed from the JSON data fetched from the URL.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        json_data = response.json()\n        return pd.DataFrame(json_data)\n    except requests.RequestException as e:\n        raise SystemError(f\"Network-related issue: {e}\") from e\n    except ValueError as e:\n        raise ValueError(f\"Invalid JSON format: {e}\") from e", "problem": "This function fetches JSON data from a specified URL and converts it into a Pandas DataFrame. It expects the JSON to be in a format that is directly convertible to a DataFrame, typically a list of dictionaries. The function handles various scenarios including successful data retrieval and conversion, network issues, and invalid JSON format.\nNote that: Notes: The function uses a timeout of 5 seconds for the network request to avoid hanging indefinitely. It checks the HTTP response status and raises an HTTPError for unsuccessful status codes. Directly converts the HTTP response to JSON and then to a DataFrame, without intermediate processing.\nThe function should raise the exception for: SystemError: If there is a network-related issue such as a connection error, timeout, or if the server responded with an unsuccessful status code (like 404 or 500). This is a re-raised exception from requests.RequestException to provide a more specific error message. ValueError: If the fetched data is not in a valid JSON format that can be converted into a DataFrame. This could occur if the data structure does not match the expected format (e.g., not a list of dictionaries).\nThe function should output with:\n    pd.DataFrame: A DataFrame constructed from the JSON data fetched from the URL.\nYou should write self-contained code starting with:\n```\nimport requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n```", "solution": "import requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n        data = response.json()  # Directly converts the response content to JSON\n        df = pd.DataFrame(data)\n        return df\n    except requests.RequestException as e:\n        raise SystemError(f\"Network error occurred: {e}\") from e\n    except ValueError as exc:\n        raise ValueError(\"Invalid JSON format for DataFrame conversion\") from exc", "pass": true}
{"task_id": "1008", "program": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n\n    pass\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts and converts data from a specified HTML table based on the given 'table_id' on a webpage into a Pandas DataFrame.\n    If the table is present but contains no data rows (i.e., no <tr> tags), the function returns an empty DataFrame.\n\n    Args:\n        url (str): The URL of the webpage containing the HTML table.\n        table_id (str): The ID of the HTML table to extract data from.\n\n    Returns:\n        df (pd.DataFrame): A DataFrame containing the data extracted from the specified HTML table.\n        If the table is found but has no rows (<tr> elements), an empty DataFrame is returned.\n\n    Raises:\n        requests.exceptions.HTTPError: If the HTTP request fails (e.g., due to connection issues or a non-successful status code like 404 or 500).\n        ValueError: If no table with the specified 'table_id' is found on the webpage. The error message will be \"Table with the specified ID not found.\"\n    \"\"\"\n    # Send a GET request to the specified URL\n    response = requests.get(url)\n\n    # Check if the response was successful\n    if response.status_code != 200:\n        raise requests.exceptions.HTTPError(f\"HTTP request failed with status code {response.status_code}\")\n\n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find the table with the specified ID\n    table = soup.find(\"table\", {\"id\": table_id})\n\n    # Check if the table was found\n    if table is None:\n        raise ValueError(f\"Table with the specified ID not found\")\n\n    # Create a StringIO object to store the table data\n    table_data = StringIO()\n\n    # Iterate over the rows in the table\n    for row in table.find_all(\"tr\"):\n        # Iterate over the cells in the row\n        for cell in row.find_all(\"td\"):\n            # Write the cell data to the StringIO object\n            table_data.write(cell.text.strip() + \"\\t\")\n\n        # Write a newline character at the end of each row\n        table_data.write(\"\\n\")\n\n    # Create a Pandas DataFrame from the table data\n    df = pd.read_csv(table_data, sep=\"\\t\")\n\n    # Return the DataFrame\n    return df\nurl = \"https://example.com/data.html\"\ntable_id = \"my_table\"", "problem": "Extracts and converts data from a specified HTML table based on the given 'table_id' on a webpage into a Pandas DataFrame. If the table is present but contains no data rows (i.e., no <tr> tags), the function returns an empty DataFrame. Example of ValueError: >>> task_func('https://example.com/data.html', 'nonexistent_table') ValueError: Table with the specified ID not found. Example of empty table: >>> task_func('https://example.com/emptytable.html', 'empty_table') DataFrame: Empty DataFrame Columns: [] Index: []\nNote that: Notes: The function raises an HTTPError for unsuccessful HTTP requests, which includes scenarios like network problems or non-2xx HTTP responses. A ValueError is raised specifically when the HTML table with the specified ID is not present in the webpage's content, indicating either an incorrect ID or the absence of the table. If the located table has no rows, indicated by the absence of <tr> tags, an empty DataFrame is returned. This is useful for handling tables that are structurally present in the HTML but are devoid of data.\nThe function should raise the exception for: requests.exceptions.HTTPError: If the HTTP request fails (e.g., due to connection issues or a non-successful status code like 404 or 500). ValueError: If no table with the specified 'table_id' is found on the webpage. The error message will be \"Table with the specified ID not found.\"\nThe function should output with:\n    df (pd.DataFrame): A DataFrame containing the data extracted from the specified HTML table.\n    If the table is found but has no rows (<tr> elements), an empty DataFrame is returned.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n```", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n    except requests.exceptions.HTTPError as e:\n        raise e\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    table = soup.find(\"table\", {\"id\": table_id})\n\n    if table is None:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    # Check if the table is empty (no rows)\n    if not table.find_all(\"tr\"):\n        return pd.DataFrame()\n\n    df = pd.read_html(StringIO(str(table)))[0]\n\n    return df", "pass": false}
{"task_id": "1009", "program": "import xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n\n    pass\nimport xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n    try:\n        root = ET.fromstring(xml_content)\n    except ET.ParseError as e:\n        raise ValueError(f\"XML content is malformed: {e}\")\n\n    with open(output_csv_path, \"w\", newline=\"\") as f:\n        writer = csv.writer(f)\n        for elem in root.iter():\n            writer.writerow([elem.tag, elem.text])", "problem": "Parses XML content from a string and converts it into a CSV format.\nNote that: Ensure that the XML content passed to the function is well-formed. The output CSV path should be a valid file path where the user has write permissions, to prevent IOError.\nThe function should raise the exception for: ET.ParseError: This exception is raised if the input XML content is malformed or cannot be successfully parsed. The exception message includes details about the parsing error. IOError: Raised if there is an issue with writing to the specified CSV file path. This can happen due to reasons like invalid file path, full disk space, lack of write permissions, etc. The exception message provides details about the IO error.\nThe function should output with:\n    None: The function does not return any value. Instead, it writes the output to\n    a CSV file at the specified path.\nYou should write self-contained code starting with:\n```\nimport xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n```", "solution": "import xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n    try:\n        root = ET.fromstring(xml_content)\n        data = [[elem.tag, elem.text] for elem in root.iter()]\n\n        with open(output_csv_path, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n            writer = csv.writer(f)\n            writer.writerows(data)\n    except ET.ParseError as e:\n        raise ET.ParseError(f\"Error parsing XML: {e}\") from e\n    except IOError as e:\n        raise IOError(f\"Error writing CSV file: {e}\") from e", "pass": false}
{"task_id": "1010", "program": "import requests\nfrom PIL import Image\nimport io\ndef task_func(url):\n\n    pass\nimport requests\nfrom PIL import Image\nimport io\ndef task_func(url):\n    \"\"\"\n    Fetches an image from a given URL and returns it as a PIL Image object.\n    Note that: The function uses a timeout of 5 seconds for the HTTP request to prevent indefinite waiting in case of unresponsive URLs. The function will not handle redirections or authentication scenarios. It expects a direct link to an image resource.\n    The function should raise the exception for: ValueError: This exception is raised in the following scenarios: The URL is invalid or cannot be reached within the timeout period (5 seconds). The response from the server is not a successful HTTP status code (i.e., not in the range 200-299). The content fetched from the URL is not a valid image format that can be handled by PIL.\n    The function should output with:\n        PIL.Image.Image: A PIL Image object representing the downloaded image. This\n        object can be manipulated or displayed using PIL's image processing\n        capabilities.\n    \"\"\"\n    # Set the timeout for the HTTP request\n    timeout = 5\n\n    # Make the HTTP request and get the response\n    response = requests.get(url, timeout=timeout)\n\n    # Check if the response is successful (i.e., in the range 200-299)\n    if not 200 <= response.status_code < 300:\n        raise ValueError(\"Invalid or unreachable URL\")\n\n    # Check if the content is a valid image format that can be handled by PIL\n    if not response.headers[\"Content-Type\"].startswith(\"image/\"):\n        raise ValueError(\"Invalid image format\")\n\n    # Create a BytesIO object from the response content\n    image_bytes = io.BytesIO(response.content)\n\n    # Load the image into a PIL Image object\n    image = Image.open(image_bytes)\n\n    return image", "problem": "Fetches an image from a given URL and returns it as a PIL Image object.\nNote that: The function uses a timeout of 5 seconds for the HTTP request to prevent indefinite waiting in case of unresponsive URLs. The function will not handle redirections or authentication scenarios. It expects a direct link to an image resource.\nThe function should raise the exception for: ValueError: This exception is raised in the following scenarios: The URL is invalid or cannot be reached within the timeout period (5 seconds). The response from the server is not a successful HTTP status code (i.e., not in the range 200-299). The content fetched from the URL is not a valid image format that can be handled by PIL.\nThe function should output with:\n    PIL.Image.Image: A PIL Image object representing the downloaded image. This\n    object can be manipulated or displayed using PIL's image processing\n    capabilities.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom PIL import Image\nimport io\ndef task_func(url):\n```", "solution": "import requests\nfrom PIL import Image\nimport io\ndef task_func(url):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        image = Image.open(io.BytesIO(response.content))\n        return image\n    except Exception as e:\n        raise ValueError(f\"Failed to retrieve image from {url}: {e}\") from e", "pass": false}
{"task_id": "1011", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n    # Read data from CSV file\n    df = pd.read_csv(csv_file_path)\n\n    # Group data by col1_name and calculate mean of col2_name\n    grouped_df = df.groupby(col1_name)[col2_name].mean()\n\n    # Create bar plot\n    ax = grouped_df.plot(kind=\"bar\", figsize=(10, 6))\n\n    # Set title and axis labels\n    ax.set_title(f\"Mean of {col2_name} Grouped by {col1_name}\")\n    ax.set_xlabel(col1_name)\n    ax.set_ylabel(f\"Mean of {col2_name}\")\n\n    return ax\ncsv_file_path = \"data.csv\"\ncol1_name = \"column1\"\ncol2_name = \"column2\"", "problem": "Reads data from a CSV file and generates a bar plot based on grouped mean values. The DataFrame is grouped by the column named 'col1_name', and the mean for each group is calculated for the column 'col2_name'. A bar plot is created using matplotlib. Each bar in the plot represents a group, and its height corresponds to the mean value of 'col2_name' for that group. The plot is then configured with a title and axis labels: - The title is set as \"Mean of [col2_name] Grouped by [col1_name]\". This format dynamically inserts the names of the columns being analyzed into the title. - The xlabel (label for the x-axis) is set to the name of the column used for grouping (col1_name). - The ylabel (label for the y-axis) is set as \"Mean of [col2_name]\", indicating that the y-axis represents the mean values of the specified column.\nNote that: Ensure that the CSV file exists at the specified path and has the required columns. The function does not handle missing data. Ensure that the CSV file has clean and complete data for accurate results. The bar plot is customizable using matplotlib's functionality after the function returns the Axes object.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the generated bar plot.\n    This object can be used to further customize the plot, like adding labels or changing styles.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n    df = pd.read_csv(csv_file_path)\n    groupby_data = df.groupby(col1_name)[col2_name].mean()\n\n    _, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(groupby_data.index, groupby_data.values)\n    ax.set_title(f\"Mean of {col2_name} Grouped by {col1_name}\")\n    ax.set_xlabel(col1_name)\n    ax.set_ylabel(f\"Mean of {col2_name}\")\n\n    return ax", "pass": true}
{"task_id": "1012", "program": "import requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n\n    pass\nimport requests\nfrom pathlib import Path\nimport zipfile\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    \"\"\"\n    Downloads and extracts a zip file from a specified URL.\n    Note that: the status message will contain \"Error\" when:\n        - Network-related exceptions are raised if the download fails.\n        - File-related exceptions are raised if there is an issue with file handling or extraction.\n    The function should output with:\n        tuple: A tuple containing a status message and a list of filenames in the unzipped directory, or an empty list if extraction fails.\n    \"\"\"\n    # Create the download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        return \"Error: {}\".format(e), []\n\n    # Save the zip file to the download directory\n    with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n        f.write(response.content)\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_file:\n            zip_file.extractall(ZIP_DIR)\n    except zipfile.BadZipFile as e:\n        return \"Error: {}\".format(e), []\n\n    # Return the list of filenames in the unzipped directory\n    return \"Success\", [f.name for f in ZIP_DIR.iterdir()]", "problem": "Downloads and extracts a zip file from a specified URL.\nNote that: the status message will contain \"Error\" when: Network-related exceptions are raised if the download fails. File-related exceptions are raised if there is an issue with file handling or extraction.\nThe function should output with:\n    tuple: A tuple containing a status message and a list of filenames in the unzipped directory, or an empty list if extraction fails.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n```", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    try:\n        # Download the file\n        response = requests.get(url, stream=True, timeout=5)\n        if response.status_code == 200:\n            filepath = DOWNLOAD_DIR / filename\n            filepath.parent.mkdir(parents=True, exist_ok=True)\n\n            with open(filepath, \"wb\") as handle:\n                for data in response.iter_content():\n                    handle.write(data)\n\n            # Unzip the file\n            zip_dir = ZIP_DIR / filename[:-4]\n            zip_dir.mkdir(parents=True, exist_ok=True)\n\n            with zipfile.ZipFile(filepath, \"r\") as zip_ref:\n                zip_ref.extractall(zip_dir)\n\n            return \"Download and extraction successful\", [\n                file.name for file in zip_dir.iterdir()\n            ]\n        return (\n            f\"Download failed: HTTP status code {response.status_code}\",\n            [],\n        )\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {e}\", []\n    except zipfile.BadZipFile as e:\n        return f\"Error: Invalid zip file: {e}\", []", "pass": false}
{"task_id": "1013", "program": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n\n    pass\nimport requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(url: str, base_url: str = \"https://www.example.com\", csv_file: str = \"scraped_data.csv\") -> int:\n    \"\"\"\n    This function scrapes a webpage for all hyperlinks and saves them as absolute URLs to a CSV file.\n    The function should output with:\n        int: The number of unique absolute links scraped from the webpage.\n    \"\"\"\n    # Make a GET request to the URL\n    response = requests.get(url)\n\n    # Parse the HTML content using BeautifulSoup\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find all anchor tags in the HTML content\n    links = soup.find_all(\"a\")\n\n    # Create a set to store unique absolute URLs\n    unique_links = set()\n\n    # Iterate over the anchor tags and extract the absolute URLs\n    for link in links:\n        # Extract the href attribute of the anchor tag\n        href = link.get(\"href\")\n\n        # If the href attribute is not None and it's not a fragment identifier\n        if href is not None and not href.startswith(\"#\"):\n            # Join the base URL with the href attribute to get the absolute URL\n            absolute_url = urljoin(base_url, href)\n\n            # Add the absolute URL to the set\n            unique_links.add(absolute_url)\n\n    # Write the unique links to a CSV file\n    with open(csv_file, \"w\", newline=\"\") as f:\n        writer = csv.writer(f)\n        writer.writerow([\"URL\"])\n        for link in unique_links:\n            writer.writerow([link])\n\n    # Return the number of unique links scraped\n    return len(unique_links)\nurl = \"https://www.example.com\"\nbase_url = \"https://www.example.com\"\ncsv_file = \"scraped_data.csv\"", "problem": "This function scrapes a webpage for all hyperlinks and saves them as absolute URLs to a CSV file.\nThe function should output with:\n    int: The number of unique absolute links scraped from the webpage.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n```", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    full_url = urljoin(base_url, url)\n    response = requests.get(full_url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n\n    # Extract and convert all found links to absolute URLs\n    links = {urljoin(base_url, a[\"href\"]) for a in soup.find_all(\"a\", href=True)}\n\n    with open(csv_file, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n        writer = csv.writer(csvfile)\n        for link in links:\n            writer.writerow([link])\n\n    return len(links)", "pass": false}
{"task_id": "1014", "program": "import requests\nimport pandas as pd\ndef task_func(api_url):\n\n    pass\nimport requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(api_url):\n    if not isinstance(api_url, str):\n        raise TypeError(\"api_url must be a string\")\n\n    response = requests.get(api_url)\n    if response.status_code != 200:\n        raise requests.HTTPError(\"API request failed\")\n\n    data = response.json()\n    if not data:\n        return pd.DataFrame(), None\n\n    df = pd.DataFrame(data)\n    ax = df.plot(kind=\"bar\")\n    return df, ax\napi_url = \"https://api.example.com/data\"", "problem": "Fetches data from a specified API, processes the JSON response, converts it into a pandas DataFrame, and plots the data using matplotlib. If the data is empty, no plot is generated. If the API request fails, it raises an HTTPError. The function also checks if the provided API URL is a string.\nThe function should raise the exception for: HTTPError: If the API request fails due to issues like network problems, invalid response, etc. TypeError: If the `api_url` is not a string.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the parsed data from the API.\n    Axes or None: A matplotlib Axes object representing the plot of the data, or None if the data is empty.\nYou should write self-contained code starting with:\n```\nimport requests\nimport pandas as pd\ndef task_func(api_url):\n```", "solution": "import requests\nimport pandas as pd\ndef task_func(api_url):\n    # Send the GET request and handle API failure\n    if not isinstance(api_url, str):\n        raise TypeError(\"api_url must be a string\")\n\n    response = requests.get(api_url, timeout=5)\n    response.raise_for_status()\n\n    # Parse the JSON response and convert it to a pandas DataFrame\n    data = response.json()\n    df = pd.DataFrame(data)\n\n    # Generate a plot if the DataFrame is not empty\n    plot = df.plot() if not df.empty else None\n\n    return df, plot", "pass": true}
{"task_id": "1015", "program": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n\n    pass\nimport requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    This function parses HTML table data from a specified URL or local file and stores it into an SQLite database.\n    The function handles different scenarios for fetching, processing, and storing data.\n    Note that:\n        - The function is designed to replace the table \"my_table\" in the specified SQLite database with new data each time it is called.\n        - If the HTML content does not contain a table or if the table is empty, the function will return 0, indicating no rows were parsed and stored.\n        - This function relies on the 'requests', 'lxml', 'pandas', and 'sqlite3' libraries for its operations.\n    The function should raise the exception for:\n        - requests.RequestException: This exception is raised if there is a network issue in accessing the URL. This includes scenarios like connection errors, timeouts, and HTTP errors.\n        - sqlite3.DatabaseError: This exception is raised in case of issues connecting to, or writing to, the SQLite database. This includes issues like invalid database names, write permissions, or SQL execution errors.\n    The function should output with:\n        - int: The number of rows in the parsed HTML table.\n    \"\"\"\n    # Connect to the SQLite database\n    conn = sqlite3.connect(database_name)\n    cur = conn.cursor()\n\n    # Fetch the HTML content from the URL\n    try:\n        response = requests.get(webpage_url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise e\n\n    # Parse the HTML content using lxml\n    tree = html.fromstring(response.content)\n\n    # Find the table element in the HTML content\n    table = tree.find(\".//table\")\n\n    # If the table is not found, return 0\n    if table is None:\n        return 0\n\n    # Convert the table to a pandas DataFrame\n    df = pd.read_html(table.tostring())[0]\n\n    # Replace the existing table in the SQLite database with the new data\n    cur.execute(\"DROP TABLE IF EXISTS my_table\")\n    df.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n\n    # Commit the changes to the database\n    conn.commit()\n\n    # Return the number of rows in the parsed HTML table\n    return len(df.index)", "problem": "This function parses HTML table data from a specified URL or local file and stores it into an SQLite database. The function handles different scenarios for fetching, processing, and storing data.\nNote that: Notes: The function is designed to replace the table \"my_table\" in the specified SQLite database with new data each time it is called. If the HTML content does not contain a table or if the table is empty, the function will return 0, indicating no rows were parsed and stored. This function relies on the 'requests', 'lxml', 'pandas', and 'sqlite3' libraries for its operations.\nThe function should raise the exception for: requests.RequestException: This exception is raised if there is a network issue in accessing the URL. This includes scenarios like connection errors, timeouts, and HTTP errors. sqlite3.DatabaseError: This exception is raised in case of issues connecting to, or writing to, the SQLite database. This includes issues like invalid database names, write permissions, or SQL execution errors.\nThe function should output with:\n    int: The number of rows in the parsed HTML table.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n```", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        if webpage_url.startswith(\"file://\"):\n            with open(webpage_url[7:], \"r\", encoding=\"utf-8\") as file:\n                content = file.read()\n        else:\n            response = requests.get(webpage_url, timeout=5)\n            response.raise_for_status()\n            content = response.content\n\n        tree = html.fromstring(content)\n        rows = tree.xpath(\"//tr\")\n        data = [\n            [cell.text_content().strip() for cell in row.xpath(\".//td\")] for row in rows\n        ]\n\n        # Create DataFrame\n        df = pd.DataFrame(data)\n        if df.empty:\n            return 0\n\n        # Store data in database\n        conn = None\n        try:\n            conn = sqlite3.connect(database_name)\n            df.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n        finally:\n            if conn:\n                conn.close()\n\n        return len(df)\n\n    except requests.RequestException as e:\n        raise requests.RequestException(f\"Error accessing URL {webpage_url}: {e}\")\n    except sqlite3.DatabaseError as e:\n        raise sqlite3.DatabaseError(f\"Database error with {database_name}: {e}\")", "pass": false}
{"task_id": "1016", "program": "import requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n\n    pass\nimport requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n    \"\"\"\n    Downloads an image from the specified URL, converts it to grayscale, and generates a histogram of its grayscale values.\n    The function should raise the exception for:\n        ValueError: If the URL is invalid or if there's an error downloading the image. Error message will specify the download issue.\n        IOError: If there's an error in opening or processing the downloaded image. Error message will specify the processing issue.\n    The function should output with:\n        matplotlib.axes._axes.Axes: The Axes object of the generated histogram.\n    \"\"\"\n    # Download the image from the specified URL\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as err:\n        raise ValueError(f\"Error downloading image: {err}\")\n    except requests.exceptions.RequestException as err:\n        raise ValueError(f\"Error downloading image: {err}\")\n\n    # Convert the image to grayscale\n    try:\n        image = Image.open(io.BytesIO(response.content))\n        image = image.convert(\"L\")\n    except IOError as err:\n        raise IOError(f\"Error opening or processing image: {err}\")\n\n    # Generate a histogram of the grayscale values\n    try:\n        grayscale_values = np.array(image).flatten()\n        hist, bins = np.histogram(grayscale_values, bins=256, range=(0, 256))\n        fig, ax = plt.subplots()\n        ax.bar(bins[:-1], hist, width=1)\n        ax.set_xlabel(\"Grayscale value\")\n        ax.set_ylabel(\"Frequency\")\n        ax.set_title(\"Histogram of Grayscale Values\")\n        return ax\n    except ValueError as err:\n        raise ValueError(f\"Error generating histogram: {err}\")", "problem": "Downloads an image from the specified URL, converts it to grayscale, and generates a histogram of its grayscale values.\nThe function should raise the exception for: ValueError: If the URL is invalid or if there's an error downloading the image. Error message will specify the download issue. IOError: If there's an error in opening or processing the downloaded image. Error message will specify the processing issue.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the generated histogram.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n```", "solution": "import requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n    response = None  # Initialize response to None\n    # Validate the URL\n    if not isinstance(url, str) or not url:\n        raise ValueError(\"Invalid URL provided.\")\n\n    # Download the image with error handling\n    try:\n        response = requests.get(url, stream=True, timeout=10)\n        response.raise_for_status()\n        img = Image.open(response.raw).convert(\"L\")\n    except requests.RequestException as e:\n        raise ValueError(f\"Error downloading the image: {e}\") from e\n    except IOError as e:\n        raise IOError(f\"Error processing the image: {e}\") from e\n    finally:\n        if response:  # Check if response is not None before closing\n            response.close()\n\n    # Convert the image to a numpy array\n    img_array = np.array(img)\n\n    # Create the histogram and return the Axes object\n    _, ax = plt.subplots()\n    ax.hist(img_array.ravel(), bins=256, color=\"gray\", alpha=0.7)\n    ax.set_title(\"Grayscale Histogram\")\n    return ax", "pass": false}
{"task_id": "1017", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n    \"\"\"\n    Processes a CSV file to train a Random Forest classifier and generates a formatted classification report.\n\n    Args:\n        csv_file_path (str): The path to the CSV file.\n        target_column (str): The name of the column containing the target variable.\n        test_size (float): The proportion of the dataset to include in the test split.\n        n_estimators (int): The number of trees in the Random Forest classifier.\n\n    Returns:\n        str: A formatted classification report.\n    \"\"\"\n    # Load the data\n    df = pd.read_csv(csv_file_path)\n\n    # Check if the target column is in the data\n    if target_column not in df.columns:\n        raise ValueError(f\"Target column '{target_column}' not found in the data.\")\n\n    # Split the data into training and test sets\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\n\n    # Train the Random Forest classifier\n    clf = RandomForestClassifier(n_estimators=n_estimators)\n    clf.fit(X_train, y_train)\n\n    # Generate the classification report\n    y_pred = clf.predict(X_test)\n    report = classification_report(y_test, y_pred)\n\n    return report", "problem": "Processes a CSV file to train a Random Forest classifier and generates a formatted classification report.\nNote that: The CSV file must have a column with the name specified by 'target_column', and it should be in a format readable by pandas.read_csv().\nThe function should raise the exception for: ValueError: If the specified target_column is not found in the CSV file.\nThe function should output with:\n    str: A formatted classification report. The report includes metrics such as precision, recall,\n    f1-score for each class, as well as overall accuracy, macro average, and weighted average.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n    df = pd.read_csv(csv_file_path)\n    if target_column not in df.columns:\n        raise ValueError(f\"'{target_column}' column not found in the CSV file.\")\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=42\n    )\n    clf = RandomForestClassifier(n_estimators=n_estimators, random_state=42)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    report = classification_report(y_test, y_pred)\n\n    # New formatting approach\n    lines = report.split(\"\\n\")\n    formatted_lines = []\n    for line in lines:\n        # Split the line into words and rejoin with specific spacing\n        parts = line.split()\n        if len(parts) == 5:  # Class-specific metrics\n            formatted_line = f\"{parts[0]:<15}{parts[1]:>10}{parts[2]:>10}{parts[3]:>10}{parts[4]:>10}\"\n        elif len(parts) == 4:  # Overall metrics\n            formatted_line = f\"{parts[0]:<15}{parts[1]:>10}{parts[2]:>10}{parts[3]:>10}\"\n        else:\n            formatted_line = line  # Header or empty lines\n        formatted_lines.append(formatted_line)\n\n    formatted_report = \"\\n\".join(formatted_lines)\n    return formatted_report", "pass": true}
{"task_id": "1018", "program": "from bs4 import BeautifulSoup\nimport requests\n# Constants\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n\n    pass\nfrom bs4 import BeautifulSoup\nimport requests\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n    \"\"\"\n    Fetches a web page from a given URL, decodes its content from a specified encoding, and returns the parsed HTML using BeautifulSoup. If specified, 'lxml' is used as the parser for improved performance. In case of any failure (like network issues, invalid URL, or decoding errors), the function returns None.\n    \"\"\"\n    if not url:\n        return None\n\n    try:\n        response = requests.get(url)\n        if response.status_code != 200:\n            return None\n\n        html = response.content.decode(from_encoding)\n        if use_lxml:\n            return BeautifulSoup(html, \"lxml\")\n        else:\n            return BeautifulSoup(html)\n    except Exception as e:\n        return None", "problem": "Fetches a web page from a given URL, decodes its content from a specified encoding, and returns the parsed HTML using BeautifulSoup. If specified, 'lxml' is used as the parser for improved performance. In case of any failure (like network issues, invalid URL, or decoding errors), the function returns None.\nNote that: Notes: The function returns None if the URL is empty or None. Network errors, HTTP errors, and decoding issues are caught and result in None being returned. If the HTTP response status code is 200 (indicating success), the content is decoded using the specified encoding If the response status code is not 200, it implies an unsuccessful HTTP request (e.g., 404 Not Found, 403 Forbidden). In such cases, the function returns None, indicating that the webpage could not be successfully retrieved or was not available.\nThe function should output with:\n    BeautifulSoup object if the fetch and parse are successful.\n    None if the URL is invalid, the request fails, or parsing fails.\nYou should write self-contained code starting with:\n```\nfrom bs4 import BeautifulSoup\nimport requests\n# Constants\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n```", "solution": "from bs4 import BeautifulSoup\nimport requests\n# Constants\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n    if not url:\n        return None\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        if response.status_code == 200:\n            decoded_content = response.content.decode(from_encoding)\n            parser = \"lxml\" if use_lxml else \"html.parser\"\n            soup = BeautifulSoup(decoded_content, parser)\n            return soup\n        else:\n            return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None", "pass": true}
{"task_id": "1019", "program": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n\n    pass\nfrom PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens an image file, extracts text using OCR, and converts the text encoding, with a fallback to image comment processing.\n    The function should raise the exception for:\n        ValueError: UnicodeDecodeError or LookupError occurs during conversion\n        ValueError: If incorrect encodings are provided for the text or comment conversion.\n    The function should output with:\n        comment (str): The text extracted from the image or the image comment, converted to the target encoding.\n        If OCR extraction and comment processing both fail, returns an empty string.\n    \"\"\"\n    try:\n        # Open the image file\n        image = Image.open(filename)\n\n        # Extract text from the image using OCR\n        text = pytesseract.image_to_string(image, lang=\"eng\")\n\n        # Convert the text to the target encoding\n        comment = codecs.decode(text, from_encoding, errors=\"ignore\")\n        comment = codecs.encode(comment, to_encoding, errors=\"ignore\")\n\n        # Return the converted text\n        return comment\n\n    except (ValueError, LookupError):\n        # If the text cannot be extracted or converted, try to extract the comment from the image\n        try:\n            # Extract the comment from the image\n            comment = image.info[\"comment\"]\n\n            # Convert the comment to the target encoding\n            comment = codecs.decode(comment, from_encoding, errors=\"ignore\")\n            comment = codecs.encode(comment, to_encoding, errors=\"ignore\")\n\n            # Return the converted comment\n            return comment\n\n        except (ValueError, LookupError):\n            # If the comment cannot be extracted or converted, return an empty string\n            return \"\"\nimage_path = \"image.png\"\nfrom_encoding = \"cp1251\"\nto_encoding = \"utf8\"", "problem": "Opens an image file, extracts text using OCR, and converts the text encoding, with a fallback to image comment processing.\nThe function should raise the exception for: ValueError: UnicodeDecodeError or LookupError occurs during conversion ValueError: If incorrect encodings are provided for the text or comment conversion.\nThe function should output with:\n    comment (str): The text extracted from the image or the image comment, converted to the target encoding.\n    If OCR extraction and comment processing both fail, returns an empty string.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n```", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    with Image.open(filename) as image:\n        try:\n            extracted_text = pytesseract.image_to_string(image)\n            if extracted_text:\n                try:\n                    return extracted_text.encode(from_encoding).decode(to_encoding)\n                except (UnicodeDecodeError, LookupError) as exc:\n                    raise ValueError(\"Incorrect encoding provided.\") from exc\n        except Exception:\n            # If OCR fails, fall back to processing the image comment\n            pass\n\n        comment = image.info.get(\"comment\", \"\")\n        if isinstance(comment, bytes):\n            try:\n                return (\n                    codecs.decode(comment, from_encoding)\n                    .encode(to_encoding)\n                    .decode(to_encoding)\n                )\n            except (UnicodeDecodeError, LookupError) as exc:\n                raise ValueError(\"Incorrect encoding provided.\") from exc\n\n        return comment", "pass": false}
{"task_id": "1020", "program": "import json\nimport requests\nimport chardet\n# Constants\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n\n    pass\nimport json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from a specified REST API URL and processes it for JSON parsing.\n    The process involves decoding and re-encoding the data, handling different encoding scenarios.\n\n    Args:\n        url (str): The URL of the API endpoint.\n        from_encoding (str): The encoding of the response content.\n        to_encoding (str): The encoding to convert the response content to.\n\n    Returns:\n        dict: The JSON-parsed data after re-encoding. Returns an empty dictionary if the content is empty.\n\n    Raises:\n        ValueError: If the encoding cannot be detected for non-empty content.\n    \"\"\"\n    # Initiate an HTTP GET request to the specified URL with a 5-second timeout\n    response = requests.get(url, timeout=5)\n\n    # Retrieve the response content in raw bytes\n    content = response.content\n\n    # Handle cases with empty content and undetectable encoding\n    if not content:\n        return {}\n\n    # Detect the encoding of the response content\n    encoding = chardet.detect(content)[\"encoding\"]\n\n    # Handle cases with undetectable encoding\n    if not encoding:\n        raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n    # Decode the response content using the detected encoding\n    decoded_content = content.decode(encoding)\n\n    # Re-encode the decoded content using the specified encoding\n    encoded_content = decoded_content.encode(to_encoding)\n\n    # Parse the encoded content as JSON\n    json_data = json.loads(encoded_content)\n\n    return json_data\nurl = \"http://api.example.com/data\"", "problem": "Fetches data from a specified REST API URL and processes it for JSON parsing. The process involves decoding and re-encoding the data, handling different encoding scenarios.\nNote that: The function initiates an HTTP GET request to the specified URL with a 5-second timeout. It retrieves the response content in raw bytes. Notes: The function sets a timeout of 5 seconds for the API request. It handles cases with empty content and undetectable encoding by returning an empty dictionary or raising an exception, respectively. The decoding and re-encoding steps ensure compatibility with various data formats and the final JSON parsing.\nThe function should raise the exception for: ValueError: \"Unable to detect encoding for non-empty content\", if it fails to detect the encoding for non-empty response content.\nThe function should output with:\n    dict: The JSON-parsed data after re-encoding. Returns an empty dictionary if the content is empty.\nYou should write self-contained code starting with:\n```\nimport json\nimport requests\nimport chardet\n# Constants\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n```", "solution": "import json\nimport requests\nimport chardet\n# Constants\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    response = requests.get(url, timeout=5)\n    content = response.content\n\n    if from_encoding is None:\n        detected_encoding = chardet.detect(content)[\"encoding\"]\n        # Handling the case where detected encoding is None\n        if detected_encoding is None:\n            if content:\n                raise ValueError(\"Unable to detect encoding for non-empty content\")\n            else:\n                # Handle empty content gracefully\n                return {}\n        content = content.decode(detected_encoding)\n    else:\n        content = content.decode(from_encoding)\n\n    content = content.encode(to_encoding).decode(to_encoding)\n\n    data = json.loads(content)\n\n    return data", "pass": true}
{"task_id": "1021", "program": "import binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n\n    pass\nimport binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    if verify_hash is not None and not isinstance(verify_hash, str):\n        raise TypeError(\"Verify hash must be a string or None\")\n\n    hash_object = hashlib.sha256(input_string.encode())\n    computed_hash = hash_object.hexdigest()\n\n    if verify_hash is not None:\n        return computed_hash == verify_hash\n    else:\n        return computed_hash", "problem": "Compute the SHA256 hash of a given input string and return its hexadecimal representation. Optionally, verify the computed hash against a provided hash.\nThe function should raise the exception for: TypeError: If the input is not a string or verify_hash is not a string or None.\nThe function should output with:\n    str: A hexadecimal string representing the SHA256 hash of the input string.\n    bool: True if verify_hash is provided and matches the computed hash, otherwise None.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n```", "solution": "import binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    if verify_hash is not None and not isinstance(verify_hash, str):\n        raise TypeError(\"verify_hash must be a string or None\")\n\n    hashed_bytes = hashlib.sha256(input_string.encode()).digest()\n    hex_encoded_hash = binascii.hexlify(hashed_bytes).decode()\n\n    if verify_hash is not None:\n        return hex_encoded_hash == verify_hash\n\n    return hex_encoded_hash", "pass": true}
{"task_id": "1022", "program": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n\n    pass\nimport pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads a CSV file and processes its date-related data.\n\n    The function performs several key tasks such as checking for the file's existence, validating the presence of a specified date column, converting date values to datetime objects, filtering rows based on the current date, and sorting the resulting data.\n\n    The function handles special cases, like an empty CSV file, by returning an empty DataFrame and raises exceptions for specific error scenarios like missing files or columns.\n\n    The function should raise the exception for:\n        FileNotFoundError: If the specified CSV file is not found at the given path.\n        ValueError: If the specified column is not present in the CSV file.\n\n    The function should output with:\n        pandas\n        os\n        datetime.datetime\n        pandas.errors.EmptyDataError\n\n    Args:\n        csv_file_path (str): The path to the CSV file.\n        column_name (str): The name of the date column.\n        date_format (str): The format of the date values in the CSV file.\n\n    Returns:\n        pandas.DataFrame: The processed data.\n    \"\"\"\n    # Check if the CSV file exists\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"File not found at {csv_file_path}\")\n\n    # Read the CSV file\n    df = pd.read_csv(csv_file_path)\n\n    # Check if the date column is present\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} not found in the CSV file\")\n\n    # Convert date values to datetime objects\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n\n    # Filter rows based on the current date\n    today = datetime.today()\n    df = df[df[column_name] >= today]\n\n    # Sort the resulting data\n    df = df.sort_values(column_name)\n\n    # Handle special cases\n    if df.empty:\n        raise EmptyDataError(\"The CSV file is empty\")\n\n    return df\ncsv_file_path = \"data.csv\"\ncolumn_name = \"date\"\ndate_format = \"%Y-%m-%d\"", "problem": "Reads a CSV file and processes its date-related data. The function performs several key tasks such as checking for the file's existence, validating the presence of a specified date column, converting date values to datetime objects, filtering rows based on the current date, and sorting the resulting data. The function handles special cases, like an empty CSV file, by returning an empty DataFrame and raises exceptions for specific error scenarios like missing files or columns.\nThe function should raise the exception for: FileNotFoundError: If the specified CSV file is not found at the given path. ValueError: If the specified column is not present in the CSV file.\nThe function should output with:\n    pandas\n    os\n    datetime.datetime\n    pandas.errors.EmptyDataError\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n```", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"The file {csv_file_path} does not exist.\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n\n    if column_name not in df.columns:\n        raise ValueError(f\"The column {column_name} is not found in the file.\")\n\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    current_date = datetime.now().date()\n    df = df[df[column_name].dt.date >= current_date]\n    df = df.sort_values(by=column_name)\n\n    return df", "pass": false}
{"task_id": "1023", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n    \"\"\"\n    Calculate the correlation matrix of a DataFrame and plot a scatter plot for the pair of columns with the highest absolute correlation.\n\n    Args:\n        dataframe (pd.DataFrame): The input DataFrame.\n\n    Returns:\n        ax (plt.Axes): The scatter plot of the pair of columns with the highest absolute correlation.\n\n    Raises:\n        ValueError: If the input DataFrame is empty.\n        TypeError: If any column in the DataFrame is non-numeric.\n        ValueError: If the DataFrame has fewer than two columns.\n    \"\"\"\n    # Check if the DataFrame is empty\n    if dataframe.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    # Check if all columns are numeric\n    if not dataframe.apply(lambda x: x.dtype.kind == \"f\").all():\n        raise TypeError(\"The DataFrame contains non-numeric columns.\")\n\n    # Check if the DataFrame has at least two columns\n    if len(dataframe.columns) < 2:\n        raise ValueError(\"The DataFrame has fewer than two columns.\")\n\n    # Calculate the correlation matrix\n    corr_matrix = dataframe.corr()\n\n    # Find the pair of columns with the highest absolute correlation\n    abs_corr = np.abs(corr_matrix)\n    max_corr = abs_corr.max()\n    max_corr_cols = np.where(abs_corr == max_corr)\n\n    # Plot the scatter plot for the pair of columns with the highest absolute correlation\n    ax = plt.subplot()\n    ax.scatter(dataframe[max_corr_cols[0]], dataframe[max_corr_cols[1]])\n    ax.set_xlabel(dataframe.columns[max_corr_cols[0]])\n    ax.set_ylabel(dataframe.columns[max_corr_cols[1]])\n    ax.set_title(\"Scatter Plot of Pair of Columns with Highest Absolute Correlation\")\n\n    return ax", "problem": "Calculate the correlation matrix of a DataFrame and plot a scatter plot for the pair of columns with the highest absolute correlation. Exception Handling: - Raises ValueError if the input DataFrame is empty. - Raises TypeError if any column in the DataFrame is non-numeric. - Raises ValueError if the DataFrame has fewer than two columns.\nThe function should output with:\n    ax (plt.Axes): The scatter plot of the pair of columns with the highest absolute correlation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n\n    if dataframe.empty:\n        raise ValueError(\"DataFrame is empty.\")\n        \n    if not all(dataframe.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\"All columns must be numeric for correlation calculation.\")\n\n    if dataframe.shape[1] < 2:\n        raise ValueError(\"DataFrame must have at least two columns for correlation calculation.\")\n\n    # Explicit use of pd.DataFrame.corr() to calculate the correlation matrix\n    corr_matrix = pd.DataFrame.corr(dataframe)\n    abs_corr_matrix = corr_matrix.abs()\n\n    # Finding the pair of columns with the highest absolute correlation\n    highest_corr_value = abs_corr_matrix.unstack().dropna().nlargest(2).iloc[-1]\n    max_corr_pair = np.where(abs_corr_matrix == highest_corr_value)\n\n    # Extracting column names for the highest correlation\n    column_x = dataframe.columns[max_corr_pair[0][0]]\n    column_y = dataframe.columns[max_corr_pair[1][0]]\n\n    # Using plt to plot the scatter plot\n    plt.figure(figsize=(10, 6))  # Creating a figure\n    plt.scatter(dataframe[column_x], dataframe[column_y])  # Plotting the scatter plot\n    plt.title(f\"Scatter plot between {column_x} and {column_y}\")  # Setting the title\n    plt.xlabel(column_x)  # Setting the x-axis label\n    plt.ylabel(column_y)  # Setting the y-axis label\n    plt.show()  # Displaying the figure\n\n    return plt.gca()  # Returning the current Axes object for further use", "pass": false}
{"task_id": "1024", "program": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Constants\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n\n    pass\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n    # Create a pandas DataFrame from the input dictionary\n    df = pd.DataFrame(data_dict)\n\n    # Remove None values\n    df = df.dropna()\n\n    # Calculate the minimum and maximum values in the DataFrame\n    min_val = df.min().min()\n    max_val = df.max().max()\n\n    # Dynamically set the number of bins for the histogram\n    num_bins = min(11, len(df) // 2)\n    if num_bins < 2:\n        num_bins = 2\n\n    # Create evenly spaced bin edges between the minimum and maximum values\n    bin_edges = np.linspace(min_val, max_val, num_bins + 1)\n\n    # Generate a histogram of the data values using seaborn\n    ax = sns.histplot(df, bins=bin_edges, kde=False)\n\n    # Set the plot title\n    ax.set_title(PLOT_TITLE)\n\n    # Return the DataFrame and the plot object\n    return df, ax", "problem": "Processes a dictionary of numerical data to create a pandas DataFrame, removes None values, and generates a histogram of the data values using seaborn. The histogram's bins are dynamically calculated based on the range of the data. Specifically, the number of bins is set to the minimum of 11 and half the number of data points, with a minimum of 2 bins. If the DataFrame is empty or the data lacks variability (all values are the same after removing None values), the function does not generate a plot.\nNote that: Calculates the minimum and maximum values in the DataFrame. Dynamically sets the number of bins for the histogram based on the number of data points, with a minimum of 2 and a maximum of 11 bins. Create evenly spaced bin edges between the minimum and maximum values. KDE (Kernel Density Estimate) is turned off. Sets the plot title to the predefined constant `PLOT_TITLE`.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the input dictionary, excluding None values.\n    Axes or None: A seaborn histogram plot object if the DataFrame contains variable data;\n    None if the DataFrame is empty or if all values are identical.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Constants\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n```", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Constants\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict).dropna()\n\n    if df.empty or df.nunique().min() < 2:\n        return df, None\n\n    min_val, max_val = df.values.min(), df.values.max()\n    num_bins = max(min(11, len(df) // 2), 2)\n    bin_edges = np.linspace(min_val, max_val, num_bins)\n\n    plot = sns.histplot(df.values.flatten(), bins=bin_edges, kde=False)\n    plot.set_title(PLOT_TITLE)\n\n    return df, plot", "pass": false}
{"task_id": "1025", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n    # Convert the dictionary to a pandas DataFrame\n    df = pd.DataFrame(data_dict)\n\n    # Scale the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    scaled_data = scaler.fit_transform(df)\n\n    # Create a new DataFrame with the scaled data\n    scaled_df = pd.DataFrame(scaled_data, columns=df.columns)\n\n    # Plot the scaled data\n    fig, ax = plt.subplots()\n    ax.plot(scaled_df)\n    ax.set_title(PLOT_TITLE)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Scaled Value\")\n\n    return scaled_df, ax\ndata_dict = {\"a\": [1, 2, 3, 4, 5], \"b\": [6, 7, 8, 9, 10]}", "problem": "Scales the values in a given dictionary using MinMaxScaler and plots the scaled data.\nThe function should output with:\n    pandas.DataFrame containing the scaled data.\n    matplotlib Axes object that displays the plot of the scaled data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict).dropna()\n\n    if df.empty:\n        ax = plt.gca()\n        ax.set_title(PLOT_TITLE)\n        return df, ax\n\n    scaler = MinMaxScaler()\n    scaled_data = scaler.fit_transform(df)\n    df_scaled = pd.DataFrame(scaled_data, columns=df.columns)\n\n    ax = df_scaled.plot()\n    ax.set_title(PLOT_TITLE)\n\n    return df_scaled, ax", "pass": false}
{"task_id": "1026", "program": "import numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n\n    pass\nimport numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n    group1 = kwargs['group1']\n    group2 = kwargs['group2']\n    alpha = kwargs.get('alpha', 0.05)\n    nan_policy = kwargs.get('nan_policy', 'omit')\n    threshold = kwargs.get('threshold', 1e-8)\n\n    # Check if either group is empty or contains only NaN values\n    if len(group1) == 0 or len(group2) == 0:\n        raise ValueError(\"Either group is empty.\")\n    if np.isnan(group1).all() or np.isnan(group2).all():\n        raise ValueError(\"Either group contains only NaN values.\")\n\n    # Remove NaN values and check if there are at least two non-NaN values in each group\n    group1 = group1[~np.isnan(group1)]\n    group2 = group2[~np.isnan(group2)]\n    if len(group1) < 2 or len(group2) < 2:\n        raise ValueError(\"Either group has less than two non-NaN values.\")\n\n    # Check if the variance in each group is above the threshold\n    if np.var(group1) < threshold or np.var(group2) < threshold:\n        raise ValueError(\"Variance in one or both groups is below the threshold.\")\n\n    # Perform the t-test and compute descriptive statistics\n    t, p = ttest_ind(group1, group2, nan_policy=nan_policy)\n    group1_stats = {'mean': np.mean(group1), 'std': np.std(group1)}\n    group2_stats = {'mean': np.mean(group2), 'std': np.std(group2)}\n\n    # Generate boxplot and histograms\n    fig, (ax_boxplot, ax_histogram) = plt.subplots(1, 2, figsize=(10, 5))\n    ax_boxplot.set_title(\"Boxplot Comparison of Group 1 and Group 2\")\n    ax_boxplot.boxplot([group1, group2], labels=['Group 1', 'Group 2'])\n    ax_histogram.set_title(\"Histogram of Group 1 and Group 2\")\n    ax_histogram.hist([group1, group2], label=['Group 1', 'Group 2'], alpha=0.5)\n\n    # Check if the means of the two groups are significantly different\n    significant = p < alpha\n\n    return {\n        'significant': significant,\n        'group1_stats': group1_stats,\n        'group2_stats': group2_stats,\n        'ax_boxplot': ax_boxplot,\n        'ax_histogram': ax_histogram\n    }", "problem": "Performs a two-sample t-test on numerical data from two groups to determine if there is a significant difference in their means. The function handles NaN values, computes descriptive statistics for each group, and generates a boxplot and histograms for data visualization.\nNote that: The function sets the significance level (alpha) at 0.05. It removes NaN values before performing any calculations or plotting. A t-test is performed with the 'nan_policy' set to 'omit' to ignore NaNs. The function checks for sufficient non-NaN data points and adequate variance in each group before conducting the t-test. The boxplot and histograms provide a visual comparison of the data distributions.\nThe function should raise the exception for: ValueError: If either group is empty, contains only NaN values, has less than two non-NaN values, or if the variance in one or both groups is below a threshold (1e-8).\nThe function should output with:\n    dict: A dictionary containing:\n    'significant': Boolean. True if the means of the two groups are significantly different (p < 0.05).\n    'group1_stats': Dictionary with mean and standard deviation of 'group1' (excluding NaNs).\n    'group2_stats': Dictionary with mean and standard deviation of 'group2' (excluding NaNs).\n    'ax_boxplot': A matplotlib Axes object with a boxplot comparing 'group1' and 'group2'.\n    'ax_histogram': A matplotlib Axes object with histograms of 'group1' and 'group2'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n```", "solution": "import numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n    alpha = 0.05  # Define the significance level\n\n    group1 = np.array(kwargs.get(\"group1\", []))\n    group2 = np.array(kwargs.get(\"group2\", []))\n\n    # Check for empty or all-NaN groups\n    if (\n        len(group1) == 0\n        or len(group2) == 0\n        or np.all(np.isnan(group1))\n        or np.all(np.isnan(group2))\n    ):\n        raise ValueError(\"One or both groups are empty or contain only NaN values.\")\n\n    # Removing NaN values and ensuring sufficient data\n    valid_group1 = group1[~np.isnan(group1)]\n    valid_group2 = group2[~np.isnan(group2)]\n\n    # Check for sufficient size and variance\n    if len(valid_group1) < 2 or len(valid_group2) < 2:\n        raise ValueError(\"Each group must have at least two non-NaN values.\")\n\n    if np.var(valid_group1) < 1e-8 or np.var(valid_group2) < 1e-8:\n        raise ValueError(\"Variance in one or both groups is too low.\")\n\n    # Perform t-test\n    _, p_val = ttest_ind(valid_group1, valid_group2, nan_policy=\"omit\")\n\n    significant = p_val < alpha\n\n    # Calculate descriptive statistics\n    group1_stats = {\"mean\": np.mean(valid_group1), \"std\": np.std(valid_group1)}\n    group2_stats = {\"mean\": np.mean(valid_group2), \"std\": np.std(valid_group2)}\n\n    # Plotting\n    _, (ax_boxplot, ax_histogram) = plt.subplots(2, 1, figsize=(8, 12))\n\n    # Boxplot\n    ax_boxplot.boxplot([valid_group1, valid_group2], labels=[\"group1\", \"group2\"])\n\n    # Histogram\n    ax_histogram.hist(valid_group1, alpha=0.5, label=\"group1\")\n    ax_histogram.hist(valid_group2, alpha=0.5, label=\"group2\")\n    ax_histogram.legend()\n\n    return {\n        \"significant\": significant,\n        \"group1_stats\": group1_stats,\n        \"group2_stats\": group2_stats,\n        \"ax_boxplot\": ax_boxplot,\n        \"ax_histogram\": ax_histogram,\n    }", "pass": false}
{"task_id": "1027", "program": "import binascii\nimport urllib.parse\ndef task_func(url):\n\n    pass\nimport binascii\nimport urllib.parse\ndef task_func(url):\n    \"\"\"\n    Decode a hexadecimal string from the 'q' query parameter of a URL.\n    This function extracts the 'q' query parameter from the given URL, assumes it is a hexadecimal string, and decodes it into a UTF-8 string.\n    If the hexadecimal string is invalid or cannot be decoded into a valid UTF-8 string, None is returned.\n\n    :param url: The URL to extract the 'q' query parameter from.\n    :type url: str\n    :return: The decoded string if the 'q' parameter exists and is a valid hexadecimal, otherwise None.\n    :rtype: str or None\n    \"\"\"\n    # Extract the 'q' query parameter from the URL\n    query_params = urllib.parse.urlparse(url).query\n    q_param = urllib.parse.parse_qs(query_params).get(\"q\")\n\n    # Check if the 'q' parameter exists and is a valid hexadecimal string\n    if q_param and len(q_param) == 1 and q_param[0].startswith(\"0x\"):\n        # Decode the hexadecimal string into a bytes object\n        hex_bytes = binascii.unhexlify(q_param[0][2:])\n\n        # Try to decode the bytes object into a UTF-8 string\n        try:\n            decoded_string = hex_bytes.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return None\n\n        # Return the decoded string\n        return decoded_string\n\n    # The 'q' parameter does not exist or is not a valid hexadecimal string\n    return None", "problem": "Decode a hexadecimal string from the 'q' query parameter of a URL. This function extracts the 'q' query parameter from the given URL, assumes it is a hexadecimal string, and decodes it into a UTF-8 string. If the hexadecimal string is invalid or cannot be decoded into a valid UTF-8 string, None is returned.\nThe function should output with:\n    str or None: The decoded string if the 'q' parameter exists and is a valid hexadecimal, otherwise None.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport urllib.parse\ndef task_func(url):\n```", "solution": "import binascii\nimport urllib.parse\ndef task_func(url):\n    try:\n        parsed_url = urllib.parse.urlparse(url)\n        query = urllib.parse.parse_qs(parsed_url.query).get(\"q\", [None])[0]\n        return binascii.unhexlify(query).decode(\"utf-8\") if query else None\n    except (binascii.Error, UnicodeDecodeError):\n        return None", "pass": false}
{"task_id": "1028", "program": "import subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n\n    pass\nimport subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n    if interval <= 0 or duration <= 0:\n        raise ValueError(\"Interval and duration must be greater than zero\")\n\n    if platform.system() == \"Windows\":\n        command = \"wmic cpu get loadpercentage\"\n    else:\n        command = \"top -bn1 | grep load | awk '{printf \\\"%.2f\\\", $(NF-2)}'\"\n\n    with open(LOGFILE_PATH, \"w\") as logfile:\n        start_time = time.time()\n        while time.time() - start_time < duration:\n            cpu_usage = subprocess.check_output(command, shell=True).strip()\n            logfile.write(json.dumps({\"timestamp\": time.time(), \"cpu_usage\": cpu_usage}) + \"\\n\")\n            time.sleep(interval)\n\n    return LOGFILE_PATH", "problem": "Monitors and logs CPU usage at specified intervals over a given duration.\nNote that: Actual run time of the function may slightly exceed the specified 'duration' due to processing time and system response delay. The function records the CPU usage percentage at regular intervals for a specified duration. The data is captured every 'interval' seconds until the 'duration' is reached or exceeded. Each record includes a timestamp and the CPU usage percentage at that moment. The data is saved in JSON format in a log file named 'logfile.log'. The function supports different commands for CPU usage monitoring on Windows and Unix/Linux platforms.\nThe function should raise the exception for: ValueError: If either 'interval' or 'duration' is less than or equal to zero.\nThe function should output with:\n    str: Path to the log file where CPU usage data is saved. Returns None if an IOError occurs during file operations.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n```", "solution": "import subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n    if interval <= 0 or duration <= 0:\n        raise ValueError(\"Interval and duration must be greater than zero.\")\n\n    start_time = time.time()\n    try:\n        with open(LOGFILE_PATH, \"w\", encoding=\"utf-8\") as logfile:\n            while time.time() - start_time <= duration:\n                operation_start_time = time.time()\n\n                # Check the operating system\n                if platform.system() == \"Windows\":\n                    # Windows command for CPU usage\n                    command = [\n                        \"typeperf\",\n                        \"\\\\Processor(_Total)\\\\% Processor Time\",\n                        \"-sc\",\n                        \"1\",\n                    ]\n                else:\n                    # Unix/Linux command for CPU usage\n                    command = [\"top\", \"-b\", \"-n1\"]\n\n                output = subprocess.check_output(command)\n                cpu_usage_line = (\n                    output.decode(\"utf-8\").split(\"\\n\")[2]\n                    if platform.system() == \"Windows\"\n                    else output.decode(\"utf-8\").split(\"\\n\")[2]\n                )\n                cpu_usage = (\n                    cpu_usage_line.split(\",\")[-1].strip().replace('\"', \"\")\n                    if platform.system() == \"Windows\"\n                    else cpu_usage_line.split(\":\")[1].split(\",\")[0].strip()\n                )\n\n                log_data = {\"timestamp\": time.time(), \"cpu_usage\": cpu_usage}\n                json.dump(log_data, logfile)\n                logfile.write(\"\\n\")\n\n                # Adjust sleep time\n                sleep_time = max(0, interval - (time.time() - operation_start_time))\n                time.sleep(sleep_time)\n    except IOError as e:\n        print(f\"Error writing to file {LOGFILE_PATH}: {e}\")\n        return None\n\n    return LOGFILE_PATH", "pass": false}
{"task_id": "1029", "program": "import pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n    \"\"\"\n    Create a Pandas DataFrame with random alphabets in each cell.\n    The DataFrame will have a specified number of rows and columns.\n    Each column is named with a string from the list ['a', 'b', 'c', ...]\n    depending on the number of columns specified.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the DataFrame, by default 100\n    columns : int, optional\n        Number of columns in the DataFrame, by default 3\n\n    Returns\n    -------\n    DataFrame\n        A pandas DataFrame with random alphabets.\n    \"\"\"\n    # Create a list of column names\n    column_names = [chr(ord('a') + i) for i in range(columns)]\n\n    # Create a DataFrame with random alphabets in each cell\n    df = pd.DataFrame(np.random.choice(list('abcdefghijklmnopqrstuvwxyz'), size=(rows, columns)), columns=column_names)\n\n    return df", "problem": "Create a Pandas DataFrame with random alphabets in each cell. The DataFrame will have a specified number of rows and columns. Each column is named with a string from the list ['a', 'b', 'c', ...] depending on the number of columns specified.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random alphabets.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n    column_names = [\n        chr(97 + i) for i in range(columns)\n    ]  # generate column names based on the number of columns\n    values = list(\"abcdefghijklmnopqrstuvwxyz\")\n    data = np.random.choice(values, size=(rows, columns))\n    df = pd.DataFrame(data, columns=column_names)\n    return df", "pass": true}
{"task_id": "1030", "program": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n\n    pass\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n    \"\"\"\n    Generate all possible combinations (with replacement) of three letters from the alphabet and save them in a pandas DataFrame.\n    The function should output with:\n        DataFrame: A pandas DataFrame with each row representing a unique combination of three letters.\n    \"\"\"\n    letters = string.ascii_lowercase\n    combinations = itertools.product(letters, repeat=3)\n    df = pd.DataFrame(combinations, columns=['letter1', 'letter2', 'letter3'])\n    return df", "problem": "Generate all possible combinations (with replacement) of three letters from the alphabet and save them in a pandas DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame with each row representing a unique combination of three letters.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n```", "solution": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n    LETTERS = list(string.ascii_lowercase)\n    combinations = list(itertools.product(LETTERS, repeat=3))\n\n    df = pd.DataFrame(combinations, columns=[\"Letter 1\", \"Letter 2\", \"Letter 3\"])\n\n    return df", "pass": false}
{"task_id": "1031", "program": "import random\nimport string\nimport pandas as pd\ndef task_func(n_rows=1000):\n\n    pass\nimport random\nimport string\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(n_rows=1000):\n    \"\"\"\n    Generate a histogram of the frequency of the top 30 unique random 3-letter strings.\n\n    Args:\n        n_rows (int): The number of rows to generate. Defaults to 1000.\n\n    Returns:\n        ax (matplotlib.axes.Axes): A Matplotlib Axes object containing the histogram.\n    \"\"\"\n    if n_rows <= 0:\n        raise ValueError(\"n_rows must be greater than 0\")\n\n    # Generate random 3-letter strings\n    letters = string.ascii_lowercase\n    random_strings = [\n        \"\".join(random.choice(letters) for _ in range(3)) for _ in range(n_rows)\n    ]\n\n    # Count the frequency of each string\n    string_counts = pd.Series(random_strings).value_counts()\n\n    # Select the top 30 most common strings\n    top_30_strings = string_counts.index[:30]\n\n    # Plot the histogram\n    ax = string_counts[top_30_strings].plot.bar()\n\n    return ax", "problem": "Generate a histogram of the frequency of the top 30 unique random 3-letter strings. The function creates random strings, each consisting of 3 letters from the lowercase English alphabet. It then plots a histogram showing the frequencies of the top 30 most common strings among the generated set.\nThe function should raise the exception for: ValueError: If `n_rows` is less than or equal to 0.\nThe function should output with:\n    ax (matplotlib.axes.Axes): A Matplotlib Axes object containing the histogram.\n    Each bar represents one of the top 30 most frequent 3-letter strings.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport pandas as pd\ndef task_func(n_rows=1000):\n```", "solution": "import random\nimport string\nimport pandas as pd\ndef task_func(n_rows=1000):\n    # Check if n_rows is positive\n    if n_rows <= 0:\n        raise ValueError(\"Number of rows must be greater than 0\")\n\n    # Generate random strings\n    data = [\"\".join(random.choices(string.ascii_lowercase, k=3)) for _ in range(n_rows)]\n    df = pd.DataFrame(data, columns=[\"String\"])\n\n    # Aggregate and plot the data\n    frequency = df[\"String\"].value_counts()\n    ax = frequency.head(30).plot(\n        kind=\"bar\"\n    )  # Limit to the top 30 frequencies for readability\n    ax.set_title(\"Top 30 Frequencies of Random 3-Letter Strings\")\n    ax.set_xlabel(\"String\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax", "pass": true}
{"task_id": "1032", "program": "import matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n# Constants\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n\n    pass\nimport matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n    \"\"\"\n    Generate a dataframe of random strings and create a heatmap showing the correlation in the frequency of each letter in these strings.\n\n    Parameters\n    ----------\n    rows : int, optional\n        Number of rows in the dataframe, by default 1000\n    string_length : int, optional\n        Length of each string, by default 3\n\n    Returns\n    -------\n    matplotlib.axes._axes.Axes or None\n        A seaborn heatmap plot object if data is generated; otherwise, None.\n    \"\"\"\n    if rows == 0:\n        print(\"No data to generate heatmap.\")\n        return None\n\n    # Generate random strings\n    random_strings = [\n        \"\".join(random.choice(LETTERS) for _ in range(string_length))\n        for _ in range(rows)\n    ]\n\n    # Convert strings to one-hot encoded format\n    one_hot_encoded = pd.get_dummies(random_strings)\n\n    # Calculate frequency of each letter\n    frequency = one_hot_encoded.sum(axis=0)\n\n    # Create heatmap\n    ax = sns.heatmap(frequency.T, annot=True, cmap=\"Blues\")\n\n    return ax", "problem": "Generate a dataframe of random strings and create a heatmap showing the correlation in the frequency of each letter in these strings. This function generates a specified number of random strings, each of a given length, and calculates the frequency of each letter in these strings. A heatmap of the correlation matrix is then displayed, showing the co-occurrence frequencies of different letters within these strings. If the number of rows specified is zero, the function will print a message indicating that no data is available to generate the heatmap and will return None. Otherwise, it processes the DataFrame to convert the generated strings into a one-hot encoded format and then sums up these encodings to calculate the frequency of each letter. Note - If no strings are generated (e.g., rows = 0), the DataFrame will be empty. In this case, the function prints a message \"No data to generate heatmap.\" and returns None. - If the DataFrame is not empty, each string is split into its constituent letters, converted into one-hot encoded format, and then the frequency of each letter is calculated by summing these encodings.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: A seaborn heatmap plot object if\n    data is generated; otherwise, None.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n# Constants\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n```", "solution": "import matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n# Constants\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n\n    # Generate random strings\n    data = [\"\".join(random.choices(LETTERS, k=string_length)) for _ in range(rows)]\n\n    # Create a DataFrame and compute letter frequency\n    df = pd.DataFrame({\"String\": data})\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        print(\"No data to generate heatmap.\")\n        return None\n\n    df = pd.get_dummies(df[\"String\"].apply(list).explode()).groupby(level=0).sum()\n\n    # Calculate the correlation matrix\n    corr = df.corr()\n\n    # Create and return the heatmap\n    ax = sns.heatmap(corr, annot=True, fmt=\".2f\")\n    plt.close()  # Close the plot to prevent it from showing during function call\n    return ax", "pass": false}
{"task_id": "1033", "program": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n\n    pass\nimport itertools\nimport string\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate all possible 3-letter combinations of the alphabet\n    combinations = [''.join(combo) for combo in itertools.product(string.ascii_lowercase, repeat=3)]\n\n    # Create a pandas DataFrame from the combinations\n    df = pd.DataFrame(combinations, columns=['combinations'])\n\n    # Plot a histogram of the frequency of the first letters in the combinations\n    ax = df['combinations'].str.get(0).value_counts().plot(kind='bar')\n\n    return df, ax", "problem": "Generate all possible 3-letter combinations of the alphabet, save them in a pandas DataFrame, and draw a histogram of the frequency of the first letters in these combinations. This function uses itertools.product to create all possible combinations of three letters. It then creates a DataFrame from these combinations and plots a histogram to show the frequency of each letter appearing as the first letter in these combinations.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with all 3-letter combinations.\n    Axes: A matplotlib Axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n```", "solution": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n    LETTERS = list(string.ascii_lowercase)\n    combinations = list(itertools.product(LETTERS, repeat=3))\n    df = pd.DataFrame(combinations, columns=[\"a\", \"b\", \"c\"])\n\n    # Getting value counts and ensuring the correct order of letters\n    value_counts = df[\"a\"].value_counts().reindex(LETTERS, fill_value=0)\n\n    # Plotting the histogram with the correct order\n    ax = value_counts.plot(kind=\"bar\")\n\n    return df, ax", "pass": false}
{"task_id": "1034", "program": "import pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n\n    pass\nimport pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n    \"\"\"\n    Compares and visualizes the sales data of two stores for predefined categories.\n    The function generates a bar plot for categories where both stores have sales exceeding a specified threshold.\n    The Euclidean distance between the two series is also computed.\n\n    Parameters\n    ----------\n    s1 : pandas.Series\n        Sales data for store 1.\n    s2 : pandas.Series\n        Sales data for store 2.\n\n    Returns\n    -------\n    matplotlib.axes.Axes or None\n        A bar plot for categories where both stores' sales exceed the threshold of 200,\n        or None if no such categories exist.\n    float\n        The Euclidean distance between the two series or 0.0 if no categories meet the threshold.\n    \"\"\"\n    # Create a DataFrame with the sales data for both stores\n    df = pd.DataFrame({\"Store 1\": s1, \"Store 2\": s2}, index=CATEGORIES)\n\n    # Compute the Euclidean distance between the two series\n    distance = np.linalg.norm(df.values - df.values.T)\n\n    # Identify categories where both stores have sales exceeding the threshold\n    mask = (df > 200).all(axis=1)\n\n    # Create a bar plot for the identified categories\n    if mask.any():\n        ax = df.loc[mask].plot.bar(figsize=(10, 6))\n        ax.set_title(\"Sales Comparison\")\n        ax.set_xlabel(\"Category\")\n        ax.set_ylabel(\"Sales\")\n        return ax, distance\n    else:\n        return None, distance\ns1 = pd.Series([100, 200, 300, 400, 500], index=CATEGORIES)\ns2 = pd.Series([150, 250, 350, 450, 550], index=CATEGORIES)", "problem": "Compares and visualizes the sales data of two stores for predefined categories. The function generates a bar plot for categories where both stores have sales exceeding a specified threshold. The Euclidean distance between the two series is also computed.\nThe function should output with:\n    matplotlib.axes.Axes or None: A bar plot for categories where both stores' sales exceed the threshold of 200,\n    or None if no such categories exist.\n    float: The Euclidean distance between the two series or 0.0 if no categories meet the threshold.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n```", "solution": "import pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n\n    # Determine categories where both stores exceed the sales threshold\n    high_sales_categories = s1.index[(s1 > 200) & (s2 > 200)]\n\n    if high_sales_categories.empty:\n        return None, 0.0\n\n    # Prepare the data for plotting\n    df = pd.DataFrame(\n        {\"Store 1\": s1[high_sales_categories], \"Store 2\": s2[high_sales_categories]}\n    )\n\n    # compute the edit distance between the two series\n    edit_distance = np.linalg.norm(df[\"Store 1\"] - df[\"Store 2\"])\n    \n    # Generate the bar plot\n    ax = df.plot(kind=\"bar\", title=\"Sales Comparison Above Threshold in Categories\")\n    return ax, edit_distance", "pass": false}
{"task_id": "1035", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Train a logistic regression model on one feature and evaluate its performance using a confusion matrix plot.\n    The function takes a feature and a target series, splits them into training and testing sets, trains the logistic regression model, predicts the target for the test set, and plots the confusion matrix.\n    The function should output with:\n        (np.ndarray, plt.Axes): A tuple containing the confusion matrix and the matplotlib Axes object of the confusion matrix plot.\n    \"\"\"\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.2, random_state=42)\n\n    # Train a logistic regression model on the training data\n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n\n    # Predict the target for the test set\n    y_pred = model.predict(X_test)\n\n    # Create a confusion matrix and plot it\n    cm = confusion_matrix(y_test, y_pred)\n    fig, ax = plt.subplots()\n    sns.heatmap(cm, annot=True, cmap=\"Blues\", fmt=\"d\", ax=ax)\n    ax.set_xlabel(\"Predicted label\")\n    ax.set_ylabel(\"True label\")\n    ax.set_title(\"Confusion Matrix\")\n\n    return cm, ax", "problem": "Train a logistic regression model on one feature and evaluate its performance using a confusion matrix plot. The function takes a feature and a target series, splits them into training and testing sets, trains the logistic regression model, predicts the target for the test set, and plots the confusion matrix.\nThe function should output with:\n    (np.ndarray, plt.Axes): A tuple containing the confusion matrix and the matplotlib Axes object of the confusion matrix plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n    # Create DataFrame from the series\n    df = pd.DataFrame({\"Feature\": feature, \"Target\": target})\n\n    # Split the data into train and test datasets\n    X_train, X_test, y_train, y_test = train_test_split(\n        df[\"Feature\"], df[\"Target\"], test_size=0.2, random_state=42\n    )\n\n    # Initialize and train the Logistic Regression model\n    model = LogisticRegression()\n    model.fit(X_train.values.reshape(-1, 1), y_train)\n\n    # Make predictions\n    y_pred = model.predict(X_test.values.reshape(-1, 1))\n\n    # Compute the confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n\n    # Plot the confusion matrix\n    _, ax = plt.subplots()\n    cax = ax.matshow(cm, cmap=\"Blues\")\n    plt.title(\"Confusion Matrix\")\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"Actual\")\n    plt.colorbar(cax)\n\n    # Setting tick locations\n    ax.set_xticks([0, 1])\n    ax.set_yticks([0, 1])\n\n    # Now set tick labels correctly\n    ax.set_xticklabels([\"No\", \"Yes\"])\n    ax.set_yticklabels([\"No\", \"Yes\"])\n\n    return cm, ax", "pass": false}
{"task_id": "1036", "program": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n    \"\"\"\n    Visualize two Series using a swarm plot with a highlight on their intersecting data points.\n    This function creates a swarm plot to visually compare two pandas Series. It highlights the intersection points between these two series by drawing red dashed lines at the intersecting data points.\n    The function should output with:\n        ax (matplotlib.Axes): The Axes object of the plotted swarm chart. This object can be used for further customization of the plot if required.\n        intersection_count (int): The number of unique intersecting data points between s1 and s2.\n        This count gives a quick numerical summary of the overlap between the two series.\n    \"\"\"\n    # Create a swarm plot of the two series\n    ax = sns.swarmplot(data=pd.concat([s1, s2], axis=1), color=\".3\")\n\n    # Get the intersection points between the two series\n    intersection_points = s1.index[s1.isin(s2)]\n\n    # Highlight the intersection points with red dashed lines\n    ax.plot(intersection_points, s1[intersection_points], \"r--\")\n\n    # Count the number of unique intersection points\n    intersection_count = len(intersection_points)\n\n    return ax, intersection_count\ns1 = pd.Series([1, 2, 3, 4, 5], index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\ns2 = pd.Series([2, 3, 4, 5, 6], index=[\"b\", \"c\", \"d\", \"e\", \"f\"])", "problem": "Visualize two Series using a swarm plot with a highlight on their intersecting data points. This function creates a swarm plot to visually compare two pandas Series. It highlights the intersection points between these two series by drawing red dashed lines at the intersecting data points.\nThe function should output with:\n    ax (matplotlib.Axes): The Axes object of the plotted swarm chart. This object can be used for further customization of the plot if required.\n    intersection_count (int): The number of unique intersecting data points between s1 and s2.\n    This count gives a quick numerical summary of the overlap between the two series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n```", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n    # Find the intersection data points\n    intersection = set(s1).intersection(set(s2))\n\n    # Prepare data for visualization\n    df1 = pd.DataFrame({s1.name: s1, \"Type\": \"Series1\"})\n    df2 = pd.DataFrame({s2.name: s2, \"Type\": \"Series2\"})\n    df = pd.concat([df1, df2], axis=0, ignore_index=True)\n\n    # Create a swarm plot\n    _, ax = plt.subplots(figsize=(10, 6))\n    sns.swarmplot(x=df.columns[0], y=\"Type\", data=df, ax=ax)\n\n    # Highlight intersection points\n    for point in intersection:\n        ax.axvline(x=point, color=\"red\", linestyle=\"--\")\n\n    ax.set_title(f\"Overlap Between {s1.name} and {s2.name}\")\n\n    return ax, len(intersection)", "pass": false}
{"task_id": "1037", "program": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n\n    pass\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n    \"\"\"\n    Perform K-Means clustering on data points from two pandas Series and visualize the clusters.\n\n    Parameters\n    ----------\n    s1 : pandas.Series\n        First pandas Series of data points.\n    s2 : pandas.Series\n        Second pandas Series of data points.\n    n_clusters : int, optional\n        Number of clusters to form.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the following elements:\n        ndarray\n            An array of cluster labels indicating the cluster each data point belongs to.\n        matplotlib.axes.Axes\n            The Axes object of the plot, which shows the data points colored according to their cluster labels.\n\n    Raises\n    ------\n    ValueError\n        If either s1 or s2 is not a pandas Series, raise \"s1 and s2 must be pandas Series\".\n        If s1 and s2 have different lengths, raise \"s1 and s2 must have the same length\".\n    \"\"\"\n    if not isinstance(s1, pd.Series) or not isinstance(s2, pd.Series):\n        raise ValueError(\"s1 and s2 must be pandas Series\")\n    if len(s1) != len(s2):\n        raise ValueError(\"s1 and s2 must have the same length\")\n\n    # Combine data points from s1 and s2\n    data = pd.concat([s1, s2], axis=0)\n\n    # Perform K-Means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n    ax.set_title(\"K-Means Clustering\")\n    ax.legend()\n\n    return labels, ax\ns1 = pd.Series([1, 2, 3, 4, 5])\ns2 = pd.Series([6, 7, 8, 9, 10])", "problem": "Perform K-Means clustering on data points from two pandas Series and visualize the clusters.\nNote that: Notes: The function needs to ensure that s1 and s2 are pandas Series of equal length. It then performs K-Means clustering on the combined data points from s1 and s2. After clustering, it creates a scatter plot where each cluster is visualized with a different color. The plot title is set to \"K-Means Clustering\" to describe the visualization technique. A legend is added, which uses elements from the scatter plot to describe each cluster.\nThe function should raise the exception for: ValueError: If either s1 or s2 is not a pandas Series, raise \"s1 and s2 must be pandas Series\" ValueError: If s1 and s2 have different lengths, raise \"s1 and s2 must have the same length\"\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    ndarray: An array of cluster labels indicating the cluster each data point belongs to.\n    matplotlib.axes.Axes: The Axes object of the plot, which shows the data points colored according to their cluster labels.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n```", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n    if not isinstance(s1, pd.Series) or not isinstance(s2, pd.Series):\n        raise ValueError(\"s1 and s2 must be pandas Series\")\n\n    if len(s1) != len(s2):\n        raise ValueError(\"s1 and s2 must have the same length\")\n\n    # Create a DataFrame from the series\n    df = pd.concat([s1, s2], axis=1)\n\n    # Perform K-Means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    labels = kmeans.fit_predict(df)\n\n    # Visualize the clusters\n    _, ax = plt.subplots()\n    scatter = ax.scatter(df[s1.name], df[s2.name], c=labels)\n    ax.set_xlabel(s1.name)\n    ax.set_ylabel(s2.name)\n    ax.set_title(\"K-Means Clustering\")\n    plt.legend(*scatter.legend_elements(), title=\"Clusters\")\n\n    return labels, ax", "pass": false}
{"task_id": "1038", "program": "from datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n\n    pass\nfrom datetime import datetime\nimport json\ndef task_func(client_socket):\n    # Get the current time\n    now = datetime.now()\n\n    # Create a JSON-formatted message\n    message = {\n        \"time\": now.strftime(\"%H:%M:%S\"),\n        \"greeting\": \"Hello, client!\"\n    }\n\n    # Send the message to the client\n    client_socket.send(json.dumps(message).encode())\n\n    # Close the client socket\n    client_socket.close()", "problem": "Responds to a client's request by sending a JSON-formatted message containing the current server time and a greeting.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n```", "solution": "from datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n    response_data = {\"message\": \"Hello\", \"time\": str(datetime.now())}\n    response = json.dumps(response_data) + \"\\n\"\n    client_socket.send(response.encode(\"utf-8\"))\n    client_socket.close()", "pass": true}
{"task_id": "1039", "program": "import ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n\n    pass\nimport ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    This function secures a client socket using SSL/TLS and sends back the SHA256 hash of a file requested by the client.\n    Note that: This function assumes that the client requests a file by sending its path. The function does not handle the opening or closing of the client_socket itself. Error handling is basic and might need to be expanded based on specific use cases.\n    The function should output with:\n        str: The SHA256 hash of the requested file. If the requested file does not exist, returns 'File not found'.\n        In case of an exception during processing, an error message is returned.\n    \"\"\"\n    try:\n        # Create an SSL context\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n\n        # Wrap the client socket with the SSL context\n        ssl_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # Receive the file path from the client\n        file_path = ssl_socket.recv(buffer_size).decode()\n\n        # Check if the file exists\n        if not os.path.exists(file_path):\n            return \"File not found\"\n\n        # Open the file and calculate its SHA256 hash\n        with open(file_path, \"rb\") as file:\n            data = file.read()\n            hash_object = hashlib.sha256(data)\n            hash_value = hash_object.hexdigest()\n\n        # Send the hash value back to the client\n        ssl_socket.send(hash_value.encode())\n\n        # Close the SSL socket\n        ssl_socket.close()\n\n        return hash_value\n\n    except Exception as e:\n        return str(e)", "problem": "This function secures a client socket using SSL/TLS and sends back the SHA256 hash of a file requested by the client.\nNote that: This function assumes that the client requests a file by sending its path. The function does not handle the opening or closing of the client_socket itself. Error handling is basic and might need to be expanded based on specific use cases.\nThe function should output with:\n    str: The SHA256 hash of the requested file. If the requested file does not exist, returns 'File not found'.\n    In case of an exception during processing, an error message is returned.\nYou should write self-contained code starting with:\n```\nimport ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n```", "solution": "import ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n    context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n    secure_socket = None\n    try:\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n        request = secure_socket.recv(buffer_size).decode(\"utf-8\")\n\n        if os.path.exists(request):\n            with open(request, \"rb\") as file:\n                sha256_hash = hashlib.sha256()\n                for byte_block in iter(lambda: file.read(4096), b\"\"):\n                    sha256_hash.update(byte_block)\n                response = sha256_hash.hexdigest()\n        else:\n            response = \"File not found\"\n\n        secure_socket.send(response.encode(\"utf-8\"))\n    except Exception as e:\n        response = f\"Error: {str(e)}\"\n    finally:\n        if secure_socket:\n            secure_socket.close()\n\n    return response", "pass": false}
{"task_id": "1040", "program": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n\n    pass\nimport socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    # Create a TCP/IP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_address = (server_address, server_port)\n    sock.bind(server_address)\n    sock.listen(1)\n\n    # Create a queue to hold incoming connections\n    incoming_connections = queue.Queue()\n\n    # Create a queue to hold incoming data\n    incoming_data = queue.Queue()\n\n    # Create a queue to hold outgoing data\n    outgoing_data = queue.Queue()\n\n    # Create a queue to hold exceptions\n    exceptions = queue.Queue()\n\n    # Create a list to hold the sockets\n    sockets = [sock]\n\n    # Create a list to hold the socket addresses\n    socket_addresses = []\n\n    # Create a list to hold the socket ports\n    socket_ports = []\n\n    # Create a list to hold the socket data\n    socket_data = []\n\n    # Create a list to hold the socket exceptions\n    socket_exceptions = []\n\n    # Create a list to hold the socket errors\n    socket_errors = []\n\n    # Create a list to hold the socket timeouts\n    socket_timeouts = []\n\n    # Create a list to hold the socket closes\n    socket_closes = []\n\n    # Create a list to hold the socket disconnects\n    socket_disconnects = []\n\n    # Create a list to hold the socket reconnects\n    socket_reconnects = []\n\n    # Create a list to hold the socket reconnections\n    socket_reconnections = []\n\n    # Create a list to hold the socket reconnection attempts\n    socket_reconnection_attempts = []\n\n    # Create a list to hold the socket reconnection successes\n    socket_reconnection_successes = []\n\n    # Create a list to hold the socket reconnection failures\n    socket_reconnection_failures = []\n\n    # Create a list to hold the socket reconnection errors\n    socket_reconnection_errors = []\n\n    # Create a list to hold the socket reconnection timeouts\n    socket_reconnection_timeouts = []\n\n    # Create a list to hold the socket reconnection closes\n    socket_reconnection_closes = []\n\n    # Create a list to hold the socket reconnection disconnects\n    socket_reconnection_disconnects = []\n\n    # Create a list to hold the socket reconnection reconnects\n    socket_reconnection_reconnects = []\n\n    # Create a list to hold the socket reconnection reconnections\n    socket_reconnection_reconnections = []\n\n    # Create a list to hold the socket reconnection reconnection attempts\n    socket_reconnection_reconnection_attempts = []\n\n    # Create a list to hold the socket reconnection reconnection successes\n    socket_reconnection_reconnection_successes = []\n\n    # Create a list to hold the socket reconnection reconnection failures\n    socket_reconnection_reconnection_failures = []\n\n    # Create a list to hold the socket reconnection reconnection errors\n    socket_reconnection_reconnection_errors = []\n\n    # Create a list to hold the socket reconnection reconnection timeouts\n    socket_reconnection_reconnection_timeouts = []\n\n    # Create a list to hold the socket reconnection reconnection closes\n    socket_reconnection_reconnection_closes = []\n\n    # Create a list to hold the socket reconnection reconnection disconnects\n    socket_reconnection_reconnection_disconnects = []\n\n    # Create a list to hold the socket reconnection reconnection reconnects\n    socket_reconnection_reconnection_reconnects = []\n\n    # Create a list to hold the socket reconnection reconnection reconnections\n    socket_reconnection_reconnection_reconnections = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection attempts\n    socket_reconnection_reconnection_reconnection_attempts = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection successes\n    socket_reconnection_reconnection_reconnection_successes = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection failures\n    socket_reconnection_reconnection_reconnection_failures = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection errors\n    socket_reconnection_reconnection_reconnection_errors = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection timeouts\n    socket_reconnection_reconnection_reconnection_timeouts = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection closes\n    socket_reconnection_reconnection_reconnection_closes = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection disconnects\n    socket_reconnection_reconnection_reconnection_disconnects = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection reconnects\n    socket_reconnection_reconnection_reconnection_reconnects = []\n\n    # Create a list to hold the socket reconnection reconnection reconnection recon", "problem": "Run a non-blocking echo server that appends the server's current time to received data and sends it back to the client, while handling exceptional conditions for each socket.\nThe function should output with:\n    str: A status message indicating the server's operation and run duration.\nYou should write self-contained code starting with:\n```\nimport socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n```", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setblocking(0)\n    server.bind((server_address, server_port))\n    server.listen(5)\n    inputs = [server]\n    outputs = []\n    message_queues = {}\n    end_time = datetime.now() + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            readable, writable, _ = select.select(inputs, outputs, inputs, 1)\n            for s in readable:\n                if s is server:\n                    connection, _ = s.accept()\n                    connection.setblocking(0)\n                    inputs.append(connection)\n                    message_queues[connection] = queue.Queue()\n                else:\n                    data = s.recv(buffer_size)\n                    if data:\n                        message_queues[s].put(f\"{datetime.now()}: {data.decode()}\")\n                        if s not in outputs:\n                            outputs.append(s)\n                    else:\n                        if s in outputs:\n                            outputs.remove(s)\n                        inputs.remove(s)\n                        s.close()\n                        del message_queues[s]\n\n            for s in writable:\n                if s not in message_queues:\n                    continue  # Skip if socket's queue has been removed\n\n                try:\n                    next_msg = message_queues[s].get_nowait()\n                except queue.Empty:\n                    outputs.remove(s)\n                else:\n                    s.sendall(next_msg.encode(\"utf-8\"))\n\n    finally:\n        server.close()\n\n    return f\"Server started on {server_address}:{server_port}. Ran for {run_duration} seconds.\"", "pass": false}
{"task_id": "1041", "program": "import re\nimport os\ndef task_func(request):\n\n    pass\nimport re\nimport os\ndef task_func(request):\n    # Extract the filename from the request\n    filename = re.search(r'/([^/]+)$', request).group(1)\n\n    # Check if the file exists in the server's directory\n    filepath = os.path.join(os.getcwd(), filename)\n    if not os.path.isfile(filepath):\n        return f\"Error: File not found: {filename}\"\n\n    # Read the file content and return it in the response\n    with open(filepath, 'r') as f:\n        content = f.read()\n\n    # Return the HTTP response\n    return f\"HTTP/1.1 200 OK\\nContent-Length: {len(content)}\\n\\n{content}\"", "problem": "Handles an HTTP GET request to retrieve a static file from the server. This function processes an HTTP GET request, extracts the filename from it, checks the existence of the file in the server's directory, and returns an HTTP response. The response either contains the file content (if found) or an appropriate error message (if not found or if the request is invalid).\nThe function should output with:\n    str: An HTTP response string, which includes the status code, content length (for 200 OK responses), and the file content\n    or an error message.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\ndef task_func(request):\n```", "solution": "import re\nimport os\ndef task_func(request):\n    match = re.match(r\"^GET /([\\w\\.\\-]+) HTTP/1\\.1$\", request)\n    if match:\n        file_name = match.group(1)\n        if os.path.exists(file_name):\n            try:\n                with open(file_name, \"rb\") as file:\n                    content = file.read()\n                    response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content.decode('utf-8')}\"\n            except Exception:\n                response = (\n                    \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n                )\n        else:\n            response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    else:\n        response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    return response", "pass": false}
{"task_id": "1042", "program": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n\n    pass\nimport smtplib\nfrom email.message import EmailMessage\nimport getpass\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    sender_email = input(\"Enter sender's email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(\"Enter sender's email password: \")\n\n    message = EmailMessage()\n    message[\"From\"] = sender_email\n    message[\"To\"] = recipient_email\n    message[\"Subject\"] = \"Message from client\"\n    message.set_content(client_socket.recv(BUFFER_SIZE).decode())\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:\n        smtp.ehlo()\n        smtp.starttls()\n        smtp.login(sender_email, sender_password)\n        smtp.send_message(message)\n\n    return None", "problem": "Receive a message from a client socket and send it as an email via an SMTP server.\nNote that: Requires a working internet connection and access to an SMTP server. The function asks for the sender's email, recipient's email, and sender's email password for authentication.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n```", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    request = client_socket.recv(BUFFER_SIZE).decode(\"utf-8\")\n    print(f\"Received: {request}\")\n\n    email = EmailMessage()\n    email[\"From\"] = getpass.getpass(\"Email: \")\n    email[\"To\"] = getpass.getpass(\"Recipient: \")\n    email[\"Subject\"] = \"Message from socket client\"\n    email.set_content(request)\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:\n        smtp.starttls()\n        smtp.login(email[\"From\"], getpass.getpass(\"Password: \"))\n        smtp.send_message(email)\n\n    response = \"Message sent.\"\n    client_socket.send(response.encode(\"utf-8\"))\n    client_socket.close()", "pass": false}
{"task_id": "1043", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n    \"\"\"\n    Processes a list of category labels to create a histogram that visualizes their distribution.\n    This histogram compares the distribution of a predefined set of categories (A, B, C, D, E) with any additional categories found in the input list.\n    Note that:\n    - The function evaluates the distribution of predefined categories ('A', 'B', 'C', 'D', 'E') and checks for uniformity.\n      If the distribution is not uniform, a warning message of \"The distribution of predefined categories is not uniform.\" is printed.\n    - Categories in the data_list that are not among the predefined categories are identified and included in the histogram.\n    - The ax.bar call in the function creates a bar plot on the axes object.\n      It uses the following parameters:\n      * all_categories: The categories to be displayed on the x-axis, including both predefined and extra categories.\n      * category_counts.reindex(all_categories, fill_value=0): The counts of each category, where categories not found in the data_list are assigned a count of 0.\n      * width=0.8: Sets the width of the bars in the bar plot.\n      * align=\"center\": Aligns the bars with the center of the x-ticks.\n    The function should raise the exception for:\n    - ValueError: If the input data_list is empty, the function raises a ValueError with the message \"The data list is empty.\" In this case, no histogram is generated and the function terminates.\n    The function should output with:\n        Axes object (matplotlib.axes._axes.Axes): The histogram displaying the distribution of categories.\n    \"\"\"\n    # Check if the input data_list is empty\n    if not data_list:\n        raise ValueError(\"The data list is empty.\")\n\n    # Create a pandas Series from the data_list\n    data_series = pd.Series(data_list)\n\n    # Count the number of occurrences of each category\n    category_counts = data_series.value_counts()\n\n    # Check if the distribution of predefined categories is uniform\n    if not category_counts.isin(CATEGORIES).all():\n        print(\"The distribution of predefined categories is not uniform.\")\n\n    # Identify extra categories in the data_list\n    extra_categories = category_counts.index.difference(CATEGORIES)\n\n    # Create a list of all categories to be displayed in the histogram\n    all_categories = CATEGORIES + list(extra_categories)\n\n    # Create a bar plot on the axes object\n    ax = category_counts.reindex(all_categories, fill_value=0).plot.bar(width=0.8, align=\"center\")\n\n    # Set the x-axis labels\n    ax.set_xticklabels(all_categories)\n\n    # Set the y-axis label\n    ax.set_ylabel(\"Count\")\n\n    # Set the title\n    ax.set_title(\"Histogram of Categories\")\n\n    # Return the Axes object\n    return ax\ndata_list = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]", "problem": "Processes a list of category labels to create a histogram that visualizes their distribution. This histogram compares the distribution of a predefined set of categories (A, B, C, D, E) with any additional categories found in the input list.\nNote that: Notes: The function evaluates the distribution of predefined categories ('A', 'B', 'C', 'D', 'E') and checks for uniformity. If the distribution is not uniform, a warning message of \"The distribution of predefined categories is not uniform.\" is printed. Categories in the data_list that are not among the predefined categories are identified and included in the histogram. The ax.bar call in the function creates a bar plot on the axes object. It uses the following parameters: * all_categories: The categories to be displayed on the x-axis, including both predefined and extra categories. * category_counts.reindex(all_categories, fill_value=0): The counts of each category, where categories not found in the data_list are assigned a count of 0. * width=0.8: Sets the width of the bars in the bar plot. * align=\"center\": Aligns the bars with the center of the x-ticks.\nThe function should raise the exception for: ValueError: If the input data_list is empty, the function raises a ValueError with the message \"The data list is empty.\" In this case, no histogram is generated and the function terminates.\nThe function should output with:\n    Axes object (matplotlib.axes._axes.Axes): The histogram displaying the distribution of categories.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n\n    if not data_list:\n        raise ValueError(\"The data list is empty.\")\n\n    data_series = pd.Series(data_list)\n    category_counts = data_series.value_counts()\n\n    # Prepare data for predefined categories\n    predefined_counts = category_counts.reindex(CATEGORIES, fill_value=0)\n\n    # Check for uniformity in predefined categories\n    if not all(x == predefined_counts.iloc[0] for x in predefined_counts):\n        print(\"The distribution of predefined categories is not uniform.\")\n\n    # Handling extra categories not in predefined list\n    extra_categories = category_counts.drop(CATEGORIES, errors=\"ignore\").index.tolist()\n    all_categories = CATEGORIES + extra_categories\n\n    _, ax = plt.subplots()\n    ax.bar(\n        all_categories,\n        category_counts.reindex(all_categories, fill_value=0),\n        width=0.8,\n        align=\"center\",\n    )\n    ax.set_xticks(all_categories)\n\n    return ax", "pass": false}
{"task_id": "1044", "program": "import pandas as pd\nfrom datetime import datetime\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n\n    pass\nimport pandas as pd\nfrom datetime import datetime\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n    # Validate date\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use the format 'yyyy-mm-dd'.\")\n    if date < datetime.today().date():\n        raise ValueError(\"Date cannot be in the past.\")\n\n    # Compile booking status report\n    booking_status = pd.DataFrame(index=ROOMS, columns=[\"Booked\", \"Available\"])\n    for room in ROOMS:\n        booking_status.loc[room, \"Booked\"] = booking_data[room].get(date_str, 0)\n        booking_status.loc[room, \"Available\"] = 1 - booking_status.loc[room, \"Booked\"]\n\n    # Visualize booking statuses\n    fig, ax = plt.subplots()\n    booking_status.plot.bar(ax=ax, rot=0)\n    ax.set_xlabel(\"Room\")\n    ax.set_ylabel(\"Booking Status\")\n    ax.set_title(f\"Booking Status for {date_str}\")\n    return booking_status, ax\ndate_str = \"2023-02-28\"\nbooking_data = {\n    \"Room1\": {\"2023-02-28\": 1, \"2023-02-29\": 0},\n    \"Room2\": {\"2023-02-28\": 0, \"2023-02-29\": 1},\n    \"Room3\": {\"2023-02-28\": 1, \"2023-02-29\": 0},\n    \"Room4\": {\"2023-02-28\": 0, \"2023-02-29\": 1},\n    \"Room5\": {\"2023-02-28\": 1, \"2023-02-29\": 0},\n}", "problem": "This function generates a status report of room bookings for a specified date and displays a bar plot representing the booking statuses of various rooms. It validates the provided date, compiles a booking status report, and visualizes the data in a bar plot.\nThe function should raise the exception for: ValueError: Raised in two scenarios: 1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date. 2. If `date_str` refers to a past date.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing booking status for each room.\n    matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n```", "solution": "import pandas as pd\nfrom datetime import datetime\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n\n    return report_df, ax", "pass": false}
{"task_id": "1045", "program": "from datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n\n    pass\nfrom datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n    date = parse(date_str)\n    current_time = datetime.now()\n    total_seconds = (current_time - date).total_seconds()\n    leap_seconds = np.sum(LEAP_SECONDS[LEAP_SECONDS <= date.year])\n    return int(total_seconds + leap_seconds)", "problem": "Calculate the total number of seconds elapsed from a given date until the current time, including any leap seconds that occurred in this period.\nNote that: This function uses the datetime, numpy, and dateutil.parser modules. The LEAP_SECONDS array should contain years when leap seconds were added.\nThe function should output with:\n    int: The total number of elapsed seconds, including leap seconds, since the given date.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n```", "solution": "from datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n    given_date = parse(date_str)\n    current_date = datetime.now()\n\n    total_seconds = (current_date - given_date).total_seconds()\n\n    # Count leap seconds that occurred between the two dates\n    leap_seconds = np.sum(LEAP_SECONDS >= given_date.year)\n\n    total_seconds += leap_seconds\n\n    return int(total_seconds)", "pass": false}
{"task_id": "1046", "program": "from datetime import datetime\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nfrom itertools import product\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n    # Convert the input date string to a datetime object\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n\n    # Create a list of dates for the next 10 days\n    dates = [date + timedelta(days=i) for i in range(10)]\n\n    # Create a DataFrame with the employee names and dates\n    df = pd.DataFrame({\"Employee\": EMPLOYEES, \"Date\": dates})\n\n    return df\ndate_str = \"2023-02-28\"", "problem": "Generate a Pandas DataFrame containing a series of dates for a predefined list of employees.\nThe function should output with:\n    DataFrame: A pandas DataFrame with 'Employee' and 'Date' columns, listing the next 10 days for each employee.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n```", "solution": "from datetime import datetime\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n    start_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    dates = pd.date_range(start_date, periods=10).tolist()\n\n    # Creating a DataFrame from the product of EMPLOYEES and dates\n    df = pd.DataFrame(list(product(EMPLOYEES, dates)), columns=[\"Employee\", \"Date\"])\n\n    return df", "pass": false}
{"task_id": "1047", "program": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n\n    pass\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    num_days = date.day\n    num_ints = random.sample(range(100), num_days)\n    fig, ax = plt.subplots()\n    ax.plot(num_ints)\n    return ax\ndate_str = \"2023-02-28\"", "problem": "Generates a list of random integers, where the count of integers equals the day of the month in the provided date, then generates a line plot of these integers and returns the Axes object of the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n```", "solution": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    num_of_values = date.day\n    random_values = [random.randint(1, 100) for _ in range(num_of_values)]\n    _, ax = plt.subplots()\n    ax.plot(random_values)\n    return ax", "pass": true}
{"task_id": "1048", "program": "from datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n\n    pass\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    day_of_month = date.day\n    freq = 2 * np.pi / 30\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = np.sin(x * freq * day_of_month)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return ax", "problem": "Plot a sine wave whose frequency is determined by the day of the month from the given date.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object containing the plotted sine wave.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n```", "solution": "from datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    x = np.linspace(0, 2 * np.pi, 1000)\n    frequency = date.day\n    y = np.sin(frequency * x)\n    _, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(f\"Sine Wave for {date_str} (Frequency: {frequency})\")\n    return ax", "pass": true}
{"task_id": "1049", "program": "import re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n\n    pass\nimport re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n    \"\"\"\n    Process a multi-line string by replacing tabs with spaces and converting it into a pandas DataFrame.\n    Each non-empty line of the input string is transformed into a separate row in the DataFrame.\n    The function specifically filters out empty lines and replaces tabs with single spaces in the remaining lines.\n\n    Args:\n        input_string (str): The input string to process.\n\n    Returns:\n        pd.DataFrame: A DataFrame with a single column named 'Text'. Each row in this column corresponds to a non-empty\n        line from the input string, with tabs replaced by spaces.\n    \"\"\"\n    # Split the input string into a list of lines\n    lines = input_string.splitlines()\n\n    # Create an empty list to store the processed lines\n    processed_lines = []\n\n    # Iterate over the lines and process them\n    for line in lines:\n        # Remove any leading or trailing whitespace from the line\n        line = line.strip()\n\n        # If the line is not empty, replace tabs with spaces and append it to the processed lines list\n        if line:\n            processed_lines.append(line.replace('\\t', ' '))\n\n    # Create a DataFrame from the processed lines list\n    df = pd.DataFrame({'Text': processed_lines})\n\n    # Return the DataFrame\n    return df\ninput_string = \"Line 1\\tLine 2\\tLine 3\\nLine 4\\tLine 5\\tLine 6\\n\\t\\t\\t\\nLine 7\\tLine 8\\tLine 9\"", "problem": "Process a multi-line string by replacing tabs with spaces and converting it into a pandas DataFrame. Each non-empty line of the input string is transformed into a separate row in the DataFrame. The function specifically filters out empty lines and replaces tabs with single spaces in the remaining lines.\nNote that: The function excludes lines that are empty or contain only whitespace. Tabs within the lines are replaced with a single space. For instance, a '\\\\t' character in the input string will be replaced by ' ' in the output DataFrame.\nThe function should output with:\n    pd.DataFrame: A DataFrame with a single column named 'Text'. Each row in this column corresponds to a non-empty\n    line from the input string, with tabs replaced by spaces.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n```", "solution": "import re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n    input_string = input_string.replace('\\\\n', '\\n').replace('\\\\t', ' ')\n    # Split the input string into lines and filter out empty lines\n    lines = [line for line in input_string.split(\"\\n\") if line.strip()]\n    # Replace tabs with spaces in each line\n    lines = [re.sub(\"\\t\", \" \", line) for line in lines]\n    # Create a DataFrame from the processed lines\n    return pd.DataFrame(lines, columns=[\"Text\"])", "pass": false}
{"task_id": "1050", "program": "import os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n\n    pass\nimport os\nimport hashlib\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n    # Create the directory if it doesn't exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Split the input string into lines\n    lines = input_string.splitlines()\n\n    # Iterate over the lines and hash each non-empty line\n    file_paths = []\n    for line in lines:\n        if line.strip():\n            # Hash the line using SHA256\n            hash_object = hashlib.sha256(line.encode())\n            digest = hash_object.hexdigest()\n\n            # Create a file with the first 10 characters of the hash as the filename\n            filename = digest[:10] + \".txt\"\n            file_path = os.path.join(DIRECTORY, filename)\n\n            # Write the hash to the file\n            with open(file_path, \"w\") as f:\n                f.write(digest)\n\n            # Add the file path to the list of file paths\n            file_paths.append(file_path)\n\n    return file_paths", "problem": "Hash each non-empty line of a multi-line string using SHA256 and save the hashes to files. The filename is the first 10 characters of the hash, with a '.txt' extension.\nNote that: Notes: If the DIRECTORY does not exist, it is created. Empty lines in the input string are ignored.\nThe function should output with:\n    list[str]: A list of file paths where the hashes of non-empty lines are saved.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n```", "solution": "import os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    file_paths = []\n    lines = input_string.split(\"\\n\")\n    for line in lines:\n        if line:  # Check if line is not empty\n            line_hash = hashlib.sha256(line.encode()).hexdigest()\n            filename = line_hash[:10] + \".txt\"\n            filepath = os.path.join(DIRECTORY, filename)\n            with open(filepath, \"w\", encoding=\"utf-8\") as file:\n                file.write(line_hash)\n            file_paths.append(filepath)\n\n    return file_paths", "pass": true}
{"task_id": "1051", "program": "import collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n\n    pass\nimport collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    \"\"\"\n    Analyze the uniformity of a distribution represented by a dictionary of categories and their counts, and create a description to introduce this distribution.\n    Note that: If 'data_dict' is empty, the function returns None and a message \"The distribution is uniform.\" indicating that an empty distribution is considered uniform by default. If 'data_dict' is not empty, it calculates the average count of the categories. The distribution is considered uniform if the absolute difference between each count and the average count is less than or equal to 1e-5. If any count's absolute difference with the average count is more than 1e-5, the distribution is considered not uniform. The function then creates a histogram of the counts using matplotlib, with the number of bins being the lesser of 10 or the number of unique counts. The histogram's x-ticks are labeled with the category names.\n    The function should output with:\n        tuple: A tuple containing:\n        matplotlib.axes._axes.Axes: The axes object of the histogram.\n        str: A message indicating whether the distribution is uniform (\"The distribution is uniform.\")\n        or not (\"The distribution is not uniform.\").\n    \"\"\"\n    if not data_dict:\n        return None, \"The distribution is uniform.\"\n\n    # Calculate the average count of the categories\n    average_count = sum(data_dict.values()) / len(data_dict)\n\n    # Check if the distribution is uniform\n    uniform = True\n    for category, count in data_dict.items():\n        if abs(count - average_count) > 1e-5:\n            uniform = False\n            break\n\n    # Create a histogram of the counts\n    counts = np.array(list(data_dict.values()))\n    bins = min(10, len(data_dict))\n    ax = plt.hist(counts, bins=bins)\n    ax.set_xticks(range(len(data_dict)))\n    ax.set_xticklabels(list(data_dict.keys()))\n\n    # Return the axes object and a message indicating whether the distribution is uniform\n    return ax, \"The distribution is uniform.\" if uniform else \"The distribution is not uniform.\"\ndata_dict = {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40}", "problem": "Analyze the uniformity of a distribution represented by a dictionary of categories and their counts, and create a description to introduce this distribution.\nNote that: If 'data_dict' is empty, the function returns None and a message \"The distribution is uniform.\" indicating that an empty distribution is considered uniform by default. If 'data_dict' is not empty, it calculates the average count of the categories. The distribution is considered uniform if the absolute difference between each count and the average count is less than or equal to 1e-5. If any count's absolute difference with the average count is more than 1e-5, the distribution is considered not uniform. The function then creates a histogram of the counts using matplotlib, with the number of bins being the lesser of 10 or the number of unique counts. The histogram's x-ticks are labeled with the category names.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.axes._axes.Axes: The axes object of the histogram.\n    str: A message indicating whether the distribution is uniform (\"The distribution is uniform.\")\n    or not (\"The distribution is not uniform.\").\nYou should write self-contained code starting with:\n```\nimport collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```", "solution": "import collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    if not data_dict:\n        return None, \"The distribution is uniform.\"\n\n    data_counter = collections.Counter(data_dict)\n    counts = list(data_counter.values())\n    avg_count = sum(counts) / len(counts)\n    uniform = all(abs(count - avg_count) <= 1e-5 for count in counts)\n    message = (\n        \"The distribution is uniform.\"\n        if uniform\n        else \"The distribution is not uniform.\"\n    )\n\n    _, ax = plt.subplots()\n    ax.hist(\n        counts,\n        bins=np.linspace(min(counts), max(counts), min(10, len(counts))),\n        rwidth=0.8,\n    )\n    ax.set_xticks(np.arange(len(data_dict)) + 1)\n    ax.set_xticklabels(list(data_dict.keys()))\n    return ax, message", "pass": false}
{"task_id": "1052", "program": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    This function processes a text dataset from a CSV file, performs text vectorization while excluding specific stopwords, and creates a histogram of the ten most common words. The function is robust to different input scenarios, such as empty data or data containing only stopwords.\n    The function should output with:\n        matplotlib Axes object: If save_path is not provided and valid words are found in the input, the function\n        displays the histogram plot and returns the matplotlib Axes object.\n        None: In two scenarios:\n        1. If save_path is provided, saves the plot to the specified location and returns None.\n        2. If the input file is empty or contains only stop words, prints a message and returns None.\n    \"\"\"\n    # Load the data from the CSV file\n    data = pd.read_csv(file_path)\n\n    # Check if the data is empty or contains only stop words\n    if data.empty or all(word in STOP_WORDS for word in data[\"text\"].values):\n        print(\"The input file is empty or contains only stop words.\")\n        return None\n\n    # Perform text vectorization and remove stop words\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    vectorized_data = vectorizer.fit_transform(data[\"text\"].values)\n\n    # Create a histogram of the ten most common words\n    word_counts = pd.Series(vectorized_data.sum(axis=0)).sort_values(ascending=False)\n    word_counts = word_counts[:10]\n\n    # Plot the histogram\n    plt.bar(word_counts.index, word_counts.values)\n    plt.xlabel(\"Word\")\n    plt.ylabel(\"Count\")\n    plt.title(\"Histogram of the 10 Most Common Words\")\n\n    # Save the plot to the specified location if save_path is provided\n    if save_path is not None:\n        plt.savefig(save_path)\n        return None\n\n    # Otherwise, display the plot and return the matplotlib Axes object\n    plt.show()\n    return plt.gca()", "problem": "This function processes a text dataset from a CSV file, performs text vectorization while excluding specific stopwords, and creates a histogram of the ten most common words. The function is robust to different input scenarios, such as empty data or data containing only stopwords.\nThe function should output with:\n    matplotlib Axes object: If save_path is not provided and valid words are found in the input, the function\n    displays the histogram plot and returns the matplotlib Axes object.\n    None: In two scenarios:\n    1. If save_path is provided, saves the plot to the specified location and returns None.\n    2. If the input file is empty or contains only stop words, prints a message and returns None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n```", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    df = pd.read_csv(file_path, header=None, names=[\"Text\"])\n    df[\"Text\"] = df[\"Text\"].str.split(\"\\\\n\").str.join(\" \")\n\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    try:\n        word_count = vectorizer.fit_transform(df[\"Text\"])\n    except ValueError:\n        # Handle the case where the DataFrame is empty or contains only stop words\n        print(\"No valid words to plot. Returning None.\")\n        return None\n\n    sum_words = word_count.sum(axis=0)\n    words_freq = [\n        (word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()\n    ]\n    words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)\n\n    top_words = words_freq[:10]\n    df = pd.DataFrame(top_words, columns=[\"Word\", \"Count\"])\n\n    ax = df.plot.bar(x=\"Word\", y=\"Count\", rot=0)\n\n    # Saving or displaying the plot\n    if save_path:\n        plt.savefig(save_path)\n        plt.close()\n        return None\n    else:\n        return ax", "pass": false}
{"task_id": "1053", "program": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n\n    pass\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes a CSV file containing text data and generates a histogram of the ten most common words.\n\n    Parameters\n    ----------\n    file_path : str\n        The path to the CSV file.\n    save_path : str, optional\n        The path to save the plot to. If not provided, the plot is displayed on the screen.\n\n    Returns\n    -------\n    matplotlib.axes.Axes or None\n        The Axes object of the plot if save_path is not provided.\n        None if save_path is provided, the plot is saved to the specified path.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified file_path does not exist.\n    Exception\n        For any other errors that occur during the function execution.\n    \"\"\"\n    # Check if file exists\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found at {file_path}\")\n\n    # Read CSV file\n    df = pd.read_csv(file_path)\n\n    # Split text into words\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    X = vectorizer.fit_transform(df[\"Text\"])\n\n    # Get top ten most common words\n    top_words = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\n    top_words = top_words.sum(axis=0).sort_values(ascending=False)\n\n    # Create histogram\n    plt.figure(figsize=(10, 6))\n    plt.bar(top_words.index, top_words.values)\n    plt.xlabel(\"Word\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Top 10 Most Common Words\")\n\n    # Save or display plot\n    if save_path:\n        plt.savefig(save_path)\n        return None\n    else:\n        return plt.gca()", "problem": "Processes a CSV file containing text data and generates a histogram of the ten most common words. This function reads a CSV file, which is expected to contain a single column of text data. It then splits the text into words and creates a histogram of the frequency of the top ten most common words, excluding a predefined set of stopwords. The resulting histogram can be either displayed on the screen or saved to a file. The CSV file should have a single column with the header 'Text'. Each row under this column should contain a text string. If the CSV file does not have a header, the first column is assumed to be the text data.\nNote that: Notes: The function uses pandas for data manipulation, sklearn's CountVectorizer for text vectorization, and matplotlib for plotting. A predefined list of stopwords is used to filter out common but insignificant words from the histogram.\nThe function should raise the exception for: FileNotFoundError: If the specified file_path does not exist. It raises a FileNotFoundError with a message indicating the file path that was not found. Exception: For any other errors that occur during the function execution. In this case, the error is printed to the console, and None is returned.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot if save_path is not provided.\n    Useful for further customization or display in notebooks.\n    None: If save_path is provided, the plot is saved to the specified path,\n    and the function returns None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n```", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Reading the CSV file into a DataFrame\n        df = pd.read_csv(file_path, usecols=[0], names=[\"Text\"], header=None)\n\n        # Vectorizing the text\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_count = vectorizer.fit_transform(df[\"Text\"].dropna())\n\n        # Calculating word frequency\n        sum_words = word_count.sum(axis=0)\n        words_freq = [\n            (word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()\n        ]\n        words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)\n\n        # Preparing data for the top 10 words\n        top_words = words_freq[:10]\n        df_top = pd.DataFrame(top_words, columns=[\"Word\", \"Count\"])\n\n        # Plotting\n        ax = df_top.plot.bar(x=\"Word\", y=\"Count\", rot=0, legend=False)\n\n        # Saving or displaying the plot\n        if save_path:\n            plt.savefig(save_path)\n            plt.close()\n\n        return None if save_path else ax\n\n    except FileNotFoundError as exc:\n        raise FileNotFoundError(f\"File not found: {file_path}\") from exc\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None", "pass": false}
{"task_id": "1054", "program": "import csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n\n    pass\nimport csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Read the CSV file\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        data = list(reader)\n\n    # Convert the data to a numpy array\n    data = np.array(data, dtype=float)\n\n    # Randomly select 30 individuals from the population without replacement\n    sample = np.random.choice(data, size=30, replace=False)\n\n    # Calculate the mean and standard deviation of the sample\n    sample_mean = np.mean(sample)\n    sample_std = np.std(sample, ddof=1)\n\n    # Generate a histogram of the sample data\n    plt.hist(sample, bins='auto')\n\n    # Overlay a normal distribution curve on the histogram\n    x = np.linspace(sample.min(), sample.max(), 100)\n    y = stats.norm.pdf(x, sample_mean, sample_std)\n    plt.plot(x, y)\n\n    # Return the sample mean, standard deviation, and histogram plot\n    return sample_mean, sample_std, plt.gca()\nfile_path = 'population_data.csv'", "problem": "This function processes a CSV file containing numeric data representing a population. It randomly selects 30 individuals from this population without replacement to form a sample. The function calculates the mean and standard deviation of this sample. The means delta degree is 1. It also generates a histogram of the sample data and overlays a normal distribution curve on this histogram. In this example, 'population_data.csv' is a CSV file where each line contains a numeric value. The function reads this file, samples 30 values, computes their mean and standard deviation, and plots a histogram with a normal distribution curve.\nNote that: Notes: The function uses numpy for random sampling and statistical calculations. The matplotlib library is used to plot the histogram and the normal distribution curve. The function includes exception handling for file input/output errors, ensuring that any issues with reading the CSV file are properly communicated. The function plots a histogram of the sample using matplotlib, with the number of bins determined automatically ('auto').\nThe function should output with:\n    Tuple (float, float, matplotlib.axes._axes.Axes): The function returns a tuple containing\n    three elements:\n    Sample mean (float): The mean of the sample.\n    Sample standard deviation (float): The standard deviation of the sample, calculated with a\n    degrees of freedom (ddof) of 1.\n    Matplotlib subplot (matplotlib.axes._axes.Axes): An object representing the\n    generated histogram plot with the normal distribution curve.\nYou should write self-contained code starting with:\n```\nimport csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n```", "solution": "import csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            reader = csv.reader(file)\n            population = [int(row[0]) for row in reader]\n    except IOError as exc:\n        raise IOError(\n            \"Error reading the file. Please check the file path and permissions.\"\n        ) from exc\n\n    sample = np.random.choice(population, 30, replace=False)\n    mean = np.mean(sample)\n    std_dev = np.std(sample, ddof=1)\n\n    plt.hist(sample, bins=\"auto\", density=True, alpha=0.7, rwidth=0.85)\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    plt.plot(x, p, \"k\", linewidth=2)\n    plt.xlabel(\"Sample Values\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Sample Histogram with Normal Distribution Overlay\")\n    ax = plt.gca()\n\n    return mean, std_dev, ax", "pass": false}
{"task_id": "1055", "program": "import pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n\n    pass\nimport pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n    \"\"\"\n    Generates a pandas DataFrame containing shuffled combinations of provided colors and states.\n    The DataFrame is formatted so that each column represents a series of unique combinations,\n    with each combination displayed as \"Color:State\".\n    Note that: Cartesian product of 'colors' and 'states',\n    The number of columns in the resulting DataFrame is determined by the smaller number of elements in either the 'colors' or 'states' list,\n    ensuring an even distribution without excess empty cells. If the number of combinations is not evenly divisible by the number of columns,\n    some columns will have fewer entries.\n    The function should output with:\n        df (pandas.DataFrame): A DataFrame where each cell contains a string of the format \"Color:State\".\n        The combinations are distributed across columns, with the number of columns being the lesser\n        of the lengths of 'colors' and 'states'.\n    \"\"\"\n    # Shuffle the colors and states lists\n    random.shuffle(colors)\n    random.shuffle(states)\n\n    # Create a list of all possible combinations of colors and states\n    combinations = list(itertools.product(colors, states))\n\n    # Determine the number of columns in the resulting DataFrame\n    num_columns = min(len(colors), len(states))\n\n    # Create a list of lists to store the combinations\n    combination_lists = [[] for _ in range(num_columns)]\n\n    # Distribute the combinations across the columns\n    for i, combination in enumerate(combinations):\n        combination_lists[i % num_columns].append(combination)\n\n    # Create a DataFrame from the list of lists\n    df = pd.DataFrame(combination_lists)\n\n    # Convert the lists to strings in the format \"Color:State\"\n    df = df.applymap(lambda x: f\"{x[0]}:{x[1]}\")\n\n    return df\ncolors = [\"red\", \"blue\", \"green\"]\nstates = [\"CA\", \"NY\", \"FL\"]", "problem": "Generates a pandas DataFrame containing shuffled combinations of provided colors and states. The DataFrame is formatted so that each column represents a series of unique combinations, with each combination displayed as \"Color:State\".\nNote that: Cartesian product of 'colors' and 'states', The number of columns in the resulting DataFrame is determined by the smaller number of elements in either the 'colors' or 'states' list, ensuring an even distribution without excess empty cells. If the number of combinations is not evenly divisible by the number of columns, some columns will have fewer entries.\nThe function should output with:\n    df (pandas.DataFrame): A DataFrame where each cell contains a string of the format \"Color:State\".\n    The combinations are distributed across columns, with the number of columns being the lesser\n    of the lengths of 'colors' and 'states'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n```", "solution": "import pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n    combinations = list(itertools.product(colors, states))\n    random.seed(42)\n    random.shuffle(combinations)\n    num_columns = min(len(colors), len(states))\n\n    data = {\n        f\"Color:State {i+1}\": [\n            f\"{comb[0]}:{comb[1]}\" for comb in combinations[i::num_columns]\n        ]\n        for i in range(num_columns)\n    }\n    df = pd.DataFrame(data)\n\n    return df", "pass": false}
{"task_id": "1056", "program": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n\n    pass\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n    \"\"\"\n    This function generates and displays a bar chart representing random letter-number pairs.\n    Each bar corresponds to a unique pair, formed by combining a letter from 'a' to 'z' with a number from 1 to 26.\n    The function randomly shuffles these pairs and assigns a random count to each.\n\n    Args:\n        n_pairs (int): The number of letter-number pairs to generate. Must be between 1 and 26, inclusive.\n\n    Returns:\n        matplotlib.container.BarContainer: The bar chart created by the function.\n\n    Raises:\n        ValueError: If 'n_pairs' is outside the range of 1 to 26, inclusive.\n    \"\"\"\n    if not 1 <= n_pairs <= 26:\n        raise ValueError(\"'n_pairs' must be between 1 and 26, inclusive.\")\n\n    # Generate random letter-number pairs\n    pairs = [f\"{random.choice(LETTERS)}{random.choice(NUMBERS)}\" for _ in range(n_pairs)]\n\n    # Shuffle the pairs and assign random counts\n    random.shuffle(pairs)\n    counts = [random.randint(1, 9) for _ in range(n_pairs)]\n\n    # Create the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(pairs, counts)\n    ax.set_title(\"Random Letter:Number Pairs Chart\")\n    ax.set_xlabel(\"Letter:Number Pairs\")\n    ax.set_ylabel(\"Counts\")\n\n    return fig", "problem": "This function generates and displays a bar chart representing random letter-number pairs. Each bar corresponds to a unique pair, formed by combining a letter from 'a' to 'z' with a number from 1 to 26. The function randomly shuffles these pairs and assigns a random count to each.\nNote that: Notes: Each call to this function will likely produce a different chart because it shuffles the order of the pairs and assigns random counts to them. The random counts assigned to each pair range from 1 to 9.\nThe function should raise the exception for: ValueError: If 'n_pairs' is outside the range of 1 to 26, inclusive. This ensures that the function operates within the bounds of the predefined letters ('a' to 'z') and numbers (1 to 26).\nThe function should output with:\n    matplotlib.container.BarContainer: This object represents the bar chart created by the function.\n    Each bar in the chart is labeled with its corresponding letter-number pair (e.g., 'a:1', 'b:2').\n    The title of the chart is \"Random Letter:Number Pairs Chart\", the x-axis label is \"Letter:Number Pairs\",\n    and the y-axis label is \"Counts\".\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n```", "solution": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n    if n_pairs > 26 or n_pairs < 1:\n        raise ValueError(\"n_pairs should be between 1 and 26\")\n\n    pairs = [f\"{letter}:{number}\" for letter, number in zip(LETTERS, NUMBERS)][:n_pairs]\n    random.seed(42)\n    random.shuffle(pairs)\n    counts = np.random.randint(1, 10, size=n_pairs)\n\n    bars = plt.bar(pairs, counts)\n\n    # Set label for each bar\n    for bar, pair in zip(bars, pairs):\n        bar.set_label(pair)\n\n    plt.xlabel(\"Letter:Number Pairs\")\n    plt.ylabel(\"Counts\")\n    plt.title(\"Random Letter:Number Pairs Chart\")\n\n    return bars", "pass": false}
{"task_id": "1057", "program": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n\n    pass\nimport pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create a DataFrame with combinations of animals and foods in a 'animal:food' format.\n    Handling of Special Cases:\n    - If both 'animals' and 'foods' lists are empty or not provided, the function returns an empty DataFrame.\n    - If either 'animals' or 'foods' list is empty or not provided, the function uses its predefined list for the missing parameter.\n    Note that: The function generates all possible combinations of the provided 'animals' and 'foods' using itertools.product.\n    The resulting pairs are shuffled randomly to ensure variety in the DataFrame layout.\n    The function should output with:\n        df (pandas.DataFrame): A DataFrame where each row represents a unique animal from the 'animals'\n        list and each column represents a food item from the 'foods' list. Each cell contains a string in the format 'animal:food'.\n    \"\"\"\n    # Define predefined lists of animals and foods\n    animals = animals or ['cat', 'dog', 'horse']\n    foods = foods or ['apple', 'banana', 'carrot']\n\n    # Generate all possible combinations of animals and foods\n    combinations = itertools.product(animals, foods)\n\n    # Shuffle the combinations to ensure variety in the DataFrame layout\n    np.random.shuffle(combinations)\n\n    # Create a DataFrame with the shuffled combinations\n    df = pd.DataFrame(combinations, columns=['animal', 'food'])\n\n    # Add a new column with the animal:food pairs\n    df['animal:food'] = df['animal'] + ':' + df['food']\n\n    return df", "problem": "Create a DataFrame with combinations of animals and foods in a 'animal:food' format. Handling of Special Cases: - If both 'animals' and 'foods' lists are empty or not provided, the function returns an empty DataFrame. - If either 'animals' or 'foods' list is empty or not provided, the function uses its predefined list for the missing parameter.\nNote that: The function generates all possible combinations of the provided 'animals' and 'foods' using itertools.product. The resulting pairs are shuffled randomly to ensure variety in the DataFrame layout.\nThe function should output with:\n    df (pandas.DataFrame): A DataFrame where each row represents a unique animal from the 'animals'\n    list and each column represents a food item from the 'foods' list. Each cell contains a string in the format 'animal:food'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n```", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n\n    # Default lists if not provided\n    if animals is None:\n        animals = [\n            \"Dog\",\n            \"Cat\",\n            \"Elephant\",\n            \"Tiger\",\n            \"Lion\",\n            \"Zebra\",\n            \"Giraffe\",\n            \"Bear\",\n            \"Monkey\",\n            \"Kangaroo\",\n        ]\n    if foods is None:\n        foods = [\"Meat\", \"Fish\", \"Grass\", \"Fruits\", \"Insects\", \"Seeds\", \"Leaves\"]\n\n    # Handling edge case of empty lists\n    if not animals or not foods:\n        return pd.DataFrame()\n\n    pairs = [f\"{a}:{f}\" for a, f in itertools.product(animals, foods)]\n\n    # Reshape the data and create a DataFrame\n    data = np.array(pairs).reshape(-1, len(foods))\n    df = pd.DataFrame(data, columns=foods)\n\n    return df", "pass": false}
{"task_id": "1058", "program": "import itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n\n    pass\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n    \"\"\"\n    Generate and display a countplot of predefined shape-color pairs.\n    This function creates a visual representation of a specified number of unique shape-color combinations,\n    each displayed as a bar in the countplot. The shape-color pairs are selected from a predefined list.\n\n    Args:\n        num_pairs (int): The number of shape-color pairs to display in the countplot.\n\n    Returns:\n        ax (matplotlib.axes._axes.Axes): The Axes object of the countplot, which can be used for\n        further customizations or to retrieve information about the plot.\n    \"\"\"\n    # Generate a list of shape-color pairs\n    shape_color_pairs = list(itertools.product(SHAPES, COLORS))\n\n    # Select the first `num_pairs` shape-color pairs\n    selected_shape_color_pairs = shape_color_pairs[:num_pairs]\n\n    # Create a DataFrame with the shape and color columns\n    df = pd.DataFrame(selected_shape_color_pairs, columns=[\"Shape\", \"Color\"])\n\n    # Create a countplot with the DataFrame\n    ax = sns.countplot(x=\"Shape\", hue=\"Color\", data=df)\n\n    # Add a title to the plot\n    ax.set_title(\"Countplot of Shape-Color Pairs\")\n\n    # Add a legend to the plot\n    ax.legend(loc=\"upper right\")\n\n    # Return the Axes object\n    return ax", "problem": "Generate and display a countplot of predefined shape-color pairs. This function creates a visual representation of a specified number of unique shape-color combinations, each displayed as a bar in the countplot. The shape-color pairs are selected from a predefined list.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object of the countplot, which can be used for\n    further customizations or to retrieve information about the plot.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n```", "solution": "import itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n    max_pairs = len(SHAPES) * len(COLORS)\n    num_pairs = min(num_pairs, max_pairs)\n    \n    pairs = [f\"{s}:{c}\" for s, c in itertools.product(SHAPES, COLORS)][:num_pairs]\n    \n    # Drawing the countplot\n    ax = sns.countplot(x=pairs, hue=pairs, palette=\"Set3\", legend=False)\n    plt.xticks(rotation=90)\n    \n    return ax", "pass": false}
{"task_id": "1059", "program": "import numpy as np\nimport random\nimport itertools\nimport pandas as pd\n# Constants\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n\n    pass\nimport numpy as np\nimport random\nimport itertools\nimport pandas as pd\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n    # Generate a list of planet-element pairs\n    planet_element_pairs = [f\"{planet}:{element}\" for planet, element in itertools.product(PLANETS, ELEMENTS)]\n\n    # Create a DataFrame with the planet-element pairs\n    df = pd.DataFrame(planet_element_pairs, columns=[\"Planet:Element\"])\n\n    # Shuffle the DataFrame\n    df = df.sample(frac=1)\n\n    return df", "problem": "Generate a DataFrame where each row contains random planet-element pairs. Each pair is formatted as 'Planet:Element'. The number of rows is determined by the number of planets, and each row will contain as many planet-element pairs as there are elements.\nThe function should output with:\n    pandas.DataFrame: A DataFrame where each cell contains a string in the format 'Planet:Element'.\n    The DataFrame has a number of rows equal to the number of planets and\n    a number of columns equal to the number of elements.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nimport itertools\nimport pandas as pd\n# Constants\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n```", "solution": "import numpy as np\nimport random\nimport itertools\nimport pandas as pd\n# Constants\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n    # Generate all possible pairs\n    pairs = [\n        f\"{planet}:{element}\"\n        for planet, element in itertools.product(PLANETS, ELEMENTS)\n    ]\n    # Shuffle the pairs to ensure randomness\n    random.shuffle(pairs)\n\n    # Convert the list of pairs into a numpy array, then reshape it to fit the DataFrame dimensions\n    data = np.array(pairs).reshape(len(PLANETS), len(ELEMENTS))\n    # Create the DataFrame with ELEMENTS as column headers\n    df = pd.DataFrame(data, columns=ELEMENTS)\n\n    return df", "pass": false}
{"task_id": "1060", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n    \"\"\"\n    This function assesses whether the distribution of values in a specified column of a DataFrame is uniform and visualizes this distribution using a histogram.\n    The function handles the following cases:\n    - If the DataFrame is empty, the specified column does not exist in the DataFrame, or if the specified column contains only null values, the function returns a message \"The DataFrame is empty or the specified column has no data.\" In this case, a blank histogram with a title \"Distribution of values in [column_name] (No Data)\" is generated.\n    - If the DataFrame and column are valid, the function calculates if the distribution of values is uniform. It returns a message stating whether the distribution is uniform or not. A histogram is generated to visualize the distribution of values in the specified column. This histogram displays the frequency of each value, with the number of bins set to the number of unique values in the column, an edge color of black, and a transparency alpha value of 0.7. The x-axis is labeled \"Values\", the y-axis is labeled \"Frequency\", and the title of the plot is \"Distribution of values in [column_name]\".\n    The function should output with:\n        str: A message indicating whether the distribution in the column is uniform or not. The message is one of the following:\n            \"The distribution of values is uniform.\"\n            \"The distribution of values is not uniform.\"\n        plt.Axes: An Axes object displaying the histogram of the value distribution in the specified column.\n    \"\"\"\n    # Check if the DataFrame is empty or the specified column does not exist\n    if df.empty or column_name not in df.columns:\n        return \"The DataFrame is empty or the specified column has no data.\", plt.Axes([])\n\n    # Check if the specified column contains only null values\n    if df[column_name].isnull().all():\n        return \"The DataFrame is empty or the specified column has no data.\", plt.Axes([])\n\n    # Calculate the distribution of values in the specified column\n    values = df[column_name].value_counts()\n    unique_values = values.index.tolist()\n    frequencies = values.tolist()\n\n    # Check if the distribution is uniform\n    if len(unique_values) == 1:\n        return \"The distribution of values is uniform.\", plt.Axes([])\n\n    # Generate the histogram\n    fig, ax = plt.subplots()\n    ax.hist(unique_values, bins=len(unique_values), edgecolor=\"black\", alpha=0.7)\n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(f\"Distribution of values in {column_name}\")\n\n    return \"The distribution of values is not uniform.\", ax\ndf = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [1, 2, 3, 4, 5], \"C\": [1, 2, 3, 4, 5]})\ncolumn_name = \"A\"", "problem": "This function assesses whether the distribution of values in a specified column of a DataFrame is uniform and visualizes this distribution using a histogram. The function handles the following cases: - If the DataFrame is empty, the specified column does not exist in the DataFrame, or if the specified column contains only null values, the function returns a message \"The DataFrame is empty or the specified column has no data.\" In this case, a blank histogram with a title \"Distribution of values in [column_name] (No Data)\" is generated. - If the DataFrame and column are valid, the function calculates if the distribution of values is uniform. It returns a message stating whether the distribution is uniform or not. A histogram is generated to visualize the distribution of values in the specified column. This histogram displays the frequency of each value, with the number of bins set to the number of unique values in the column, an edge color of black, and a transparency alpha value of 0.7. The x-axis is labeled \"Values\", the y-axis is labeled \"Frequency\", and the title of the plot is \"Distribution of values in [column_name]\".\nThe function should output with:\n    str: A message indicating whether the distribution in the column is uniform or not. The message is one of the following:\n    \"The distribution of values is uniform.\"\n    \"The distribution of values is not uniform.\"\n    plt.Axes: An Axes object displaying the histogram of the value distribution in the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n    if df.empty or column_name not in df.columns or df[column_name].isnull().all():\n        message = \"The DataFrame is empty or the specified column has no data.\"\n        _, ax = plt.subplots()\n        ax.set_title(f\"Distribution of values in {column_name} (No Data)\")\n        return message, ax\n\n    unique_values_count = df[column_name].nunique()\n    total_values = len(df[column_name])\n    is_uniform = total_values % unique_values_count == 0 and all(\n        df[column_name].value_counts() == total_values / unique_values_count\n    )\n\n    message = (\n        \"The distribution of values is uniform.\"\n        if is_uniform\n        else \"The distribution of values is not uniform.\"\n    )\n\n    _, ax = plt.subplots()\n    ax.hist(df[column_name], bins=unique_values_count, edgecolor=\"black\", alpha=0.7)\n    ax.set_xticks(range(unique_values_count))\n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(f\"Distribution of values in {column_name}\")\n\n    return message, ax", "pass": false}
{"task_id": "1061", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n    \"\"\"\n    Plots a histogram of normalized data from an input 2D numpy array alongside the probability density function (PDF) of a standard normal distribution.\n    Note that: Takes in a 2D numpy array as input. Calculates the sum of elements in each row of the array. Normalizes these row sums to have a mean of 0 and a standard deviation of 1. Normalization is achieved by first calculating the mean and standard deviation of the row sums. Each row sum is then transformed by subtracting the mean and dividing by the standard deviation. If the standard deviation is 0 (indicating all row sums are equal), normalization results in an array of zeros with the same shape. Plots a histogram of the normalized data. Uses 30 bins for the histogram. The histogram is density-based, meaning it represents the probability density rather than raw frequencies. The bars of the histogram are semi-transparent (60% opacity) and green in color. Overlays the PDF of a standard normal distribution on the histogram for comparison. The PDF curve is plotted in red with a line width of 2. The range of the PDF curve is set to cover 99% of a standard normal distribution. Sets the title of the plot to \"Histogram of Normalized Data with Standard Normal PDF\".\n    The function should output with:\n        A tuple containing:\n        A matplotlib Axes object with the histogram of the normalized data and the overlaid standard normal PDF.\n        The normalized data as a 1D numpy array.\n    \"\"\"\n    # Calculate the row sums of the input array\n    row_sums = arr.sum(axis=1)\n\n    # Calculate the mean and standard deviation of the row sums\n    mean = row_sums.mean()\n    std = row_sums.std()\n\n    # Normalize the row sums\n    normalized_data = (row_sums - mean) / std\n\n    # Plot the histogram of the normalized data\n    fig, ax = plt.subplots()\n    ax.hist(normalized_data, bins=30, density=True, alpha=0.6, color='green')\n    ax.set_title(\"Histogram of Normalized Data with Standard Normal PDF\")\n\n    # Plot the standard normal PDF on top of the histogram\n    x = np.linspace(-3, 3, 100)\n    pdf = norm.pdf(x, loc=mean, scale=std)\n    ax.plot(x, pdf, color='red', linewidth=2)\n\n    return ax, normalized_data\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Plots a histogram of normalized data from an input 2D numpy array alongside the probability density function (PDF) of a standard normal distribution.\nNote that: Takes in a 2D numpy array as input. Calculates the sum of elements in each row of the array. Normalizes these row sums to have a mean of 0 and a standard deviation of 1. Normalization is achieved by first calculating the mean and standard deviation of the row sums. Each row sum is then transformed by subtracting the mean and dividing by the standard deviation. If the standard deviation is 0 (indicating all row sums are equal), normalization results in an array of zeros with the same shape. Plots a histogram of the normalized data. Uses 30 bins for the histogram. The histogram is density-based, meaning it represents the probability density rather than raw frequencies. The bars of the histogram are semi-transparent (60% opacity) and green in color. Overlays the PDF of a standard normal distribution on the histogram for comparison. The PDF curve is plotted in red with a line width of 2. The range of the PDF curve is set to cover 99% of a standard normal distribution. Sets the title of the plot to \"Histogram of Normalized Data with Standard Normal PDF\".\nThe function should output with:\n    A tuple containing:\n    A matplotlib Axes object with the histogram of the normalized data and the overlaid standard normal PDF.\n    The normalized data as a 1D numpy array.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n    # Calculating row sums\n    row_sums = arr.sum(axis=1)\n\n    # Normalizing the data\n    mean = np.mean(row_sums)\n    std_dev = np.std(row_sums)\n    normalized_data = (\n        (row_sums - mean) / std_dev if std_dev != 0 else np.zeros_like(row_sums)\n    )\n\n    # Plotting the histogram\n    _, ax = plt.subplots()\n    ax.hist(normalized_data, bins=30, density=True, alpha=0.6, color=\"g\")\n\n    # Plotting the PDF of a standard normal distribution\n    x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)\n    ax.plot(x, norm.pdf(x), \"r-\", lw=2)\n    ax.set_title(\"Histogram of Normalized Data with Standard Normal PDF\")\n\n    return ax, normalized_data", "pass": false}
{"task_id": "1062", "program": "import pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n\n    pass\nimport pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Calculate the sum of each row in a 2D numpy array and plot these sums as a time series.\n    This function takes a 2D numpy array and computes the sum of elements in each row. It then creates a Pandas DataFrame with these row sums and plots them as a time series, using dates starting from January 1, 2020, for each row.\n    Handling Scenarios:\n    - For non-empty arrays: The function computes the sum of elements for each row, stores these sums in a Pandas DataFrame, and then plots them. Each row in the plot represents the sum for a specific day, starting from January 1, 2020.\n    - For empty arrays: The function creates an empty plot with the title 'Time Series of Row Sums' but without data. This is achieved by checking if the array size is zero (empty array) and if so, creating a subplot without any data.\n    Note that: The function uses 'pandas' for DataFrame creation and 'matplotlib.pyplot' for plotting. The dates in the plot start from January 1, 2020, and each subsequent row represents the next day.\n    The function should output with:\n        matplotlib.axes._axes.Axes: A plot representing the time series of row sums.\n    \"\"\"\n    # Check if the array is empty\n    if arr.size == 0:\n        # Create an empty plot with the title 'Time Series of Row Sums'\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.set_title('Time Series of Row Sums')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Sum of Row Elements')\n        return ax\n\n    # Compute the sum of elements for each row\n    row_sums = arr.sum(axis=1)\n\n    # Create a Pandas DataFrame with the row sums\n    df = pd.DataFrame(row_sums, index=pd.date_range(start='2020-01-01', periods=arr.shape[0], freq='D'))\n\n    # Plot the time series of row sums\n    ax = df.plot(kind='line', title='Time Series of Row Sums', xlabel='Date', ylabel='Sum of Row Elements')\n\n    return ax", "problem": "Calculate the sum of each row in a 2D numpy array and plot these sums as a time series. This function takes a 2D numpy array and computes the sum of elements in each row. It then creates a Pandas DataFrame with these row sums and plots them as a time series, using dates starting from January 1, 2020, for each row. Handling Scenarios: - For non-empty arrays: The function computes the sum of elements for each row, stores these sums in a Pandas DataFrame, and then plots them. Each row in the plot represents the sum for a specific day, starting from January 1, 2020. - For empty arrays: The function creates an empty plot with the title 'Time Series of Row Sums' but without data. This is achieved by checking if the array size is zero (empty array) and if so, creating a subplot without any data.\nNote that: The function uses 'pandas' for DataFrame creation and 'matplotlib.pyplot' for plotting. The dates in the plot start from January 1, 2020, and each subsequent row represents the next day.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A plot representing the time series of row sums.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n```", "solution": "import pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    if not arr.size:  # Check for empty array\n        _, ax = plt.subplots()\n        ax.set_title(\"Time Series of Row Sums\")\n        return ax\n\n    row_sums = arr.sum(axis=1)\n    df = pd.DataFrame(row_sums, columns=[\"Sum\"])\n    df.index = pd.date_range(start=\"1/1/2020\", periods=df.shape[0])\n    ax = df.plot(title=\"Time Series of Row Sums\")\n    return ax", "pass": true}
{"task_id": "1063", "program": "from matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(arr):\n\n    pass\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(arr):\n    # Perform PCA on the sum of rows of the array\n    pca = PCA(n_components=1)\n    pca.fit(arr.sum(axis=1).reshape(-1, 1))\n\n    # Plot the explained variance ratio\n    ax = plt.subplot(111)\n    ax.plot(pca.explained_variance_ratio_)\n    ax.set_title(\"Explained Variance Ratio of Principal Components\")\n    ax.set_xlabel(\"Principal Component\")\n    ax.set_ylabel(\"Explained Variance Ratio\")\n    return ax\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Performs Principal Component Analysis (PCA) on the sum of rows of a 2D numpy array and plots the explained variance ratio.\nNote that: The title of the plot is set to \"Explained Variance Ratio of Principal Components\". Notes: The function assumes that 'arr' is a valid 2D numpy array. Only the first principal component is considered in this analysis. The plot illustrates the proportion of the dataset's variance that lies along the axis of this first principal component.\nThe function should output with:\n    ax (matplotlib.axes.Axes): An Axes object from matplotlib.\nYou should write self-contained code starting with:\n```\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(arr):\n```", "solution": "from matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    pca = PCA(n_components=1)\n    pca.fit(row_sums.reshape(-1, 1))\n\n    # Plotting (requires matplotlib and sklearn)\n\n    _, ax = plt.subplots()\n    ax.bar([0], pca.explained_variance_ratio_)\n    ax.set_title(\"Explained Variance Ratio of Principal Components\")\n    ax.set_xticks([0])\n    ax.set_xticklabels([\"PC1\"])\n\n    return ax", "pass": false}
{"task_id": "1064", "program": "import numpy as np\nimport seaborn as sns\ndef task_func(arr):\n\n    pass\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Plots a heatmap of a given 2D numerical array and prints the sum of each row.\n    The heatmap's color range is set based on the minimum and maximum values in the array.\n    The function calculates the sum of each row and prints these values.\n    The heatmap is plotted based on the original array with its color range set from the minimum to the maximum value in the array.\n    The function should output with:\n        ax (matplotlib.axes.Axes): The Axes object with the plotted heatmap.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = arr.sum(axis=1)\n\n    # Set the color range for the heatmap based on the minimum and maximum values in the array\n    vmin = arr.min()\n    vmax = arr.max()\n\n    # Plot the heatmap\n    ax = sns.heatmap(arr, cmap=\"coolwarm\", vmin=vmin, vmax=vmax)\n\n    # Print the sum of each row\n    print(row_sums)\n\n    return ax\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Plots a heatmap of a given 2D numerical array and prints the sum of each row. The heatmap's color range is set based on the minimum and maximum values in the array.\nNote that: The function calculates the sum of each row and prints these values. The heatmap is plotted based on the original array with its color range set from the minimum to the maximum value in the array.\nThe function should output with:\n    ax (matplotlib.axes.Axes): The Axes object with the plotted heatmap.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(arr):\n```", "solution": "import numpy as np\nimport seaborn as sns\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    vmax = np.max(arr)  # Set vmax to the maximum value in the array\n    vmin = np.min(arr)  # Set vmin to the minimum value in the array\n    ax = sns.heatmap(\n        arr, annot=True, vmax=vmax, vmin=vmin\n    )  # Include both vmin and vmax in the heatmap call\n    ax.set_title(\"Heatmap of the 2D Array\")\n\n    return ax", "pass": false}
{"task_id": "1065", "program": "from scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n\n    pass\nfrom scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Performs a Fast Fourier Transform (FFT) on the sum of each row in a 2D array and plots the absolute values of the FFT coefficients.\n\n    Parameters\n    ----------\n    arr : 2D array\n        The input array.\n\n    Returns\n    -------\n    matplotlib.axes.Axes\n        An Axes object displaying the plot of the absolute values of the FFT coefficients.\n    \"\"\"\n    # Calculate the sum of each row in the array\n    row_sums = arr.sum(axis=1)\n\n    # Perform an FFT on the row sums\n    fft_coeffs = fftpack.fft(row_sums)\n\n    # Calculate the absolute values of the FFT coefficients\n    abs_fft_coeffs = np.abs(fft_coeffs)\n\n    # Plot the absolute values of the FFT coefficients\n    fig, ax = plt.subplots()\n    ax.plot(abs_fft_coeffs)\n    ax.set_xlabel(\"Frequency\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.set_title(\"FFT of Row Sums\")\n\n    return ax", "problem": "Performs a Fast Fourier Transform (FFT) on the sum of each row in a 2D array and plots the absolute values of the FFT coefficients.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object displaying the plot of the absolute values of the FFT coefficients.\nYou should write self-contained code starting with:\n```\nfrom scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n```", "solution": "from scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    fft_coefficients = fftpack.fft(row_sums)\n\n    _, ax = plt.subplots()\n    ax.plot(np.abs(fft_coefficients))\n    ax.set_title(\"Absolute values of FFT coefficients\")\n\n    return ax", "pass": false}
{"task_id": "1066", "program": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    # Generate normally distributed data\n    data = np.random.normal(size=num_samples)\n\n    # Generate artificially introduced outliers\n    outliers = np.random.normal(size=num_outliers) * 10\n\n    # Combine normally distributed data and artificially introduced outliers\n    data = np.concatenate((data, outliers))\n\n    # Detect outliers using IQR method\n    q1 = np.percentile(data, 25)\n    q3 = np.percentile(data, 75)\n    iqr = q3 - q1\n    lower_bound = q1 - 1.5 * iqr\n    upper_bound = q3 + 1.5 * iqr\n    outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n\n    # Plot histogram of combined data\n    ax = plt.hist(data, bins=50, edgecolor='black', linewidth=1)\n\n    # Return data, outliers detected, and Axes object\n    return data, outliers_detected, ax", "problem": "Generate a dataset comprising both normal data and artificially introduced outliers, and plot a histogram of the combined data. The function detects outliers in the dataset using the Interquartile Range (IQR) method, but it only considers the normally distributed portion of the data for outlier detection. The outliers detected and the artificially introduced outliers might not always coincide.\nNote that: The artificially introduced outliers are not necessarily the same as the outliers detected by the IQR method. The IQR method is applied only to the normally distributed data, and thus some of the artificially introduced outliers may not be detected, and some normal data points may be falsely identified as outliers.\nThe function should output with:\n    data (numpy array): The combined dataset, including both normally distributed data and\n    the artificially introduced outliers.\n    outliers_detected (numpy array): The outliers detected using the IQR method. This\n    detection is based solely on the normally distributed portion of the data.\n    ax (matplotlib.axes._axes.Axes): The Axes object for the histogram\n    plot of the combined dataset.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n\n    return data, outliers_detected, ax", "pass": false}
{"task_id": "1067", "program": "import requests\nimport logging\ndef task_func(repo_url: str) -> dict:\n\n    pass\nimport requests\nimport logging\ndef task_func(repo_url: str) -> dict:\n    \"\"\"\n    Fetches and returns information about a GitHub repository using its API URL.\n    The function makes an HTTP GET request to the provided repository URL.\n    It incorporates error handling for various scenarios including API rate limits,\n    other HTTP errors, and general request issues.\n    The function also checks for a large number of open issues in the repository\n    and prints a warning if they exceed a certain threshold.\n\n    Args:\n        repo_url (str): The URL of the GitHub repository.\n\n    Returns:\n        dict: A dictionary containing information about the GitHub repository.\n\n    Raises:\n        requests.exceptions.HTTPError: If an HTTP error occurs, particularly when the\n            GitHub API rate limit is exceeded.\n        requests.exceptions.RequestException: For other general issues encountered\n            during the API request, such as network problems, invalid responses,\n            or timeouts.\n    \"\"\"\n    # Set the GitHub API endpoint\n    api_endpoint = \"https://api.github.com/repos/\"\n\n    # Set the maximum number of open issues to trigger a warning\n    max_issues = 100\n\n    # Set the logging level\n    logging.basicConfig(level=logging.INFO)\n\n    # Make the API request\n    try:\n        response = requests.get(api_endpoint + repo_url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as err:\n        logging.error(f\"HTTP error occurred: {err}\")\n        raise\n    except requests.exceptions.RequestException as err:\n        logging.error(f\"Error occurred: {err}\")\n        raise\n\n    # Check for a large number of open issues\n    issues = response.json()[\"open_issues_count\"]\n    if issues > max_issues:\n        logging.warning(f\"Large number of open issues: {issues}\")\n\n    # Return the repository information\n    return response.json()\nrepo_url = \"https://github.com/python/cpython\"", "problem": "Fetches and returns information about a GitHub repository using its API URL. The function makes an HTTP GET request to the provided repository URL. It incorporates error handling for various scenarios including API rate limits, other HTTP errors, and general request issues. The function also checks for a large number of open issues in the repository and prints a warning if they exceed a certain threshold.\nThe function should raise the exception for: requests.exceptions.HTTPError: If an HTTP error occurs, particularly when the GitHub API rate limit is exceeded. requests.exceptions.RequestException: For other general issues encountered during the API request, such as network problems, invalid responses, or timeouts.\nThe function should output with:\n    dict: A dictionary containing information about the GitHub repository.\nYou should write self-contained code starting with:\n```\nimport requests\nimport logging\ndef task_func(repo_url: str) -> dict:\n```", "solution": "import requests\nimport logging\ndef task_func(repo_url: str) -> dict:\n    try:\n        response = requests.get(repo_url, timeout=2)\n        response.raise_for_status()  # Raises HTTPError for bad requests\n        repo_info = response.json()\n        if (\n            response.status_code == 403\n            and repo_info.get(\"message\") == \"API rate limit exceeded\"\n        ):\n            raise requests.exceptions.HTTPError(\"API rate limit exceeded\")\n\n        if repo_info.get(\"open_issues_count\", 0) > 10000:\n            logging.warning(\"The repository has more than 10000 open issues.\")\n\n        return repo_info\n\n    except requests.exceptions.RequestException as e:\n        raise requests.exceptions.RequestException(\n            f\"Error fetching repo info: {e}\"\n        ) from e", "pass": false}
{"task_id": "1068", "program": "import warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n\n    pass\nimport warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n    \"\"\"\n    Fetches data from an SQLite database using the provided database path and SQL query.\n    This function will issue a warning of \"The data contains more than 10000 rows.\" when this condition is met.\n    The function should raise the exception for:\n        Exception: If any error occurs during database connection, SQL query execution, or data fetching.\n        The error message provides details about the issue, starting with \"Error fetching data from the database: \".\n    The function should output with:\n        pandas.DataFrame: A DataFrame containing the data fetched from the database.\n    \"\"\"\n    # Connect to the database\n    try:\n        conn = sqlite3.connect(db_path)\n    except sqlite3.Error as e:\n        raise Exception(f\"Error fetching data from the database: {e}\")\n    \n    # Execute the SQL query\n    try:\n        cursor = conn.cursor()\n        cursor.execute(query)\n    except sqlite3.Error as e:\n        raise Exception(f\"Error executing SQL query: {e}\")\n    \n    # Fetch the data\n    try:\n        data = cursor.fetchall()\n    except sqlite3.Error as e:\n        raise Exception(f\"Error fetching data from the database: {e}\")\n    \n    # Close the database connection\n    conn.close()\n    \n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if the dataset is large and issue a warning if necessary\n    if warn_large_dataset and len(df) > 10000:\n        warnings.warn(\"The data contains more than 10000 rows.\")\n    \n    return df", "problem": "Fetches data from an SQLite database using the provided database path and SQL query. This function will issue a warning of \"The data contains more than 10000 rows.\" when this condition is met.\nThe function should raise the exception for: Exception: If any error occurs during database connection, SQL query execution, or data fetching. The error message provides details about the issue, starting with \"Error fetching data from the database: \".\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the data fetched from the database.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n```", "solution": "import warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n    if warn_large_dataset:\n        warnings.simplefilter(\"always\")\n\n    try:\n        with sqlite3.connect(db_path) as conn:\n            data = pd.read_sql_query(query, conn)\n\n        if warn_large_dataset and data.shape[0] > 10000:\n            warnings.warn(\"The data contains more than 10000 rows.\")\n\n        return data\n\n    except Exception as e:\n        raise Exception(f\"Error fetching data from the database: {str(e)}\") from e", "pass": false}
{"task_id": "1069", "program": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n\n    pass\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    \"\"\"\n    Generates histograms for each column in the given DataFrame and checks if the value distributions are uniform.\n    It prints a message for each non-uniform distribution.\n\n    Args:\n        data_dict (dict): A dictionary containing the data to be analyzed.\n\n    Returns:\n        List[plt.Axes]: A list of matplotlib Axes objects, each representing the histogram for a column.\n    \"\"\"\n    # Create a DataFrame from the data dictionary\n    df = pd.DataFrame(data_dict)\n\n    # Create a list to store the histograms\n    histograms = []\n\n    # Iterate over each column in the DataFrame\n    for col in df.columns:\n        # Generate a histogram for the column\n        hist, bins = np.histogram(df[col], bins=20)\n\n        # Check if the distribution is uniform\n        if not is_uniform(hist):\n            # Print a message for the non-uniform distribution\n            print(f\"Column {col} has a non-uniform distribution.\")\n\n        # Add the histogram to the list\n        histograms.append(plt.bar(bins[:-1], hist, width=0.8, align=\"center\"))\n\n    # Return the list of histograms\n    return histograms\ndef is_uniform(hist):\n    \"\"\"\n    Checks if the distribution is uniform.\n\n    Args:\n        hist (list): A list containing the histogram values.\n\n    Returns:\n        bool: True if the distribution is uniform, False otherwise.\n    \"\"\"\n    # Calculate the maximum and minimum values in the histogram\n    max_val = max(hist)\n    min_val = min(hist)\n\n    # Calculate the range of the histogram\n    range_val = max_val - min_val\n\n    # Check if the range is less than 1% of the maximum value\n    if range_val < 0.01 * max_val:\n        return True\n    else:\n        return False", "problem": "Generates histograms for each column in the given DataFrame and checks if the value distributions are uniform. It prints a message for each non-uniform distribution.\nThe function should output with:\n    List[plt.Axes]: A list of matplotlib Axes objects, each representing the histogram for a column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict)\n    axes_list = []\n    for column in df.columns:\n        counts = df[column].value_counts()\n        uniform = (\n            len(set(counts)) == 1\n        )  # Check if all counts are the same (uniform distribution)\n\n        if not uniform:\n            print(f\"The distribution of values in column '{column}' is not uniform.\")\n\n        ax = counts.plot(kind=\"bar\")\n        ax.set_title(column)\n        axes_list.append(ax)\n        plt.close()\n\n    return axes_list", "pass": false}
{"task_id": "1070", "program": "import pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n\n    pass\nimport pandas as pd\nfrom random import shuffle\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n    \"\"\"\n    Generate a list of pandas DataFrames, each created from a sublist in 'list_of_lists'.\n    Each DataFrame has columns named as per the elements of the sublist, and each column is filled with randomly shuffled values from 'POSSIBLE_VALUES'.\n    Note that:\n        - The length of each DataFrame's columns is equal to the length of 'POSSIBLE_VALUES'.\n        - Each column in the DataFrame has the same shuffled order of 'POSSIBLE_VALUES'.\n    The function should output with:\n        - list of pandas.DataFrame: A list where each element is a DataFrame with columns as specified\n          in 'list_of_lists', and each column contains shuffled values from 'POSSIBLE_VALUES'.\n    \"\"\"\n    # Initialize an empty list to store the DataFrames\n    dataframes = []\n\n    # Iterate over the sublists in 'list_of_lists'\n    for sublist in list_of_lists:\n        # Create an empty dictionary to store the column names and values\n        columns = {}\n\n        # Iterate over the elements in the sublist\n        for element in sublist:\n            # Create a list of shuffled values from 'POSSIBLE_VALUES'\n            shuffled_values = shuffle(POSSIBLE_VALUES)\n\n            # Add the column name and shuffled values to the dictionary\n            columns[element] = shuffled_values\n\n        # Create a DataFrame from the dictionary\n        dataframe = pd.DataFrame(columns)\n\n        # Add the DataFrame to the list of DataFrames\n        dataframes.append(dataframe)\n\n    # Return the list of DataFrames\n    return dataframes\nlist_of_lists = [[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"], [\"G\", \"H\", \"I\"]]", "problem": "Generate a list of pandas DataFrames, each created from a sublist in 'list_of_lists'. Each DataFrame has columns named as per the elements of the sublist, and each column is filled with randomly shuffled values from 'POSSIBLE_VALUES'.\nNote that: The length of each DataFrame's columns is equal to the length of 'POSSIBLE_VALUES'. Each column in the DataFrame has the same shuffled order of 'POSSIBLE_VALUES'.\nThe function should output with:\n    list of pandas.DataFrame: A list where each element is a DataFrame with columns as specified\n    in 'list_of_lists', and each column contains shuffled values from 'POSSIBLE_VALUES'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n```", "solution": "import pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n    dataframes = []\n\n    for list_ in list_of_lists:\n        df_dict = {col: POSSIBLE_VALUES.copy() for col in list_}\n        for col in df_dict:\n            shuffle(df_dict[col])\n        df = pd.DataFrame(df_dict)\n        dataframes.append(df)\n\n    return dataframes", "pass": false}
{"task_id": "1071", "program": "import matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n\n    pass\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n    \"\"\"\n    Plots a series of lines for each list in `list_of_lists`. Each line is plotted with shuffled y-values and sequential x-values starting from 1. The function shuffles the y-values of each inner list before plotting. Each line is plotted with a different color from a predetermined set of colors. The function cycles through these colors for each inner list.\n    Note that: If an inner list is empty, it will be skipped and no line will be plotted for it. The colors are reused cyclically if there are more inner lists than colors available. The shuffling of y-values is random and different each time the function is called, unless a random seed is set externally. The function uses a default set of colors defined in the COLORS constant.\n    The function should output with:\n        tuple: A tuple containing the figure and axes objects of the plotted graph.\n    \"\"\"\n    # Initialize the figure and axes objects\n    fig, ax = plt.subplots()\n\n    # Create a cycle of colors\n    color_cycle = cycle(COLORS)\n\n    # Iterate over the lists in the list of lists\n    for i, lst in enumerate(list_of_lists):\n        # Skip empty lists\n        if not lst:\n            continue\n\n        # Shuffle the y-values of the inner list\n        shuffle(lst)\n\n        # Get the next color from the color cycle\n        color = next(color_cycle)\n\n        # Plot the line with the shuffled y-values and sequential x-values\n        ax.plot(np.arange(1, len(lst) + 1), lst, color=color)\n\n    # Return the figure and axes objects\n    return fig, ax", "problem": "Plots a series of lines for each list in `list_of_lists`. Each line is plotted with shuffled y-values and sequential x-values starting from 1. The function shuffles the y-values of each inner list before plotting. Each line is plotted with a different color from a predetermined set of colors. The function cycles through these colors for each inner list.\nNote that: If an inner list is empty, it will be skipped and no line will be plotted for it. The colors are reused cyclically if there are more inner lists than colors available. The shuffling of y-values is random and different each time the function is called, unless a random seed is set externally. The function uses a default set of colors defined in the COLORS constant.\nThe function should output with:\n    tuple: A tuple containing the figure and axes objects of the plotted graph.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n```", "solution": "import matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n    fig, ax = plt.subplots()\n    color_cycle = cycle(COLORS)\n\n    for list_ in list_of_lists:\n        y_values = np.arange(1, len(list_) + 1)\n        shuffle(y_values)\n        ax.plot(y_values, next(color_cycle))\n\n    return fig, ax", "pass": false}
{"task_id": "1072", "program": "import pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n\n    pass\nimport pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n    series_list = []\n    for sub_list in list_of_lists:\n        series = pd.Series(np.arange(1, len(sub_list) + 1))\n        np.random.shuffle(series)\n        series_list.append(series)\n    return series_list\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "problem": "Generate a list of pandas Series objects, where each Series is indexed by the elements of a sub-list from `list_of_lists`. Each Series contains unique integers starting from 1 and going up to the length of the respective sub-list. These integers are shuffled randomly to create a unique ordering for each Series.\nNote that: The function uses numpy's random shuffle, which modifies the sequence in-place. Therefore, each call to the function may produce different Series values unless the random seed is set beforehand.\nThe function should output with:\n    series_list (list of pandas.Series): This function returns a list. Each element in this list is a pandas Series object.\n    The Series objects are indexed by the elements of the sub-lists provided in `list_of_lists`. The values in each Series\n    are unique integers that are randomly shuffled.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n```", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n    series_list = []\n    for sublist in list_of_lists:\n        values = np.arange(1, len(sublist) + 1)\n        np.random.shuffle(values)\n        s = pd.Series(values, index=sublist)\n        series_list.append(s)\n\n    return series_list", "pass": false}
{"task_id": "1073", "program": "import time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n\n    pass\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n    \"\"\"\n    Parses a list of time strings and plots a histogram of the seconds component.\n    The function should raise the exception for: ValueError: If any time string in 'time_strings' cannot be parsed according to 'time_format'.\n    The function should output with:\n        ax (matplotlib.axes._axes.Axes or None): An Axes object with the histogram plotted if\n        parsing is successful. Returns None if a parsing error occurs.\n    \"\"\"\n    # Initialize the list of seconds\n    seconds = []\n\n    # Iterate over the time strings\n    for time_string in time_strings:\n        # Try to parse the time string\n        try:\n            # Parse the time string using the specified format\n            time_struct = time.strptime(time_string, time_format)\n            # Extract the seconds component\n            seconds.append(time_struct.tm_sec)\n        except ValueError:\n            # If the time string cannot be parsed, raise a ValueError\n            raise ValueError(\"Invalid time string: {}\".format(time_string))\n\n    # Plot the histogram of the seconds\n    ax = plt.hist(seconds, bins=10)\n\n    # Return the Axes object\n    return ax\ntime_strings = [\"12/01/2023 13:45:30.123\", \"12/01/2023 13:45:31.456\", \"12/01/2023 13:45:32.789\"]", "problem": "Parses a list of time strings and plots a histogram of the seconds component.\nThe function should raise the exception for: ValueError: If any time string in 'time_strings' cannot be parsed according to 'time_format'.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes or None): An Axes object with the histogram plotted if\n    parsing is successful. Returns None if a parsing error occurs.\nYou should write self-contained code starting with:\n```\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n```", "solution": "import time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n    try:\n        seconds = [time.strptime(ts, time_format).tm_sec for ts in time_strings]\n        _, ax = plt.subplots()\n        ax.hist(seconds, bins=60, rwidth=0.8)\n        return ax\n    except ValueError as e:\n        print(f\"Error parsing time strings: {e}\")\n        return None", "pass": false}
{"task_id": "1074", "program": "import pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n\n    pass\nimport pytz\nfrom dateutil.parser import parse\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n    \"\"\"\n    Converts a time string from one timezone to another, considering various cases such as daylight saving time.\n    The function should output with:\n        str: The converted time string in the format 'dd/mm/yy HH:MM:SS.fff'. The conversion takes into account any differences in daylight saving rules between the source and target timezones.\n    \"\"\"\n    # Parse the time string\n    time = parse(time_string)\n\n    # Convert the time to the source timezone\n    time = time.astimezone(pytz.timezone(from_tz))\n\n    # Convert the time to the target timezone\n    time = time.astimezone(pytz.timezone(to_tz))\n\n    # Format the time string\n    time_string = time.strftime(TIME_FORMAT)\n\n    return time_string", "problem": "Converts a time string from one timezone to another, considering various cases such as daylight saving time.\nNote that: The example assumes no daylight saving time shift between the given timezones at the specified date and time.\nThe function should output with:\n    str: The converted time string in the format 'dd/mm/yy HH:MM:SS.fff'. The conversion takes into account any differences in daylight saving rules between the source and target timezones.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n```", "solution": "import pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n    from_zone = pytz.timezone(from_tz)\n    to_zone = pytz.timezone(to_tz)\n    dt = parse(time_string, dayfirst=True)\n    dt = from_zone.localize(dt)\n    dt = dt.astimezone(to_zone)\n\n    return dt.strftime(TIME_FORMAT)", "pass": false}
{"task_id": "1075", "program": "import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n\n    pass\nimport datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n    \"\"\"\n    Compute the differences in seconds with integer values between consecutive datetime strings and plot these differences as a bar chart.\n    :param time_strings: A list of datetime strings in the format \"%d/%m/%y %H:%M:%S.%f\".\n    :return: matplotlib.axes.Axes: The axes object of the plotted bar chart.\n    \"\"\"\n    # Convert the time strings to datetime objects\n    time_objects = [datetime.datetime.strptime(time_string, TIME_FORMAT) for time_string in time_strings]\n\n    # Calculate the time differences between each pair of consecutive datetime objects\n    time_differences = [time_objects[i] - time_objects[i-1] for i in range(1, len(time_objects))]\n\n    # Convert the time differences to integer values in seconds\n    time_differences_seconds = [int(time_difference.total_seconds()) for time_difference in time_differences]\n\n    # Plot the time differences as a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(time_differences_seconds)), time_differences_seconds)\n    ax.set_xticks(range(len(time_differences_seconds)))\n    ax.set_xticklabels(time_strings[1:], rotation=45)\n    ax.set_ylabel(\"Time difference (seconds)\")\n    ax.set_title(\"Time differences between consecutive datetime strings\")\n\n    return ax\ntime_strings = [\"01/01/20 00:00:00.000\", \"01/01/20 00:00:01.000\", \"01/01/20 00:00:02.000\", \"01/01/20 00:00:03.000\"]", "problem": "Compute the differences in seconds with integer values between consecutive datetime strings and plot these differences as a bar chart.\nNote that: The function requires the datetime, numpy, and matplotlib.pyplot modules. The datetime strings in the input list should follow the specific format specified in TIME_FORMAT. The function calculates the time differences between each pair of consecutive datetime strings in the list.\nThe function should output with:\n    matplotlib.axes.Axes: The axes object of the plotted bar chart. This object allows further customization of the plot outside this function.\nYou should write self-contained code starting with:\n```\nimport datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n```", "solution": "import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n    # Calculate time differences\n    differences = (\n        np.diff([datetime.datetime.strptime(t, TIME_FORMAT) for t in time_strings])\n        .astype(\"timedelta64[s]\")\n        .astype(int)\n    )\n\n    # Plotting the bar chart\n    _ = plt.bar(range(len(differences)), differences)\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Time Difference (seconds)\")\n    plt.title(\"Time Differences Between Consecutive Timestamps\")\n    return plt.gca()", "pass": true}
{"task_id": "1076", "program": "from datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n\n    pass\nfrom datetime import datetime\nimport pandas as pd\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n    \"\"\"\n    Convert a list of time strings from UTC to a specified timezone and return a DataFrame.\n    The function processes each UTC time string in the given list, converts it to the specified timezone, and stores the results in a DataFrame.\n    Note that: The function assumes that the input times are in UTC.\n    The function should output with:\n        pandas.DataFrame: A DataFrame with two columns: 'Original Time'\n        containing the UTC times and 'Converted Time' containing the times converted to the target timezone.\n    \"\"\"\n    # Convert the time strings to datetime objects\n    utc_times = [datetime.strptime(time_string, TIME_FORMAT) for time_string in time_strings]\n\n    # Convert the datetime objects to the target timezone\n    target_tz = ZoneInfo(target_tz)\n    converted_times = [utc_time.astimezone(target_tz) for utc_time in utc_times]\n\n    # Create a DataFrame with the original and converted times\n    df = pd.DataFrame({\"Original Time\": utc_times, \"Converted Time\": converted_times})\n\n    return df\ntime_strings = [\"10/01/21 12:00:00.000\", \"10/01/21 13:00:00.000\", \"10/01/21 14:00:00.000\"]\ntarget_tz = \"America/New_York\"", "problem": "Convert a list of time strings from UTC to a specified timezone and return a DataFrame. The function processes each UTC time string in the given list, converts it to the specified timezone, and stores the results in a DataFrame.\nNote that: The function assumes that the input times are in UTC.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Original Time'\n    containing the UTC times and 'Converted Time' containing the times converted to the target timezone.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n```", "solution": "from datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n    data = []\n\n    for time_string in time_strings:\n        utc_time = datetime.strptime(time_string, TIME_FORMAT)\n        converted_time = utc_time.replace(tzinfo=ZoneInfo(\"UTC\")).astimezone(\n            ZoneInfo(target_tz)\n        )\n        data.append([time_string, converted_time.strftime(TIME_FORMAT)])\n\n    df = pd.DataFrame(data, columns=[\"Original Time\", \"Converted Time\"])\n    return df", "pass": false}
{"task_id": "1077", "program": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n\n    pass\nfrom datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates the average time difference in seconds between each consecutive pair of timestamps in a given list, after converting them to a specified timezone.\n\n    Args:\n        time_strings (list): A list of timestamps in the format \"YYYY-MM-DD HH:MM:SS\".\n        timezone (str): A timezone in the format \"UTC+/-HH:MM\".\n\n    Returns:\n        float: The mean (average) time difference in seconds between each consecutive pair of timestamps.\n    \"\"\"\n    # Convert each timestamp to the specified timezone\n    time_list = [datetime.strptime(time_string, \"%Y-%m-%d %H:%M:%S\").astimezone(pytz.timezone(timezone)) for time_string in time_strings]\n\n    # Calculate the absolute time difference in seconds between each consecutive pair of timestamps\n    time_diffs = [abs(time_list[i] - time_list[i-1]).total_seconds() for i in range(1, len(time_list))]\n\n    # If there are less than two timestamps, return 0.0\n    if len(time_diffs) < 2:\n        return 0.0\n\n    # Calculate the average time difference\n    return np.mean(time_diffs)\ntime_strings = [\"2022-01-01 00:00:00\", \"2022-01-01 00:01:00\", \"2022-01-01 00:02:00\"]\ntimezone = \"UTC+01:00\"", "problem": "Calculates the average time difference in seconds between each consecutive pair of timestamps in a given list, after converting them to a specified timezone.\nNote that: Notes: The function first converts each timestamp in the list to the specified timezone. It then calculates the absolute time difference in seconds between each consecutive pair of timestamps. If the list contains less than two timestamps, the function returns 0.0, as there are no pairs to compare. If there are no time differences (e.g., in case of a single timestamp after timezone conversion), it also returns 0.0. The function uses numpy's mean function to calculate the average time difference.\nThe function should output with:\n    float: The mean (average) time difference in seconds between each consecutive pair of timestamps.\n    If there are less than two timestamps in the list, the function returns 0.0.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n```", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n\n    time_zone = pytz.timezone(timezone)\n    parsed_times = [\n        datetime.strptime(ts, \"%d/%m/%y %H:%M:%S.%f\")\n        .replace(tzinfo=pytz.UTC)\n        .astimezone(time_zone)\n        for ts in time_strings\n    ]\n\n    differences = [\n        abs((t2 - t1).total_seconds()) for t1, t2 in zip(parsed_times, parsed_times[1:])\n    ]\n\n    return np.mean(differences) if differences else 0.0", "pass": false}
{"task_id": "1078", "program": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Analyzes the distribution of values in a NumPy array to determine if it is uniform and generates a histogram representing this distribution.\n    Note that: The bin is set to `np.arange(len(unique) + 1) - 0.5` to align each bin with its corresponding unique value.\n    The function should output with:\n        tuple: A tuple containing two elements:\n        uniform_distribution (bool): A boolean value indicating whether the distribution is uniform.\n        Returns True if every unique value in the array appears the same number of times,\n        indicating a uniform distribution.\n        Returns False otherwise.\n        ax (matplotlib.axes.Axes): An Axes object displaying the histogram of the array's value distribution.\n        The histogram's bins correspond to the unique values in the array.\n        The frequency of each unique value is represented by the height of the corresponding bin.\n    \"\"\"\n    unique, counts = np.unique(arr, return_counts=True)\n    uniform_distribution = np.all(counts == counts[0])\n    ax = plt.hist(arr, bins=np.arange(len(unique) + 1) - 0.5, align='mid')\n    return uniform_distribution, ax\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "problem": "Analyzes the distribution of values in a NumPy array to determine if it is uniform and generates a histogram representing this distribution.\nNote that: The bin is set to `np.arange(len(unique) + 1) - 0.5` to align each bin with its corresponding unique value.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    uniform_distribution (bool): A boolean value indicating whether the distribution is uniform.\n    Returns True if every unique value in the array appears the same number of times,\n    indicating a uniform distribution.\n    Returns False otherwise.\n    ax (matplotlib.axes.Axes): An Axes object displaying the histogram of the array's value distribution.\n    The histogram's bins correspond to the unique values in the array.\n    The frequency of each unique value is represented by the height of the corresponding bin.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    unique, counts = np.unique(arr, return_counts=True)\n    uniform_distribution = len(set(counts)) == 1\n\n    _, ax = plt.subplots()\n    ax.hist(arr, bins=np.arange(len(unique) + 1) - 0.5, rwidth=0.8, align=\"mid\")\n    ax.set_xticks(range(len(unique)))\n    ax.set_xticklabels(unique)\n\n    return uniform_distribution, ax", "pass": true}
{"task_id": "1079", "program": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert string prices to float values\n    data['Price'] = data['Price_String'].str.replace(',', '').astype(float)\n\n    # Calculate statistical measures\n    mean = data['Price'].mean()\n    median = data['Price'].median()\n    std_dev = data['Price'].std()\n\n    # Generate histogram\n    fig, ax = plt.subplots()\n    ax.hist(data['Price'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    ax.set_title('Histogram of Product Prices')\n    ax.set_xlabel('Price')\n    ax.set_ylabel('Frequency')\n\n    # Return results\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}, ax\ndata = {'Product': ['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5'],\n        'Price_String': ['$100,000', '$200,000', '$300,000', '$400,000', '$500,000']}", "problem": "Processes a dictionary containing product names and their corresponding prices in string format. The function converts these string prices (which may include commas as thousand separators) into float values. It then calculates statistical measures (mean, median, and standard deviation) of these prices and generates a histogram to visually represent the distribution of the prices.\nNote that: A histogram plot is generated using these prices, with automatic bin sizing ('auto'), a blue color, 70% opacity (alpha=0.7), and a relative width (rwidth) of 0.85 for the bars. The histogram's title is set to 'Histogram of Product Prices', and the x and y-axis are labeled 'Price' and 'Frequency', respectively. The function assumes that each product name in the 'Product' list has a corresponding price in the 'Price_String' list. The histogram plot's appearance (like color, alpha, and rwidth) is pre-set but can be customized further if needed.\nThe function should output with:\n    dict: Contains the calculated mean, median, and standard deviation (sample) of the prices.\n    The keys are 'mean', 'median', and 'std_dev'.\n    matplotlib.axes._axes.Axes: A subplot object that represents the histogram plot of the product prices.\n    The histogram displays the frequency distribution of the prices.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    df = pd.DataFrame(data)\n    # Correctly convert string prices to float, accounting for commas\n    df[\"Price_Float\"] = df[\"Price_String\"].apply(lambda x: float(x.replace(\",\", \"\")))\n\n    mean_price = np.mean(df[\"Price_Float\"])\n    median_price = np.median(df[\"Price_Float\"])\n    # Use ddof=1 for sample standard deviation\n    std_dev_price = np.std(df[\"Price_Float\"], ddof=1)\n\n    # Histogram plot settings can be refined for better visualization\n    ax = plt.hist(df[\"Price_Float\"], bins=\"auto\", color=\"blue\", alpha=0.7, rwidth=0.85)\n    plt.title(\"Histogram of Product Prices\")\n    plt.xlabel(\"Price\")\n    plt.ylabel(\"Frequency\")\n\n    return {\"mean\": mean_price, \"median\": median_price, \"std_dev\": std_dev_price}, ax", "pass": false}
{"task_id": "1080", "program": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n\n    pass\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n    # Convert the area string to a numerical value\n    area = float(area_string.replace(\",\", \"\"))\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data)\n\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Train the model using the data\n    model.fit(df[[\"Area_String\"]], df[\"Price\"])\n\n    # Use the model to make a prediction for the given area\n    predicted_price = model.predict([[area]])\n\n    # Return the predicted price\n    return predicted_price[0]", "problem": "Predicts the price based on a given area after training a linear regression model.\nThe function should output with:\n    float: The predicted price for the given area.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n```", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n    # Convert area strings to float and prepare data for the model\n    df = pd.DataFrame(data)\n    df[\"Area_Float\"] = df[\"Area_String\"].str.replace(\",\", \"\").astype(float)\n\n    # Train the linear regression model\n    X = df[[\"Area_Float\"]]\n    Y = df[\"Price\"]\n    model = LinearRegression()\n    model.fit(X, Y)\n\n    # Predict the price for the given area string\n    area_float = float(area_string.replace(\",\", \"\"))\n    prediction_data = pd.DataFrame([area_float], columns=[\"Area_Float\"])\n    price_predicted = model.predict(prediction_data)\n\n    return price_predicted[0]", "pass": false}
{"task_id": "1081", "program": "import pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n\n    pass\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n    \"\"\"\n    Converts string-formatted weights to floats and plots a scatter plot of weight against height.\n    This function takes a dictionary with two keys: 'Weight_String' and 'Height'.\n    The 'Weight_String' key should contain a list of weight values in string format, while the 'Height' key should have a list of corresponding height values in numerical format.\n    If the input dictionary is not provided, the function uses a default dataset.\n    The function then converts the string-formatted weights into float, and plots a scatter plot to visualize the relationship between weight and height.\n    The function should raise the exception for: ValueError: If any of the values in the 'Weight_String' key are not formatted as strings.\n    This validation ensures that the weight data is in the expected format for conversion to float.\n    The function should output with:\n        ax (matplotlib.axes._axes.Axes): A scatter plot with weight on the x-axis and height on the y-axis, titled \"Weight vs Height\".\n    \"\"\"\n    if data is None:\n        data = {'Weight_String': ['100 lbs', '120 lbs', '150 lbs', '180 lbs', '200 lbs'],\n                'Height': [65, 70, 75, 80, 85]}\n\n    # Convert weight values to float\n    data['Weight'] = [float(weight.split()[0]) for weight in data['Weight_String']]\n\n    # Plot weight vs height\n    ax = sns.scatterplot(x='Weight', y='Height', data=data)\n    ax.set_title('Weight vs Height')\n\n    return ax\ndata = {'Weight_String': ['100 lbs', '120 lbs', '150 lbs', '180 lbs', '200 lbs'],\n        'Height': [65, 70, 75, 80, 85]}", "problem": "Converts string-formatted weights to floats and plots a scatter plot of weight against height. This function takes a dictionary with two keys: 'Weight_String' and 'Height'. The 'Weight_String' key should contain a list of weight values in string format, while the 'Height' key should have a list of corresponding height values in numerical format. If the input dictionary is not provided, the function uses a default dataset. The function then converts the string-formatted weights into float, and plots a scatter plot to visualize the relationship between weight and height.\nThe function should raise the exception for: ValueError: If any of the values in the 'Weight_String' key are not formatted as strings. This validation ensures that the weight data is in the expected format for conversion to float.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): A scatter plot with weight on the x-axis and height on the y-axis, titled \"Weight vs Height\".\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n```", "solution": "import pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n    if data is None:\n        data = {\n            \"Weight_String\": [\"60.5\", \"65.7\", \"70.2\", \"75.9\", \"80.1\"],\n            \"Height\": [160, 165, 170, 175, 180],\n        }\n\n    df = pd.DataFrame(data)\n\n    # Validate weight values are strings\n    if not all(isinstance(weight, str) for weight in df[\"Weight_String\"]):\n        raise ValueError(\"Weights must be provided as strings.\")\n\n    # Convert string weights to floats\n    df[\"Weight_Float\"] = df[\"Weight_String\"].astype(float)\n\n    # Plotting the scatter plot\n    ax = sns.scatterplot(data=df, x=\"Weight_Float\", y=\"Height\")\n    ax.set_title(\"Weight vs Height\")\n    return ax", "pass": false}
{"task_id": "1082", "program": "import pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n    # Convert scores from string format to floats\n    data['scores'] = data['scores'].astype(float)\n\n    # Encode categorical grades into numerical values based on their rank order\n    data['grades'] = pd.Categorical(data['grades']).codes\n\n    # Compute the Pearson correlation coefficient between the numerical scores and encoded grades\n    correlation = pearsonr(data['scores'], data['grades'])[0]\n\n    # Return the correlation coefficient\n    return correlation\ndata = pd.DataFrame({'scores': ['100', '90', '80', '70', '60'], 'grades': ['A', 'B', 'C', 'D', 'F']})", "problem": "Calculates the Pearson correlation coefficient between numerical scores and categorical grades. This function performs three main tasks: 1. Converts scores from string format to floats. 2. Encodes categorical grades into numerical values based on their rank order. 3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\nThe function should output with:\n    correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n    Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "pass": false}
{"task_id": "1083", "program": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Processes a dataset containing salary information and experience, then plots normalized salary against experience.\n\n    Args:\n        data (dict): A dictionary containing the required keys ('Salary_String' and 'Experience').\n\n    Returns:\n        matplotlib.axes.Axes: An Axes instance with the plotted scatter plot.\n\n    Raises:\n        ValueError: If the input dictionary does not contain the required keys or if data conversion from string to float fails.\n    \"\"\"\n    # Input Validation\n    if 'Salary_String' not in data or 'Experience' not in data:\n        raise ValueError(\"Input data dictionary must contain 'Salary_String' and 'Experience' keys.\")\n\n    # DataFrame Conversion\n    df = pd.DataFrame(data)\n\n    # Empty Data Handling\n    if df.empty:\n        return plt.axes()\n\n    # Salary Conversion\n    try:\n        df['Salary'] = df['Salary_String'].str.replace(',', '').astype(float)\n    except ValueError:\n        raise ValueError(\"Error converting 'Salary_String' to float.\")\n\n    # Salary Normalization\n    scaler = MinMaxScaler()\n    df['Salary'] = scaler.fit_transform(df['Salary'].values.reshape(-1, 1))\n\n    # Data Plotting\n    ax = plt.scatter(df['Experience'], df['Salary'], label='Normalized Salary vs Experience')\n    ax.set_xlabel('Experience')\n    ax.set_ylabel('Normalized Salary')\n    ax.set_title('Salary vs Experience')\n    return ax", "problem": "Processes a dataset containing salary information and experience, then plots normalized salary against experience. The function executes the following steps: 1. Input Validation: Checks if the input data dictionary contains the required keys ('Salary_String' and 'Experience'). Raises a ValueError if the necessary keys are missing. 2. DataFrame Conversion: Converts the input data into a pandas DataFrame for easier manipulation. 3. Empty Data Handling: Checks if the DataFrame is empty. If so, it returns a default Axes instance with labeled axes but no data plotted. This handles cases where there is no data to plot. 4. Salary Conversion: Converts 'Salary_String' values from comma-separated strings to floats. It handles potential conversion errors by catching ValueErrors and re-raising them with a custom message. 5. Salary Normalization: Applies Min-Max scaling to normalize the salary values. This step transforms the salary data into a range between 0 and 1, allowing for easier comparison and visualization. 6. Data Plotting: Creates a scatter plot of the normalized salary against experience using matplotlib. The plot's axes are labeled accordingly.\nThe function should raise the exception for: ValueError: If the input dictionary does not contain the required keys or if data conversion from string to float fails.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes instance with the plotted scatter plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Validate input data\n    if not all(key in data for key in [\"Salary_String\", \"Experience\"]):\n        raise ValueError(\n            \"Input data must contain 'Salary_String' and 'Experience' keys.\"\n        )\n\n    # Convert data to DataFrame\n    df = pd.DataFrame(data)\n\n    # Check if the data is empty\n    if df.empty:\n        # Handle empty data case (e.g., return a default Axes instance or raise an error)\n        _, ax = plt.subplots()\n        ax.set_title(\"Normalized Salary vs Experience\")\n        ax.set_xlabel(\"Experience\")\n        ax.set_ylabel(\"Normalized Salary\")\n        return ax\n\n    # Convert Salary_String to float and handle potential conversion errors\n    try:\n        df[\"Salary_Float\"] = df[\"Salary_String\"].str.replace(\",\", \"\").astype(float)\n    except ValueError:\n        raise ValueError(\"Error converting Salary_String to float.\")\n\n    # Normalize the Salary_Float values\n    scaler = MinMaxScaler()\n    df[\"Normalized_Salary\"] = scaler.fit_transform(df[[\"Salary_Float\"]])\n\n    # Plot the data\n    _, ax = plt.subplots()\n    ax.scatter(df[\"Experience\"], df[\"Normalized_Salary\"])\n    ax.set_title(\"Normalized Salary vs Experience\")\n    ax.set_xlabel(\"Experience\")\n    ax.set_ylabel(\"Normalized Salary\")\n\n    return ax", "pass": false}
{"task_id": "1084", "program": "import pandas as pd\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n\n    pass\nimport pandas as pd\nfrom sklearn.feature_selection import f_oneway\nimport matplotlib.pyplot as plt\ndef task_func(data_file_path: str):\n    # Read the CSV file\n    data = pd.read_csv(data_file_path)\n\n    # Convert string representations of numbers with commas into floating point numbers\n    data = data.apply(lambda x: pd.to_numeric(x, errors='coerce'))\n\n    # Calculate the mean and standard deviation for each numerical column\n    means = data.mean()\n    std_devs = data.std()\n\n    # Generate a histogram plot for each numerical column\n    axes = []\n    for col in data.columns:\n        ax = plt.subplot()\n        data[col].hist(ax=ax)\n        axes.append(ax)\n\n    # Perform an ANOVA test to check the statistical significance of differences between means of numerical columns\n    anova_results = None\n    if len(data.columns) > 1:\n        anova_results = pd.DataFrame(index=data.columns, columns=['F-value', 'P-value'])\n        for i in range(len(data.columns)):\n            for j in range(i+1, len(data.columns)):\n                f_value, p_value = f_oneway(data[data.columns[i]], data[data.columns[j]])\n                anova_results.loc[data.columns[i], 'F-value'] = f_value\n                anova_results.loc[data.columns[i], 'P-value'] = p_value\n\n    return means, std_devs, axes, anova_results\ndata_file_path = 'data.csv'", "problem": "Analyzes numerical data from a CSV file. The function reads the CSV file, converts string representations of numbers with commas into floating point numbers, calculates the mean and standard deviation for each numerical column, generates a histogram plot for each numerical column, and performs an ANOVA test to check the statistical significance of differences between means of numerical columns (if applicable).\nNote that: The function assumes that all columns in the CSV file contain numerical data or string representations of numerical data. The ANOVA test is only performed if there are two or more numerical columns. Compute two columns \"F-value\" and \"P-value\" for each pair of numerical columns.\nThe function should output with:\n    means (pd.Series): Mean values of each numerical column.\n    std_devs (pd.Series): Standard deviation values of each numerical column.\n    axes (list[matplotlib.axes.Axes]): List of histogram plots for each numerical column.\n    anova_results (pd.DataFrame): ANOVA test results for each pair of numerical columns (if more than one numerical column is present).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n```", "solution": "import pandas as pd\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n    df = pd.read_csv(data_file_path)\n    # Convert strings with commas to float, if applicable\n    for col in df.columns:\n        df[col] = pd.to_numeric(df[col].replace(\",\", \"\", regex=True), errors=\"coerce\")\n    # drop columns with NaN values\n    df = df.dropna(axis=1)\n    means = df.mean()\n    std_devs = df.std()\n\n    # Creating a histogram for each numerical column\n    axes = []\n    for col in df.columns:\n        ax = df[col].hist(bins=50)\n        ax.set_title(col)\n        axes.append(ax)\n\n    plt.show()\n\n    # ANOVA Test if more than one numerical column\n    anova_results = None\n    if len(df.columns) > 1:\n        anova_results = pd.DataFrame(f_oneway(*[df[col] for col in df.columns if df[col].dtype != 'object']),\n                                     index=['F-value', 'P-value'], \n                                     columns=['ANOVA Results'])\n\n    return means, std_devs, axes, anova_results", "pass": false}
{"task_id": "1085", "program": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n\n    pass\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Lowercase the text\n    text = text.lower()\n\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the top 10 most common words\n    top_10_words = word_counts.most_common(10)\n\n    # Create a bar chart of the top 10 words\n    fig, ax = plt.subplots()\n    ax.bar(range(len(top_10_words)), [word[1] for word in top_10_words])\n    ax.set_xticks(range(len(top_10_words)))\n    ax.set_xticklabels([word[0] for word in top_10_words], rotation=90)\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    return top_10_words, ax\ntext = \"This is a sample text for testing the function. It should return the top 10 most common words and their counts.\"", "problem": "Analyzes the frequency of words in a given text after lowercasing, removing punctuation, splitting into words, and plots the top 10 most common words.\nThe function should output with:\n    list: A list of tuples containing the 10 most common words and their counts.\n    Axes: The matplotlib Axes object of the bar chart.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Process text and count words\n    cleaned_text = re.sub(f\"[{punctuation}]\", \"\", text).lower()\n    words = cleaned_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    # Plotting\n    _, ax = plt.subplots()\n    if most_common_words:  # Check if the list is not empty\n        ax.bar(*zip(*most_common_words))\n    else:  # Handle empty case\n        ax.bar([], [])\n\n    return most_common_words, ax", "pass": true}
{"task_id": "1086", "program": "import string\nimport random\nimport pandas as pd\nimport numpy as np\n# Constants\nNUM_SAMPLES = 1000  # Number of samples\ndef task_func():\n\n    pass\nimport string\nimport random\nimport pandas as pd\nimport numpy as np\nNUM_SAMPLES = 1000\ndef task_func():\n    # Generate random strings\n    random_strings = [\n        ''.join(random.choice(string.ascii_letters) for _ in range(10))\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    # Generate random floats\n    random_floats = [\n        round(random.uniform(0, 10000), 2)\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    # Create a DataFrame with the random strings and floats\n    df = pd.DataFrame({\n        'String Field': random_strings,\n        'Float Field': random_floats\n    })\n\n    return df", "problem": "Generates a DataFrame with two columns: a string field and a float field. The string field contains randomly generated strings of 10 ASCII letters. The float field contains randomly generated numbers between 0 and 10000, formatted with two decimal places and a comma as the thousands separator.\nNote that: The exact values in the dataset will vary as they are randomly generated.\nThe function should output with:\n    DataFrame: A pandas DataFrame with NUM_SAMPLES rows. Each row contains a\n    random string in the 'String Field' column and a formatted float in the\n    'Float Field' column.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\nimport pandas as pd\nimport numpy as np\n# Constants\nNUM_SAMPLES = 1000  # Number of samples\ndef task_func():\n```", "solution": "import string\nimport random\nimport pandas as pd\nimport numpy as np\n# Constants\nNUM_SAMPLES = 1000  # Number of samples\ndef task_func():\n    data = {\n        \"String Field\": [\n            \"\".join(random.choices(string.ascii_letters, k=10))\n            for _ in range(NUM_SAMPLES)\n        ],\n        \"Float Field\": [f\"{x:,.2f}\" for x in np.random.uniform(0, 10000, NUM_SAMPLES)],\n    }\n\n    df = pd.DataFrame(data)\n\n    return df", "pass": false}
{"task_id": "1087", "program": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n\n    pass\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n    \"\"\"\n    Generate a random sample from a normal distribution, analyze its skewness and kurtosis, and create a histogram and a QQ plot to visualize the distribution.\n\n    Args:\n        mean (float): The mean of the normal distribution.\n        std_dev (float): The standard deviation of the normal distribution.\n        save_plots (bool): Whether to save the plots to files.\n\n    Returns:\n        float: Skewness of the sample.\n        float: Kurtosis of the sample.\n        list: Paths to the saved plot files, empty if save_plots is False.\n    \"\"\"\n    # Generate a random sample from a normal distribution\n    sample = np.random.normal(mean, std_dev, size=1000)\n\n    # Analyze the skewness and kurtosis of the sample\n    skewness = stats.skew(sample)\n    kurtosis = stats.kurtosis(sample)\n\n    # Create a histogram and a QQ plot to visualize the distribution\n    fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n    axs[0].hist(sample, bins=50, density=True)\n    axs[0].set_title(\"Histogram of the sample\")\n    axs[1].plot(stats.norm.ppf(np.linspace(0, 1, 100)), stats.norm.ppf(np.linspace(0, 1, 100)), 'k-')\n    axs[1].scatter(sample, stats.norm.ppf(stats.norm.cdf(sample)), s=1)\n    axs[1].set_title(\"QQ plot of the sample\")\n\n    # Save the plots to files if requested\n    if save_plots:\n        fig.savefig(\"histogram.png\")\n        fig.savefig(\"qq_plot.png\")\n\n    return skewness, kurtosis, [\"histogram.png\", \"qq_plot.png\"]", "problem": "Generate a random sample from a normal distribution, analyze its skewness and kurtosis, and create a histogram and a QQ plot to visualize the distribution.\nThe function should output with:\n    float: Skewness of the sample.\n    float: Kurtosis of the sample.\n    list: Paths to the saved plot files, empty if save_plots is False.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n```", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n    sample = np.random.normal(mean, std_dev, 1000)\n    plot_paths = []\n\n    # Plotting histogram\n    plt.figure()\n    plt.hist(sample, bins=50)\n    if save_plots:\n        hist_path = \"histogram_plot.png\"\n        plt.savefig(hist_path)\n        plt.close()\n        plot_paths.append(hist_path)\n\n    # Plotting QQ diagram\n    plt.figure()\n    stats.probplot(sample, plot=plt)\n    if save_plots:\n        qq_path = \"qq_plot.png\"\n        plt.savefig(qq_path)\n        plt.close()\n        plot_paths.append(qq_path)\n\n    skewness = stats.skew(sample)\n    kurtosis = stats.kurtosis(sample)\n\n    return skewness, kurtosis, plot_paths", "pass": false}
{"task_id": "1088", "program": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n\n    pass\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n    # Convert the data to a Pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Replace values less than 0.5 with zeros\n    df[df < 0.5] = 0\n\n    # Standardize the data using StandardScaler\n    scaler = StandardScaler()\n    df_scaled = scaler.fit_transform(df)\n\n    return df_scaled\ndata = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]", "problem": "Pre-process a dataset by converting it to a Pandas DataFrame, replacing values less than 0.5 with zeros, and standardizing the data using StandardScaler.\nThe function should output with:\n    pandas.DataFrame: The preprocessed dataset. Original values less than 0.5 are replaced with zeros, and the\n    entire dataset is standardized.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n```", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n    if data is None:\n        data = np.random.rand(100, 5)\n\n    df = pd.DataFrame(data)\n    df[df < 0.5] = 0\n\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(df)\n    standardized_df = pd.DataFrame(scaled_data, columns=df.columns)\n\n    return standardized_df", "pass": false}
{"task_id": "1089", "program": "import numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n\n    pass\nimport numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n    # Initialize the sum and dictionary to store the counts\n    sum = 0\n    counts = {}\n\n    # Iterate through the list of tuples\n    for tup in list_of_tuples:\n        # Add the numeric value to the sum\n        sum += tup[0]\n\n        # If the category is not in the dictionary, add it with a count of 1\n        if tup[1] not in counts:\n            counts[tup[1]] = 1\n        # Otherwise, increment the count\n        else:\n            counts[tup[1]] += 1\n\n    # Return the sum and dictionary\n    return (sum, counts)\nlist_of_tuples = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'a'), (5, 'b'), (6, 'c')]", "problem": "Computes the sum of numeric values and counts the occurrences of categories in a list of tuples. Each tuple in the input list contains a numeric value and a category. This function calculates the sum of all the numeric values and also counts how many times each category appears in the list.\nThe function should output with:\n    tuple: A 2-element tuple where the first element is the sum of the numeric values, and the\n    second element is a dictionary with categories as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n```", "solution": "import numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n\n    numeric_values = [pair[0] for pair in list_of_tuples]\n    categories = [pair[1] for pair in list_of_tuples]\n\n    total_sum = np.sum(numeric_values)\n    category_counts = Counter(categories)\n\n    return total_sum, dict(category_counts)", "pass": true}
{"task_id": "1090", "program": "import ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n\n    pass\nimport ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n    # Read the JSON data from the file pointer\n    json_data = json.load(file_pointer)\n\n    # Initialize a Counter object to keep track of the frequency of each key\n    key_counter = Counter()\n\n    # Iterate over the list of dictionaries in the JSON data\n    for dictionary in json_data:\n        # If the dictionary is a string, evaluate it as a dictionary\n        if isinstance(dictionary, str):\n            dictionary = ast.literal_eval(dictionary)\n\n        # Iterate over the keys in the dictionary\n        for key in dictionary.keys():\n            # Increment the frequency of the key in the Counter object\n            key_counter[key] += 1\n\n    # Return the Counter object representing the frequency of each key\n    return key_counter", "problem": "Reads from a given file pointer to a JSON file, evaluates strings that represent dictionaries to actual dictionaries, and counts the frequency of each key across all dictionary entries in the JSON data.\nNote that: This function assumes the input JSON data is a list of dictionaries or strings that can be evaluated as dictionaries.\nThe function should output with:\n    collections.Counter: A Counter object representing the frequency of each key found in the dictionaries.\nYou should write self-contained code starting with:\n```\nimport ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n```", "solution": "import ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n\n    data = json.load(file_pointer)\n    key_frequency_counter = Counter()\n\n    for item in data:\n        if isinstance(item, str):\n            try:\n                item = ast.literal_eval(item)\n            except ValueError:\n                continue\n\n        if isinstance(item, dict):\n            key_frequency_counter.update(item.keys())\n\n    return key_frequency_counter", "pass": false}
{"task_id": "1091", "program": "import ast\nimport os\nimport glob\n# Constants\nDIRECTORY = 'data'\ndef task_func(directory):\n\n    pass\nimport ast\nimport os\nimport glob\ndef task_func(directory):\n    \"\"\"\n    Convert all Unicode string representations of dictionaries in all text files in the specified directory to Python dictionaries.\n    Note that: Ensure that the text files in the directory contain valid Unicode string representations of dictionaries.\n    The function should raise the exception for:\n        - The function would raise a ValueError if there are text file(s) that have invalid dictionary representation\n    The function should output with:\n        - list: A list of dictionaries extracted from the text files.\n    \"\"\"\n    # Initialize an empty list to store the extracted dictionaries\n    extracted_dictionaries = []\n\n    # Iterate over all text files in the directory\n    for file_path in glob.glob(os.path.join(directory, '*.txt')):\n        # Open the text file and read its contents\n        with open(file_path, 'r') as f:\n            file_contents = f.read()\n\n        # Try to convert the file contents to a Python dictionary\n        try:\n            extracted_dictionaries.append(ast.literal_eval(file_contents))\n        except ValueError:\n            # If the file contents cannot be converted to a dictionary, raise a ValueError\n            raise ValueError(f\"Invalid dictionary representation in file {file_path}\")\n\n    # Return the list of extracted dictionaries\n    return extracted_dictionaries", "problem": "Convert all Unicode string representations of dictionaries in all text files in the specified directory to Python dictionaries.\nNote that: Ensure that the text files in the directory contain valid Unicode string representations of dictionaries.\nThe function should raise the exception for: The function would raise a ValueError if there are text file(s) that have invalid dictionary representation\nThe function should output with:\n    list: A list of dictionaries extracted from the text files.\nYou should write self-contained code starting with:\n```\nimport ast\nimport os\nimport glob\n# Constants\nDIRECTORY = 'data'\ndef task_func(directory):\n```", "solution": "import ast\nimport os\nimport glob\n# Constants\nDIRECTORY = 'data'\ndef task_func(directory):\n    path = os.path.join(directory, '*.txt')\n    files = glob.glob(path)\n\n    results = []\n    for file in files:\n        with open(file, 'r') as f:\n            for line in f:\n                results.append(ast.literal_eval(line.strip()))\n\n    return results", "pass": false}
{"task_id": "1092", "program": "import ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n\n    pass\nimport ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n    \"\"\"\n    Fetches the content of a webpage specified by its URL, parses it to find <script> tags, and attempts to evaluate any string within these tags as a Python dictionary.\n    Note that: If an error occurs during the request or if no dictionaries are found/evaluable, an empty list is returned.\n    The function should output with:\n        list of dict: A list containing dictionaries that were successfully evaluated from string representations\n        found within <script> tags on the webpage.\n    \"\"\"\n    # Fetch the webpage content\n    response = requests.get(url)\n    if response.status_code != 200:\n        return []\n\n    # Parse the HTML content\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Find all <script> tags\n    scripts = soup.find_all('script')\n\n    # Initialize an empty list to store the dictionaries\n    dictionaries = []\n\n    # Iterate over each <script> tag\n    for script in scripts:\n        # Check if the script tag contains a string\n        if script.string:\n            # Try to evaluate the string as a Python dictionary\n            try:\n                dictionary = ast.literal_eval(script.string)\n                dictionaries.append(dictionary)\n            except (ValueError, SyntaxError):\n                pass\n\n    return dictionaries", "problem": "Fetches the content of a webpage specified by its URL, parses it to find <script> tags, and attempts to evaluate any string within these tags as a Python dictionary.\nNote that: If an error occurs during the request or if no dictionaries are found/evaluable, an empty list is returned.\nThe function should output with:\n    list of dict: A list containing dictionaries that were successfully evaluated from string representations\n    found within <script> tags on the webpage.\nYou should write self-contained code starting with:\n```\nimport ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n```", "solution": "import ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException:\n        return []\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    results = []\n    for script in soup.find_all('script'):\n        try:\n            results.append(ast.literal_eval(script.string))\n        except (ValueError, SyntaxError):\n            continue\n\n    return results", "pass": false}
{"task_id": "1093", "program": "import ast\nimport re\ndef task_func(text_file: str) -> list:\n\n    pass\nimport ast\nimport re\ndef task_func(text_file: str) -> list:\n    \"\"\"\n    Extract all string representations of dictionaries from a text file using regular expressions and convert them to Python dictionaries.\n\n    Args:\n        text_file (str): The path to the text file.\n\n    Returns:\n        list: A list of dictionaries. Each dictionary is parsed from the text file using regular expressions.\n    \"\"\"\n    with open(text_file, \"r\") as f:\n        text = f.read()\n\n    pattern = r\"\\{.*?\\}\"\n    matches = re.findall(pattern, text)\n\n    dictionaries = []\n    for match in matches:\n        dictionary = ast.literal_eval(match)\n        dictionaries.append(dictionary)\n\n    return dictionaries\ntext_file = \"another_sample.txt\"", "problem": "Extract all string representations of dictionaries from a text file using regular expressions and convert them to Python dictionaries. >>> f_1008(\"another_sample.txt\") [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}]\nThe function should output with:\n    list: A list of dictionaries. Each dictionary is parsed from the text file using regular expressions.\nYou should write self-contained code starting with:\n```\nimport ast\nimport re\ndef task_func(text_file: str) -> list:\n```", "solution": "import ast\nimport re\ndef task_func(text_file: str) -> list:\n    with open(text_file, 'r') as file:\n        text = file.read()\n\n    # Updated regex pattern to handle nested dictionaries more robustly\n    pattern = re.compile(r\"\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}|\\{[^{}]*\\}\")\n    matches = pattern.findall(text)\n\n    results = [ast.literal_eval(match) for match in matches]\n\n    return results", "pass": false}
{"task_id": "1094", "program": "from nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n\n    pass\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n    # Tokenize the text into individual words\n    tokenizer = RegexpTokenizer(r'\\w+')\n    words = tokenizer.tokenize(text)\n\n    # Filter out words that don't start with \"$\"\n    dollar_words = [word for word in words if word.startswith(\"$\")]\n\n    # Create a Counter object to count the frequency of each dollar-prefixed word\n    counter = Counter(dollar_words)\n\n    # Get the five most frequent dollar-prefixed words\n    top_five = counter.most_common(5)\n\n    # Return the top five words along with their frequencies\n    return [(word, count) for word, count in top_five]\ntext = \"This is a sample text with $dollar words and $500.00\"", "problem": "Identifies and counts words in a given text that start with the \"$\" symbol. It returns the five most frequent dollar-prefixed words along with their counts. Words solely consisting of \"$\" symbols without any following alphanumeric characters are ignored in the frequency count.\nThe function should output with:\n    list of tuples: Each tuple contains a dollar-prefixed word (excluding the \"$\" symbol) and its frequency,\n    ordered by most to least common.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n```", "solution": "from nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n\n    tokenizer = RegexpTokenizer(r'\\$\\$+\\w*|\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    normalized_words = [word.lstrip(\"$\") if len(word.lstrip(\"$\")) > 0 else word for word in dollar_prefixed_words]\n    word_counts = Counter(normalized_words)\n    return word_counts.most_common(5)", "pass": false}
{"task_id": "1095", "program": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n\n    pass\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n    # Create a tokenizer to split the text into words\n    tokenizer = RegexpTokenizer(r'\\w+')\n    # Tokenize the text\n    words = tokenizer.tokenize(text)\n    # Create a list to store the '$' prefixed words\n    dollar_words = []\n    # Iterate over the words and check if they start with '$'\n    for word in words:\n        if word.startswith('$'):\n            # Add the word to the list of '$' prefixed words\n            dollar_words.append(word)\n    # Write the '$' prefixed words to a file\n    with open(output_filename, 'w') as f:\n        for word in dollar_words:\n            f.write(word + '\\n')\n    # Return the absolute path to the output file\n    return os.path.abspath(output_filename)\ntext = \"This is a text with $special words and punctuation.\"\noutput_filename = \"output.txt\"", "problem": "Extracts words from the input text that begin with the '$' character and saves them to a specified file, excluding any words that are solely composed of punctuation characters. This function is useful for processing texts where '$' is used to denote special terms or entities and saves these terms to a file for further analysis or usage.\nThe function should output with:\n    str: The absolute path to the output file containing the '$' prefixed words.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n```", "solution": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n\n    punctuation_set = set(punctuation)\n    tokenizer = RegexpTokenizer(r'\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    valid_dollar_words = [word for word in dollar_prefixed_words if\n                          not all(char in punctuation_set for char in word[1:])]\n\n    with open(output_filename, 'w') as file:\n        for word in valid_dollar_words:\n            file.write(word + '\\n')\n\n    return os.path.abspath(output_filename)", "pass": false}
{"task_id": "1096", "program": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n\n    pass\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n    # Tokenize the text into individual words\n    tokenizer = RegexpTokenizer(r'\\w+')\n    words = tokenizer.tokenize(text)\n\n    # Filter out words that are solely composed of punctuation characters\n    words = [word for word in words if not set(word).issubset(PUNCTUATION)]\n\n    # Create a CSV file with the filtered words\n    with open(filename, 'w', newline='') as csvfile:\n        fieldnames = ['Word']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for word in words:\n            writer.writerow({'Word': word})\n\n    return os.path.abspath(filename)\ntext = \"This is a text with $dollar signs and punctuation characters like !@#$%^&*()_+-=[]{}|;':\\\"<>,./?\"\nfilename = 'output.csv'", "problem": "Save all words in a text beginning with the \"$\" character in a CSV file, excluding any words that are solely composed of punctuation characters.\nNote that: The header of the csv row is \"Word\"\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n```", "solution": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n    \n\n    punctuation_set = set(punctuation)\n    tokenizer = RegexpTokenizer(r'\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    dollar_words = [word for word in dollar_prefixed_words if\n                          not all(char in punctuation_set for char in word[1:])]\n\n    with open(filename, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow([\"Word\"])\n        for word in dollar_words:\n            writer.writerow([word])\n    return os.path.abspath(filename)", "pass": false}
{"task_id": "1097", "program": "import re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n\n    pass\nimport re\nfrom string import punctuation\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    \"\"\"\n    Clean the specified text by removing URLs, stopwords, and punctuation.\n    The function should output with:\n        str: The cleaned text with URLs, predefined stopwords, and punctuation removed.\n    \"\"\"\n    # Remove URLs\n    text = re.sub(r\"http\\S+\", \"\", text)\n\n    # Remove punctuation\n    text = text.translate(str.maketrans(\"\", \"\", punctuation))\n\n    # Remove stopwords\n    text = \" \".join([word for word in text.split() if word.lower() not in PREDEFINED_STOPWORDS])\n\n    return text\ntext = \"This is a sample text with URLs, punctuation, and stopwords. http://www.example.com/?q=hello+world! How are you?\"", "problem": "Clean the specified text by removing URLs, stopwords, and punctuation.\nThe function should output with:\n    str: The cleaned text with URLs, predefined stopwords, and punctuation removed.\nYou should write self-contained code starting with:\n```\nimport re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n```", "solution": "import re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Constants\n    PUNCTUATION = set(punctuation)\n\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n\n    # Remove punctuation\n    text = re.sub('[{}]'.format(re.escape(''.join(PUNCTUATION))), '', text)\n\n    # Tokenize the text\n    words = text.split()\n\n    # Remove stopwords\n    cleaned_words = [word for word in words if word.lower() not in PREDEFINED_STOPWORDS]\n\n    return ' '.join(cleaned_words)", "pass": true}
{"task_id": "1098", "program": "import re\nfrom collections import Counter\ndef task_func(text, top_n):\n\n    pass\nimport re\nfrom collections import Counter\ndef task_func(text, top_n):\n    # Remove URLs\n    text = re.sub(r\"http\\S+\", \"\", text)\n    # Split text into individual words\n    words = text.split()\n    # Count word frequencies\n    word_counts = Counter(words)\n    # Get the top N most common words\n    top_words = word_counts.most_common(top_n)\n    return top_words\ntext = \"This is a sample text with URLs like http://www.example.com and https://www.example.org\"\ntop_n = 3", "problem": "Count the N most common words in a text after removing URLs.\nNote that: Valid url is start with http or https\nThe function should output with:\n    list: A list of tuples where each tuple contains a word and its frequency.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\ndef task_func(text, top_n):\n```", "solution": "import re\nfrom collections import Counter\ndef task_func(text, top_n):\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n\n    # Tokenize the text using regex (improved tokenization)\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the frequency of each word\n    word_freq = Counter(words)\n\n    return word_freq.most_common(top_n)", "pass": false}
{"task_id": "1099", "program": "import re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n\n    pass\nimport re\nfrom collections import Counter\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Remove URLs from the text\n    text = re.sub(r\"http\\S+\", \"\", text)\n    # Convert the text to lowercase\n    text = text.lower()\n    # Split the text into individual words\n    words = text.split()\n    # Remove stopwords from the list of words\n    words = [word for word in words if word.lower() not in PREDEFINED_STOPWORDS]\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    # Return a list of tuples containing each word and its frequency\n    return [(word, count) for word, count in word_counts.items()]\ntext = \"This is a sample text with URLs: http://www.example.com and http://www.example.org\"", "problem": "Count the stopwords found in the text after you have removed URLs.\nNote that: Valid url is start with http or https The capitilization need to macth the stopwords\nThe function should output with:\n    list: A list of tuples where each tuple contains a word and its frequency.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n```", "solution": "import re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n    # Tokenize the text using regex (improved tokenization)\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Count the frequency of each word\n    word_freq = Counter(words)\n    result = Counter(words)\n    for i in word_freq:\n        if i not in PREDEFINED_STOPWORDS:\n            del result[i]\n    return list(result.items())", "pass": false}
{"task_id": "1100", "program": "import re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n\n    pass\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n    # Remove URLs from the text documents\n    texts = [re.sub(r\"http\\S+\", \"\", text) for text in texts]\n\n    # Create a TfidfVectorizer object\n    vectorizer = TfidfVectorizer()\n\n    # Fit the vectorizer to the text documents\n    vectorizer.fit(texts)\n\n    # Transform the text documents into a matrix of TF-IDF scores\n    X = vectorizer.transform(texts)\n\n    # Get the unique words across all documents\n    features = vectorizer.get_feature_names()\n\n    # Round the TF-IDF scores to 8 decimal places\n    X = X.round(8)\n\n    # Return the TF-IDF scores for each document and the unique words\n    return (X.toarray(), features)", "problem": "Processes a collection of text documents to compute the TF-IDF (Term Frequency-Inverse Document Frequency) scores for each word, excluding any URLs present in the texts. The TF-IDF scores help to identify the importance of a word within a document relative to a collection of documents.\nNote that: Notes: URLs in the text documents are removed before calculating TF-IDF scores to ensure they do not affect the analysis. The TF-IDF scores are rounded to 8 decimal places for precision.\nThe function should output with:\n    tuple of (list of tuples, list of str):\n    The first element is a list of tuples, each tuple representing a document with its words' TF-IDF scores in a\n    dense matrix format. Each score in the tuple corresponds to a word's TF-IDF score in the document.\n    The second element is a list of strings, representing the unique words (features) across all documents for\n    which TF-IDF scores have been calculated. The order of words in this list matches the order of scores in the\n    tuples of the first element.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n```", "solution": "import re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n\n    # Handle empty input\n    if all(text.strip() == \"\" for text in texts):\n        return [], []\n\n    # Remove URLs\n    cleaned_texts = [re.sub('http[s]?://\\S+', '', text) for text in texts]\n\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(cleaned_texts)\n\n    # Convert the sparse matrix to a dense format, round the values, convert to tuples and return along with feature names\n    dense_matrix = [tuple(round(val, 8) for val in row) for row in tfidf_matrix.toarray().tolist()]\n    return dense_matrix, list(vectorizer.get_feature_names_out())", "pass": false}
{"task_id": "1101", "program": "import subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n\n    pass\nimport subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n    The function should output with:\n        dict: A dictionary with the script names as keys and their execution times as values.\n    \"\"\"\n    # Get a list of all Python files in the directory\n    python_files = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    # Create an empty dictionary to store the execution times\n    execution_times = {}\n\n    # Loop through each Python file and run it\n    for python_file in python_files:\n        # Get the script name\n        script_name = os.path.basename(python_file)\n\n        # Run the script and time it\n        start_time = time.time()\n        subprocess.run([\"python\", python_file])\n        end_time = time.time()\n\n        # Calculate the execution time\n        execution_time = end_time - start_time\n\n        # Add the execution time to the dictionary\n        execution_times[script_name] = execution_time\n\n    return execution_times", "problem": "Run all Python codes in a specific directory and return their execution times.\nThe function should output with:\n    dict: A dictionary with the script names as keys and their execution times as values.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n```", "solution": "import subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n\n    return execution_times", "pass": true}
{"task_id": "1102", "program": "import subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n\n    pass\nimport subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n    \"\"\"\n    Run an R script and return the start time, end time, decoded stdout, and decoded stderr as a dictionary.\n    The function should output with:\n        dict: A dictionary containing the start time, end time, stdout, and stderr of the script run.\n    \"\"\"\n    start_time = datetime.now()\n    process = subprocess.Popen(shlex.split(script_path), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    end_time = datetime.now()\n    return {\n        \"start_time\": start_time,\n        \"end_time\": end_time,\n        \"stdout\": stdout.decode(\"utf-8\"),\n        \"stderr\": stderr.decode(\"utf-8\")\n    }", "problem": "Run an R script and return the start time, end time, decoded stdout, and decoded stderr as a dictionary.\nThe function should output with:\n    dict: A dictionary containing the start time, end time, stdout, and stderr of the script run.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n```", "solution": "import subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n    start_time = datetime.now()\n    process = subprocess.Popen(shlex.split(f\"/usr/bin/Rscript --vanilla {script_path}\"),\n                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    end_time = datetime.now()\n\n    log_details = {\n        'Start Time': str(start_time),\n        'End Time': str(end_time),\n        'Stdout': stdout.decode('utf-8'),\n        'Stderr': stderr.decode('utf-8')\n    }\n    \n    return log_details", "pass": false}
{"task_id": "1103", "program": "import subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n\n    pass\nimport subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n    \"\"\"\n    Execute a given Python code in a temporary directory.\n    Note that: If the Python code can be run successfully return \"Script executed successfully!\", otherwise \"Script execution failed!\"\n    The function should output with:\n        str: String indicating the success or failure of the script execution.\n    \"\"\"\n    # Create a temporary directory\n    temp_dir = os.path.join(temp_dir, \"temp\")\n    os.makedirs(temp_dir, exist_ok=True)\n\n    # Copy the script to the temporary directory\n    script_path = os.path.join(temp_dir, os.path.basename(script_path))\n    shutil.copy(script_path, temp_dir)\n\n    # Execute the script in the temporary directory\n    try:\n        subprocess.run([\"python\", script_path], cwd=temp_dir, check=True)\n    except subprocess.CalledProcessError:\n        return \"Script execution failed!\"\n\n    # Remove the temporary directory\n    shutil.rmtree(temp_dir)\n\n    return \"Script executed successfully!\"", "problem": "Execute a given Python code in a temporary directory.\nNote that: If the Python code can be run successfully return \"Script executed successfully!\", otherwise \"Script execution failed!\"\nThe function should output with:\n    str: String indicating the success or failure of the script execution.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n```", "solution": "import subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n    try:\n        shutil.copy(script_path, temp_dir)\n        temp_script_path = os.path.join(temp_dir, os.path.basename(script_path))\n        result = subprocess.call([\"python\", temp_script_path])\n        print(result)\n        if result == 0:\n            return \"Script executed successfully!\"\n        else:\n            return \"Script execution failed!\"\n    except Exception as e:\n        return \"Script execution failed!\"", "pass": false}
{"task_id": "1104", "program": "import subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n\n    pass\nimport subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n    \"\"\"\n    Execute a specified python code with a given timeout. If the script execution exceeds the timeout, it is terminated.\n    >>> task_func('/pathto/LongRunningScript.py', 30)\n    'Terminating process due to timeout.'\n    Raise:\n    - The code will raise FileNotFoundError if the file is not exist.\n    Note that: If the script was terminated due to timeout it will return \"Script executed successfully.\", otherwise \"Terminating process due to timeout.\"\n    The function should output with:\n        str: A message indicating if the code was terminated due to timeout or executed successfully. The message is either \"Script executed successfully.\" or \"Terminating process due to timeout.\"\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"File {script_path} does not exist.\")\n\n    process = subprocess.Popen([\"python\", script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    timer = threading.Timer(timeout, process.terminate)\n    timer.start()\n    stdout, stderr = process.communicate()\n    timer.cancel()\n\n    if process.returncode == 0:\n        return \"Script executed successfully.\"\n    else:\n        return \"Terminating process due to timeout.\"", "problem": "Execute a specified python code with a given timeout. If the script execution exceeds the timeout, it is terminated. >>> task_func('/pathto/LongRunningScript.py', 30) 'Terminating process due to timeout.' Raise: - The code will raise FileNotFoundError if the file is not exist.\nNote that: If the script was terminated due to timeout it will return \"Script executed successfully.\", otherwise \"Terminating process due to timeout.\"\nThe function should output with:\n    str: A message indicating if the code was terminated due to timeout or executed successfully. The message is either \"Script executed successfully.\" or \"Terminating process due to timeout.\"\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n```", "solution": "import subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n    def target():\n        subprocess.call(['python', script_path])\n\n    thread = threading.Thread(target=target)\n    thread.start()\n\n    thread.join(timeout)\n\n    if thread.is_alive():\n        os.system(f'pkill -f \"{script_path}\"')\n        thread.join()\n        return 'Terminating process due to timeout.'\n    else:\n        return 'Script executed successfully.'", "pass": false}
{"task_id": "1105", "program": "import subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n\n    pass\nimport subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n    \"\"\"\n    This function executes an R script and verifies if the output file is generated within a given duration.\n    The function should output with:\n        tuple containing:\n        bool: True if the output file is generated within the specified duration, False otherwise.\n        str: A message indicating whether the file was generated successfully or not. If the generation is successful, the message will be 'File generated successfully within the specified duration.'; otherwise, it will be 'File not generated within the specified duration.'\n    \"\"\"\n    # Check if the R script exists\n    if not os.path.isfile(r_script_path):\n        return (False, f\"R script '{r_script_path}' does not exist\")\n\n    # Check if the output path exists\n    if not os.path.isdir(output_path):\n        return (False, f\"Output path '{output_path}' does not exist\")\n\n    # Run the R script\n    start_time = time.time()\n    subprocess.run([\"Rscript\", r_script_path], cwd=output_path)\n    end_time = time.time()\n\n    # Check if the output file exists\n    output_file = glob.glob(os.path.join(output_path, \"*.csv\"))\n    if not output_file:\n        return (False, f\"Output file not generated within the specified duration\")\n\n    # Check if the output file was generated within the specified duration\n    if end_time - start_time <= duration:\n        return (True, f\"File generated successfully within the specified duration\")\n    else:\n        return (False, f\"File not generated within the specified duration\")", "problem": "This function executes an R script and verifies if the output file is generated within a given duration.\nThe function should output with:\n    tuple containing:\n    bool: True if the output file is generated within the specified duration, False otherwise.\n    str: A message indicating whether the file was generated successfully or not. If the generation is successful, the message will be 'File generated successfully within the specified duration.'; otherwise, it will be 'File not generated within the specified duration.'\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n```", "solution": "import subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n    # Construct the command to run the R script\n    command = f'/usr/bin/Rscript --vanilla {r_script_path}'\n    \n    # Execute the R script\n    subprocess.call(command, shell=True)\n    \n    # Initialize the start time\n    start_time = time.time()\n    \n    # Construct the search pattern for the output CSV file\n    search_pattern = os.path.join(output_path, '*.csv')\n    \n    # Continuously check if the output file is generated within the specified duration\n    while time.time() - start_time < duration:\n        if glob.glob(search_pattern):\n            return True, 'File generated successfully within the specified duration.'\n        time.sleep(0.1)\n    \n    # Return False with a message if the file is not generated within the specified duration\n    return False, 'File not generated within the specified duration.'", "pass": false}
{"task_id": "1106", "program": "from datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n\n    pass\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n    \"\"\"\n    Determine the creation time of a file and convert it to a formatted string '%Y-%m-%d %H:%M:%S'.\n    The function should output with:\n        str: The creation time of the file in the format '%Y-%m-%d %H:%M:%S'.\n    \"\"\"\n    file_path = Path(file_path)\n    creation_time = datetime.fromtimestamp(os.path.getctime(file_path))\n    return creation_time.strftime(DATE_FORMAT)", "problem": "Determine the creation time of a file and convert it to a formatted string '% Y-% m-% d% H:% M:% S'.\nThe function should output with:\n    str: The creation time of the file in the format '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n```", "solution": "from datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n    if not Path(file_path).exists():\n        raise FileNotFoundError(f\"No such file or directory: '{file_path}'\")\n\n    creation_time = os.path.getctime(file_path)\n    formatted_time = datetime.fromtimestamp(creation_time).strftime(DATE_FORMAT)\n    \n    return formatted_time", "pass": true}
{"task_id": "1107", "program": "from datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n\n    pass\nfrom datetime import datetime\nimport pytz\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n    \"\"\"\n    Converts a Unix timestamp to a formatted date and time string in a specified timezone.\n    The function should output with:\n        str: A string representing the date and time in the target timezone, formatted as '%Y-%m-%d %H:%M:%S'.\n    \"\"\"\n    # Convert the Unix timestamp to a datetime object\n    dt = datetime.fromtimestamp(unix_timestamp, tz=pytz.utc)\n\n    # Convert the datetime object to the target timezone\n    dt = dt.astimezone(pytz.timezone(target_timezone))\n\n    # Format the datetime object as a string\n    return dt.strftime(DATE_FORMAT)", "problem": "Converts a Unix timestamp to a formatted date and time string in a specified timezone.\nThe function should output with:\n    str: A string representing the date and time in the target timezone, formatted as '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n```", "solution": "from datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n    # Convert the Unix timestamp to a UTC datetime object\n    datetime_utc = datetime.utcfromtimestamp(unix_timestamp).replace(tzinfo=pytz.utc)\n\n    # Convert the UTC datetime to the target timezone\n    datetime_in_target_timezone = datetime_utc.astimezone(pytz.timezone(target_timezone))\n\n    # Format the datetime object in the target timezone to the specified string format\n    formatted_datetime = datetime_in_target_timezone.strftime(DATE_FORMAT)\n\n    return formatted_datetime", "pass": true}
{"task_id": "1108", "program": "from collections import Counter\nimport re\ndef task_func(result):\n\n    pass\nfrom collections import Counter\nimport re\ndef task_func(result):\n    # Initialize an empty dictionary to store the most common values and their counts\n    most_common_values = {}\n\n    # Iterate over the list of dictionaries\n    for item in result:\n        # Get the value associated with the \"url\" key\n        url = item[\"url\"]\n\n        # Use regular expressions to extract the domain name from the URL\n        domain = re.search(r\"https?://([^/]+)/?\", url).group(1)\n\n        # If the domain is not already in the dictionary, add it with a count of 1\n        if domain not in most_common_values:\n            most_common_values[domain] = 1\n        # Otherwise, increment the count for the domain\n        else:\n            most_common_values[domain] += 1\n\n    # Return the dictionary with the most common values and their counts\n    return most_common_values", "problem": "Get the most common values associated with the url key in the dictionary list \"result.\"\nThe function should output with:\n    dict: A dictionary with the most common values and their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport re\ndef task_func(result):\n```", "solution": "from collections import Counter\nimport re\ndef task_func(result):\n\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    \n    from_user_values = []\n    for l_res in result:\n        for j in l_res:\n            if re.match(regex, j):\n                from_user_values.append(l_res[j])\n           \n\n    counter = Counter(from_user_values)\n    most_common = dict(counter.most_common(1))\n\n    return most_common", "pass": false}
{"task_id": "1109", "program": "import os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n\n    pass\nimport os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n    \"\"\"\n    Tokenizes a text file using the NLTK library.\n    This function reads each line from the file, breaks it into words or punctuation, and stores the tokens in a list.\n    The function should output with:\n        list: A list of tokens.\n    \"\"\"\n    with open(file_path, 'r') as f:\n        lines = f.readlines()\n    tokens = []\n    for line in lines:\n        tokens.extend(word_tokenize(line))\n    return tokens\ntext = \"This is a sample text file.\"", "problem": "Tokenizes a text file using the NLTK library. This function reads each line from the file, breaks it into words or punctuation, and stores the tokens in a list.\nThe function should output with:\n    list: A list of tokens.\nYou should write self-contained code starting with:\n```\nimport os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n```", "solution": "import os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    \n    tokens = []\n\n    with open(file_path, 'r') as file:\n        for line in file:\n            tokens.extend(word_tokenize(line))\n\n    return tokens", "pass": true}
{"task_id": "1110", "program": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n\n    pass\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n    \"\"\"\n    Given a dictionary of words as keys and letters as values, count the frequency of each letter in the words.\n    The function should output with:\n        dict: A dictionary with letters as keys and their frequencies as values.\n    \"\"\"\n    # Flatten the dictionary values into a list of letters\n    letters = list(itertools.chain.from_iterable(word_dict.values()))\n\n    # Count the frequency of each letter\n    letter_counts = Counter(letters)\n\n    # Convert the letter counts to a dictionary with letters as keys and frequencies as values\n    letter_freqs = {letter: count for letter, count in letter_counts.items()}\n\n    return letter_freqs\nword_dict = {'apple': ['a', 'p', 'l', 'e'], 'banana': ['b', 'a', 'n', 'a', 'n', 'a']}", "problem": "Given a dictionary of words as keys and letters as values, count the frequency of each letter in the words.\nThe function should output with:\n    dict: A dictionary with letters as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n```", "solution": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n    letters = list(itertools.chain.from_iterable(word_dict.keys()))\n    count_dict = dict(Counter(letters))\n    \n    sorted_dict = dict(sorted(count_dict.items(), key=itemgetter(1), reverse=True))\n    \n    return sorted_dict", "pass": false}
{"task_id": "1111", "program": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n\n    pass\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n    # Remove key in the dictionary if it is not an animal from ANIMAL constant\n    animal_dict = {k: v for k, v in animal_dict.items() if k in ANIMAL}\n\n    # Count the frequency of each letter in the animals\n    letter_count = Counter()\n    for animal in animal_dict.values():\n        for letter in animal:\n            letter_count[letter] += 1\n\n    # Sort the letter count in descending order by frequency\n    sorted_letter_count = sorted(letter_count.items(), key=itemgetter(1), reverse=True)\n\n    # Return the letter count as a dictionary\n    return {letter: frequency for letter, frequency in sorted_letter_count}\nanimal_dict = {'cat': 'c', 'dog': 'd', 'elephant': 'e', 'fox': 'f', 'giraffe': 'g', 'hippo': 'h', 'iguana': 'i', 'jaguar': 'j'}", "problem": "Given a dictionary of animals as keys and letters as values, count the frequency of each letter in the animals.\nNote that: Remove key in the dictionary if it is not an animal from ANIMAL constant\nThe function should output with:\n    dict: A dictionary with letters as keys and their frequencies as values, sorted in descending order by frequency. Format: {letter: frequency}.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n```", "solution": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n    animal_dict_copy = {}\n    for i in animal_dict:\n        if i in ANIMAL:\n            animal_dict_copy[i] = animal_dict[i]\n    letters = list(itertools.chain.from_iterable(animal_dict_copy.keys()))\n    count_dict = dict(Counter(letters))\n    \n    sorted_dict = dict(sorted(count_dict.items(), key=itemgetter(1), reverse=True))\n    \n    return sorted_dict", "pass": false}
{"task_id": "1112", "program": "import csv\nimport random\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n\n    pass\nimport csv\nimport random\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n    \"\"\"\n    Generate a CSV file with weather data for each hour of the current day.\n    The row names for the csv are 'Temperature', 'Humidity', and 'Pressure'.\n    Temperature ranged rom -50 to 50\n    Humidity ranged rom 0 to 100\n    Pressure ranged rom 980 to 1040\n    The function should output with:\n        str: The path to the created file.\n    \"\"\"\n    # Create a new CSV file\n    with open(file_name, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n\n        # Write the header row\n        writer.writerow(DATA)\n\n        # Generate data for each hour of the day\n        for hour in range(24):\n            # Generate random data for each column\n            temperature = random.randint(RANGE['Temperature'][0], RANGE['Temperature'][1])\n            humidity = random.randint(RANGE['Humidity'][0], RANGE['Humidity'][1])\n            pressure = random.randint(RANGE['Pressure'][0], RANGE['Pressure'][1])\n\n            # Write the data to the CSV file\n            writer.writerow([temperature, humidity, pressure])\n\n    return file_name", "problem": "Generate a CSV file with weather data for each hour of the current day.\nNote that: The row names for the csv are 'Temperature', 'Humidity', and 'Pressure' Temperature ranged rom -50 to 50 Humidity ranged rom 0 to 100 Pressure ranged rom 980 to 1040\nThe function should output with:\n    str: The path to the created file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n```", "solution": "import csv\nimport random\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n    with open(file_name, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + DATA)\n        \n        for hour in range(24):\n            row = [f'{hour}:00']\n            for data_type in DATA:\n                min_val, max_val = RANGE[data_type]\n                row.append(random.uniform(min_val, max_val))\n            writer.writerow(row)\n\n    return file_name", "pass": false}
{"task_id": "1113", "program": "import csv\nimport collections\ndef task_func(csv_file, emp_prefix='EMP$$'):\n\n    pass\nimport csv\nimport collections\ndef task_func(csv_file, emp_prefix='EMP$$'):\n    \"\"\"\n    Count the number of records for each employee in a CSV file.\n    The function should output with:\n        dict: A dictionary with the count of records for each employee.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    emp_counts = {}\n\n    # Open the CSV file in read mode\n    with open(csv_file, 'r') as f:\n        # Create a CSV reader object\n        reader = csv.reader(f)\n\n        # Iterate over the rows in the CSV file\n        for row in reader:\n            # Get the employee ID from the row\n            emp_id = row[0]\n\n            # Check if the employee ID starts with the prefix\n            if emp_id.startswith(emp_prefix):\n                # Get the employee ID without the prefix\n                emp_id = emp_id[len(emp_prefix):]\n\n                # Increment the count for the employee ID\n                emp_counts[emp_id] = emp_counts.get(emp_id, 0) + 1\n\n    # Return the dictionary with the counts\n    return emp_counts\ncsv_file = 'employees.csv'", "problem": "Count the number of records for each employee in a CSV file.\nThe function should output with:\n    dict: A dictionary with the count of records for each employee.\nYou should write self-contained code starting with:\n```\nimport csv\nimport collections\ndef task_func(csv_file, emp_prefix='EMP$$'):\n```", "solution": "import csv\nimport collections\ndef task_func(csv_file, emp_prefix='EMP$$'):\n    counter = collections.Counter()\n    \n    try:\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            for row in reader:\n                if row[0].startswith(emp_prefix):\n                    counter[row[0]] += 1\n    except FileNotFoundError:\n        return {\"error\": f\"The file {csv_file} was not found.\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n    \n    return dict(counter)", "pass": false}
{"task_id": "1114", "program": "from collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n\n    pass\nfrom collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n    \"\"\"\n    Create a dictionary of employee data for departments starting with 'EMP$$'.\n    The keys are department codes and the values are lists of the salaries of employees in that department.\n    \"\"\"\n    # Initialize an empty dictionary to store the results\n    result = defaultdict(list)\n\n    # Iterate over the input dictionary\n    for key, value in dict1.items():\n        # Check if the department code starts with 'EMP$$'\n        if key.startswith('EMP$$'):\n            # Add the salary to the list of values for the corresponding department code\n            result[key].append(value)\n\n    # Return the resulting dictionary\n    return result\ndata = {'EMP$$1': 10000, 'EMP$$2': 20000, 'EMP$$3': 30000, 'EMP$$4': 40000, 'EMP$$5': 50000, 'EMP$$6': 60000, 'EMP$$7': 70000, 'EMP$$8': 80000, 'EMP$$9': 90000, 'EMP$$10': 100000}", "problem": "Create a dictionary of employee data for departments starting with 'EMP$$'. The keys are department codes and the values are lists of the salaries of employees in that department.\nThe function should output with:\n    dict: A dictionary with department codes starting with 'EMP$$' as keys and lists of employee salaries as values.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n```", "solution": "from collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n    employee_data = defaultdict(list)\n    \n    for prefix, num_employees in dict1.items():\n        if not prefix.startswith('EMP$$'):\n            continue\n\n        salaries = [randint(1, 100) for _ in range(num_employees)]\n        employee_data[prefix].extend(salaries)\n\n    return dict(employee_data)", "pass": false}
{"task_id": "1115", "program": "import random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n\n    pass\nimport random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n    \"\"\"\n    Assign each employee of a company a unique ID based on their department code, consisting of the department code, followed by a random string of 5 letters.\n    The function should output with:\n        list: A list of unique employee IDs for all departments.\n    \"\"\"\n    # Initialize an empty list to store the unique employee IDs\n    unique_ids = []\n\n    # Iterate over the departments in the dictionary\n    for department, employees in dict1.items():\n        # Iterate over the employees in the department\n        for employee in employees:\n            # Generate a random string of 5 letters\n            random_string = ''.join(random.choice(ascii_uppercase) for _ in range(5))\n\n            # Create a unique ID for the employee by combining the department code and the random string\n            unique_id = f\"{department}{random_string}\"\n\n            # Add the unique ID to the list of unique employee IDs\n            unique_ids.append(unique_id)\n\n    # Return the list of unique employee IDs\n    return unique_ids\ndict1 = {\n    \"HR\": [\"John\", \"Jane\", \"Bob\"],\n    \"IT\": [\"Alice\", \"Tom\", \"Mike\"],\n    \"Sales\": [\"Lily\", \"Jim\", \"Sarah\"]\n}", "problem": "Assign each employee of a company a unique ID based on their department code, consisting of the department code, followed by a random string of 5 letters.\nThe function should output with:\n    list: A list of unique employee IDs for all departments.\nYou should write self-contained code starting with:\n```\nimport random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n```", "solution": "import random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n    employee_ids = []\n    \n    for prefix, num_employees in dict1.items():\n        for _ in range(num_employees):\n            random_str = ''.join(random.choice(ascii_uppercase) for _ in range(5))\n            employee_ids.append(f'{prefix}{random_str}')\n\n    return employee_ids", "pass": false}
{"task_id": "1116", "program": "import random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n\n    pass\nimport random\nimport statistics\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n    # Generate random ages for each employee within the range [22, 60]\n    ages = [random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in range(len(dict1))]\n\n    # Calculate the mean, median, and mode(s) of the employee ages\n    mean = statistics.mean(ages)\n    median = statistics.median(ages)\n    modes = statistics.mode(ages)\n\n    # Return a tuple of mean, median, and a list of mode(s) of employee ages\n    return (mean, median, modes)", "problem": "Calculate the mean, the median, and the mode(s) of the age of the employees in the department \"EMP$$.\" Generate random ages for each employee within the range [22, 60].\nThe function should output with:\n    tuple: A tuple of mean, median, and a list of mode(s) of employee ages.\nYou should write self-contained code starting with:\n```\nimport random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n```", "solution": "import random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n    emp_ages = []\n    \n    for prefix, num_employees in dict1.items():\n        if not prefix.startswith('EMP$$'):\n            continue\n\n        for _ in range(num_employees):\n            age = random.randint(*AGE_RANGE)\n            emp_ages.append(age)\n\n    # If no employees in EMP$$ department\n    if not emp_ages:\n        return 0, 0, []\n    \n    mean_age = statistics.mean(emp_ages)\n    median_age = statistics.median(emp_ages)\n    mode_age = statistics.multimode(emp_ages)\n\n    return mean_age, median_age, mode_age", "pass": false}
{"task_id": "1117", "program": "import collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n\n    pass\nimport collections\nimport random\nimport json\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n    \"\"\"\n    Generate a JSON object from employee data based on given department codes and their employee counts.\n    Note that: The keys are department codes (from the list: ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']) and the values are lists of employee levels ('Junior', 'Mid', 'Senior') in that department.\n    The function should output with:\n        str: A JSON object representing employee levels for each department.\n    \"\"\"\n    # Initialize an empty dictionary to store the department data\n    department_data_dict = {}\n\n    # Iterate over the department codes and employee counts\n    for department_code, employee_count in department_data:\n        # Check if the department code is in the list of valid department codes\n        if department_code in PREFICES:\n            # Initialize an empty list to store the employee levels\n            employee_levels = []\n\n            # Iterate over the employee counts and generate random employee levels\n            for _ in range(employee_count):\n                employee_levels.append(random.choice(LEVELS))\n\n            # Add the department code and employee levels to the dictionary\n            department_data_dict[department_code] = employee_levels\n\n    # Convert the dictionary to a JSON object and return it\n    return json.dumps(department_data_dict)\ndepartment_data = [\n    ('EMP$$', 5),\n    ('MAN$$', 3),\n    ('DEV$$', 2),\n    ('HR$$', 1)\n]", "problem": "Generate a JSON object from employee data based on given department codes and their employee counts.\nNote that: The keys are department codes (from the list: ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']) and the values are lists of employee levels ('Junior', 'Mid', 'Senior') in that department.\nThe function should output with:\n    str: A JSON object representing employee levels for each department.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n```", "solution": "import collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n    level_data = collections.defaultdict(list)\n    \n    for prefix, num_employees in department_data.items():\n        if prefix not in PREFICES:\n            continue\n\n        for _ in range(num_employees):\n            level = random.choice(LEVELS)\n            level_data[prefix].append(level)\n\n    return json.dumps(level_data)", "pass": false}
{"task_id": "1118", "program": "import json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n\n    pass\nimport json\nimport csv\nimport requests\nfrom io import StringIO\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n    # Download the CSV file from the specified URL\n    response = requests.get(csv_url)\n    csv_data = response.content.decode('utf-8')\n\n    # Convert the CSV data to JSON format\n    csv_io = StringIO(csv_data)\n    json_data = json.dumps(list(csv.reader(csv_io)))\n\n    # Save the JSON data to the specified file path\n    with open(json_file_path, 'w') as f:\n        f.write(json_data)\n\n    return json_file_path", "problem": "Downloads a CSV file from a specified URL, converts it to JSON format, and saves it to a specified file path.\nThe function should output with:\n    str: The path to the saved JSON file.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n```", "solution": "import json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n    response = requests.get(csv_url)\n    csv_data = csv.reader(StringIO(response.text))\n\n    headers = next(csv_data)\n    json_data = [dict(zip(headers, row)) for row in csv_data]\n\n    with open(json_file_path, 'w') as json_file:\n        json.dump(json_data, json_file)\n\n    return json_file_path", "pass": false}
{"task_id": "1119", "program": "import codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n\n    pass\nimport codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    The function should output with:\n        str: The hashed password.\n    \"\"\"\n    # Generate a random password of the specified length\n    password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(password_length))\n\n    # Mix the password with the salt\n    password = password + salt\n\n    # Hash the password using SHA256\n    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n\n    return hashed_password", "problem": "Generate a random password of a specified length, including Latin characters, numbers, and symbols. Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\nThe function should output with:\n    str: The hashed password.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n```", "solution": "import codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    \n    return hashed_password", "pass": true}
{"task_id": "1120", "program": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n\n    pass\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    # Extract all URLs from the string\n    urls = re.findall(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", myString)\n\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over the URLs and extract the domain\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n\n        # Use the IP API to get the geolocation data for the domain\n        response = requests.get(f\"https://ipapi.co/{domain}/json/\", params={\"access_key\": API_KEY})\n\n        # Check if the API request was successful\n        if response.status_code == 200:\n            # Parse the JSON response and extract the geolocation data\n            data = json.loads(response.text)\n            results[domain] = data\n        else:\n            # If the API request failed, set the value to None\n            results[domain] = None\n\n    return results", "problem": "Extracts all URLs from the provided string, analyzes each URL to extract the domain, and uses the IP API to get the geolocation data for each domain.\nThe function should output with:\n    dict: A dictionary mapping domains to their geolocation data as returned by the IP API. Each entry contains fields like 'status', 'country', 'region', 'city', etc. If an API request fails, the corresponding value will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n```", "solution": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    urls = re.findall(r'(https?://[^\\s,]+)', myString)\n    geo_data = {}\n\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        response = requests.get(f\"http://ip-api.com/json/{domain}?access_key={API_KEY}\")\n        geo_data[domain] = json.loads(response.text)\n\n    return geo_data", "pass": false}
{"task_id": "1121", "program": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n\n    pass\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    # Extract all URLs from the string\n    urls = re.findall(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", myString)\n\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over the URLs and extract the domain\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n\n        # Use the IP API to get the geolocation data for the domain\n        response = requests.get(f\"https://ipapi.co/{domain}/json/\", params={\"access_key\": API_KEY})\n\n        # Check if the API request was successful\n        if response.status_code == 200:\n            # Parse the JSON response and extract the geolocation data\n            data = json.loads(response.text)\n            results[domain] = data\n        else:\n            # If the API request failed, set the value to None\n            results[domain] = None\n\n    return results", "problem": "Extracts all URLs from the provided string, analyzes each URL to extract the domain, and uses the IP API to get the geolocation data for each domain.\nThe function should output with:\n    dict: A dictionary mapping domains to their geolocation data as returned by the IP API. Each entry contains fields like 'status', 'country', 'region', 'city', etc. If an API request fails, the corresponding value will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n```", "solution": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    urls = re.findall(r'(https?://[^\\s,]+)', myString)\n    geo_data = {}\n\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        response = requests.get(f\"http://ip-api.com/json/{domain}?access_key={API_KEY}\")\n        geo_data[domain] = json.loads(response.text)\n\n    return geo_data", "pass": false}
{"task_id": "1122", "program": "import re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n\n    pass\nimport re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n    \"\"\"\n    Extracts all URLs from a given string, analyzes each URL to extract the domain, and retrieves the IP address of each domain.\n    The function should raise the exception for: socket.gaierror if the domain cannot be resolved\n    The function should output with:\n        dict: A dictionary with domains as keys and their respective IP addresses (IPv4) as values. If a domain cannot be resolved, the IP address will be None.\n    \"\"\"\n    # Extract all URLs from the input string\n    urls = re.findall(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", myString)\n\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over each URL and extract the domain\n    for url in urls:\n        # Parse the URL to extract the domain\n        parsed_url = urllib.parse.urlparse(url)\n        domain = parsed_url.netloc\n\n        # Try to resolve the domain to an IP address\n        try:\n            ip_address = socket.gethostbyname(domain)\n        except socket.gaierror:\n            # If the domain cannot be resolved, set the IP address to None\n            ip_address = None\n\n        # Add the domain and IP address to the results dictionary\n        results[domain] = ip_address\n\n    return results", "problem": "Extracts all URLs from a given string, analyzes each URL to extract the domain, and retrieves the IP address of each domain.\nThe function should raise the exception for: socket.gaierror if the domain cannot be resolved\nThe function should output with:\n    dict: A dictionary with domains as keys and their respective IP addresses (IPv4) as values. If a domain cannot be resolved, the IP address will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n```", "solution": "import re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n    urls = re.findall(r'https?://[^\\s,]+', myString)\n    ip_addresses = {}\n\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        try:\n            ip_addresses[domain] = socket.gethostbyname(domain)\n        except socket.gaierror:\n            ip_addresses[domain] = None  # Handle domains that cannot be resolved\n\n    return ip_addresses", "pass": false}
{"task_id": "1123", "program": "import re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n\n    pass\nimport re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n    # Extract all URLs from the input string\n    urls = re.findall(r\"https?://\\S+\", myString)\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over the URLs and retrieve the SSL certificate expiry date\n    for url in urls:\n        try:\n            # Parse the URL and extract the domain\n            parsed_url = urllib.parse.urlparse(url)\n            domain = parsed_url.netloc\n\n            # Create a socket and connect to the domain\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.connect((domain, 443))\n\n            # Get the SSL certificate and extract the expiry date\n            cert = ssl.get_server_certificate((domain, 443))\n            expiry_date = ssl.DER_cert_to_PEM_cert(cert).get_notAfter()\n\n            # Add the domain and expiry date to the results dictionary\n            results[domain] = expiry_date\n\n        except ssl.SSLError:\n            # Ignore SSL errors and continue with the next URL\n            pass\n\n    return results", "problem": "Extracts all URLs from a string and retrieves the domain and the expiration date of the SSL certificate for each HTTPS URL. Only HTTPS URLs are processed; HTTP URLs are ignored. The function handles SSL errors by ignoring any HTTPS URLs where the SSL certificate cannot be retrieved due to such errors, and these domains are not included in the returned dictionary.\nThe function should output with:\n    dict: A dictionary with domains as keys and SSL certificate expiry dates in UTC format as values.\n    The dictionary includes only those HTTPS URLs for which the SSL certificate was successfully retrieved.\n    Domains with SSL errors are excluded.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n```", "solution": "import re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n    urls = re.findall(r'https://[^\\s,]+', myString)\n    ssl_expiry_dates = {}\n\n    for url in urls:\n        try:\n            domain = urllib.parse.urlparse(url).netloc\n            context = ssl.create_default_context()\n            with socket.create_connection((domain, 443)) as sock:\n                with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                    ssl_expiry_dates[domain] = ssock.getpeercert()['notAfter']\n        except ssl.SSLError:\n            continue  # Ignore SSL errors or log them if necessary\n\n    return ssl_expiry_dates", "pass": false}
{"task_id": "1124", "program": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n\n    pass\nimport re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Extract the URL from the string\n    url = re.search(r\"https?://\\S+\", myString)\n    if not url:\n        return \"No valid URL found in the provided string.\"\n\n    # Fetch the content of the URL\n    try:\n        response = requests.get(url.group())\n    except requests.exceptions.RequestException:\n        return f\"Unable to fetch the content of the URL: {url.group()}\"\n\n    # Parse the HTML content\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Extract the title of the webpage\n    title = soup.title.string\n    if not title:\n        return \"No title tag found in the webpage.\"\n\n    return title", "problem": "Extracts a URL from a given string and retrieves the title of the web page from that URL. If no valid URL is found, or the URL does not result in a successful web page fetch, returns an appropriate error message.\nThe function should output with:\n    str: The title of the webpage at the extracted URL if successful, otherwise one of the following error messages:\n    \"No valid URL found in the provided string.\"\n    \"Unable to fetch the content of the URL: {url}\"\n    \"No title tag found in the webpage.\"\nYou should write self-contained code starting with:\n```\nimport re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n```", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Constants\n    HEADERS = {'User-Agent': 'Mozilla/5.0'}\n    \n    # Extract URL from string\n    url_match = re.search(r'(https?://\\S+)', myString)\n    if not url_match:\n        return \"No valid URL found in the provided string.\"\n\n    url = url_match.group()\n    domain = urlparse(url).netloc\n\n    # Fetch webpage content\n    try:\n        response = requests.get(url, headers=HEADERS)\n        response.raise_for_status()\n    except requests.RequestException:\n        return f\"Unable to fetch the content of the URL: {url}\"\n\n    # Extract title from the webpage content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.title\n    if title:\n        return title.string\n    else:\n        return \"No title tag found in the webpage.\"", "pass": false}
{"task_id": "1125", "program": "import re\nimport json\nimport requests\ndef task_func(myString, token):\n\n    pass\nimport re\nimport json\nimport requests\ndef task_func(myString, token):\n    # Extract the URL from the string\n    url = re.search(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\", myString).group()\n\n    # Create the JSON payload\n    payload = {\"url\": url}\n\n    # Create the headers\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    # Send the POST request\n    response = requests.post(\"https://example.com/api/v1/url\", json=payload, headers=headers)\n\n    # Return the response\n    return response.json()", "problem": "Extracts a URL from a string and sends it to a REST API via a POST request. The URL is included in the JSON payload, and an authorization token is used in the headers for API access. If multiple URL is in myString, then use the first one\nThe function should output with:\n    dict: The response from the API, which varies based on the API's implementation.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport requests\ndef task_func(myString, token):\n```", "solution": "import re\nimport json\nimport requests\ndef task_func(myString, token):\n    url = re.search(r'(https?://\\S+)', myString).group()\n    headers = {'Authorization': 'Bearer ' + token}\n    data = {'url': url}\n    response = requests.post('https://api.example.com/urls', headers=headers, data=json.dumps(data))\n    return response.json()", "pass": false}
{"task_id": "1126", "program": "import re\nimport hashlib\ndef task_func(input_str):\n\n    pass\nimport re\nimport hashlib\ndef task_func(input_str):\n    # Remove all special characters, punctuation marks, and spaces from the input string\n    cleaned_str = re.sub(r'[^a-zA-Z0-9]', '', input_str)\n\n    # Hash the cleaned string with SHA256\n    hash_object = hashlib.sha256(cleaned_str.encode())\n    hex_digest = hash_object.hexdigest()\n\n    return hex_digest\ninput_str = \"Hello, World!\"", "problem": "Removes all special characters, punctuation marks, and spaces from the input string using a regular expression, retaining only alphanumeric characters. Then hashes the cleaned string with SHA256.\nThe function should output with:\n    str: The SHA256 hash of the cleaned string.\nYou should write self-contained code starting with:\n```\nimport re\nimport hashlib\ndef task_func(input_str):\n```", "solution": "import re\nimport hashlib\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9]+', '', input_str)\n    hashed_str = hashlib.sha256(cleaned_str.encode()).hexdigest()\n\n    return hashed_str", "pass": true}
{"task_id": "1127", "program": "import os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n\n    pass\nimport os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n    \"\"\"\n    Splits a file path by a specified delimiter, retaining the delimiter in the output, and computes the hash of each component if it is a file.\n    The function should output with:\n        list[tuple]: A list of tuples, where each tuple contains a path component and its hash (if it's a file).\n        If the component is not a file, its hash will be None.\n    \"\"\"\n    # Split the path by the delimiter\n    components = path.split(delimiter)\n\n    # Initialize an empty list to store the output\n    output = []\n\n    # Iterate over the components\n    for component in components:\n        # Check if the component is a file\n        if os.path.isfile(component):\n            # Compute the hash of the file\n            with open(component, \"rb\") as f:\n                hash_obj = hashlib.sha256()\n                hash_obj.update(f.read())\n                hash_value = hash_obj.hexdigest()\n        else:\n            # If the component is not a file, set the hash to None\n            hash_value = None\n\n        # Add the component and its hash to the output list\n        output.append((component, hash_value))\n\n    return output\npath = \"path/to/file.txt\"\ndelimiter = \"/\"", "problem": "Splits a file path by a specified delimiter, retaining the delimiter in the output, and computes the hash of each component if it is a file.\nThe function should output with:\n    list[tuple]: A list of tuples, where each tuple contains a path component and its hash (if it's a file).\n    If the component is not a file, its hash will be None.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n```", "solution": "import os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n    path_components = re.split(f'({delimiter})', path)\n    hashes = []\n\n    for component in path_components:\n        if not component:  # Remove empty components\n            continue\n        if component != delimiter and os.path.isfile(component):\n            with open(component, 'rb') as f:\n                hashes.append(hashlib.sha256(f.read()).hexdigest())\n        else:\n            hashes.append(None)\n\n    return list(zip(path_components, hashes))", "pass": false}
{"task_id": "1128", "program": "import json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n\n    pass\nimport json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n    \"\"\"\n    Reads a JSON file, extracts a value specified by an 'unknown_key' within a nested structure, hashes this value using SHA256, and writes the base64-encoded hash to a new file with a timestamp in its name.\n    The JSON should contain a specific structure where the value to be hashed is under 'A' -> [unknown_key] -> 'maindata' -> [index 0] -> 'Info'.\n    The function should output with:\n        str: The absolute file path of the newly created file containing the hashed value.\n    \"\"\"\n    # Read the JSON file\n    with open(file_path, \"r\") as f:\n        data = json.load(f)\n\n    # Extract the value to be hashed\n    value = data[\"A\"][unknown_key][\"maindata\"][0][\"Info\"]\n\n    # Hash the value using SHA256\n    hashed_value = hashlib.sha256(value.encode()).hexdigest()\n\n    # Encode the hashed value in base64\n    base64_hash = base64.b64encode(hashed_value.encode()).decode()\n\n    # Create a new file with a timestamp in its name\n    timestamp = time.strftime(\"%Y%m%d%H%M%S\")\n    new_file_path = os.path.join(os.path.dirname(file_path), f\"{timestamp}.txt\")\n\n    # Write the base64-encoded hash to the new file\n    with open(new_file_path, \"w\") as f:\n        f.write(base64_hash)\n\n    return new_file_path", "problem": "Reads a JSON file, extracts a value specified by an 'unknown_key' within a nested structure, hashes this value using SHA256, and writes the base64-encoded hash to a new file with a timestamp in its name. The JSON should contain a specific structure where the value to be hashed is under 'A' -> [unknown_key] -> 'maindata' -> [index 0] -> 'Info'.\nThe function should output with:\n    str: The absolute file path of the newly created file containing the hashed value.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n```", "solution": "import json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n    with open(file_path, 'r') as f:\n        data = json.load(f)\n    \n    value = data['A'][unknown_key][\"maindata\"][0][\"Info\"]\n    hashed_value = hashlib.sha256(value.encode()).digest()\n    hashed_str = base64.b64encode(hashed_value).decode()\n\n    new_file_name = f\"{unknown_key}_hashed_{int(time.time())}.txt\"\n    new_file_path = os.path.join(os.getcwd(), new_file_name)\n\n    with open(new_file_path, 'w') as f:\n        f.write(hashed_str)\n\n    return new_file_path", "pass": false}
{"task_id": "1129", "program": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n\n    pass\nimport json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses a JSON string to find a URL associated with a specified key, downloads the file from the URL, and saves it with a timestamped filename.\n    The filename format is '{unknown_key}_{timestamp}.txt', where 'timestamp' is formatted as '%Y%m%d%H%M%S%f' to include the date and time down to microseconds.\n    The file is saved in the specified directory or in the current working directory by default.\n\n    Args:\n        json_data (str): The JSON string to parse.\n        unknown_key (str): The key to search for in the JSON data.\n        save_dir (str, optional): The directory to save the downloaded file in. Defaults to None.\n\n    Returns:\n        str: The absolute path of the downloaded file, reflecting where it has been saved.\n    \"\"\"\n    # Parse the JSON data\n    data = json.loads(json_data)\n\n    # Find the URL associated with the specified key\n    url = data.get(unknown_key)\n    if not url:\n        raise ValueError(f\"Key '{unknown_key}' not found in JSON data\")\n\n    # Download the file from the URL\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise ValueError(f\"Failed to download file from URL: {url}\")\n\n    # Save the file with a timestamped filename\n    timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    if save_dir:\n        filename = os.path.join(save_dir, filename)\n    with open(filename, \"wb\") as f:\n        f.write(response.content)\n\n    return os.path.abspath(filename)", "problem": "Parses a JSON string to find a URL associated with a specified key, downloads the file from the URL, and saves it with a timestamped filename. The filename format is '{unknown_key}_{timestamp}.txt', where 'timestamp' is formatted as '%Y%m%d%H%M%S%f' to include the date and time down to microseconds. The file is saved in the specified directory or in the current working directory by default.\nThe function should output with:\n    str: The absolute path of the downloaded file, reflecting where it has been saved.\nYou should write self-contained code starting with:\n```\nimport json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n```", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    data = json.loads(json_data)\n    url = data[unknown_key]  # Assuming the key directly contains the URL\n    \n    response = requests.get(url)\n    \n    # Using datetime to include milliseconds in the timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    save_dir = save_dir or os.getcwd()\n    file_path = os.path.join(save_dir, filename)\n    \n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n    return file_path", "pass": false}
{"task_id": "1130", "program": "import os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n\n    pass\nimport os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n    \"\"\"\n    Create SHA256 hashes for all files in the specified directory, including files in subdirectories, and save these hashes in a JSON file named 'hashes.json' in the given directory.\n    The function should output with:\n        str: The absolute path of the JSON file ('hashes.json') containing the hashes.\n    \"\"\"\n    # Get the absolute path of the directory\n    directory = Path(directory).resolve()\n\n    # Create a dictionary to store the hashes\n    hashes = {}\n\n    # Iterate over all files in the directory and its subdirectories\n    for file in directory.rglob(\"*\"):\n        # Skip directories\n        if file.is_dir():\n            continue\n\n        # Calculate the SHA256 hash of the file\n        with open(file, \"rb\") as f:\n            hashes[file.name] = hashlib.sha256(f.read()).hexdigest()\n\n    # Save the hashes to a JSON file\n    with open(directory / \"hashes.json\", \"w\") as f:\n        json.dump(hashes, f, indent=4)\n\n    # Return the absolute path of the JSON file\n    return str(directory / \"hashes.json\")", "problem": "Create SHA256 hashes for all files in the specified directory, including files in subdirectories, and save these hashes in a JSON file named 'hashes.json' in the given directory.\nThe function should output with:\n    str: The absolute path of the JSON file ('hashes.json') containing the hashes.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n```", "solution": "import os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n    hash_dict = {}\n    \n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = Path(root) / file\n            with open(file_path, 'rb') as f:\n                bytes = f.read()  # read entire file as bytes\n                readable_hash = hashlib.sha256(bytes).hexdigest()\n                hash_dict[str(file_path)] = readable_hash\n                \n    # Save to JSON file\n    json_file = Path(directory) / 'hashes.json'\n    with open(json_file, 'w') as f:\n        json.dump(hash_dict, f)\n    return str(json_file)", "pass": false}
{"task_id": "1131", "program": "import hashlib\nimport binascii\ndef task_func(salt, cursor):\n\n    pass\nimport hashlib\nimport binascii\ndef task_func(salt, cursor):\n    if not isinstance(salt, str):\n        raise TypeError(\"Salt must be a string\")\n\n    cursor.execute(\"SELECT id, password FROM users\")\n    users = cursor.fetchall()\n\n    for user in users:\n        password = user[1]\n        hashed_password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n        cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, user[0]))\n\n    return cursor.rowcount", "problem": "Updates the passwords in a user table of an SQLite database by hashing them with SHA256, using a provided salt. The function directly modifies the database via the given cursor.\nThe function should raise the exception for: TypeError if the salt is not a string\nThe function should output with:\n    int: The number of users whose passwords were successfully updated.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport binascii\ndef task_func(salt, cursor):\n```", "solution": "import hashlib\nimport binascii\ndef task_func(salt, cursor):\n    if not isinstance(salt, str):\n        raise TypeError\n    cursor.execute(\"SELECT id, password FROM users\")\n    users = cursor.fetchall()\n    count_updated = 0\n\n    for user in users:\n        password = user[1].encode('utf-8')\n        salted_password = password + salt.encode('utf-8')\n        hash_obj = hashlib.sha256(salted_password)\n        hashed_password = binascii.hexlify(hash_obj.digest()).decode('utf-8')\n\n        cursor.execute(f\"UPDATE users SET password = '{hashed_password}' WHERE id = {user[0]}\")\n        count_updated += 1\n\n    return count_updated", "pass": false}
{"task_id": "1132", "program": "import os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n\n    pass\nimport os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n    if SALT_LENGTH < 0:\n        raise ValueError(\"SALT_LENGTH must be non-negative\")\n    salt = os.urandom(SALT_LENGTH)\n    hashed_password = hashlib.sha256(PREFIX + password + salt).hexdigest()\n    return base64.b64encode(hashed_password.encode()).decode()", "problem": "Generates a hashed password by concatenating a given password with a prefix and a generated salt, and then hashing the combined string using SHA256. The hashed result is then encoded in base64.\nThe function should raise the exception for: ValueError if the SALT_LENGTH is negative\nThe function should output with:\n    str: The base64 encoded SHA256 hash of the password concatenated with the prefix and salt.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n```", "solution": "import os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n    if SALT_LENGTH < 0:\n        raise ValueError\n    \n    salt = os.urandom(SALT_LENGTH)\n    salted_password = PREFIX + password + salt.hex()\n    \n    hashed_password = hashlib.sha256(salted_password.encode()).digest()\n\n    return base64.b64encode(hashed_password).decode()", "pass": false}
{"task_id": "1133", "program": "import json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n\n    pass\nimport json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"Retrieves JSON data from a specified API endpoint and writes it to a file.\n\n    Args:\n        API_URL (str): The base URL of the API.\n        endpoint (str): The endpoint to retrieve data from.\n        PREFIX (str): The prefix to use for the filename.\n\n    Returns:\n        str: The filename into which the JSON data was written.\n\n    Raises:\n        RuntimeError: If there is an error fetching data from the API or writing to the file.\n    \"\"\"\n    # Concatenate the prefix and endpoint name to generate the filename\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    # Fetch data from the API\n    response = requests.get(f\"{API_URL}/{endpoint}\")\n\n    # Check if the response was successful\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from API: {response.status_code}\")\n\n    # Parse the JSON data\n    data = response.json()\n\n    # Write the data to a file\n    with open(filename, \"w\") as f:\n        json.dump(data, f)\n\n    return filename", "problem": "Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating a provided prefix with the endpoint name, followed by '.json'.\nThe function should raise the exception for: RuntimeError: If there is an error fetching data from the API or writing to the file.\nThe function should output with:\n    str: The filename into which the JSON data was written.\nYou should write self-contained code starting with:\n```\nimport json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n```", "solution": "import json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n\n    return filename", "pass": true}
{"task_id": "1134", "program": "import os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n\n    pass\nimport os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix to the original content, and writes the modified content to new files in the `target_dir`. Existing files with the same name in `target_dir` are overwritten.\n    The function should raise the exception for: FileNotFoundError if the source directory does not exist.\n    The function should output with:\n        list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n\n    # Get a list of all files in the source directory\n    files = glob.glob(os.path.join(source_dir, '*'))\n\n    # Create the target directory if it does not exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Iterate over each file in the source directory\n    new_files = []\n    for file in files:\n        # Compute the MD5 hash of the file's content\n        with open(file, 'rb') as f:\n            data = f.read()\n        md5 = hashlib.md5(data).hexdigest()\n\n        # Prepend the hash and prefix to the original content\n        with open(file, 'r') as f:\n            content = f.read()\n        new_content = prefix + md5 + '\\n' + content\n\n        # Write the modified content to a new file in the target directory\n        new_file = os.path.join(target_dir, os.path.basename(file))\n        with open(new_file, 'w') as f:\n            f.write(new_content)\n\n        # Add the path to the new file to the list of new files\n        new_files.append(new_file)\n\n    return new_files", "problem": "Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix to the original content, and writes the modified content to new files in the `target_dir`. Existing files with the same name in `target_dir` are overwritten.\nThe function should raise the exception for: FileNotFoundError if the source directory does not exist.\nThe function should output with:\n    list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n```", "solution": "import os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    \n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        \n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        \n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        \n        new_files.append(new_file_path)\n    \n    return new_files", "pass": true}
{"task_id": "1135", "program": "import collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n\n    pass\nimport collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n    \"\"\"\n    Retrieves the names of the repositories of a specified GitHub user, sorted in ascending order by their creation date.\n\n    Args:\n        user (str): The GitHub username of the user whose repositories to retrieve.\n        API_URL (str): The base URL of the GitHub API.\n\n    Returns:\n        list of str: A list of repository names, sorted by their creation dates from oldest to newest.\n    \"\"\"\n    # Construct the URL for the GitHub API\n    url = API_URL + user + '/repos'\n\n    # Send a request to the GitHub API\n    response = requests.get(url)\n\n    # Parse the response as JSON\n    data = json.loads(response.text)\n\n    # Extract the repository names and creation dates\n    repos = [(repo['name'], repo['created_at']) for repo in data]\n\n    # Sort the repositories by creation date\n    repos.sort(key=lambda x: x[1])\n\n    # Return the sorted list of repository names\n    return [repo[0] for repo in repos]\nuser = 'octocat'", "problem": "Retrieves the names of the repositories of a specified GitHub user, sorted in ascending order by their creation date. The function queries the GitHub API for all repositories of a given user, parses the response to extract the names and creation dates, and returns the repository names sorted by the date they were created.\nThe function should output with:\n    list of str: A list of repository names, sorted by their creation dates from oldest to newest.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n```", "solution": "import collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n    response = requests.get(API_URL + user + '/repos')\n    data = json.loads(response.text)\n    repos = {repo['name']: repo['created_at'] for repo in data}\n    sorted_repos = collections.OrderedDict(sorted(repos.items(), key=lambda x: x[1]))\n    return list(sorted_repos.keys())", "pass": true}
{"task_id": "1136", "program": "import bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n\n    pass\nimport bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n              regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n              headers={'User-Agent': 'Mozilla/5.0'}):\n    \"\"\"\n    Scrapes a web page to extract all email addresses using a specified regular expression pattern and writes them to a CSV file.\n    The csv file is always created even if no email is found in the url.\n    The header of the csv should be \"Emails\".\n    :param url: The URL of the web page to scrape\n    :param csv_path: The path to the CSV file where the extracted email addresses will be saved\n    :param regex: The regular expression pattern to use for extracting email addresses\n    :param headers: The headers to use for the HTTP request\n    :return: The path to the CSV file where the extracted email addresses have been saved\n    \"\"\"\n    # Send a GET request to the URL\n    response = requests.get(url, headers=headers)\n\n    # Parse the HTML content using BeautifulSoup\n    soup = bs4.BeautifulSoup(response.content, 'html.parser')\n\n    # Find all email addresses on the page using the regular expression\n    emails = soup.find_all(text=re.compile(regex))\n\n    # Create a CSV file with the header \"Emails\"\n    with open(csv_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Emails'])\n\n        # Write each email address to the CSV file\n        for email in emails:\n            writer.writerow([email])\n\n    return csv_path\nurl = \"https://www.example.com\"\ncsv_path = \"emails.csv\"\nregex = r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\"\nheaders = {'User-Agent': 'Mozilla/5.0'}", "problem": "Scrapes a web page to extract all email addresses using a specified regular expression pattern and writes them to a CSV file. The csv file is always created eventhough no email is found in the url. The header of the csv should be \"Emails\".\nThe function should output with:\n    str: The path to the CSV file where the extracted email addresses have been saved.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n```", "solution": "import bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n    response = requests.get(url, headers=headers)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    text = soup.get_text()\n\n    emails = re.findall(regex, text)\n\n    with open(csv_path, 'w', newline='') as f:\n        write = csv.writer(f)\n        write.writerow(['Emails'])\n        for email in emails:\n            write.writerow([email])\n    \n    return csv_path", "pass": false}
{"task_id": "1137", "program": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n\n    pass\nimport bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\n    The function should output with:\n        list: A list of strings, each representing a found phone number.\n    \"\"\"\n    # Download the HTML content of the URL\n    response = requests.get(url)\n    html_content = response.text\n\n    # Parse the HTML content using BeautifulSoup\n    soup = bs4.BeautifulSoup(html_content, 'html.parser')\n\n    # Find all the phone numbers in the HTML content\n    phone_numbers = []\n    for tag in soup.find_all(re.compile(r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})')):\n        phone_numbers.append(tag.get_text())\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as f:\n        json.dump(phone_numbers, f)\n\n    return phone_numbers\nurl = 'https://www.example.com'\noutput_path = 'phone_numbers.json'", "problem": "Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\nThe function should output with:\n    list: A list of strings, each representing a found phone number.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n```", "solution": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    HEADERS = {'User-Agent': 'Mozilla/5.0'}\n    PHONE_REGEX = r\"\\+\\d{1,3}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}?\\s?\\d{1,9}\"\n\n    # Handling local files separately\n    if url.startswith(\"file://\"):\n        with open(url[7:], 'r') as file:\n            text = file.read()\n    else:\n        response = requests.get(url, headers=HEADERS)\n        soup = bs4.BeautifulSoup(response.text, 'html.parser')\n        text = soup.get_text()\n\n    phone_numbers = re.findall(PHONE_REGEX, text)\n\n    with open(output_path, 'w') as f:\n        json.dump(phone_numbers, f)\n\n    return phone_numbers", "pass": false}
{"task_id": "1138", "program": "import numpy as np\nimport itertools\ndef task_func(matrix):\n\n    pass\nimport numpy as np\nimport itertools\ndef task_func(matrix):\n    # Sort the input matrix in ascending order\n    sorted_matrix = np.sort(matrix, axis=0)\n\n    # Find all unique combinations of two elements from the sorted matrix\n    combinations = itertools.combinations(sorted_matrix, 2)\n\n    # Convert the combinations to a list of tuples\n    combinations_list = [tuple(combination) for combination in combinations]\n\n    return sorted_matrix, combinations_list\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "problem": "Sorts a numeric 2D numpy array in ascending order and finds all unique combinations of two elements from the sorted array.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    1. numpy.array: A 1D array with all elements of the input array sorted in ascending order.\n    2. list: A list of tuples, each containing a pair of elements from the sorted array, representing all unique combinations taken two at a time.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(matrix):\n```", "solution": "import numpy as np\nimport itertools\ndef task_func(matrix):\n    sorted_array = np.sort(matrix, axis=None)\n    \n    combinations = list(itertools.combinations(sorted_array, 2))\n    \n    return sorted_array, combinations", "pass": false}
{"task_id": "1139", "program": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n\n    pass\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data[['Hours']], data['Scores'], test_size=0.2, random_state=42)\n\n    # Create a linear regression model and fit the training data\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Predict the scores for the test data\n    y_pred = model.predict(X_test)\n\n    # Calculate the mean squared error\n    mse = np.mean((y_test - y_pred) ** 2)\n\n    return mse\ndata = pd.DataFrame({'Hours': [10, 8, 12, 9, 11], 'Scores': [90, 80, 100, 70, 95]})", "problem": "Train a simple linear regression model based on the given data and evaluate the model by calculating the mean square error. The data should be structured with 'Hours' as independent variables and 'Scores' as dependent variables. The function set the random set when dividing the train and test data to 42 and the test set size is 0.2\nThe function should output with:\n    float: The mean squared error between the actual scores and predicted scores based on the test split.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n```", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n    df = pd.DataFrame(data)\n    \n    X = df[['Hours']]\n    y = df['Scores']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    predictions = model.predict(X_test)\n    \n    mse = np.mean((y_test - predictions) ** 2)\n    \n    return mse", "pass": false}
