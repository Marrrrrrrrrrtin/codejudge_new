{"0": "a, b, c = map(int, input().split())\n\nif c == 0:\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    if (b - a) % c == 0 and (b - a) // c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "1": "def lexicographically_minimal_string(s):\n    t = []\n    u = []\n    s = list(s)\n    \n    while s or t:\n        if not t:\n            t.append(s.pop(0))\n        elif not s:\n            u.append(t.pop())\n        else:\n            if s[0] <= t[-1]:\n                t.append(s.pop(0))\n            else:\n                u.append(t.pop())\n    \n    return ''.join(u)\n\n# Read input\nimport sys\ninput = sys.stdin.read().strip()\n\n# Get the result\nresult = lexicographically_minimal_string(input)\n\n# Print the result\nprint(result)", "2": "def count_years_with_one_zero(a, b):\n    def has_exactly_one_zero_in_binary(n):\n        binary_representation = bin(n)[2:]  # Get binary representation without '0b' prefix\n        return binary_representation.count('0') == 1\n\n    count = 0\n    for year in range(a, b + 1):\n        if has_exactly_one_zero_in_binary(year):\n            count += 1\n\n    return count\n\n# Read input\na, b = map(int, input().split())\n\n# Calculate and print the result\nprint(count_years_with_one_zero(a, b))", "3": "b, d, s = map(int, input().split())\n\n# Find the maximum number of meals of any type\nmax_meals = max(b, d, s)\n\n# Calculate the minimum number of missed meals\nmissed_meals = max(0, (max_meals - 1 - b)) + max(0, (max_meals - 1 - d)) + max(0, (max_meals - 1 - s))\n\nprint(missed_meals)", "4": "def max_cost_subarray(n, m, k, a):\n    # Initialize the maximum cost to 0 (considering the empty subarray)\n    max_cost = 0\n    # Initialize the current sum and the minimum sum seen so far\n    current_sum = 0\n    min_sum = 0\n    \n    # Iterate over the array\n    for i in range(n):\n        current_sum += a[i]\n        # Calculate the number of segments of length m in the current subarray\n        segments = (i + 1) // m\n        # Calculate the cost of the current subarray\n        cost = current_sum - k * segments\n        # Update the maximum cost\n        max_cost = max(max_cost, cost - min_sum)\n        # Update the minimum sum seen so far\n        if (i + 1) % m == 0:\n            min_sum = min(min_sum, current_sum - k * ((i + 1) // m))\n    \n    return max_cost\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\nk = int(data[2])\na = list(map(int, data[3:]))\n\n# Calculate and print the result\nprint(max_cost_subarray(n, m, k, a))", "5": "def is_valid_sequence(n, days):\n    # Define the days in each month for both leap and non-leap years\n    non_leap_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    leap_year = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Create a combined list to handle the wrap-around of months\n    combined = non_leap_year + non_leap_year + leap_year + leap_year\n    \n    # Check if the sequence exists in the combined list\n    for i in range(len(combined) - n + 1):\n        if combined[i:i+n] == days:\n            return \"YES\"\n    \n    return \"NO\"\n\n# Read input\nn = int(input().strip())\ndays = list(map(int, input().strip().split()))\n\n# Output the result\nprint(is_valid_sequence(n, days))", "6": "def find_smallest_n(m):\n    # Function to count the number of valid ways for a given n\n    def count_ways(n):\n        count = 0\n        k = 2\n        while k * k * k * k <= n:\n            count += n // (k * k * k * k)\n            k += 1\n        return count\n\n    # Binary search for the smallest n\n    left, right = 1, 10**18\n    while left < right:\n        mid = (left + right) // 2\n        if count_ways(mid) < m:\n            left = mid + 1\n        else:\n            right = mid\n\n    if count_ways(left) == m:\n        return left\n    else:\n        return -1\n\n# Read input\nm = int(input().strip())\n\n# Find and print the smallest possible value of n\nprint(find_smallest_n(m))", "7": "def min_time_to_turn_off_lights(n, m, building):\n    # Initialize the total time\n    total_time = 0\n    \n    # Initialize the current position (ground floor, left stairs)\n    current_floor = 0\n    current_position = 0\n    \n    # Process each floor from the ground floor to the top floor\n    for floor in range(n):\n        # Get the current floor's light status\n        lights = building[floor]\n        \n        # Find the leftmost and rightmost lights that are on\n        leftmost = lights.find('1')\n        rightmost = lights.rfind('1')\n        \n        if leftmost == -1:\n            # No lights are on in this floor, just move to the next floor\n            total_time += 1\n            continue\n        \n        if floor % 2 == 0:\n            # If the floor is even, we start from the left stairs\n            total_time += rightmost\n            total_time += 1  # Move to the next floor\n        else:\n            # If the floor is odd, we start from the right stairs\n            total_time += (m + 1 - leftmost)\n            total_time += 1  # Move to the next floor\n    \n    # Add the time to reach the last light on the top floor\n    if n % 2 == 0:\n        total_time += rightmost\n    else:\n        total_time += (m + 1 - leftmost)\n    \n    return total_time\n\n# Read input\nn, m = map(int, input().split())\nbuilding = [input().strip() for _ in range(n)]\n\n# Calculate and print the minimum total time\nprint(min_time_to_turn_off_lights(n, m, building))", "8": "def can_draw_parallel_lines(n, y):\n    if n < 3:\n        return \"No\"\n    \n    # Check if we can split the points into two groups with the same slope\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            # Calculate the slope of the line passing through points (1, y[0]) and (i+1, y[i])\n            slope1 = (y[i] - y[0]) / (i)\n            # Calculate the slope of the line passing through points (1, y[0]) and (j+1, y[j])\n            slope2 = (y[j] - y[0]) / (j)\n            \n            if slope1 == slope2:\n                continue\n            \n            # Try to split the points into two groups with these slopes\n            group1 = set([0, i])\n            group2 = set([j])\n            \n            for k in range(1, n):\n                if k == i or k == j:\n                    continue\n                \n                # Check if point (k+1, y[k]) can be added to group1\n                if (y[k] - y[0]) / k == slope1:\n                    group1.add(k)\n                # Check if point (k+1, y[k]) can be added to group2\n                elif (y[k] - y[0]) / k == slope2:\n                    group2.add(k)\n                else:\n                    break\n            else:\n                if len(group1) > 1 and len(group2) > 1:\n                    return \"Yes\"\n    \n    return \"No\"\n\n# Read input\nn = int(input())\ny = list(map(int, input().split()))\n\n# Output result\nprint(can_draw_parallel_lines(n, y))", "9": "def calculate_messages_read(n, k, links):\n    result = []\n    for t in range(1, n + 1):\n        visited = set()\n        current = t - 1\n        while current >= 0:\n            start = max(0, current - k)\n            end = min(n, current + k + 1)\n            for i in range(start, end):\n                visited.add(i)\n            if links[current] == 0:\n                break\n            current = links[current] - 1\n        result.append(len(visited))\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nk = int(data[1])\nlinks = list(map(int, data[2:]))\n\n# Calculate the result\nresult = calculate_messages_read(n, k, links)\n\n# Print the result\nprint(\" \".join(map(str, result)))", "10": "def min_cost_to_olympiad(n, a, b, companies):\n    # If starting and ending airports are the same, cost is zero\n    if a == b:\n        return 0\n    \n    # If starting and ending airports belong to the same company, cost is zero\n    if companies[a - 1] == companies[b - 1]:\n        return 0\n    \n    # Otherwise, the cost is the absolute difference between the airport ids\n    return abs(a - b)\n\n# Read input\nn, a, b = map(int, input().split())\ncompanies = input().strip()\n\n# Calculate and print the minimum cost\nprint(min_cost_to_olympiad(n, a, b, companies))", "11": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    facts = []\n    index = 2\n    for _ in range(q):\n        t = int(data[index])\n        l = int(data[index + 1])\n        r = int(data[index + 2])\n        v = int(data[index + 3])\n        facts.append((t, l, r, v))\n        index += 4\n    \n    # Initialize the array with the minimum possible values\n    a = [1] * n\n    \n    # Apply the facts\n    for t, l, r, v in facts:\n        if t == 1:\n            for i in range(l - 1, r):\n                a[i] = max(a[i], v)\n        elif t == 2:\n            for i in range(l - 1, r):\n                a[i] = min(a[i], v)\n    \n    # Check for contradictions\n    for t, l, r, v in facts:\n        if t == 1:\n            for i in range(l - 1, r):\n                if a[i] < v:\n                    print(-1)\n                    return\n        elif t == 2:\n            for i in range(l - 1, r):\n                if a[i] > v:\n                    print(-1)\n                    return\n    \n    # Calculate the cost\n    from collections import Counter\n    cnt = Counter(a)\n    cost = sum(cnt[i] ** 2 for i in cnt)\n    \n    print(cost)", "12": "MOD = 10**9 + 7\n\ndef count_subsequence_pairs(N, M, S, T):\n    # Create a 2D DP array\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    \n    # Initialize the base case\n    for i in range(N + 1):\n        dp[i][0] = 1\n    for j in range(M + 1):\n        dp[0][j] = 1\n    \n    # Fill the DP table\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n            if S[i - 1] == T[j - 1]:\n                dp[i][j] += dp[i - 1][j - 1]\n            dp[i][j] %= MOD\n    \n    return dp[N][M]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nS = list(map(int, data[2:N+2]))\nT = list(map(int, data[N+2:N+2+M]))\n\n# Calculate the result\nresult = count_subsequence_pairs(N, M, S, T)\n\n# Print the result\nprint(result)", "13": "def arrange_tea(n, k, a, b):\n    if a < b:\n        a, b = b, a\n        main_char, alt_char = 'B', 'G'\n    else:\n        main_char, alt_char = 'G', 'B'\n    \n    result = []\n    while a > 0 or b > 0:\n        if a > b:\n            take = min(k, a)\n            result.append(main_char * take)\n            a -= take\n            if b > 0:\n                result.append(alt_char)\n                b -= 1\n        else:\n            take = min(k, b)\n            result.append(alt_char * take)\n            b -= take\n            if a > 0:\n                result.append(main_char)\n                a -= 1\n        \n        if len(result) > 1 and result[-1] == result[-2]:\n            print(\"NO\")\n            return\n    \n    print(\"\".join(result))\n\n# Read input\nn, k, a, b = map(int, input().split())\n\n# Call the function\narrange_tea(n, k, a, b)", "14": "MOD = 10**9 + 7\n\ndef count_rsbs(s):\n    n = len(s)\n    if n % 2 != 0:\n        return 0\n\n    left_count = [0] * (n + 1)\n    right_count = [0] * (n + 1)\n\n    for i in range(n):\n        left_count[i + 1] = left_count[i] + (1 if s[i] == '(' else 0)\n    \n    for i in range(n - 1, -1, -1):\n        right_count[i] = right_count[i + 1] + (1 if s[i] == ')' else 0)\n\n    result = 0\n    for i in range(n):\n        if s[i] == '(':\n            result = (result + right_count[i + 1]) % MOD\n\n    return result\n\ns = input().strip()\nprint(count_rsbs(s))", "15": "n, v = map(int, input().split())\ntrees = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Create a list to store the number of fruits ripening on each day\nmax_day = 3000\nripening = [0] * (max_day + 2)\n\n# Populate the ripening list with the number of fruits ripening on each day\nfor a, b in trees:\n    ripening[a] += b\n\n# Initialize the total number of fruits collected\ntotal_collected = 0\n\n# Iterate through each day to collect fruits\nfor day in range(1, max_day + 1):\n    # Collect fruits from the previous day if any\n    if ripening[day - 1] > 0:\n        collect_today = min(v, ripening[day - 1])\n        total_collected += collect_today\n        ripening[day - 1] -= collect_today\n        v_left = v - collect_today\n    else:\n        v_left = v\n\n    # Collect fruits from the current day\n    if ripening[day] > 0:\n        collect_today = min(v_left, ripening[day])\n        total_collected += collect_today\n        ripening[day] -= collect_today\n\nprint(total_collected)", "16": "def count_candies(n, T, prices):\n    total_candies = 0\n    while True:\n        current_spent = 0\n        current_candies = 0\n        for price in prices:\n            if T >= price:\n                T -= price\n                current_spent += price\n                current_candies += 1\n        if current_candies == 0:\n            break\n        total_candies += current_candies\n        T -= current_spent\n    return total_candies\n\n# Read input\nn, T = map(int, input().split())\nprices = list(map(int, input().split()))\n\n# Calculate and print the result\nprint(count_candies(n, T, prices))", "17": "# Read input values\nn, m = map(int, input().split())\nsequence = list(map(int, input().split()))\nfingerprints = set(map(int, input().split()))\n\n# Find the longest subsequence\nresult = [digit for digit in sequence if digit in fingerprints]\n\n# Print the result\nprint(\" \".join(map(str, result)))", "18": "def lexicographically_smallest_array(n, a):\n    # Separate the array into odd and even numbers\n    odd = [x for x in a if x % 2 != 0]\n    even = [x for x in a if x % 2 == 0]\n    \n    # Sort both odd and even numbers\n    odd.sort()\n    even.sort()\n    \n    # Merge the sorted odd and even numbers back into the array\n    result = []\n    odd_index, even_index = 0, 0\n    \n    for num in a:\n        if num % 2 == 0:\n            result.append(even[even_index])\n            even_index += 1\n        else:\n            result.append(odd[odd_index])\n            odd_index += 1\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\na = list(map(int, data[1:]))\n\n# Get the lexicographically smallest array\nresult = lexicographically_smallest_array(n, a)\n\n# Print the result\nprint(\" \".join(map(str, result)))", "19": "from collections import Counter\n\ndef min_sheets(s, n):\n    # Count the frequency of each character in the string s\n    freq = Counter(s)\n    \n    # Find the maximum frequency of any character\n    max_freq = max(freq.values())\n    \n    # If the maximum frequency of any character is greater than n, it's impossible to form the string\n    if max_freq > n:\n        return -1, \"\"\n    \n    # Calculate the minimum number of sheets required\n    min_sheets = (len(s) + n - 1) // n\n    \n    # Create a string for the sheet of stickers\n    sheet = []\n    for char, count in freq.items():\n        sheet.extend([char] * min(count, n))\n    \n    # If the sheet is shorter than n, fill the rest with any character (e.g., 'a')\n    while len(sheet) < n:\n        sheet.append('a')\n    \n    return min_sheets, ''.join(sheet)\n\n# Read input\ns = input().strip()\nn = int(input().strip())\n\n# Get the result\nsheets, sheet_string = min_sheets(s, n)\n\n# Print the result\nif sheets == -1:\n    print(-1)\nelse:\n    print(sheets)\n    print(sheet_string)", "20": "def correct_typos(s):\n    t = []\n    for char in s:\n        t.append(char)\n        if len(t) >= 3 and t[-1] == t[-2] == t[-3]:\n            t.pop()\n        if len(t) >= 4 and t[-1] == t[-2] and t[-3] == t[-4]:\n            t.pop()\n    return ''.join(t)\n\n# Read input\ns = input().strip()\n\n# Correct typos\nresult = correct_typos(s)\n\n# Print the result\nprint(result)", "21": "def find_smallest_x(n, k):\n    for b in range(1, k):\n        if n % b == 0:\n            a = n // b\n            x = a * k + b\n            return x\n\n# Read input\nn, k = map(int, input().split())\n\n# Find and print the smallest x\nprint(find_smallest_x(n, k))", "22": "def construct_array(n, x):\n    max_val = 1 << n\n    if x >= max_val:\n        return 0, []\n\n    # Initialize the array with all possible values\n    array = list(range(1, max_val))\n    result = []\n    current_xor = 0\n\n    for num in array:\n        if current_xor ^ num != x:\n            result.append(num)\n            current_xor ^= num\n\n    return len(result), result\n\n# Read input\nn, x = map(int, input().strip().split())\n\n# Get the result\nlength, result_array = construct_array(n, x)\n\n# Print the result\nprint(length)\nif length > 0:\n    print(\" \".join(map(str, result_array)))", "23": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef solve_queries(queries):\n    results = []\n    for s in queries:\n        if len(s) == 1:\n            results.append(\"-1\")\n        else:\n            sorted_s = ''.join(sorted(s))\n            if is_palindrome(sorted_s):\n                results.append(\"-1\")\n            else:\n                results.append(sorted_s)\n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nqueries = data[1:t+1]\n\n# Solve the queries\nresults = solve_queries(queries)\n\n# Print the results\nfor result in results:\n    print(result)", "24": "def count_non_zero_area_triangles(n, points):\n    def area(x1, y1, x2, y2, x3, y3):\n        return abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2\n\n    if n < 3:\n        return 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if area(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0], points[k][1]) > 0:\n                    count += 1\n\n    return count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\npoints = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)]\n\n# Calculate and print the result\nprint(count_non_zero_area_triangles(n, points))", "25": "def max_valid_sequence_value(n, blocks):\n    from collections import defaultdict\n    import itertools\n\n    # Create a graph where each node is a color and edges are blocks\n    graph = defaultdict(list)\n    for color1, value, color2 in blocks:\n        graph[color1].append((value, color2))\n        graph[color2].append((value, color1))\n\n    # Function to find the maximum value path starting from a given color\n    def dfs(color, visited):\n        max_value = 0\n        for value, next_color in graph[color]:\n            if (color, next_color) not in visited and (next_color, color) not in visited:\n                visited.add((color, next_color))\n                max_value = max(max_value, value + dfs(next_color, visited))\n                visited.remove((color, next_color))\n        return max_value\n\n    # Try to start from each color and find the maximum value path\n    max_total_value = 0\n    for color in range(1, 5):\n        max_total_value = max(max_total_value, dfs(color, set()))\n\n    return max_total_value\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nblocks = []\nindex = 1\nfor i in range(n):\n    color1 = int(data[index])\n    value = int(data[index + 1])\n    color2 = int(data[index + 2])\n    blocks.append((color1, value, color2))\n    index += 3\n\n# Get the result and print it\nresult = max_valid_sequence_value(n, blocks)\nprint(result)", "26": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    a = list(map(int, data[1:]))\n    \n    b = []\n    sum_b = 0\n    \n    for ai in a:\n        bi = ai // 2\n        b.append(bi)\n        sum_b += bi\n    \n    for i in range(n):\n        if sum_b == 0:\n            break\n        if a[i] % 2 != 0:\n            if sum_b > 0 and a[i] < 0:\n                b[i] -= 1\n                sum_b -= 1\n            elif sum_b < 0 and a[i] > 0:\n                b[i] += 1\n                sum_b += 1\n    \n    print(\"\\n\".join(map(str, b)))\n\nsolve()", "27": "MOD = 998244353\n\ndef find_permutations(N, K, matrix):\n    def can_swap_columns(x, y):\n        for i in range(N):\n            if matrix[i][x] + matrix[i][y] > K:\n                return False\n        return True\n\n    def can_swap_rows(x, y):\n        for i in range(N):\n            if matrix[x][i] + matrix[y][i] > K:\n                return False\n        return True\n\n    def find_swappable_groups(can_swap_func):\n        parent = list(range(N))\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootY] = rootX\n\n        for i in range(N):\n            for j in range(i + 1, N):\n                if can_swap_func(i, j):\n                    union(i, j)\n\n        groups = {}\n        for i in range(N):\n            root = find(i)\n            if root not in groups:\n                groups[root] = []\n            groups[root].append(i)\n\n        return groups\n\n    def factorial(n):\n        result = 1\n        for i in range(2, n + 1):\n            result = (result * i) % MOD\n        return result\n\n    column_groups = find_swappable_groups(can_swap_columns)\n    row_groups = find_swappable_groups(can_swap_rows)\n\n    column_permutations = 1\n    for group in column_groups.values():\n        column_permutations = (column_permutations * factorial(len(group))) % MOD\n\n    row_permutations = 1\n    for group in row_groups.values():\n        row_permutations = (row_permutations * factorial(len(group))) % MOD\n\n    return (column_permutations * row_permutations) % MOD\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nmatrix = []\nindex = 2\nfor i in range(N):\n    row = list(map(int, data[index:index + N]))\n    matrix.append(row)\n    index += N\n\nprint(find_permutations(N, K, matrix))", "28": "# Read the number of bidders\nn = int(input().strip())\n\n# Read the bids\nbids = list(map(int, input().strip().split()))\n\n# Find the highest bid and its index\nmax_bid = max(bids)\nwinner_index = bids.index(max_bid) + 1\n\n# Remove the highest bid to find the second highest bid\nbids.remove(max_bid)\nsecond_highest_bid = max(bids)\n\n# Output the winner index and the second highest bid\nprint(winner_index, second_highest_bid)", "29": "def atcoder_janken(N, M):\n    pairs = []\n    for i in range(1, M + 1):\n        pairs.append((i, N - i + 1))\n    for a, b in pairs:\n        print(a, b)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split()\nN = int(data[0])\nM = int(data[1])\n\n# Generate and print the pairs\natcoder_janken(N, M)", "30": "def count_pairs(n, x, k, a):\n    a.sort()\n    count = 0\n\n    for i in range(n):\n        left = a[i]\n        if k == 0:\n            # We need to find pairs (i, j) such that a[i] <= a[j] and no number between them is divisible by x\n            # This means a[j] should be less than the next multiple of x greater than a[i]\n            next_multiple = ((left // x) + 1) * x\n            j = i\n            while j < n and a[j] < next_multiple:\n                j += 1\n            count += j - i\n        else:\n            # We need to find pairs (i, j) such that there are exactly k numbers divisible by x between a[i] and a[j]\n            # This means a[j] should be at least left + k * x and less than left + (k + 1) * x\n            lower_bound = left + k * x\n            upper_bound = left + (k + 1) * x\n            j = i\n            while j < n and a[j] < lower_bound:\n                j += 1\n            start = j\n            while j < n and a[j] < upper_bound:\n                j += 1\n            count += j - start\n\n    return count\n\n# Read input\nn, x, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Get the result\nresult = count_pairs(n, x, k, a)\n\n# Print the result\nprint(result)", "31": "def tennis_tournament(N, matches):\n    from collections import deque, defaultdict\n\n    # Create a list of deques for each player to store their match order\n    match_order = [deque(matches[i]) for i in range(N)]\n    \n    # Create a dictionary to store the current match day for each pair\n    match_day = defaultdict(int)\n    \n    # Initialize the current day\n    current_day = 0\n    \n    # While there are still matches to be scheduled\n    while True:\n        # Track if any match is scheduled on this day\n        scheduled = False\n        \n        # Track the players who have already played today\n        played_today = set()\n        \n        # Try to schedule matches for each player\n        for i in range(N):\n            if i in played_today or not match_order[i]:\n                continue\n            \n            opponent = match_order[i][0] - 1\n            if opponent in played_today or not match_order[opponent]:\n                continue\n            \n            if match_order[opponent][0] - 1 == i:\n                # Schedule the match\n                match_order[i].popleft()\n                match_order[opponent].popleft()\n                played_today.add(i)\n                played_today.add(opponent)\n                scheduled = True\n        \n        if not scheduled:\n            break\n        \n        current_day += 1\n    \n    # Check if all matches are scheduled\n    for i in range(N):\n        if match_order[i]:\n            return -1\n    \n    return current_day\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nmatches = []\nindex = 1\nfor i in range(N):\n    matches.append([int(data[index + j]) for j in range(N - 1)])\n    index += (N - 1)\n\n# Output the result\nprint(tennis_tournament(N, matches))", "32": "def min_page_turns(n, m, a):\n    if m == 1:\n        return 0\n\n    # Calculate the initial number of page turns\n    initial_turns = sum(abs(a[i] - a[i - 1]) for i in range(1, m))\n\n    # If there's only one page, no need to merge\n    if n == 1:\n        return initial_turns\n\n    # Calculate the total number of turns if we merge each page to another\n    min_turns = initial_turns\n\n    # We will use a dictionary to count the frequency of each page\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for page in a:\n        freq[page] += 1\n\n    # Calculate the total cost of turning pages\n    total_cost = defaultdict(int)\n    for i in range(1, m):\n        total_cost[a[i]] += abs(a[i] - a[i - 1])\n        total_cost[a[i - 1]] += abs(a[i] - a[i - 1])\n\n    # Try merging each page to another and calculate the new number of turns\n    for x in range(1, n + 1):\n        current_turns = initial_turns\n        for y in range(1, n + 1):\n            if x != y:\n                # Calculate the cost of merging x to y\n                merge_cost = 0\n                for i in range(1, m):\n                    if a[i] == x:\n                        merge_cost += abs(y - a[i - 1])\n                    if a[i - 1] == x:\n                        merge_cost += abs(y - a[i])\n                current_turns = min(current_turns, initial_turns - total_cost[x] + merge_cost)\n        min_turns = min(min_turns, current_turns)\n\n    return min_turns\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:]))\n\n# Output the result\nprint(min_page_turns(n, m, a))", "33": "def distribute_mittens(n, m, colors):\n    from collections import defaultdict, deque\n\n    # Count the number of children with each color\n    color_count = defaultdict(int)\n    for color in colors:\n        color_count[color] += 1\n\n    # Create a list of children for each color\n    color_children = defaultdict(deque)\n    for i, color in enumerate(colors):\n        color_children[color].append(i)\n\n    # Create the result array\n    result = [[0, 0] for _ in range(n)]\n\n    # Create a list of all children\n    all_children = deque(range(n))\n\n    # Distribute left mittens\n    for color in range(1, m + 1):\n        while color_count[color] > 0:\n            child = all_children.popleft()\n            result[child][0] = color\n            color_count[color] -= 1\n\n    # Reset the color count\n    color_count = defaultdict(int)\n    for color in colors:\n        color_count[color] += 1\n\n    # Distribute right mittens\n    for color in range(1, m + 1):\n        while color_count[color] > 0:\n            child = color_children[color].popleft()\n            result[child][1] = color\n            color_count[color] -= 1\n\n    # Ensure distinct colors for each child\n    for i in range(n):\n        if result[i][0] == result[i][1]:\n            for j in range(n):\n                if i != j and result[i][0] != result[j][1] and result[j][0] != result[i][1]:\n                    result[i][1], result[j][1] = result[j][1], result[i][1]\n                    break\n\n    # Count the number of children with distinct-colored mittens\n    distinct_count = sum(1 for left, right in result if left != right)\n\n    # Print the result\n    print(distinct_count)\n    for left, right in result:\n        print(left, right)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\ncolors = list(map(int, data[2:]))\n\n# Distribute mittens\ndistribute_mittens(n, m, colors)", "34": "def min_moves_to_equalize(n, matches):\n    target = sum(matches) // n\n    moves = 0\n    balance = 0\n    \n    for match in matches:\n        balance += match - target\n        moves += abs(balance)\n    \n    return moves\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nmatches = list(map(int, data[1:]))\n\n# Calculate and print the result\nprint(min_moves_to_equalize(n, matches))", "35": "n = int(input())\n\nif n == 1:\n    print(-1)\nelse:\n    # A simple counter-example for n > 1\n    # For example, [2, 1] will not be sorted correctly by Valera's algorithm\n    print(\"2 1\")", "36": "def find_lexicographically_smallest_string(n, k, s):\n    # Get the set of unique characters in s\n    unique_chars = sorted(set(s))\n    \n    # If k is greater than n, we need to append the smallest character\n    if k > n:\n        print(s + unique_chars[0] * (k - n))\n        return\n    \n    # Start with the first k characters of s\n    t = list(s[:k])\n    \n    # Find the position from the end where we can increment the character\n    for i in range(k - 1, -1, -1):\n        if t[i] != unique_chars[-1]:\n            # Find the next character in the sorted unique characters\n            next_char = unique_chars[unique_chars.index(t[i]) + 1]\n            t[i] = next_char\n            # Fill the rest with the smallest character\n            t = t[:i + 1] + [unique_chars[0]] * (k - i - 1)\n            print(\"\".join(t))\n            return\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\ns = data[2]\n\n# Find and print the result\nfind_lexicographically_smallest_string(n, k, s)", "37": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    m = int(data[0])\n    essay = data[1:m+1]\n    n = int(data[m+1])\n    synonyms = data[m+2:]\n    \n    synonym_dict = {}\n    for i in range(n):\n        x = synonyms[2*i]\n        y = synonyms[2*i + 1]\n        synonym_dict[x.lower()] = y.lower()\n    \n    def count_r_and_length(word):\n        return word.lower().count('r'), len(word)\n    \n    optimal_essay = []\n    for word in essay:\n        original_word = word.lower()\n        if original_word in synonym_dict:\n            synonym_word = synonym_dict[original_word]\n            original_r_count, original_length = count_r_and_length(word)\n            synonym_r_count, synonym_length = count_r_and_length(synonym_word)\n            if (synonym_r_count < original_r_count) or (synonym_r_count == original_r_count and synonym_length < original_length):\n                optimal_essay.append(synonym_word)\n            else:\n                optimal_essay.append(word)\n        else:\n            optimal_essay.append(word)\n    \n    min_r_count = sum(word.lower().count('r') for word in optimal_essay)\n    min_length = sum(len(word) for word in optimal_essay)\n    \n    print(min_r_count, min_length)\n\nif __name__ == \"__main__\":\n    main()", "38": "def min_seconds_to_water_garden(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, k, taps = case\n        taps.sort()\n        max_distance = 0\n        \n        # Check the distance to the nearest tap for each bed\n        for i in range(1, n + 1):\n            min_distance = float('inf')\n            for tap in taps:\n                min_distance = min(min_distance, abs(tap - i) + 1)\n            max_distance = max(max_distance, min_distance)\n        \n        results.append(max_distance)\n    \n    return results\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    taps = list(map(int, input().split()))\n    test_cases.append((n, k, taps))\n\n# Get results\nresults = min_seconds_to_water_garden(t, test_cases)\n\n# Print results\nfor result in results:\n    print(result)", "39": "def find_min_x(n, m, a, b):\n    a.sort()\n    b.sort()\n    \n    def is_valid_x(x):\n        a_mod = [(a_i + x) % m for a_i in a]\n        a_mod.sort()\n        return a_mod == b\n    \n    min_x = float('inf')\n    for i in range(n):\n        x = (b[i] - a[0]) % m\n        if is_valid_x(x):\n            min_x = min(min_x, x)\n    \n    return min_x\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:n+2]))\nb = list(map(int, data[n+2:2*n+2]))\n\n# Find and print the result\nprint(find_min_x(n, m, a, b))", "40": "def longest_fibonacciish_prefix(n, a):\n    a.sort()\n    max_len = 2\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            f0, f1 = a[i], a[j]\n            length = 2\n            while True:\n                f2 = f0 + f1\n                if f2 in a:\n                    length += 1\n                    f0, f1 = f1, f2\n                else:\n                    break\n            max_len = max(max_len, length)\n    \n    return max_len\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Get the result\nresult = longest_fibonacciish_prefix(n, a)\n\n# Print the result\nprint(result)", "41": "import sys\nimport heapq\n\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\nk = int(data[2])\n\nc = list(map(int, data[3:3 + k]))\n\nedges = []\nindex = 3 + k\nfor _ in range(m):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    x = int(data[index + 2])\n    edges.append((u, v, x))\n    index += 3\n\n# Determine the type of each bacteria\ntype_of_bacteria = [0] * n\ncurrent_index = 0\nfor i in range(k):\n    for j in range(c[i]):\n        type_of_bacteria[current_index] = i\n        current_index += 1\n\n# Check if each type is internally connected with zero cost\ndef is_connected_with_zero_cost(start, end):\n    visited = [False] * n\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node == end:\n            return True\n        if not visited[node]:\n            visited[node] = True\n            for u, v, x in edges:\n                if x == 0:\n                    if u == node and not visited[v]:\n                        stack.append(v)\n                    elif v == node and not visited[u]:\n                        stack.append(u)\n    return False\n\n# Check if each type is internally connected\nfor i in range(k):\n    start = sum(c[:i])\n    end = sum(c[:i + 1])\n    for j in range(start, end):\n        for l in range(j + 1, end):\n            if not is_connected_with_zero_cost(j, l):\n                print(\"No\")\n                sys.exit()\n\n# Use Dijkstra's algorithm to find the minimum cost between types\ndef dijkstra(start_type):\n    dist = [float('inf')] * n\n    pq = []\n    start_index = sum(c[:start_type])\n    end_index = sum(c[:start_type + 1])\n    for i in range(start_index, end_index):\n        dist[i] = 0\n        heapq.heappush(pq, (0, i))\n    \n    while pq:\n        current_dist, u = heapq.heappop(pq)\n        if current_dist > dist[u]:\n            continue\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                heapq.heappush(pq, (dist[v], v))\n    \n    return dist\n\n# Build the graph\ngraph = [[] for _ in range(n)]\nfor u, v, x in edges:\n    graph[u].append((v, x))\n    graph[v].append((u, x))\n\n# Calculate the minimum cost matrix\nd = [[float('inf')] * k for _ in range(k)]\nfor i in range(k):\n    dist = dijkstra(i)\n    for j in range(k):\n        start_index = sum(c[:j])\n        end_index = sum(c[:j + 1])\n        min_cost = min(dist[start_index:end_index])\n        if min_cost == float('inf'):\n            d[i][j] = -1\n        else:\n            d[i][j] = min_cost\n\n# Print the result\nprint(\"Yes\")\nfor row in d:\n    print(\" \".join(map(str, row)))", "42": "import heapq\n\ndef min_sugar_penalty(n, m, a):\n    a.sort()\n    penalties = [0] * n\n    current_penalty = 0\n    heap = []\n    \n    for i in range(n):\n        heapq.heappush(heap, a[i])\n        if len(heap) > m:\n            current_penalty += heapq.heappop(heap)\n        current_penalty += a[i]\n        penalties[i] = current_penalty\n    \n    return penalties\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:]))\n\n# Calculate and print the result\nresult = min_sugar_penalty(n, m, a)\nprint(\" \".join(map(str, result)))", "43": "import math\nimport heapq\n\ndef is_square(x):\n    if x < 0:\n        return False\n    root = int(math.isqrt(x))\n    return root * root == x\n\ndef min_moves_to_balance(n, candies):\n    square_piles = []\n    non_square_piles = []\n    \n    for candy in candies:\n        if is_square(candy):\n            square_piles.append(candy)\n        else:\n            non_square_piles.append(candy)\n    \n    half_n = n // 2\n    if len(square_piles) == half_n and len(non_square_piles) == half_n:\n        return 0\n    \n    if len(square_piles) > half_n:\n        excess = len(square_piles) - half_n\n        moves = []\n        for candy in square_piles:\n            if candy == 0:\n                moves.append(2)\n            else:\n                root = int(math.isqrt(candy))\n                moves.append(min(candy - root * root, (root + 1) * (root + 1) - candy))\n        heapq.heapify(moves)\n        return sum(heapq.nsmallest(excess, moves))\n    \n    if len(non_square_piles) > half_n:\n        excess = len(non_square_piles) - half_n\n        moves = []\n        for candy in non_square_piles:\n            root = int(math.isqrt(candy))\n            moves.append(min(candy - root * root, (root + 1) * (root + 1) - candy))\n        heapq.heapify(moves)\n        return sum(heapq.nsmallest(excess, moves))\n    \n    deficit = half_n - len(square_piles)\n    moves = []\n    for candy in non_square_piles:\n        root = int(math.isqrt(candy))\n        moves.append(min(candy - root * root, (root + 1) * (root + 1) - candy))\n    heapq.heapify(moves)\n    return sum(heapq.nsmallest(deficit, moves))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\ncandies = list(map(int, data[1:]))\n\n# Output the result\nprint(min_moves_to_balance(n, candies))", "44": "S = input().strip()\nN = len(S)\n\n# Initialize the result array with zeros\nresult = [0] * N\n\n# Process the string to find the positions where children will end up\ni = 0\nwhile i < N:\n    if S[i] == 'R':\n        # Find the next 'L' after a sequence of 'R's\n        j = i\n        while S[j] != 'L':\n            j += 1\n        # Now S[i:j] is a sequence of 'R's followed by 'L's\n        # Calculate the number of children ending up at positions j-1 and j\n        r_count = j - i\n        l_count = 1\n        result[j-1] += (r_count + 1) // 2\n        result[j] += r_count // 2\n        result[j-1] += l_count // 2\n        result[j] += (l_count + 1) // 2\n        # Move to the next segment\n        i = j + 1\n    else:\n        i += 1\n\nprint(' '.join(map(str, result)))", "45": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    v = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    queries = data[n+2:]\n    \n    # Precompute prefix sums for original and sorted arrays\n    prefix_sum_v = [0] * (n + 1)\n    sorted_v = sorted(v)\n    prefix_sum_u = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefix_sum_v[i] = prefix_sum_v[i - 1] + v[i - 1]\n        prefix_sum_u[i] = prefix_sum_u[i - 1] + sorted_v[i - 1]\n    \n    result = []\n    for i in range(m):\n        type_query = int(queries[3 * i])\n        l = int(queries[3 * i + 1])\n        r = int(queries[3 * i + 2])\n        \n        if type_query == 1:\n            result.append(prefix_sum_v[r] - prefix_sum_v[l - 1])\n        else:\n            result.append(prefix_sum_u[r] - prefix_sum_u[l - 1])\n    \n    print(\"\\n\".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()", "46": "def find_max_stairs(m, cards):\n    from collections import Counter\n\n    # Count the frequency of each card\n    card_count = Counter(cards)\n    \n    # Find the maximum number of cards that can be used to form a stair sequence\n    unique_cards = sorted(card_count.keys())\n    \n    # Create the increasing part of the stairs\n    increasing_part = []\n    for card in unique_cards:\n        if card_count[card] > 0:\n            increasing_part.append(card)\n            card_count[card] -= 1\n    \n    # Create the decreasing part of the stairs\n    decreasing_part = []\n    for card in reversed(unique_cards):\n        if card_count[card] > 0:\n            decreasing_part.append(card)\n            card_count[card] -= 1\n    \n    # Combine the increasing and decreasing parts\n    stairs = increasing_part + decreasing_part\n    \n    return len(stairs), stairs\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nm = int(data[0])\ncards = list(map(int, data[1:]))\n\n# Find the maximum number of cards that can be used to form a stair sequence\nlength, stairs = find_max_stairs(m, cards)\n\n# Print the result\nprint(length)\nprint(\" \".join(map(str, stairs)))", "47": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pins = data[index:index + n]\n        index += n\n        \n        changes = 0\n        seen = set()\n        new_pins = []\n        \n        for pin in pins:\n            if pin in seen:\n                for i in range(4):\n                    for d in range(10):\n                        new_pin = pin[:i] + str(d) + pin[i+1:]\n                        if new_pin not in seen:\n                            new_pins.append(new_pin)\n                            seen.add(new_pin)\n                            changes += 1\n                            break\n                    else:\n                        continue\n                    break\n            else:\n                new_pins.append(pin)\n                seen.add(pin)\n        \n        results.append(f\"{changes}\")\n        results.extend(new_pins)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    solve()", "48": "def find_completion_times(m, n, times):\n    # Initialize the completion times for each painter\n    completion_times = [[0] * n for _ in range(m)]\n    \n    # Set the completion time for the first painter\n    for i in range(m):\n        if i == 0:\n            completion_times[i][0] = times[i][0]\n        else:\n            completion_times[i][0] = completion_times[i-1][0] + times[i][0]\n    \n    # Calculate the completion times for the rest of the painters\n    for j in range(1, n):\n        for i in range(m):\n            if i == 0:\n                completion_times[i][j] = completion_times[i][j-1] + times[i][j]\n            else:\n                completion_times[i][j] = max(completion_times[i-1][j], completion_times[i][j-1]) + times[i][j]\n    \n    # Extract the completion times for the last painter\n    result = [completion_times[i][n-1] for i in range(m)]\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nm = int(data[0])\nn = int(data[1])\ntimes = []\n\nindex = 2\nfor i in range(m):\n    times.append([int(data[index + j]) for j in range(n)])\n    index += n\n\n# Find the completion times\nresult = find_completion_times(m, n, times)\n\n# Print the result\nprint(\" \".join(map(str, result)))", "49": "def optimal_game_difference(n, a, b):\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    \n    a_score = 0\n    b_score = 0\n    turn = 0  # 0 for A's turn, 1 for B's turn\n    \n    while a or b:\n        if turn == 0:  # A's turn\n            if not a:\n                b.pop(0)\n            elif not b:\n                a_score += a.pop(0)\n            elif a[0] >= b[0]:\n                a_score += a.pop(0)\n            else:\n                b.pop(0)\n        else:  # B's turn\n            if not b:\n                a.pop(0)\n            elif not a:\n                b_score += b.pop(0)\n            elif b[0] >= a[0]:\n                b_score += b.pop(0)\n            else:\n                a.pop(0)\n        \n        turn = 1 - turn  # switch turns\n    \n    return a_score - b_score\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\na = list(map(int, data[1:n+1]))\nb = list(map(int, data[n+1:2*n+1]))\n\n# Calculate and print the result\nprint(optimal_game_difference(n, a, b))", "50": "def best_possible_ranking(N, D, S, P):\n    # Current points of the astronaut of interest\n    current_points = S[D-1]\n    \n    # Points if the astronaut wins the next race\n    max_points = current_points + P[0]\n    \n    # Calculate the best possible ranking\n    best_rank = 1\n    for i in range(N):\n        if i != D-1 and S[i] + P[-1] > max_points:\n            best_rank += 1\n    \n    return best_rank\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nD = int(data[1])\nS = list(map(int, data[2:N+2]))\nP = list(map(int, data[N+2:]))\n\n# Calculate and print the best possible ranking\nprint(best_possible_ranking(N, D, S, P))", "51": "def smallest_prime_divisor(n):\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\ndef count_subtractions(n):\n    count = 0\n    while n > 0:\n        d = smallest_prime_divisor(n)\n        n -= d\n        count += 1\n    return count\n\n# Read input\nn = int(input().strip())\n\n# Output the result\nprint(count_subtractions(n))", "52": "def min_or(n, m, a, b):\n    min_result = float('inf')\n    \n    for mask in range(1 << 9):\n        valid = True\n        for ai in a:\n            found = False\n            for bj in b:\n                if (ai & bj) | mask == mask:\n                    found = True\n                    break\n            if not found:\n                valid = False\n                break\n        if valid:\n            min_result = min(min_result, mask)\n    \n    return min_result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:n+2]))\nb = list(map(int, data[n+2:n+2+m]))\n\n# Compute and print the result\nprint(min_or(n, m, a, b))", "53": "def find_q_from_p(n, p):\n    # Create an array to store the inverse of p\n    inv_p = [0] * n\n    for i in range(n):\n        inv_p[p[i] - 1] = i + 1\n\n    # Create an array to store q\n    q = [0] * n\n    for i in range(n):\n        q[i] = inv_p[inv_p[i] - 1]\n\n    # Verify if q^2 equals p\n    for i in range(n):\n        if p[i] != q[q[i] - 1]:\n            return -1\n\n    return q\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\np = list(map(int, data[1:]))\n\n# Find q from p\nresult = find_q_from_p(n, p)\n\n# Print the result\nif result == -1:\n    print(-1)\nelse:\n    print(\" \".join(map(str, result)))", "54": "def process_array(n, arr):\n    from collections import Counter\n    import heapq\n\n    # Create a counter for the array elements\n    counter = Counter(arr)\n    \n    # Create a min-heap for elements that occur 2 or more times\n    heap = []\n    for key, value in counter.items():\n        if value >= 2:\n            heapq.heappush(heap, key)\n    \n    # Process the array\n    i = 0\n    while heap:\n        # Get the smallest element that occurs 2 or more times\n        x = heapq.heappop(heap)\n        \n        # Find the first two occurrences of x\n        first = -1\n        second = -1\n        for j in range(i, n):\n            if arr[j] == x:\n                if first == -1:\n                    first = j\n                else:\n                    second = j\n                    break\n        \n        # If we found two occurrences, perform the operation\n        if first != -1 and second != -1:\n            arr[first] = 0  # Mark the first occurrence for removal\n            arr[second] = 2 * x  # Replace the second occurrence with 2 * x\n            \n            # Update the counter\n            counter[x] -= 2\n            counter[2 * x] += 1\n            \n            # If 2 * x now occurs 2 or more times, add it to the heap\n            if counter[2 * x] == 2:\n                heapq.heappush(heap, 2 * x)\n            \n            # If x still occurs 2 or more times, add it back to the heap\n            if counter[x] >= 2:\n                heapq.heappush(heap, x)\n    \n    # Remove all marked elements (0s) from the array\n    result = [num for num in arr if num != 0]\n    \n    # Print the result\n    print(len(result))\n    print(\" \".join(map(str, result)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\narr = list(map(int, data[1:]))\n\n# Process the array\nprocess_array(n, arr)", "55": "MOD = 10**9 + 7\n\ndef count_valid_sequences(n, m, s):\n    # Calculate the balance and minimum balance of the given string s\n    balance = 0\n    min_balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        min_balance = min(min_balance, balance)\n    \n    # If the string s itself is invalid, return 0\n    if balance < 0:\n        return 0\n    \n    # Precompute factorials and inverse factorials for binomial coefficients\n    fact = [1] * (n + 1)\n    inv_fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    inv_fact[n] = pow(fact[n], MOD - 2, MOD)\n    for i in range(n - 1, 0, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n    \n    def binom(x, y):\n        if x < 0 or y < 0 or x < y:\n            return 0\n        return fact[x] * inv_fact[y] % MOD * inv_fact[x - y] % MOD\n    \n    # Count valid pairs (p, q)\n    result = 0\n    for p_len in range(n - m + 1):\n        q_len = n - m - p_len\n        for p_balance in range(-min_balance, p_len + 1):\n            if p_balance + balance <= q_len:\n                result = (result + binom(p_len, p_balance) * binom(q_len, p_balance + balance)) % MOD\n    \n    return result\n\n# Read input\nn, m = map(int, input().split())\ns = input().strip()\n\n# Calculate and print the result\nprint(count_valid_sequences(n, m, s))", "56": "MOD = 998244353\n\ndef solve(n, k, h):\n    # Calculate the number of valid answer suits\n    total_suits = pow(k, n, MOD)\n    invalid_suits = 1\n    for i in range(n):\n        if h[i] == h[(i + 1) % n]:\n            invalid_suits = (invalid_suits * k) % MOD\n    valid_suits = (total_suits - invalid_suits + MOD) % MOD\n    return valid_suits\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\nh = list(map(int, data[2:]))\n\n# Output the result\nprint(solve(n, k, h))", "57": "def min_time_to_reach_city_n(m, k, d, s):\n    time = 0\n    fuel = s[0]\n    \n    for i in range(m):\n        if fuel < d[i]:\n            additional_fuel_needed = d[i] - fuel\n            wait_time = (additional_fuel_needed + s[i] - 1) // s[i] * k\n            time += wait_time\n            fuel += (wait_time // k) * s[i]\n        \n        time += d[i]\n        fuel -= d[i]\n        \n        if i < m - 1:\n            fuel += s[i + 1]\n    \n    return time\n\n# Read input\nm, k = map(int, input().split())\nd = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\n# Calculate and print the minimum time\nprint(min_time_to_reach_city_n(m, k, d, s))", "58": "def construct_graph(n, degrees):\n    max_degree = degrees[-1]\n    num_vertices = max_degree + 1\n    edges = []\n\n    # Create a list of vertices for each degree\n    degree_vertices = {d: [] for d in degrees}\n    for i in range(1, num_vertices + 1):\n        for d in degrees:\n            if len(degree_vertices[d]) < d:\n                degree_vertices[d].append(i)\n                break\n\n    # Connect vertices to form the required degrees\n    for d in degrees:\n        vertices = degree_vertices[d]\n        for i in range(len(vertices)):\n            for j in range(i + 1, len(vertices)):\n                edges.append((vertices[i], vertices[j]))\n\n    return edges\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\ndegrees = list(map(int, data[1:]))\n\n# Construct the graph\nedges = construct_graph(n, degrees)\n\n# Output the result\nprint(len(edges))\nfor edge in edges:\n    print(edge[0], edge[1])", "59": "MOD = 998244353\n\ndef solve(n, k, h):\n    # Calculate the number of valid answer suits\n    # We need to count the number of answer suits where the shifted version scores more points than the original\n\n    # Precompute factorials and inverse factorials for binomial coefficients\n    fact = [1] * (n + 1)\n    inv_fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    inv_fact[n] = pow(fact[n], MOD - 2, MOD)\n    for i in range(n - 1, 0, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def binom(x, y):\n        if x < y or y < 0:\n            return 0\n        return fact[x] * inv_fact[y] % MOD * inv_fact[x - y] % MOD\n\n    # Count the number of valid answer suits\n    result = 0\n    for i in range(1, n + 1):\n        result = (result + binom(n, i) * pow(k - 1, n - i, MOD)) % MOD\n\n    result = result * (k - 1) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\nh = list(map(int, data[2:]))\n\n# Output the result\nprint(solve(n, k, h))", "60": "def max_water_amount(n, T, a, t):\n    # Separate taps into three categories\n    less_than_T = []\n    equal_to_T = []\n    greater_than_T = []\n    \n    for i in range(n):\n        if t[i] < T:\n            less_than_T.append((a[i], t[i]))\n        elif t[i] == T:\n            equal_to_T.append((a[i], t[i]))\n        else:\n            greater_than_T.append((a[i], t[i]))\n    \n    # If there are taps with temperature exactly T, use them first\n    total_water = sum(a for a, _ in equal_to_T)\n    total_temp = T * total_water\n    \n    # Sort the taps with temperature less than T in descending order of temperature\n    less_than_T.sort(key=lambda x: x[1], reverse=True)\n    # Sort the taps with temperature greater than T in ascending order of temperature\n    greater_than_T.sort(key=lambda x: x[1])\n    \n    # Add water from taps with temperature less than T\n    for amount, temp in less_than_T:\n        if total_temp / total_water >= T:\n            break\n        total_water += amount\n        total_temp += amount * temp\n    \n    # Add water from taps with temperature greater than T\n    for amount, temp in greater_than_T:\n        if total_temp / total_water <= T:\n            break\n        total_water += amount\n        total_temp += amount * temp\n    \n    # Adjust the total water to exactly match the desired temperature T\n    if total_temp / total_water != T:\n        if total_temp / total_water < T:\n            for amount, temp in greater_than_T:\n                if total_temp / total_water >= T:\n                    break\n                needed = (T * total_water - total_temp) / (temp - T)\n                if needed <= amount:\n                    total_water += needed\n                    total_temp += needed * temp\n                    break\n                total_water += amount\n                total_temp += amount * temp\n        else:\n            for amount, temp in less_than_T:\n                if total_temp / total_water <= T:\n                    break\n                needed = (total_temp - T * total_water) / (T - temp)\n                if needed <= amount:\n                    total_water += needed\n                    total_temp += needed * temp\n                    break\n                total_water += amount\n                total_temp += amount * temp\n    \n    return total_water\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nT = int(data[1])\na = list(map(int, data[2:n+2]))\nt = list(map(int, data[n+2:2*n+2]))\n\n# Calculate and print the result\nresult = max_water_amount(n, T, a, t)\nprint(f\"{result:.12f}\")", "61": "def find_minimal_lexicographical_array(n, a):\n    # List of first 100,000 prime numbers\n    primes = []\n    is_prime = [True] * 100001\n    for i in range(2, 100001):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i * i, 100001, i):\n                is_prime[j] = False\n\n    b = []\n    prime_index = 0\n\n    for num in a:\n        while primes[prime_index] < num:\n            prime_index += 1\n        b.append(primes[prime_index])\n        prime_index += 1\n\n    return b\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\na = list(map(int, data[1:]))\n\n# Find the minimal lexicographical array\nresult = find_minimal_lexicographical_array(n, a)\n\n# Print the result\nprint(\" \".join(map(str, result)))", "62": "def can_make_equal_with_one_swap(k, test_cases):\n    results = []\n    for case in test_cases:\n        n, s, t = case\n        diff = []\n        for i in range(n):\n            if s[i] != t[i]:\n                diff.append(i)\n        \n        if len(diff) == 2:\n            i, j = diff\n            if s[i] == t[j] and s[j] == t[i]:\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nk = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(k):\n    n = int(data[index])\n    s = data[index + 1]\n    t = data[index + 2]\n    test_cases.append((n, s, t))\n    index += 3\n\n# Get results\nresults = can_make_equal_with_one_swap(k, test_cases)\n\n# Print results\nfor result in results:\n    print(result)", "63": "class IntervalGraph:\n    def __init__(self):\n        self.intervals = []\n        self.graph = []\n\n    def add_interval(self, x, y):\n        self.intervals.append((x, y))\n        self.graph.append([])\n\n        for i in range(len(self.intervals) - 1):\n            a, b = self.intervals[i]\n            if (x < a < y) or (x < b < y):\n                self.graph[-1].append(i)\n            if (a < x < b) or (a < y < b):\n                self.graph[i].append(len(self.intervals) - 1)\n\n    def can_reach(self, start, end):\n        visited = [False] * len(self.intervals)\n        return self.dfs(start - 1, end - 1, visited)\n\n    def dfs(self, current, target, visited):\n        if current == target:\n            return True\n        visited[current] = True\n        for neighbor in self.graph[current]:\n            if not visited[neighbor]:\n                if self.dfs(neighbor, target, visited):\n                    return True\n        return False\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nqueries = data[1:]\n\ninterval_graph = IntervalGraph()\noutput = []\n\ni = 0\nwhile i < len(queries):\n    if queries[i] == '1':\n        x = int(queries[i + 1])\n        y = int(queries[i + 2])\n        interval_graph.add_interval(x, y)\n        i += 3\n    elif queries[i] == '2':\n        a = int(queries[i + 1])\n        b = int(queries[i + 2])\n        if interval_graph.can_reach(a, b):\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n        i += 3\n\nprint(\"\\n\".join(output))", "64": "def count_subpermutations(n, a):\n    from collections import defaultdict\n\n    count = 0\n    left = 0\n    freq = defaultdict(int)\n    unique_count = 0\n\n    for right in range(n):\n        if a[right] <= n:\n            if freq[a[right]] == 0:\n                unique_count += 1\n            freq[a[right]] += 1\n\n        while unique_count == right - left + 1:\n            count += 1\n            if a[left] <= n:\n                freq[a[left]] -= 1\n                if freq[a[left]] == 0:\n                    unique_count -= 1\n            left += 1\n\n    return count\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate and print the number of subpermutations\nprint(count_subpermutations(n, a))", "65": "def max_grannies(t, test_cases):\n    results = []\n    for i in range(t):\n        n = test_cases[i][0]\n        a = sorted(test_cases[i][1])\n        max_grannies = 1  # Maria is already in the courtyard\n        for j in range(n):\n            if a[j] <= j + 1:\n                max_grannies = j + 2  # +1 for 0-based index, +1 for Maria\n        results.append(max_grannies)\n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(t):\n    n = int(data[index])\n    a = list(map(int, data[index + 1:index + 1 + n]))\n    test_cases.append((n, a))\n    index += 1 + n\n\n# Get results\nresults = max_grannies(t, test_cases)\n\n# Print results\nfor result in results:\n    print(result)", "66": "def count_black_cells_in_subrectangles(H, W, N, painted_cells):\n    from collections import defaultdict\n\n    # Dictionary to count the number of black cells in each 3x3 subrectangle\n    subrect_count = defaultdict(int)\n\n    # Iterate over each painted cell\n    for a, b in painted_cells:\n        # Check all 3x3 subrectangles that this cell can be a part of\n        for i in range(max(1, a - 2), min(H - 2, a) + 1):\n            for j in range(max(1, b - 2), min(W - 2, b) + 1):\n                subrect_count[(i, j)] += 1\n\n    # Initialize the result array\n    result = [0] * 10\n\n    # Count the number of subrectangles with each possible number of black cells\n    for count in subrect_count.values():\n        result[count] += 1\n\n    # Calculate the total number of 3x3 subrectangles\n    total_subrectangles = (H - 2) * (W - 2)\n\n    # Calculate the number of subrectangles with 0 black cells\n    result[0] = total_subrectangles - sum(result[1:])\n\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nH = int(data[0])\nW = int(data[1])\nN = int(data[2])\n\npainted_cells = []\nfor i in range(N):\n    a = int(data[3 + 2 * i])\n    b = int(data[4 + 2 * i])\n    painted_cells.append((a, b))\n\n# Get the result\nresult = count_black_cells_in_subrectangles(H, W, N, painted_cells)\n\n# Print the result\nfor count in result:\n    print(count)", "67": "import sys\nimport heapq\n\ndef max_score(N, s):\n    # Initialize the dp array with a very large negative number\n    dp = [-float('inf')] * N\n    dp[0] = 0  # Starting point\n\n    # Priority queue to store the maximum score at each position\n    pq = []\n    heapq.heappush(pq, (0, 0))  # (score, position)\n\n    while pq:\n        current_score, x = heapq.heappop(pq)\n        current_score = -current_score  # Convert back to positive\n\n        # Try moving forward\n        for A in range(1, N - x):\n            y = x + A\n            if y >= N:\n                break\n            if y == N - 1:\n                return current_score\n            new_score = current_score + s[y]\n            if new_score > dp[y]:\n                dp[y] = new_score\n                heapq.heappush(pq, (-new_score, y))\n\n        # Try moving backward\n        for B in range(1, x + 1):\n            y = x - B\n            if y < 0:\n                break\n            if y == N - 1:\n                return current_score\n            new_score = current_score + s[y]\n            if new_score > dp[y]:\n                dp[y] = new_score\n                heapq.heappush(pq, (-new_score, y))\n\n    return dp[N - 1]\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\ns = list(map(int, data[1:]))\n\n# Calculate and print the result\nprint(max_score(N, s))", "68": "MOD = 998244353\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    points = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\n    \n    points.sort()\n    \n    x_sorted = sorted(points)\n    y_sorted = sorted(points, key=lambda p: p[1])\n    \n    x_pos = {p: i for i, p in enumerate(x_sorted)}\n    y_pos = {p: i for i, p in enumerate(y_sorted)}\n    \n    def sum_of_powers(n):\n        return (pow(2, n, MOD) - 1) % MOD\n    \n    x_contrib = [0] * N\n    y_contrib = [0] * N\n    \n    for i in range(N):\n        x_contrib[i] = (sum_of_powers(i) + sum_of_powers(N - 1 - i)) % MOD\n        y_contrib[i] = (sum_of_powers(i) + sum_of_powers(N - 1 - i)) % MOD\n    \n    total_sum = 0\n    \n    for x, y in points:\n        xi = x_pos[(x, y)]\n        yi = y_pos[(x, y)]\n        total_sum = (total_sum + x_contrib[xi] + y_contrib[yi]) % MOD\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    solve()", "69": "def max_dollars(n, board):\n    # Create two dictionaries to store the sum of values on each diagonal\n    diag1 = {}\n    diag2 = {}\n\n    # Calculate the sum of values on each diagonal\n    for i in range(n):\n        for j in range(n):\n            if i + j not in diag1:\n                diag1[i + j] = 0\n            if i - j not in diag2:\n                diag2[i - j] = 0\n            diag1[i + j] += board[i][j]\n            diag2[i - j] += board[i][j]\n\n    # Find the maximum sum of values for two bishops on different diagonals\n    max_sum = 0\n    pos1 = (0, 0)\n    pos2 = (0, 0)\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if (i + j != k + l) and (i - j != k - l):\n                        current_sum = diag1[i + j] + diag2[i - j] + diag1[k + l] + diag2[k - l] - board[i][j] - board[k][l]\n                        if current_sum > max_sum:\n                            max_sum = current_sum\n                            pos1 = (i + 1, j + 1)\n                            pos2 = (k + 1, l + 1)\n\n    return max_sum, pos1, pos2\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nboard = []\nindex = 1\nfor i in range(n):\n    row = []\n    for j in range(n):\n        row.append(int(data[index]))\n        index += 1\n    board.append(row)\n\n# Get the result\nmax_sum, pos1, pos2 = max_dollars(n, board)\n\n# Print the result\nprint(max_sum)\nprint(pos1[0], pos1[1], pos2[0], pos2[1])", "70": "def can_win_game(n, m, k, heights):\n    for i in range(n - 1):\n        if heights[i] < heights[i + 1] - k:\n            needed_blocks = heights[i + 1] - k - heights[i]\n            if needed_blocks > m:\n                return \"NO\"\n            m -= needed_blocks\n        else:\n            m += heights[i] - max(0, heights[i + 1] - k)\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        k = int(data[index + 2])\n        index += 3\n        heights = list(map(int, data[index:index + n]))\n        index += n\n        results.append(can_win_game(n, m, k, heights))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "71": "This code reads multiple test cases, sorts the string for each test case, and then determines the minimal possible value of the lexicographically maximum string among the distributed strings. The results are collected and printed at the end.", "72": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if not triangle:\n            return 0\n        \n        # Start from the second last row and move upwards\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                # Update the current element to be the sum of itself and the minimum of the two elements directly below it\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # The top element now contains the minimum path sum\n        return triangle[0][0]", "73": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(start, target, path):\n            if target == 0:\n                res.append(path)\n                return\n            if target < 0:\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i - 1]:\n                    continue\n                backtrack(i + 1, target - candidates[i], path + [candidates[i]])\n\n        candidates.sort()\n        res = []\n        backtrack(0, target, [])\n        return res", "74": "def find_sequence(x, y):\n    if x == y:\n        return \"Impossible\"\n    \n    result = []\n    while x != 0 and y != 0:\n        if x > y:\n            times = x // y\n            result.append(f\"{times}A\")\n            x %= y\n        else:\n            times = y // x\n            result.append(f\"{times}B\")\n            y %= x\n    \n    return ''.join(result)\n\n# Read input\nx, y = map(int, input().split())\n\n# Find and print the sequence\nprint(find_sequence(x, y))", "75": "def max_blocks_and_volume(m):\n    # Precompute cubes up to the largest possible cube less than or equal to m\n    cubes = []\n    i = 1\n    while i**3 <= m:\n        cubes.append(i**3)\n        i += 1\n\n    # Function to find the maximum number of blocks and the corresponding volume\n    def find_max_blocks(m):\n        volume = 0\n        count = 0\n        for cube in reversed(cubes):\n            while volume + cube <= m:\n                volume += cube\n                count += 1\n        return count, volume\n\n    max_count, max_volume = find_max_blocks(m)\n    print(max_count, max_volume)\n\n# Read input\nm = int(input().strip())\nmax_blocks_and_volume(m)", "76": "def is_possible(n, k, q, s):\n    # Create the inverse of permutation q\n    q_inv = [0] * n\n    for i in range(n):\n        q_inv[q[i] - 1] = i + 1\n\n    # Start with the initial permutation\n    p = list(range(1, n + 1))\n\n    # Function to apply permutation q\n    def apply_q(p):\n        return [p[q[i] - 1] for i in range(n)]\n\n    # Function to apply inverse permutation q_inv\n    def apply_q_inv(p):\n        return [p[q_inv[i] - 1] for i in range(n)]\n\n    # Check if we can reach s in exactly k moves\n    for i in range(k + 1):\n        if i % 2 == 0:\n            if p == s:\n                return \"NO\"\n        else:\n            if p == s:\n                return \"YES\"\n        p = apply_q(p)\n\n    p = list(range(1, n + 1))\n    for i in range(k + 1):\n        if i % 2 == 0:\n            if p == s:\n                return \"NO\"\n        else:\n            if p == s:\n                return \"YES\"\n        p = apply_q_inv(p)\n\n    return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\nq = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\n# Output the result\nprint(is_possible(n, k, q, s))", "77": "# Read input\na1, a2, a3, a4, a5, a6 = map(int, input().split())\n\n# Calculate the number of 1 cm side triangles\n# The formula for the number of triangles in such a hexagon is:\n# T = (a1 + a2 + a3)^2 - a1^2 - a3^2 - a5^2\n\n# Calculate the sum of a1, a2, and a3\nsum_a1_a2_a3 = a1 + a2 + a3\n\n# Calculate the number of triangles\nnum_triangles = sum_a1_a2_a3**2 - a1**2 - a3**2 - a5**2\n\n# Print the result\nprint(num_triangles)", "78": "def make_beautiful(s):\n    n = len(s)\n    open_count = s.count('(')\n    close_count = s.count(')')\n    hash_count = s.count('#')\n    \n    # The number of ')' we need to balance the '('\n    needed_closes = open_count - close_count\n    \n    # If we need more ')' than we have '#', it's impossible\n    if needed_closes < hash_count:\n        print(-1)\n        return\n    \n    # We will replace each '#' with at least 1 ')'\n    result = [1] * hash_count\n    needed_closes -= hash_count\n    \n    # Distribute the remaining needed_closes to the last '#'\n    result[-1] += needed_closes\n    \n    # Now we need to check if this distribution makes the string beautiful\n    balance = 0\n    hash_index = 0\n    \n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        elif char == '#':\n            balance -= result[hash_index]\n            hash_index += 1\n        \n        if balance < 0:\n            print(-1)\n            return\n    \n    if balance != 0:\n        print(-1)\n        return\n    \n    for num in result:\n        print(num)\n\n# Read input\nimport sys\ninput = sys.stdin.read().strip()\nmake_beautiful(input)", "79": "def max_non_decreasing_subsequence_length(n, a):\n    # Calculate the length of the longest non-decreasing subsequence\n    # without any reversal\n    def longest_non_decreasing_subsequence_length(arr):\n        dp = [1] * len(arr)\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[i] >= arr[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n\n    # Calculate the prefix and suffix longest non-decreasing subsequence lengths\n    prefix = [0] * n\n    suffix = [0] * n\n\n    # Calculate prefix lengths\n    for i in range(n):\n        prefix[i] = longest_non_decreasing_subsequence_length(a[:i+1])\n\n    # Calculate suffix lengths\n    for i in range(n-1, -1, -1):\n        suffix[i] = longest_non_decreasing_subsequence_length(a[i:])\n\n    # Try reversing each possible subarray and calculate the maximum length\n    max_length = 0\n    for l in range(n):\n        for r in range(l, n):\n            # Reverse the subarray a[l:r+1]\n            reversed_subarray = a[:l] + a[l:r+1][::-1] + a[r+1:]\n            max_length = max(max_length, longest_non_decreasing_subsequence_length(reversed_subarray))\n\n    return max_length\n\n# Read input\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\n# Get the result\nresult = max_non_decreasing_subsequence_length(n, a)\n\n# Print the result\nprint(result)", "80": "import math\nfrom functools import reduce\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_gcd_of_list(lst):\n    return reduce(gcd, lst)\n\ndef min_seconds_to_make_alice_happy(n, chocolates):\n    if n == 1:\n        return -1 if chocolates[0] == 1 else 0\n    \n    gcd_all = find_gcd_of_list(chocolates)\n    \n    if gcd_all == 1:\n        return -1\n    \n    return 0\n\n# Read input\nn = int(input().strip())\nchocolates = list(map(int, input().strip().split()))\n\n# Calculate and print the result\nprint(min_seconds_to_make_alice_happy(n, chocolates))", "81": "N = int(input())\n\ncount = 0\n\nfor A in range(1, N):\n    for B in range(1, (N // A) + 1):\n        C = N - A * B\n        if C > 0:\n            count += 1\n\nprint(count)", "82": "def max_students_in_teams(n, k, skills):\n    skills.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            l = i\n            while l > 0 and skills[i - 1] - skills[l - 1] <= 5:\n                l -= 1\n            dp[i][j] = max(dp[i][j], dp[l][j - 1] + (i - l))\n    \n    return max(dp[n])\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\nskills = list(map(int, data[2:]))\n\n# Get the result and print it\nresult = max_students_in_teams(n, k, skills)\nprint(result)", "83": "import sys\nimport math\ninput = sys.stdin.read\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    data = input().split()\n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    result = A[0]\n    for i in range(1, N):\n        result = gcd(result, A[i])\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "84": "def check_shiritori(N, words):\n    used_words = set()\n    last_char = words[0][0]\n    \n    for word in words:\n        if word in used_words or word[0] != last_char:\n            return \"No\"\n        used_words.add(word)\n        last_char = word[-1]\n    \n    return \"Yes\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nwords = data[1:]\n\n# Check the shiritori rules\nresult = check_shiritori(N, words)\nprint(result)", "85": "# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nM = int(data[1])\nX = int(data[2])\nY = int(data[3])\nx = list(map(int, data[4:4+N]))\ny = list(map(int, data[4+N:]))\n\n# Determine the maximum of x_i and the minimum of y_i\nmax_x = max(x)\nmin_y = min(y)\n\n# Check if there exists a Z that satisfies the conditions\nif X < min_y and max_x < min_y and X < Y:\n    print(\"No War\")\nelse:\n    print(\"War\")", "86": "def min_changes_to_substring(S, T):\n    len_s = len(S)\n    len_t = len(T)\n    min_changes = float('inf')\n    \n    for i in range(len_s - len_t + 1):\n        current_changes = 0\n        for j in range(len_t):\n            if S[i + j] != T[j]:\n                current_changes += 1\n        min_changes = min(min_changes, current_changes)\n    \n    return min_changes\n\n# Read input\nS = input().strip()\nT = input().strip()\n\n# Calculate and print the minimum number of changes\nprint(min_changes_to_substring(S, T))", "87": "# Read input values\nA, B, T = map(int, input().split())\n\n# Calculate the number of multiples of A within T + 0.5 seconds\nnum_multiples = (T + 0.5) // A\n\n# Calculate the total number of biscuits produced\ntotal_biscuits = int(num_multiples) * B\n\n# Print the result\nprint(total_biscuits)", "88": "a = int(input())\ns = input()\n\nif a >= 3200:\n    print(s)\nelse:\n    print(\"red\")", "89": "def min_recolors(n, s):\n    patterns = [\"RGB\", \"RBG\", \"GRB\", \"GBR\", \"BRG\", \"BGR\"]\n    min_recolors = float('inf')\n    best_pattern = \"\"\n    \n    for pattern in patterns:\n        recolors = 0\n        new_s = []\n        for i in range(n):\n            if s[i] != pattern[i % 3]:\n                recolors += 1\n            new_s.append(pattern[i % 3])\n        \n        if recolors < min_recolors:\n            min_recolors = recolors\n            best_pattern = ''.join(new_s)\n    \n    return min_recolors, best_pattern\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\ns = data[1]\n\n# Get the result\nrecolors, result = min_recolors(n, s)\n\n# Print the result\nprint(recolors)\nprint(result)", "90": "def max_points(n, a, b, k, h):\n    # Calculate the number of hits needed for each monster\n    hits_needed = []\n    for hp in h:\n        # Calculate the total cycle damage\n        cycle_damage = a + b\n        # Calculate the remaining health after full cycles\n        remaining_health = hp % cycle_damage\n        if remaining_health == 0:\n            remaining_health = cycle_damage\n        \n        # Calculate the number of hits needed to kill the monster\n        if remaining_health <= a:\n            hits_needed.append(0)\n        else:\n            hits_needed.append((remaining_health - 1) // a)\n    \n    # Sort the hits needed in ascending order\n    hits_needed.sort()\n    \n    # Calculate the maximum points\n    points = 0\n    for hits in hits_needed:\n        if k >= hits:\n            k -= hits\n            points += 1\n        else:\n            break\n    \n    return points\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\na = int(data[1])\nb = int(data[2])\nk = int(data[3])\nh = list(map(int, data[4:]))\n\n# Calculate and print the result\nprint(max_points(n, a, b, k, h))", "91": "s = input().strip()\nresult = s[0::2]\nprint(result)", "92": "def calculate_f_values(n, m, x):\n    # Initialize the result array\n    f_values = [0] * n\n\n    # Calculate the initial distances for the identity permutation\n    for i in range(m - 1):\n        f_values[0] += abs(x[i] - x[i + 1])\n\n    # Calculate the distances for the other permutations\n    for i in range(1, n):\n        f_values[i] = f_values[0]\n        for j in range(m - 1):\n            if x[j] == i + 1:\n                f_values[i] -= abs(x[j] - x[j + 1])\n                f_values[i] += abs(1 - x[j + 1])\n            if x[j + 1] == i + 1:\n                f_values[i] -= abs(x[j] - x[j + 1])\n                f_values[i] += abs(x[j] - 1)\n\n    return f_values\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\nx = list(map(int, data[2:]))\n\n# Calculate and print the result\nresult = calculate_f_values(n, m, x)\nprint(' '.join(map(str, result)))", "93": "def maximize_count(N, a):\n    from collections import defaultdict\n\n    # Create a dictionary to count occurrences of each number and its neighbors\n    count = defaultdict(int)\n    \n    for num in a:\n        count[num] += 1\n        count[num - 1] += 1\n        count[num + 1] += 1\n    \n    # Find the maximum count\n    max_count = max(count.values())\n    \n    return max_count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\na = list(map(int, data[1:]))\n\n# Get the result and print it\nresult = maximize_count(N, a)\nprint(result)", "94": "import math\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    ratios = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\n    \n    t, a = ratios[0]\n    \n    for i in range(1, N):\n        T, A = ratios[i]\n        k = max((t + T - 1) // T, (a + A - 1) // A)\n        t = k * T\n        a = k * A\n    \n    print(t + a)\n\nif __name__ == \"__main__\":\n    main()", "95": "def max_books(N, M, K, A, B):\n    # Calculate prefix sums for both desks\n    prefix_A = [0] * (N + 1)\n    prefix_B = [0] * (M + 1)\n    \n    for i in range(1, N + 1):\n        prefix_A[i] = prefix_A[i - 1] + A[i - 1]\n    \n    for i in range(1, M + 1):\n        prefix_B[i] = prefix_B[i - 1] + B[i - 1]\n    \n    # Initialize the maximum number of books read\n    max_books_read = 0\n    \n    # Try reading i books from desk A and the rest from desk B\n    j = M\n    for i in range(N + 1):\n        if prefix_A[i] > K:\n            break\n        while j > 0 and prefix_A[i] + prefix_B[j] > K:\n            j -= 1\n        max_books_read = max(max_books_read, i + j)\n    \n    return max_books_read\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:3+N]))\nB = list(map(int, data[3+N:]))\n\n# Output the result\nprint(max_books(N, M, K, A, B))", "96": "# Read the input value\nN = int(input().strip())\n\n# Print the abbreviation for the N-th round of ABC\nprint(f\"ABC{N}\")", "97": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        k = int(data[index + 1])\n        index += 2\n        \n        # Check for odd numbers\n        if n >= k and (n % 2 == k % 2):\n            results.append(\"YES\")\n            results.append(\"1 \" * (k - 1) + str(n - (k - 1)))\n        # Check for even numbers\n        elif n >= 2 * k and (n % 2 == 0):\n            results.append(\"YES\")\n            results.append(\"2 \" * (k - 1) + str(n - 2 * (k - 1)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\nsolve()", "98": "# Read input values\na = int(input())\nb = int(input())\nh = int(input())\n\n# Calculate the area of the trapezoid\narea = (a + b) * h // 2\n\n# Print the area\nprint(area)", "99": "# Read the input\ns = input().strip()\n\n# Count the number of '1's in the input string\ncount_of_ones = s.count('1')\n\n# Print the result\nprint(count_of_ones)"}