{"question_id": "61", "program": "\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n", "pass": true}
{"question_id": "104", "program": "\n    return sorted([i for i in x if all(d % 2 for d in str(i))])\n\n", "pass": false}
{"question_id": "105", "program": "\n    # sort the array\n    arr.sort()\n    # reverse the array\n    arr.reverse()\n    # create a new array to store the names\n    names = []\n    # loop through the array\n    for num in arr:\n        # if the number is between 1 and 9\n        if 1 <= num <= 9:\n            # add the name to the new array\n            names.append(f\"{num}\")\n        # if the number is not between 1 and 9\n        else:\n            # add the name to the new array\n            names.append(\"\")\n    # return the new array\n    return names\n\n", "pass": false}
{"question_id": "42", "program": "\n    return [x + 1 for x in l]\n\n", "pass": true}
{"question_id": "145", "program": "\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n\n", "pass": false}
{"question_id": "130", "program": "\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 0])\n        return result\n\n", "pass": false}
{"question_id": "88", "program": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if sum(array[0], array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n", "pass": false}
{"question_id": "11", "program": "\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "pass": true}
{"question_id": "137", "program": "\n    if type(a) == str and type(b) == str:\n        if a.replace(\",\", \".\") == b.replace(\",\", \".\"):\n            return None\n        elif float(a.replace(\",\", \".\")) > float(b.replace(\",\", \".\")):\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) != str:\n        if a.replace(\",\", \".\") == str(b):\n            return None\n        elif float(a.replace(\",\", \".\")) > b:\n            return a\n        else:\n            return b\n    elif type(a) != str and type(b) == str:\n        if str(a) == b.replace(\",\", \".\"):\n            return None\n        elif a > float(b.replace(\",\", \".\")):\n            return a\n        else:\n            return b\n    else:\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\n", "pass": true}
{"question_id": "66", "program": "\n    return sum(ord(c) for c in s if c.isupper())\n\n", "pass": true}
{"question_id": "30", "program": "\n    return [x for x in l if x > 0]\n\n", "pass": true}
{"question_id": "124", "program": "\n    if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return", "pass": false}
{"question_id": "154", "program": "\n    if len(a) < len(b):\n        return False\n    else:\n        for i in range(len(a)-len(b)+1):\n            if a[i:i+len(b)] == b:\n                return True\n            else:\n                continue\n        return False\n\n", "pass": false}
{"question_id": "18", "program": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n", "pass": true}
{"question_id": "127", "program": "\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\" if is_prime(interval2[1] - interval1[0]) else \"NO\"\n\n", "pass": false}
{"question_id": "121", "program": "\n    # your code here\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])\n\n", "pass": true}
{"question_id": "0", "program": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n", "pass": false}
{"question_id": "17", "program": "\n    notes = []\n    for note in music_string.split():\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n\n", "pass": true}
{"question_id": "52", "program": "\n    return all(x < t for x in l)\n\n", "pass": true}
{"question_id": "123", "program": "\n    # Your code here\n    pass\n\n", "pass": false}
{"question_id": "38", "program": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "pass": false}
{"question_id": "72", "program": "\n    # Your code here\n    if len(q) == 0:\n        return False\n    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False\n\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it", "pass": true}
{"question_id": "132", "program": "\n    # initialize an empty stack\n    stack = []\n    # loop through each character in the input string\n    for char in string:\n        # if the current character is a closing bracket\n        if char == ']':\n            # if the stack is empty or the top of the stack is not an opening bracket\n            if len(stack) == 0 or stack.pop() != '[':\n                # the brackets are not nested\n                return False\n        # if the current character is an opening bracket\n        else:\n            # push the character onto the stack\n            stack.append(char)\n    # if the stack is not empty\n    if len(stack) != 0:\n        # the brackets are not nested\n        return False\n    # the brackets are nested\n    return True\n\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n", "pass": false}
{"question_id": "95", "program": "\n    if len(dict) == 0:\n        return False\n    else:\n        if all(isinstance(key, str) for key in dict.keys()):\n            if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n                return True\n            else:\n                return False\n        else:\n            return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "pass": true}
{"question_id": "2", "program": "\n    return abs(number) % 1\n\n", "pass": true}
{"question_id": "19", "program": "\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x[4:]))\n    return \" \".join(numbers)\n\n", "pass": false}
{"question_id": "76", "program": "\n    return n**int(x**(1/n)) == x\n\n", "pass": false}
{"question_id": "109", "program": "\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] <= arr[1]:\n        return move_one_ball(arr[1:])\n    else:\n        return False\n\n", "pass": false}
{"question_id": "67", "program": "\n    # write your code here\n    apples = s.split(\" \")[0]\n    oranges = s.split(\" \")[3]\n    total_fruits = int(s.split(\" \")[-1])\n    mango = total_fruits - int(apples) - int(oranges)\n    return mango\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "pass": false}
{"question_id": "159", "program": "\n    # your code here\n    if number + need <= remaining:\n        return [number + need, remaining - (number + need)]\n    else:\n        return [number + remaining, 0]\n\n", "pass": false}
{"question_id": "158", "program": "\n    # Your code here\n    # 1. Create a dictionary to keep track of unique characters\n    # 2. Iterate through the list of words\n    # 3. For each word, iterate through each character\n    # 4. If the character is not in the dictionary, add it\n    # 5. If the character is already in the dictionary, do nothing\n    # 6. After iterating through all the characters, check if the word has the maximum number of unique characters\n    # 7. If it does, return the word\n    # 8. If it doesn't, continue iterating through the list\n    # 9. If no word has the maximum number of unique characters, return an empty string\n\n    # 1. Create a dictionary to keep track of unique characters\n    unique_chars = {}\n\n    # 2. Iterate through the list of words\n    for word in words:\n        # 3. For each word, iterate through each character\n        for char in word:\n            # 4. If the character is not in the dictionary, add it\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            # 5. If the character is already in the dictionary, do nothing\n\n        # 6. After iterating through all the characters, check if the word has the maximum number of unique characters\n        if len(unique_chars) > len(max(words, key=len)):\n            return word\n\n    # 7. If it does, return the word\n    # 8. If it doesn't, continue iterating through the list\n    # 9. If no word has the maximum number of", "pass": false}
{"question_id": "144", "program": "\n    # create a function to simplify the fraction\n    def simplify_fraction(fraction):\n        numerator, denominator = fraction.split(\"/\")\n        gcd = math.gcd(int(numerator), int(denominator))\n        return f\"{int(numerator) // gcd}/{int(denominator) // gcd}\"\n\n    # simplify both fractions\n    x_simplified = simplify_fraction(x)\n    n_simplified = simplify_fraction(n)\n\n    # check if the product of the simplified fractions is a whole number\n    return int(x_simplified.split(\"/\")[0]) * int(n_simplified.split(\"/\")[0]) % int(\n        x_simplified.split(\"/\")[1]\n    ) == 0\n\n", "pass": true}
