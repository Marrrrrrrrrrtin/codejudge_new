{"question_id": "112", "program": "\n    var result string\n    var isPalindrome bool\n    var cMap map[rune]bool\n    cMap = make(map[rune]bool)\n    for _, v := range c {\n        cMap[v] = true\n    }\n    for _, v := range s {\n        if !cMap[v] {\n            result += string(v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        if result[i] != result[len(result)-i-1] {\n            isPalindrome = false\n            break", "pass": false}
{"question_id": "3", "program": "\n\tbalance := 0\n\tfor _, operation := range operations {\n\t\tbalance += operation\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", "pass": true}
{"question_id": "102", "program": "\n\tif x > y {\n\t\treturn -1\n\t}\n\n\tfor i := x; i <= y; i++ {\n\t\tif i%2 == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\n\treturn -1\n}\n", "pass": false}
{"question_id": "54", "program": "\n\tif len(s0) != len(s1) {\n\t\treturn false\n\t}\n\tm := make(map[rune]int)\n\tfor _, c := range s0 {\n\t\tm[c]++\n\t}\n\tfor _, c := range s1 {\n\t\tif m[c] == 0 {\n\t\t\treturn false\n\t\t}\n\t\tm[c]--\n\t}\n\treturn true\n}\n", "pass": false}
{"question_id": "32", "program": "\n    n := len(xs)\n    if n % 2 == 1 {\n        panic(\"FindZero only takes list xs having even number of coefficients\")\n    }\n    if xs[n-1] == 0 {\n        panic(\"FindZero only takes list xs having largest non zero coefficient\")\n    }\n    a := xs[n-1]\n    b := xs[n-2]\n    c := 0\n    if n > 2 {\n        c = xs[n-3]\n    }\n    x := (-b + math.Sqrt(math.Pow(b,2) - 4*a*c)) / (2*a)\n    return x\n}\n", "pass": false}
{"question_id": "75", "program": "\n\tif a < 3 {\n\t\treturn false\n\t}\n\tfor i := 2; i < a; i++ {\n\t\tif a%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "pass": false}
{"question_id": "14", "program": "\n\tvar prefixes []string\n\tfor i := 0; i < len(str); i++ {\n\t\tprefixes = append(prefixes, str[:i+1])\n\t}\n\treturn prefixes\n}\n", "pass": false}
{"question_id": "128", "program": "\n    if len(arr) == 0 {\n        return nil\n    }\n    var (\n        result int = 1\n        sign int = 1\n    )\n    for _, v := range arr {\n        if v == 0 {\n            sign = 0\n        } else if v > 0 {\n           ", "pass": false}
{"question_id": "53", "program": "\n\treturn x + y\n}\n", "pass": true}
{"question_id": "43", "program": "\n\tm := make(map[int]bool)\n\tfor _, v := range l {\n\t\tif m[v] {\n\t\t\treturn true\n\t\t}\n\t\tm[-v] = true\n\t}\n\treturn false\n}\n", "pass": true}
{"question_id": "63", "program": "\n\tif n <= 2 {\n\t\treturn n\n\t}\n\ta, b, c := 0, 0, 1\n\tfor i := 3; i <= n; i++ {\n\t\ta, b, c = b, c, a+b+c\n\t}\n\treturn c\n}\n", "pass": false}
{"question_id": "99", "program": "\n    // Convert the string to a float\n    float, _ := strconv.ParseFloat(value, 64)\n\n    // Round the float to the nearest integer\n    rounded := math.Round(float)\n\n    // Convert the rounded float to an integer\n    integer := int(rounded)\n\n    // Return the integer\n    return integer\n}\n", "pass": true}
{"question_id": "49", "program": "\n\treturn n % p\n}\n", "pass": false}
{"question_id": "65", "program": "\n\tvar digits []int\n\tfor x > 0 {\n\t\tdigits = append(digits, x % 10)\n\t\tx /= 10\n\t}\n\tif shift > len(digits) {\n\t\treturn Reverse(digits)\n\t}\n\treturn Reverse(digits[shift:]) + Reverse(digits[:shift])\n}\n", "pass": false}
{"question_id": "118", "program": "\n    // Write your code here\n    var vowels = []byte{'a', 'e', 'i', 'o', 'u'}\n    var wordBytes = []byte(word)\n    var lastVowel = -1\n    var lastConsonant = -1\n    for i := len(wordBytes) - 1; i >= 0; i-- {\n        if bytes.Contains(vowels, wordBytes[i]) {\n            lastVowel = i\n            break\n        }\n    }\n    for i := len(wordBytes) - 1; i >= 0; i-- {\n", "pass": false}
{"question_id": "115", "program": "\n    // Initialize result\n    result := 0\n\n    // Initialize the number of wells\n    wells := len(grid)\n\n    // Initialize the number of buckets\n    buckets := 0\n\n    // Initialize the number of wells that have been filled\n    filled := 0\n\n    // Loop until all wells have been filled\n    for filled < wells {\n        // Loop through each well\n        for i := 0; i < wells; i++ {\n            // Check if the well is filled\n            if grid[i][0] == 1 {\n                // Check if the bucket", "pass": false}
{"question_id": "64", "program": "\n    // Your code here\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n", "pass": false}
{"question_id": "16", "program": "\n    // Initialize a map to keep track of the characters\n    // that we have seen so far\n    charMap := make(map[rune]bool)\n\n    // Iterate over the string and add each character\n    // to the map\n    for _, char := range str {\n        charMap[char] = true\n    }\n\n    // Return the length of the map\n    return len(charMap)\n}\n", "pass": false}
{"question_id": "83", "program": "\n    // 1. \u7279\u6b8a\u60c5\u51b5\n        // \u5982\u679c n \u4e3a 1\uff0c\u5219\u8fd4\u56de 10\n        // \u5982\u679c n \u4e3a 2\uff0c\u5219\u8fd4\u56de 100\n    if n == 1 {\n        return 10\n    } else if n == 2 {\n        return 100\n    }\n\n    // 2. \u8ba1\u7b97\n        // \u8ba1\u7b97 1 \u5f00\u5934\u7684\u6570\u5b57\u4e2a\u6570\n        // \u8ba1\u7b97 1 \u7ed3\u5c3e\u7684\u6570\u5b57\u4e2a\u6570\n        // \u8ba1\u7b97 1 \u5f00\u5934 1 \u7ed3\u5c3e\u7684\u6570\u5b57\u4e2a\u6570\n    count := 0\n    for i := 1; i", "pass": false}
{"question_id": "69", "program": "\n\tvar max int\n\tvar maxCount int\n\tfor _, v := range lst {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\tfor _, v := range lst {\n\t\tif v == max {\n\t\t\tmaxCount++\n\t\t}\n\t}\n\tif maxCount >= max {\n\t\treturn max\n\t}\n\treturn -1\n}\n", "pass": false}
{"question_id": "131", "program": "\n    var result int\n    var digit int\n    var err error\n    for n > 0 {\n        digit = n % 10\n        if digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n    }\n    return result\n}\n", "pass": false}
{"question_id": "25", "program": "\n    var factors []int\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            factors = append(factors, i)\n            for n % i == 0 {\n                n /= i\n            }\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n", "pass": false}
{"question_id": "78", "program": "\n\tvar count int\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "pass": true}
{"question_id": "110", "program": "\n\t// your code here\n\treturn \"\"\n}\n", "pass": false}
{"question_id": "13", "program": "\n\tif a == 0 {\n\t\treturn b\n\t}\n\tif b == 0 {\n\t\treturn a\n\t}\n\treturn GreatestCommonDivisor(b, a % b)\n}\n", "pass": true}
{"question_id": "91", "program": "\n    // Write your code here\n    reg := regexp.MustCompile(`I`)\n    return len(reg.FindAllString(S, -1))\n}\n", "pass": false}
{"question_id": "134", "program": "\n    // Your code here\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt) - 1]\n    if strings.ContainsAny(string(lastChar), \"abcdefghijklmnopqrstuvwxyz\") {\n        return false\n   ", "pass": false}
{"question_id": "140", "program": "\n\tvar result []rune\n\tvar last rune\n\tfor _, r := range text {\n\t\tif r == ' ' {\n\t\t\tif last == ' ' {\n\t\t\t\tresult = append(result, '-')\n\t\t\t} else {\n\t\t\t\tresult = append(result, '_')", "pass": false}
{"question_id": "36", "program": "\n\tvar count int\n\tfor i := 1; i < n; i++ {\n\t\tif strings.Contains(strconv.Itoa(i), \"7\") && (i%11 == 0 || i%13 == 0) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}", "pass": false}
{"question_id": "60", "program": "\n\treturn n * (n + 1) / 2\n}\n", "pass": true}
{"question_id": "92", "program": "\n\tvar xInt, yInt, zInt int\n\tvar xFloat, yFloat, zFloat float64\n\t\n\tswitch x.(type) {\n\tcase int:\n\t\txInt = x.(int)\n\tcase float64:\n\t\txFloat = x.(float64)\n\t}\n\t\n\tswitch y.(type) {\n\tcase int:\n\t\tyInt = y.(int)\n\tcase float64:\n\t\tyFloat = y.(float64)\n\t}\n\t\n\tswitch z.(type) {\n\tcase int:\n\t\tzInt = z.(int)\n\tcase float64:\n\t\tzFloat = z.(float64)", "pass": false}
{"question_id": "27", "program": "\n    var result strings.Builder\n    for _, c := range str {\n        if c >= 'a' && c <= 'z' {\n            result.WriteRune(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result.WriteRune(c + 32)\n        } else {\n            result.WriteRune(c)\n        }\n    }\n    return result.String()\n}\n", "pass": true}
{"question_id": "120", "program": "\n    // \u6392\u5e8f\n    sort.Ints(arr)\n    // \u53d6\u6700\u5927\u7684k\u4e2a\n    return arr[len(arr)-k:]\n}", "pass": true}
{"question_id": "74", "program": "\n\tvar total1 int = 0\n\tvar total2 int = 0\n\tfor _, v := range lst1 {\n\t\ttotal1 += len(v)\n\t}\n\tfor _, v := range lst2 {\n\t\ttotal2 += len(v)\n\t}\n\tif total1 < total2 {\n\t\treturn lst1\n\t} else if total1 > total2 {\n\t\treturn lst2\n\t} else {\n\t\treturn lst1\n\t}\n}\n", "pass": true}
{"question_id": "51", "program": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}\n", "pass": true}
{"question_id": "136", "program": "\n    var largest, smallest interface{}\n    for _, v := range lst {\n        if v < 0 {\n            if largest == nil {\n                largest = v\n            } else if v > largest.(int) {\n                largest = v\n            }\n        } else if v > 0 {\n            if smallest == nil {", "pass": false}
{"question_id": "4", "program": "\n    mean := Mean(numbers)\n    return Mean(AbsoluteDeviations(numbers, mean))\n}\n", "pass": false}
{"question_id": "96", "program": "\n\tif n <= 1 {\n\t\treturn []int{}\n\t}\n\tvar primes []int\n\tfor i := 2; i < n; i++ {\n\t\tisPrime := true\n\t\tfor j := 2; j < i; j++ {\n\t\t\tif i%j == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif isPrime {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n", "pass": true}
{"question_id": "150", "program": "\n    if n == 1 {\n        return y\n    }\n    if n == 2 {\n        return x\n    }\n    if n == 3 {\n        return x\n    }\n    if n == 5 {\n        return x\n    }\n    if n == 7 {\n        return x\n    }\n    if n == 11 {\n        return x\n    }\n    if n == 13 {\n        return x\n    }\n    if n == 17 {\n        return x\n    }\n    if n == 19 {\n        return x\n    }\n    if n == 23 {\n        return x\n    }\n    if n == ", "pass": false}
{"question_id": "41", "program": "\n\tif n < 1 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\tif n == 3 {\n\t\treturn 2\n\t}\n\tif n == 4 {\n\t\treturn 3\n\t}\n\tif n == 5 {\n\t\treturn 4\n\t}\n\tif n == 6 {\n\t\treturn 5\n\t}\n\tif n == 7 {\n\t\treturn 6\n\t}\n\tif n == 8 {\n\t\treturn 7\n\t}\n\tif n == 9 {\n\t\treturn 8\n\t}\n\tif n == 10 {\n\t\treturn 9\n\t}\n\tif n == 11 {", "pass": false}
{"question_id": "162", "program": "\n    if text == \"\" {\n        return nil\n    }\n    return fmt.Sprintf(\"%x\", md5.Sum([]byte(text)))\n}\n", "pass": true}
{"question_id": "133", "program": "\n    var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v))\n    }\n    return sum * sum\n}\n", "pass": false}
{"question_id": "101", "program": "\n    return strings.Split(s, \", \")\n}\n", "pass": false}
{"question_id": "94", "program": "\n    var sum int\n    var max int\n    var maxPrime int\n    var isPrime bool\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int", "pass": false}
{"question_id": "147", "program": "\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "pass": false}
{"question_id": "89", "program": "\n    var encrypted string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            encrypted += string(c + 2)\n        } else if c >= 'A' && c <= 'Z' {\n            encrypted += string(c + 2)\n        } else {\n            encrypted += string(c)\n        }\n    }\n    return encrypted\n}\n", "pass": false}
{"question_id": "31", "program": "\n\tif n < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "pass": true}
{"question_id": "116", "program": "\n    // Create a struct to hold the binary representation of each number\n    // and the number itself\n    type binary struct {\n        binary string\n        num int\n    }\n\n    // Create a slice of binary structs\n    binaries := make([]binary, len(arr))\n\n    // Loop through the array and create a binary struct for each number\n    for i, num := range arr {\n        binaries[i] = binary{fmt.Sprintf(\"%b\", num), num}\n    }\n\n    // Sort the slice of binary structs based on the number of ones\n    sort.Slice(binaries", "pass": false}
{"question_id": "21", "program": "\n\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\tresult := make([]float64, len(numbers))\n\tfor i, num := range numbers {\n\t\tresult[i] = (num - min) / (max - min)\n\t}\n\treturn result\n}\n", "pass": true}
{"question_id": "122", "program": "\n    // Initialize sum to 0\n    sum := 0\n    \n    // Iterate through the first k elements of the array\n    for i := 0; i < k; i++ {\n        // Convert the current element to a string\n        str := strconv.Itoa(arr[i])\n        \n        // If the length of the string is 1 or 2, add it to the sum\n        if len(str) == 1 || len(str) == 2 {\n            sum += arr[i]\n        }\n    }\n    \n    // Return the sum\n    return sum\n}", "pass": true}
{"question_id": "9", "program": "\n    var result []int\n    var max int\n    for _, n := range numbers {\n        if n > max {\n            max = n\n        }\n        result = append(result, max)\n    }\n    return result\n}\n", "pass": false}
{"question_id": "82", "program": "\n\treturn isPrime(len(s))\n}\n", "pass": false}
{"question_id": "34", "program": "\n    sort.Ints(l)\n    j := 0\n    for i := 1; i < len(l); i++ {\n        if l[j] != l[i] {\n            j++\n            l[j] = l[i]\n        }\n    }\n    return l[:j+1]\n}\n", "pass": true}
{"question_id": "85", "program": "\n\tsum := 0\n\tfor i, v := range lst {\n\t\tif i%2 == 0 {\n\t\t\tsum += v\n\t\t}\n\t}\n\treturn sum\n}\n", "pass": false}
{"question_id": "146", "program": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            if num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9 {\n                if num / 10 == 1 || num / 10 == 3 || num / 10 == 5 || num / 10 == 7 || num / 10 == 9 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "pass": false}
{"question_id": "125", "program": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        var count int\n        for _, r := range txt {\n            if r >= 'a' && r <= 'z' {\n                count++\n            }\n        }\n        return count\n    }\n}\n", "pass": false}
{"question_id": "47", "program": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2\n\t}\n\treturn float64(l[n/2])\n}", "pass": true}
{"question_id": "20", "program": "\n\tvar closest [2]float64\n\tclosest[0] = numbers[0]\n\tclosest[1] = numbers[1]\n\tfor i := 2; i < len(numbers); i++ {\n\t\tif numbers[i]-closest[0] < closest[1]-closest[0] {\n\t\t\tclosest[0] = numbers[i]\n\t\t} else if numbers[i]-closest[0] > closest[1]-closest[0] {\n\t\t\tclosest[1] = numbers[i]\n\t\t}\n\t}\n\treturn closest\n}\n", "pass": false}
{"question_id": "141", "program": "\n    // Write your code here\n    var dot_index int = strings.Index(file_name, \".\")\n    if dot_index == -1 {\n        return \"No\"\n    }\n    var before_dot string = file_name[0:dot_index]\n    var after_dot string = file_name[", "pass": false}
{"question_id": "81", "program": "\n\tvar letterGrades []string\n\tfor _, grade := range grades {\n\t\tswitch {\n\t\tcase grade >= 4.0:\n\t\t\tletterGrades = append(letterGrades, \"A+\")\n\t\tcase grade >= 3.7:\n\t\t\tletterGrades = append(letterGrades, \"A\")\n\t\tcase grade >= 3.3:\n\t\t\tletterGrades = append(letterGrades, \"A-\")\n\t\tcase grade >= 3.0:\n\t\t\tletterGrades = append(letterGrades, \"B+\")\n\t\tcase grade >= 2.7:\n\t\t\tletterGrades = append(letterGrades, \"", "pass": false}
{"question_id": "117", "program": "\n    // Write your code here\n    var words []string\n    var word string\n    var consonantCount int\n    var vowelCount int\n    var vowels = \"aeiou\"\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var buffer bytes.Buffer\n\n    for _, char := range s {\n        if strings.Contains(vowels, strings.ToLower(string(char))) {\n            vowelCount++\n        } else if strings.Contains(consonants, strings.ToLower(string(char))) {\n            consonant", "pass": false}
{"question_id": "157", "program": "\n\treturn a*a+b*b == c*c\n}\n", "pass": false}
{"question_id": "142", "program": "\n    var sum int = 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n            v = int(math.Pow(float64(v), 2))\n        } else if i % 4 == 0 {\n            v = int(math.Pow(float", "pass": false}
{"question_id": "126", "program": "\n\tfor i := 0; i < len(lst) - 1; i++ {\n\t\tif lst[i] > lst[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "pass": false}
{"question_id": "100", "program": "\n\tvar pile []int\n\tfor n > 0 {\n\t\tpile = append(pile, n)\n\t\tif n%2 == 0 {\n\t\t\tn = n/2 + 1\n\t\t} else {\n\t\t\tn = n/2 + 2\n\t\t}\n\t}\n\treturn pile\n}\n", "pass": false}
{"question_id": "113", "program": "\n    var result []string\n    for _, s := range lst {\n        var count int\n        for _, c := range s {\n            if c == '1' || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %d in the str%dng %d of the %dinput.\", count, len(s), len(s), len(s)))\n    }\n    return result\n}\n", "pass": false}
{"question_id": "111", "program": "\n    var result = make(map[rune]int)\n    var max = 0\n    var max_key rune\n    var keys []rune\n    var key rune\n    var count int\n\n    for _, letter := range strings.Split(test, \" \") {\n        key = []rune(letter)[0]\n        count = 1\n        if _, ok := result[key]; ok {\n            count = result[key] + 1\n        }\n        result[key] = count\n        if count > max {\n            max = count\n            max_key = key\n            keys = []rune{}\n        } else if count == max {\n            keys = append(keys, key", "pass": false}
{"question_id": "98", "program": "\n    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && strings.ToUpper(string(c)) == string(c) {\n            count++\n        }\n    }\n    return count\n}\n", "pass": false}
{"question_id": "29", "program": "\n\tvar result []string\n\tfor _, s := range strings {\n\t\tif strings.HasPrefix(s, prefix) {\n\t\t\tresult = append(result, s)\n\t\t}\n\t}\n\treturn result\n}\n", "pass": false}
{"question_id": "84", "program": "\n    var binary string\n    for N > 0 {\n        binary = strconv.Itoa(N % 2) + binary\n        N /= 2\n    }\n    return binary\n}\n", "pass": false}
{"question_id": "119", "program": "\n\tvar stack []string\n\tfor _, s := range lst {\n\t\tif s == \"(\" {\n\t\t\tstack = append(stack, s)\n\t\t} else {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn \"No\"\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\tif len(stack) == 0 {\n\t\treturn \"Yes\"\n\t}\n\treturn \"No\"\n}\n", "pass": false}
{"question_id": "153", "program": "\n    var strongest string\n    var strength float64\n    for _, extension := range extensions {\n        cap := 0\n        sm := 0\n        for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n            } else if c >= 'a' && c <= 'z' {\n                sm++\n            }\n        }\n        if cap - sm > strength {\n            strength = cap - sm\n            strongest = extension\n        }\n    }\n    return class_name + \".\" + strongest\n}\n", "pass": false}
{"question_id": "90", "program": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != lst[i-1] {\n            return lst[i]\n        }\n    }\n    return nil\n}\n", "pass": true}
{"question_id": "24", "program": "\n\tfor i := n - 1; i > 0; i-- {\n\t\tif n%i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 1\n}\n", "pass": true}
{"question_id": "73", "program": "\n    // Write your code here\n    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if n == 3 {\n        if arr[0] == arr[2] && arr[1] == arr[2] {\n            return 0\n        }\n        if arr[0] == arr[1] && arr[", "pass": false}
{"question_id": "46", "program": "\n\tif n < 0 {\n\t\treturn -1\n\t}\n\tif n < 4 {\n\t\treturn n\n\t}\n\ta, b, c, d := 0, 0, 2, 0\n\tfor i := 4; i <= n; i++ {\n\t\ta, b, c, d = b, c, d, a+b+c+d\n\t}\n\treturn d\n}\n", "pass": true}
{"question_id": "79", "program": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tbinary = fmt.Sprintf(\"%v%v\", decimal%2, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn fmt.Sprintf(\"db%vdb\", binary)\n}\n", "pass": false}
{"question_id": "80", "program": "\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\n\tfor i := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] && s[i+1] == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n", "pass": false}
{"question_id": "106", "program": "\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = factorial(i)\n\t\t} else {\n\t\t\tresult[i] = sum(i)\n\t\t}\n\t}\n\treturn result\n}\n", "pass": false}
{"question_id": "37", "program": "\n\tl_len := len(l)\n\tif l_len == 0 {\n\t\treturn l\n\t}\n\tl_even := make([]int, l_len/2)\n\tl_odd := make([]int, l_len/2)\n\tfor i := 0; i < l_len; i++ {\n\t\tif i%2 == 0 {\n\t\t\tl_even[i/2] = l[i]\n\t\t} else {\n\t\t\tl_odd[i/2] = l[i]\n\t\t}\n\t}\n\tsort.Ints(l_even)\n\tl_out := make([]int, l_len)\n\tfor i := 0; i < l_len; i++ {\n\t\tif i%2 == 0 {\n\t\t\tl_", "pass": false}
{"question_id": "160", "program": "\n    // 1. \u68c0\u67e5\u8f93\u5165\u53c2\u6570\n    if len(operator) != len(operand) - 1 {\n        return -1\n    }\n    \n    // 2. \u8ba1\u7b97\u7ed3\u679c\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n        case \"/\":\n            result /= operand[i + 1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i + 1])))\n        }\n    }\n    \n    return result\n}\n", "pass": false}
{"question_id": "10", "program": "\n    if str == \"\" {\n        return \"\"\n    }\n    // Find the longest postfix of supplied string that is a palindrome.\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecarx')\n    // 'racecar'\n    // >>> PostfixPalindrome('racecar')\n    // 'racecar'\n", "pass": false}
{"question_id": "48", "program": "\n\tfor i, j := 0, len(text)-1; i < j; i, j = i+1, j-1 {\n\t\tif text[i] != text[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "pass": true}
{"question_id": "15", "program": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}\n", "pass": false}
{"question_id": "68", "program": "\n    // Initialize the smallest even value and its index\n    smallest := math.MaxInt32\n    smallestIndex := -1\n    \n    // Iterate through the array\n    for i, v := range arr {\n        // If the value is even and smaller than the smallest even value\n        if v % 2 == 0 && v < smallest {\n            // Update the smallest even value and its index\n            smallest = v\n            smallestIndex = i\n        }\n    }\n    \n    // If there is no even value or the array is empty\n    if smallest == math.MaxInt32 {\n        // Return", "pass": false}
{"question_id": "58", "program": "\n    var (\n        i, j int\n        l []int\n    )\n    for i = 0; i < len(l1); i++ {\n        for j = 0; j < len(l2); j++ {\n            if l1[i] == l2[j] {\n                l = append(l, l1[i])\n            }\n        }\n    }\n    sort.Ints(l)\n    return l\n}\n", "pass": false}
{"question_id": "93", "program": "\n    var encoded string\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}\n", "pass": false}
{"question_id": "5", "program": "\n\tif len(numbers) == 0 {\n\t\treturn []int{}\n\t}\n\n\tresult := make([]int, len(numbers)*2-1)\n\tfor i := 0; i < len(numbers); i++ {\n\t\tresult[i*2] = numbers[i]\n\t\tresult[i*2+1] = delimeter\n\t}\n\n\treturn result\n}\n", "pass": false}
{"question_id": "103", "program": "\n    if n > m {\n        return -1\n    }\n    return fmt.Sprintf(\"0b%b\", int(math.Round(float64(n+m)/2)))\n}\n", "pass": true}
{"question_id": "33", "program": "\n    l' := make([]int, len(l))\n    for i, v := range l {\n        if i % 3 == 0 {\n            l'[i] = v\n        } else {\n            l'[i] = -1\n        }\n    }\n    sort.Ints(l')\n    for i, v := range l' {\n        if v == -1 {\n            l'[i] = l[i]\n        }\n    }\n    return l'\n}\n", "pass": false}
{"question_id": "77", "program": "\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n        if math.Pow(float64(i), 3) == float64(a) {\n            return true\n        }\n    }\n    return false\n}\n", "pass": true}
{"question_id": "44", "program": "\n    if base < 2 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result string\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result\n}\n", "pass": true}
{"question_id": "135", "program": "\n\t// Initialize the largest index to be -1\n\tlargestIndex := -1\n\n\t// Loop through the array\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\t// Check if the current element is less than the next element\n\t\tif arr[i] < arr[i+", "pass": false}
{"question_id": "45", "program": "\n\treturn (a * h) / 2\n}\n", "pass": true}
{"question_id": "12", "program": "\n\tvar longest string\n\tfor _, s := range strings {\n\t\tif len(s) > len(longest) {\n\t\t\tlongest = s\n\t\t}\n\t}\n\treturn longest\n}\n", "pass": false}
{"question_id": "97", "program": "\n    return a % 10 * b % 10\n}\n", "pass": false}
{"question_id": "149", "program": "\n    sort.Slice(lst, func(i, j int) bool {\n        if len(lst[i]) == len(lst[j]) {\n            return lst[i] < lst[j]\n        }\n        return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n", "pass": false}
{"question_id": "156", "program": "\n    roman := \"\"\n    for number > 0 {\n        if number >= 1000 {\n            roman += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n            roman += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n            roman += \"d\"\n            number -= 500\n        } else if number >= 400 {\n            roman += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n            number -= 100\n        } else if number >= 90 {\n           ", "pass": false}
{"question_id": "86", "program": "\n    words := strings.Fields(s)\n    sort.Slice(words, func(i, j int) bool {\n        return words[i] < words[j]\n    })\n    return strings.Join(words, \" \")\n}\n", "pass": false}
{"question_id": "148", "program": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tplanet1Index := -1\n\tplanet2Index := -1\n\tfor i, planet := range planets {\n\t\tif planet == planet1 {\n\t\t\tplanet1Index = i\n\t\t}\n\t\tif planet == planet2 {\n\t\t\tplanet2Index = i\n\t\t}\n\t}\n\tif planet1Index == -1 || planet2Index == -1 {\n\t\treturn []string{}\n\t}\n\tif planet1Index > planet2Index {", "pass": false}
{"question_id": "39", "program": "\n\tif n < 1 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\tif n == 6 {\n\t\treturn 233\n\t}\n\tif n == 7 {\n\t\treturn 1597\n\t}\n\tif n == 8 {\n\t\treturn 13981\n\t}\n\tif n == 9 {\n\t\treturn 196418\n\t}\n\tif n == 10 {\n\t", "pass": false}
{"question_id": "138", "program": "\n\tvar sum int\n\tfor i := 2; i <= n/2; i += 2 {\n\t\tif sum+i > n {\n\t\t\treturn false\n\t\t}\n\t\tsum += i\n\t}\n\treturn sum == n\n}\n", "pass": false}
{"question_id": "87", "program": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, v := range row {\n            if v == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] < result[j][0] {\n            return true\n        } else if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        } else {\n            return false\n        }\n    })\n    return result\n}\n", "pass": false}
{"question_id": "152", "program": "\n    result := make([]int, len(game))\n    for i, v := range game {\n        result[i] = math.Abs(int(v - guess[i]))\n    }\n    return result\n}\n", "pass": false}
{"question_id": "40", "program": "\n\tfor i := 0; i < len(l); i++ {\n\t\tfor j := i + 1; j < len(l); j++ {\n\t\t\tfor k := j + 1; k < len(l); k++ {\n\t\t\t\tif l[i]+l[j]+l[k] == 0 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n", "pass": true}
{"question_id": "1", "program": "\n\tvar groups []string\n\tvar current_group string\n\tvar paren_count int\n\n\tfor _, char := range paren_string {\n\t\tswitch char {\n\t\tcase '(':\n\t\t\tparen_count++\n\t\t\tcurrent_group += string(char)\n\t\tcase ')':\n\t\t\tparen_count--\n\t\t\tcurrent_group += string(char)\n\t\t\tif paren_count == 0 {\n\t\t\t\tgroups = append(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t}\n\t\tdefault:\n\t\t\tcurrent_group += string(char)\n\t\t}\n\t}\n\n\treturn groups\n}\n", "pass": false}
{"question_id": "71", "program": "\n    if a + b < c || b + c < a || c + a < b {\n        return -1\n    }\n    p := (a + b + c) / 2\n    return math.Sqrt(p * (p - a) * (p - b) * (p - c))\n}\n", "pass": false}
{"question_id": "114", "program": "\n    // \u66b4\u529b\u89e3\u6cd5\n    // \u904d\u5386\u6240\u6709\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n    // \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n    // \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n    // \u601d\u8def\uff1a\n    // 1. \u904d\u5386\u6240\u6709\u5b50\u6570\u7ec4\n    // 2. \u627e\u5230\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n    // 3. \u8fd4\u56de\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n    // 4. \u5982\u679c\u6ca1\u6709\u5b50\u6570\u7ec4", "pass": false}
{"question_id": "56", "program": "\n\tstack := make([]rune, 0)\n\tfor _, r := range brackets {\n\t\tif r == '<' {\n\t\t\tstack = append(stack, r)\n\t\t} else {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n", "pass": true}
{"question_id": "107", "program": "\n    // Initialize the result\n    result := [2]int{0, 0}\n    \n    // Iterate over the range of numbers\n    for i := 1; i <= n; i++ {\n        // Convert the number to a string\n        str := strconv.Itoa(i)\n        \n        // Check if the string is a palindrome\n        if isPalindrome(str) {\n            // Increment the result\n            if i % 2 == 0 {\n                result[0]++\n            } else {\n                result[1]++\n            }\n        }\n    }\n    \n    // Return the result\n    return result\n}\n", "pass": false}
{"question_id": "155", "program": "\n    var even, odd int\n    str := strconv.Itoa(num)\n    for _, v := range str {\n        if v == '0' || v == '2' || v == '4' || v == '6' || v == '8' {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}\n", "pass": false}
{"question_id": "50", "program": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(runes)\n}\n", "pass": true}
{"question_id": "143", "program": "\n    var result string\n    var words []string = strings.Split(sentence, \" \")\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "pass": false}
{"question_id": "161", "program": "\n\tvar result string\n\tfor _, c := range s {\n\t\tif c >= 'a' && c <= 'z' {\n\t\t\tresult += string(c - 32)\n\t\t} else if c >= 'A' && c <= 'Z' {\n\t\t\tresult += string(c + 32)\n\t\t} else {\n\t\t\tresult += string(c)\n\t\t}\n\t}\n\tif result == \"\" {\n\t\treturn s\n\t}\n\treturn result\n}\n", "pass": false}
{"question_id": "129", "program": "\n    n := len(grid)\n    m := len(grid[0])\n    if n != m {\n        return nil\n    }\n    if k > n * n {\n        return nil\n    }\n    if k == 0 {\n        return nil\n    }\n    if k == 1 {\n        return", "pass": false}
{"question_id": "59", "program": "\n\tfor i := 2; i <= n/i; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn n\n}\n", "pass": false}
{"question_id": "55", "program": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn Fib(n-1) + Fib(n-2)\n}\n", "pass": true}
{"question_id": "23", "program": "\n\treturn len(str)\n}\n", "pass": true}
{"question_id": "7", "program": "\n    var result []string\n    for _, s := range stringList {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n", "pass": false}
{"question_id": "8", "program": "\n\tsum := 0\n\tproduct := 1\n\tfor _, n := range numbers {\n\t\tsum += n\n\t\tproduct *= n\n\t}\n\treturn [2]int{sum, product}\n}\n", "pass": true}
{"question_id": "108", "program": "\n    var count int\n    for _, num := range arr {\n        if num > 0 {\n            count += 1\n        } else if num < 0 {\n            count += 1\n            num = num * -1\n        }\n        for num > 0 {\n            count += 1\n            num = num / 10\n        }\n    }\n    return count\n}\n", "pass": false}
{"question_id": "151", "program": "\n    var sum int = 0\n    for _, v := range lst {\n        if v < 0 {\n            continue\n        }\n        if math.IsNaN(v) || math.IsInf(v, 0) {\n            continue\n        }\n        if v == math.Trunc(v) {\n            if v % 2 == 1 {\n                sum += int(v * v)\n            }\n        }\n    }\n    return sum\n}\n", "pass": false}
{"question_id": "22", "program": "\n\tvar result []int\n\tfor _, value := range values {\n\t\tif value, ok := value.(int); ok {\n\t\t\tresult = append(result, value)\n\t\t}\n\t}\n\treturn result\n}\n", "pass": false}
{"question_id": "139", "program": "\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n    return result\n}\n", "pass": false}
{"question_id": "26", "program": "\n\tseen := make(map[int]bool)\n\tresult := []int{}\n\tfor _, n := range numbers {\n\t\tif !seen[n] {\n\t\t\tseen[n] = true\n\t\t\tresult = append(result, n)\n\t\t}\n\t}\n\treturn result\n}\n", "pass": false}
{"question_id": "35", "program": "\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}\n", "pass": true}
{"question_id": "57", "program": "\n\tif len(l) <= 1 {\n\t\treturn true\n\t}\n\n\tvar inc bool\n\tfor i := 1; i < len(l); i++ {\n\t\tif l[i] < l[i-1] {\n\t\t\tif inc {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else if l[i] > l[i-1] {\n\t\t\tif !inc {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tinc = l[i] > l[i-1]\n\t}\n\treturn true\n}\n", "pass": false}
{"question_id": "62", "program": "\n\tif len(xs) == 0 {\n\t\treturn []int{}\n\t}\n\tif len(xs) == 1 {\n\t\treturn []int{}\n\t}\n\tresult := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tresult[i-1] = xs[i] * i\n\t}\n\treturn result\n}\n", "pass": true}
{"question_id": "70", "program": "\n    if len(lst) == 0 {\n        return []int{}\n    }\n    sort.Ints(lst)\n    res := make([]int, len(lst))\n    for i := 0; i < len(lst); i += 2 {\n        res[i] = lst[0]\n        res[i+1] = lst[len(lst)-1]\n        lst = lst[1:len(lst)-1]\n        sort.Ints(lst)\n    }\n    return res\n}\n", "pass": false}
{"question_id": "6", "program": "\n    // Split the string into individual groups\n    groups := strings.Split(paren_string, \" \")\n    // Initialize the output array\n    output := make([]int, len(groups))\n\n    // Iterate over each group\n    for i, group := range groups {\n        // Initialize the current level of nesting\n        current_level := 0\n        // Iterate over each character in the group\n        for _, char := range group {\n            // If the character is an opening parenthesis, increase the level of nesting\n            if char == '(' {\n                current_level += 1\n            }\n            // If the character is a closing parenthesis, decrease the level of nesting\n            if char == ')' {\n                current_level -= 1\n            }\n        }\n        // Set the output value for the current group\n        output[i] = current_level\n    }\n    return output\n}\n", "pass": false}
{"question_id": "28", "program": "\n\treturn strings[0] + strings[1] + strings[2]\n}\n", "pass": false}
{"question_id": "163", "program": "\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n", "pass": false}
