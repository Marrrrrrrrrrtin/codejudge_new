{"generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport default hasCloseElements;\n", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "task_id": "JavaScript/0"}
{"generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "task_id": "JavaScript/0"}
{"generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "task_id": "JavaScript/0"}
{"generation": "\n  let paren_list = paren_string.split('');\n  let paren_stack = [];\n  let paren_groups = [];\n  let current_group = '';\n\n  paren_list.forEach((paren) => {\n    if (paren === '(') {\n      paren_stack.push(paren);\n      current_group += paren;\n    } else if (paren === ')') {\n      if (paren_stack.length === 0) {\n        return;\n      }\n      paren_stack.pop();\n      current_group += paren;\n      if (paren_stack.length === 0) {\n        paren_groups.push(current_group);\n        current_group = '';\n      }\n    }\n  });\n\n  return paren_groups;\n};\n\nmodule.exports = separateParenGroups;\n", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "task_id": "JavaScript/1"}
{"generation": "\n  const paren_list = paren_string.split('');\n  const result = [];\n  let current_group = '';\n  let open_count = 0;\n\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      open_count++;\n      current_group += paren_list[i];\n    } else if (paren_list[i] === ')') {\n      open_count--;\n      current_group += paren_list[i];\n      if (open_count === 0) {\n        result.push(current_group);\n        current_group = '';\n      }\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = separateParenGroups;\n", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "task_id": "JavaScript/1"}
{"generation": "\n  const paren_list = paren_string.split('');\n  let paren_stack = [];\n  let paren_group = '';\n  let paren_groups = [];\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      paren_stack.push(paren_list[i]);\n      paren_group += paren_list[i];\n    } else if (paren_list[i] === ')') {\n      if (paren_stack.length === 0) {\n        return paren_groups;\n      }\n      paren_stack.pop();\n      paren_group += paren_list[i];\n      if (paren_stack.length === 0) {\n        paren_groups.push(paren_group);\n        paren_group = '';\n      }\n    }\n  }\n  return paren_groups;\n};\n\nmodule.exports = separateParenGroups;\n", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "task_id": "JavaScript/1"}
{"generation": "\n  let palindromicSuffix = '';\n  let i = string.length - 1;\n  while (i >= 0 && isPalindrome(string.slice(0, i + 1))) {\n    palindromicSuffix = string.slice(0, i + 1);\n    i--;\n  }\n  return string + palindromicSuffix.split('').reverse().join('');\n}\n", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "task_id": "JavaScript/10"}
{"generation": "\n  let palindromicSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(i))) {\n      palindromicSuffix = string.slice(i);\n      break;\n    }\n  }\n  return string + palindromicSuffix.split('').reverse().join('');\n}\n", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "task_id": "JavaScript/10"}
{"generation": "\n  let palindromicSuffix = '';\n  let palindromicPrefix = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(i))) {\n      palindromicSuffix = string.slice(i);\n      break;\n    }\n  }\n\n  for (let i = 0; i < string.length - palindromicSuffix.length; i++) {\n    if (isPalindrome(string.slice(0, i + 1))) {\n      palindromicPrefix = string.slice(0, i + 1);\n      break;\n    }\n  }\n\n  return string + palindromicSuffix.split('').reverse().join('') + palindromicPrefix;\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome\n}\n", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "task_id": "JavaScript/10"}
{"generation": "\n  const result = [];\n  while (n > 0) {\n    result.push(n);\n    n = n % 2 === 0 ? n + 1 : n + 2;\n  }\n  return result.reverse();\n};\n\nmodule.exports = makeAPile;\n", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "task_id": "JavaScript/100"}
{"generation": "\n  const pile = [];\n  let currentLevel = n;\n  while (currentLevel > 0) {\n    pile.push(currentLevel);\n    currentLevel = currentLevel % 2 === 0 ? currentLevel + 1 : currentLevel + 2;\n  }\n  return pile.reverse();\n};\n\nmodule.exports = makeAPile;\n", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "task_id": "JavaScript/100"}
{"generation": "\n  const pile = [];\n  let currentLevel = n;\n  while (currentLevel > 0) {\n    pile.push(currentLevel);\n    currentLevel = currentLevel % 2 === 0 ? currentLevel + 1 : currentLevel + 2;\n  }\n  return pile.reverse();\n};\n\nmodule.exports = makeAPile;\n", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "task_id": "JavaScript/100"}
{"generation": "\n  return s.split(/[\\s,]+/);\n}\n", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "task_id": "JavaScript/101"}
{"generation": "\n  return s.split(/[\\s,]+/);\n}\n", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "task_id": "JavaScript/101"}
{"generation": "\n  return s.split(/[\\s,]+/);\n};\n\nmodule.exports = wordsString;\n", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "task_id": "JavaScript/101"}
{"generation": "\n  if (x % 2 === 0) {\n    if (y % 2 === 0) {\n      if (x <= y) {\n        return y;\n      } else {\n        return -1;\n      }\n    } else {\n      return -1;\n    }\n  } else {\n    if (y % 2 === 0) {\n      if (x <= y) {\n        return y;\n      } else {\n        return -1;\n      }\n    } else {\n      if (x <= y) {\n        return y - 1;\n      } else {\n        return -1;\n      }\n    }\n  }\n};\n", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "task_id": "JavaScript/102"}
{"generation": "\n  if (x > y) return -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) return i;\n  }\n  return -1;\n};\n\nmodule.exports = chooseNum;\n", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "task_id": "JavaScript/102"}
{"generation": "\n  if (x % 2 === 0) {\n    if (y % 2 === 0) {\n      if (x <= y) {\n        return y;\n      } else {\n        return -1;\n      }\n    } else {\n      return -1;\n    }\n  } else {\n    if (y % 2 === 0) {\n      if (x <= y) {\n        return y;\n      } else {\n        return -1;\n      }\n    } else {\n      return -1;\n    }\n  }\n};\n\nmodule.exports = chooseNum;\n", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "task_id": "JavaScript/102"}
{"generation": "\n  if (n > m) return -1;\n  const sum = n + m;\n  const avg = sum / 2;\n  const rounded = Math.round(avg);\n  return rounded.toString(2);\n};\n\nmodule.exports = roundedAvg;\n", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "task_id": "JavaScript/103"}
{"generation": "\n  if (n > m) return -1;\n  const sum = n + m;\n  const avg = sum / 2;\n  const rounded = Math.round(avg);\n  return rounded.toString(2);\n};\n\nmodule.exports = roundedAvg;\n", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "task_id": "JavaScript/103"}
{"generation": "\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = sum / (m - n + 1);\n  let rounded = Math.round(avg);\n  return rounded.toString(2);\n};\n", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "task_id": "JavaScript/103"}
{"generation": "\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i].toString().includes(\"0\") || x[i].toString().includes(\"2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") || x[i].toString().includes(\"8\")) {\n      continue;\n    } else {\n      arr.push(x[i]);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n};\n", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "task_id": "JavaScript/104"}
{"generation": "\n  let result = [];\n  x.forEach((element) => {\n    let str = element.toString();\n    let hasEven = false;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 0) {\n        hasEven = true;\n        break;\n      }\n    }\n    if (!hasEven) {\n      result.push(element);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "task_id": "JavaScript/104"}
{"generation": "\n  const sorted = x.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].toString().includes('0') || sorted[i].toString().includes('2') || sorted[i].toString().includes('4') || sorted[i].toString().includes('6') || sorted[i].toString().includes('8')) {\n      continue;\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "task_id": "JavaScript/104"}
{"generation": "\n  const sorted = arr.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nconst byValue = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst reverse = (arr) => {\n  const reversed = arr.reverse();\n  return reversed;\n};\n\nconst replaceDigits = (arr) => {\n  const digits = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  const replaced = arr.map((digit) => digits[digit]);\n  return replaced;\n", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "task_id": "JavaScript/105"}
{"generation": "\n  return arr.sort((a, b) => {\n    return a.length - b.length;\n  });\n};\n\nconst byName = (arr) => {\n  return arr.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n};\n\nconst reverse = (arr) => {\n  return arr.reverse();\n};\n\nconst getDigitName = (arr) => {\n  return arr.map((num) => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Se", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "task_id": "JavaScript/105"}
{"generation": "\n  const sorted = arr.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nconst reverse = (arr) => {\n  const reversed = arr.reverse();\n  return reversed;\n};\n\nconst replaceDigits = (arr) => {\n  const digits = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine',\n  };\n  const replaced = arr.map((num) => digits[num]);\n  return replaced;\n};\n\nconst sortDigits = (arr) => {\n  const sorted = byLength(arr);\n  const reversed = reverse(sorted);\n  const", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "task_id": "JavaScript/105"}
{"generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "task_id": "JavaScript/106"}
{"generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "task_id": "JavaScript/106"}
{"generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sumOfNumbers(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconst sumOfNumbers = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "task_id": "JavaScript/106"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const rev = str.split(\"\").reverse().join(\"\");\n    if (str === rev) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n\n  return [even, odd];\n};\n", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "task_id": "JavaScript/107"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split(\"\").reverse().join(\"\")) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n\n  return [even, odd];\n};\n", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "task_id": "JavaScript/107"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const rev = str.split('').reverse().join('');\n\n    if (str === rev) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "task_id": "JavaScript/107"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = -num;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "task_id": "JavaScript/108"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num !== 0) {\n      sum += Math.abs(num % 10);\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "task_id": "JavaScript/108"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num !== 0) {\n      sum += Math.abs(num % 10);\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "task_id": "JavaScript/108"}
{"generation": "\n  let sorted = arr.sort((a, b) => a - b);\n  return arr.join(\"\") === sorted.join(\"\");\n};\n", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "task_id": "JavaScript/109"}
{"generation": "\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = 1;\n  let k = 2;\n  while (i < arr.length && j < arr.length && k < arr.length) {\n    if (arr[i] < arr[j] && arr[j] < arr[k]) {\n      i++;\n      j++;\n      k++;\n    } else if (arr[i] < arr[j] && arr[j] > arr[k]) {\n      i++;\n      j++;\n    } else if (arr[i] > arr[j] && arr[j] < arr[k]) {\n      i++;\n    } else {\n      return false;\n    }\n  }\n ", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "task_id": "JavaScript/109"}
{"generation": "\n  if (arr.length === 0) return true;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) max = arr[i];\n    if (arr[i] < arr[i - 1]) return false;\n  }\n  return true;\n};\n", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "task_id": "JavaScript/109"}
{"generation": "\n  const xor = (a, b) => a ^ b;\n  const result = a.split('').map((char, i) => xor(char, b[i]));\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "task_id": "JavaScript/11"}
{"generation": "\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result.push('0');\n    } else {\n      result.push('1');\n    }\n  }\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "task_id": "JavaScript/11"}
{"generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "task_id": "JavaScript/11"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n  let evenList = [];\n  let oddList = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n      evenList.push(lst1[i]);\n    } else {\n      odd++;\n      oddList.push(lst1[i]);\n    }\n  }\n  if (even === lst1.length) {\n    return \"YES\";\n  } else if (even === 0) {\n    return \"NO\";\n  } else {\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "task_id": "JavaScript/110"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even === lst1.length) {\n    return \"YES\";\n  } else if (odd > lst2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n};\n", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "task_id": "JavaScript/110"}
{"generation": "\n  let sum1 = 0;\n  let sum2 = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    sum1 += lst1[i];\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    sum2 += lst2[i];\n  }\n  if (sum1 % 2 === 0 && sum2 % 2 === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "task_id": "JavaScript/110"}
{"generation": "\n  const letters = test.split(' ');\n  const letterCount = {};\n  letters.forEach((letter) => {\n    if (letterCount[letter]) {\n      letterCount[letter] += 1;\n    } else {\n      letterCount[letter] = 1;\n    }\n  });\n  return letterCount;\n};\n\nmodule.exports = histogram;\n", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "task_id": "JavaScript/111"}
{"generation": "\n  const arr = test.split(' ');\n  const obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]] === undefined) {\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n  }\n  return obj;\n};\n\nmodule.exports = histogram;\n", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "task_id": "JavaScript/111"}
{"generation": "\n  const arr = test.split(' ');\n  const obj = {};\n  let max = 0;\n  let maxLetter = '';\n  arr.forEach((letter) => {\n    if (obj[letter]) {\n      obj[letter] += 1;\n    } else {\n      obj[letter] = 1;\n    }\n    if (obj[letter] > max) {\n      max = obj[letter];\n      maxLetter = letter;\n    }\n  });\n  const result = {};\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] === max) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n};\n\nmodule.exports = histogram;", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "task_id": "JavaScript/111"}
{"generation": "\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] !== result[result.length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "task_id": "JavaScript/112"}
{"generation": "\n  let result = '';\n  let check = true;\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      check = false;\n    }\n  }\n  return [result, check];\n};\n", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "task_id": "JavaScript/112"}
{"generation": "\n  let result = s.split('');\n  let arr = c.split('');\n  for (let i = 0; i < result.length; i++) {\n    if (arr.includes(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  let check = true;\n  for (let i = 0; i < result.length / 2; i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      check = false;\n      break;\n    }\n  }\n  return [result.join(''), check", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "task_id": "JavaScript/112"}
{"generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${i}ng ${i} of the ${i}nput.`);\n  }\n  return result;\n};\n", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "task_id": "JavaScript/113"}
{"generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${i}ng ${i} of the ${i}nput.`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "task_id": "JavaScript/113"}
{"generation": "\n  let result = [];\n  lst.forEach((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${str.length}ng ${str.length} of the ${str.length}nput.`);\n  });\n  return result;\n};\n\nmodule.exports = oddCount;\n", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "task_id": "JavaScript/113"}
{"generation": "\n  let min = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "task_id": "JavaScript/114"}
{"generation": "\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n};\n", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "task_id": "JavaScript/114"}
{"generation": "\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < minSum) minSum = sum;\n    }\n  }\n  return minSum;\n};\n", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "task_id": "JavaScript/114"}
{"generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const dp = Array(rows).fill(0).map(() => Array(cols + 1).fill(0));\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j <= cols; j++) {\n      if (j === 0) {\n        dp[i][j] = 0;\n      } else if (i === 0) {\n        dp[i][j] = Math.min(grid[i][j - 1], capacity);\n      } else {\n        d", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "task_id": "JavaScript/115"}
{"generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const dp = new Array(rows).fill(0).map(() => new Array(cols + 1).fill(0));\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j <= cols; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = grid[i][j];\n      } else if (i === 0) {\n        dp[i][j] = Math.min(dp[i][j - 1]", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "task_id": "JavaScript/115"}
{"generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const dp = Array(rows)\n    .fill(0)\n    .map(() => Array(cols + 1).fill(0));\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 0) continue;\n      dp[i][j] = Math.min(capacity, dp[i][j - 1] + 1);\n    }\n  }\n\n  let max = 0;", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "task_id": "JavaScript/115"}
{"generation": "\n  return arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    if (binaryA.length === binaryB.length) {\n      return a - b;\n    }\n    return binaryA.length - binaryB.length;\n  });\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "task_id": "JavaScript/116"}
{"generation": "\n  const binaryArray = arr.map((num) => num.toString(2));\n  const sortedBinaryArray = binaryArray.sort((a, b) => {\n    if (a.split('1').length === b.split('1').length) {\n      return a - b;\n    }\n    return a.split('1').length - b.split('1').length;\n  });\n  return sortedBinaryArray.map((binaryNum) => parseInt(binaryNum, 2));\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "task_id": "JavaScript/116"}
{"generation": "\n  return arr.sort((a, b) => {\n    const aBin = a.toString(2);\n    const bBin = b.toString(2);\n    if (aBin.length === bBin.length) {\n      return a - b;\n    }\n    return aBin.length - bBin.length;\n  });\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "task_id": "JavaScript/116"}
{"generation": "\n  let words = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;\n", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "task_id": "JavaScript/117"}
{"generation": "\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === \"a\" || word[j] === \"e\" || word[j] === \"i\" || word[j] === \"o\" || word[j] === \"u\") {\n        continue;\n      } else {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "task_id": "JavaScript/117"}
{"generation": "\n  const words = s.split(' ');\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;\n", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "task_id": "JavaScript/117"}
{"generation": "\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let consonant = \"\";\n  let vowel = \"\";\n  let index = 0;\n  let found = false;\n\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (consonants.includes(word[i])) {\n      consonant = word[i];\n      index = i;\n      break;\n    }\n  }\n\n  for (let i = index - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      vowel = word[i];\n      found = true;\n      break;\n    }\n  }\n\n  return found ? vowel : \"\";\n};\n\nmodule.exports = getClosestV", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "task_id": "JavaScript/118"}
{"generation": "\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let wordArray = word.split(\"\");\n    let consonantIndex = [];\n    let vowelIndex = [];\n    let closestVowel = \"\";\n\n    for (let i = 0; i < wordArray.length; i++) {\n        if (consonants.includes(wordArray[i])) {\n            consonantIndex.push(i);\n        }\n        if (vowels.includes(wordArray[i])) {\n            vowelIndex.push(i);\n        }\n    }\n\n    if (consonantIndex.length === 0 || vowelIndex.length === 0) {\n        return \"\";\n    }\n\n    for (let i = 0; i < consonantIndex.length; i++) {\n        for (let j", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "task_id": "JavaScript/118"}
{"generation": "\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let closestVowel = \"\";\n  let consonantCount = 0;\n  let vowelCount = 0;\n  let vowelIndex = 0;\n  let consonantIndex = 0;\n  let wordArray = word.split(\"\");\n  let wordLength = wordArray.length;\n\n  for (let i = 0; i < wordLength; i++) {\n    if (consonants.includes(wordArray[i])) {\n      consonantCount++;\n      consonantIndex = i;\n    }\n    if (vowels.includes(wordArray[i])) {\n      vowelCount++;\n      vowelIndex = i;\n    }\n  }\n\n  if (consonantCount === 0 || vowelCount === ", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "task_id": "JavaScript/118"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') count++;\n    else count--;\n    if (count < 0) return 'No';\n  }\n  return count === 0 ? 'Yes' : 'No';\n};\n", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "task_id": "JavaScript/119"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  if (count === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nmodule.exports = matchParens;\n", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "task_id": "JavaScript/119"}
{"generation": "\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "task_id": "JavaScript/119"}
{"generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\nmodule.exports = longest;\n", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "task_id": "JavaScript/12"}
{"generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\nmodule.exports = longest;\n", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "task_id": "JavaScript/12"}
{"generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\nmodule.exports = longest;\n", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "task_id": "JavaScript/12"}
{"generation": "\n  const maxHeap = new Heap((a, b) => a < b);\n  for (let i = 0; i < k; i++) {\n    maxHeap.push(arr[i]);\n  }\n\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > maxHeap.peek()) {\n      maxHeap.pop();\n      maxHeap.push(arr[i]);\n    }\n  }\n\n  return maxHeap.toArray();\n};\n\nclass Heap {\n  constructor(comparator = (a, b) => a > b) {\n    this.heap = [];\n    this.comparator = comparator;\n  }\n\n  push(value) {\n    this.heap.push(value);\n    this.siftUp();\n  }\n\n  pop() {\n    const popped = this.heap[0];\n    const last = this.heap.pop();\n    if (this.heap.length > 0) {\n      this.heap[0] = last;\n      this.siftDown();\n    }\n", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "task_id": "JavaScript/120"}
{"generation": "\n  const maxHeap = new PriorityQueue((a, b) => a < b);\n  for (let i = 0; i < k; i++) {\n    maxHeap.enqueue(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    if (maxHeap.peek() < arr[i]) {\n      maxHeap.dequeue();\n      maxHeap.enqueue(arr[i]);\n    }\n  }\n  return maxHeap.toArray();\n};\n\nclass PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this.comparator = comparator;\n    this.elements = [];\n  }\n\n  enqueue(element) {\n    this.elements.push(element);\n    this.siftUp();\n  }\n\n  dequeue() {\n    const element = this.elements[0];\n    const lastElement = this.elements.pop();\n    if (this.elements.length > 0) {\n      this.elements[0] = lastElement;\n      this.siftDown();\n    }\n", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "task_id": "JavaScript/120"}
{"generation": "\n  const maxHeap = new Heap((a, b) => a > b);\n  for (let i = 0; i < k; i++) {\n    maxHeap.push(arr[i]);\n  }\n\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > maxHeap.peek()) {\n      maxHeap.pop();\n      maxHeap.push(arr[i]);\n    }\n  }\n\n  return maxHeap.toArray();\n};\n\nclass Heap {\n  constructor(comparator = (a, b) => a > b) {\n    this.heap = [];\n    this.comparator = comparator;\n  }\n\n  push(element) {\n    this.heap.push(element);\n    this.siftUp();\n  }\n\n  pop() {\n    const result = this.heap[0];\n    const last = this.heap.pop();\n    if (this.heap.length > 0) {\n      this.heap[0] = last;\n      this.siftDown();\n    }\n   ", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "task_id": "JavaScript/120"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "task_id": "JavaScript/121"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "task_id": "JavaScript/121"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "task_id": "JavaScript/121"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    const numStr = num.toString();\n    if (numStr.length <= 2) {\n      sum += num;\n    } else {\n      const firstTwo = numStr.slice(0, 2);\n      sum += parseInt(firstTwo);\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "task_id": "JavaScript/122"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    const numStr = num.toString();\n    if (numStr.length === 1) {\n      sum += num;\n    } else if (numStr.length === 2) {\n      sum += num % 10;\n      sum += num / 10;\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "task_id": "JavaScript/122"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    const digits = num.toString().length;\n    if (digits <= 2) {\n      sum += num;\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "task_id": "JavaScript/122"}
{"generation": "\n  const oddCollatz = [];\n  const collatz = (num) => {\n    if (num === 1) {\n      return;\n    }\n    if (num % 2 === 0) {\n      oddCollatz.push(num);\n      collatz(num / 2);\n    } else {\n      oddCollatz.push(num);\n      collatz(num * 3 + 1);\n    }\n  };\n  collatz(n);\n  return oddCollatz.sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "task_id": "JavaScript/123"}
{"generation": "\n  const oddCollatz = [];\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num !== 1) {\n      if (num % 2 !== 0) {\n        oddCollatz.push(num);\n      }\n      num = num % 2 === 0 ? num / 2 : 3 * num + 1;\n    }\n  }\n  return oddCollatz.filter((item, index, self) => self.indexOf(item) === index).sort((a, b) => a - b);\n};\n", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "task_id": "JavaScript/123"}
{"generation": "\n  const collatz = (n) => {\n    let sequence = [n];\n    while (n !== 1) {\n      if (n % 2 === 0) {\n        n = n / 2;\n      } else {\n        n = 3 * n + 1;\n      }\n      sequence.push(n);\n    }\n    return sequence;\n  };\n\n  const oddCollatz = (n) => {\n    const sequence = collatz(n);\n    return sequence.filter((num) => num % 2 !== 0);\n  };\n\n  return oddCollatz(n).sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "task_id": "JavaScript/123"}
{"generation": "\n  const regex = /^[0-9]{2}-[0-9]{2}-[0-9]{4}$/;\n  if (!regex.test(date)) return false;\n  const [month, day, year] = date.split('-');\n  if (month < 1 || month > 12) return false;\n  if (month === '02') {\n    if (day < 1 || day > 29) return false;\n  } else if (month === '04' || month === '06' || month === '09' || month === '11') {\n    if (day < 1 || day > 30) return false;\n  } else if (month === '01' || month === '03' || month === '05' || month === '07' || month === '08' || month === '10' || month === '12') {", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "task_id": "JavaScript/124"}
{"generation": "\n  const dateArray = date.split('-');\n  const month = dateArray[0];\n  const day = dateArray[1];\n  const year = dateArray[2];\n  if (date.length === 0) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (month === '02') {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month === '04' || month === '06' || month === '09' || month === '11') {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === '01' || month === '03' || month === '05' || month === '07'", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "task_id": "JavaScript/124"}
{"generation": "\n  const dateArray = date.split('-');\n  const month = dateArray[0];\n  const day = dateArray[1];\n  const year = dateArray[2];\n\n  if (date.length === 0) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (month === '02') {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if (month === '04' || month === '06' || month === '09' || month === '11') {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else if (month === '01' || month === '03' || month === '05' || month === '07", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "task_id": "JavaScript/124"}
{"generation": "\n  if (txt.includes(\" \")) return txt.split(\" \");\n  if (txt.includes(\",\")) return txt.split(\",\");\n  return txt.split(\"\").filter((x) => x.charCodeAt(0) % 2 === 1).length;\n};\n", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "task_id": "JavaScript/125"}
{"generation": "\n  let words = txt.split(\" \");\n  if (words.length > 1) return words;\n  words = txt.split(\",\");\n  if (words.length > 1) return words;\n  let oddLetters = 0;\n  for (let i = 0; i < txt.length; i++) {\n    if (i % 2 !== 0 && txt[i].toLowerCase() !== txt[i].toUpperCase()) {\n      oddLetters++;\n    }\n  }\n  return oddLetters;\n};\n", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "task_id": "JavaScript/125"}
{"generation": "\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (i % 2 !== 0 && txt[i].toLowerCase() !== txt[i].toUpperCase()) {\n        count++;\n      }\n    }\n    return count;\n  }\n};\n", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "task_id": "JavaScript/125"}
{"generation": "\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n", "task_id": "JavaScript/126"}
{"generation": "\n  const set = new Set(lst);\n  if (set.size !== lst.length) return false;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n  }\n  return true;\n};\n", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n", "task_id": "JavaScript/126"}
{"generation": "\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n    }\n    if (lst[i] === lst[i + 1]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n};\n", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n", "task_id": "JavaScript/126"}
{"generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    const intersection = [Math.max(start1, start2), Math.min(end1, end2)];\n    const length = intersection[1] - intersection[0] + 1;\n    return length > 1 && isPrime(length) ? \"YES\" : \"NO\";\n  }\n  return \"NO\";\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "task_id": "JavaScript/127"}
{"generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start1 <= end2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "task_id": "JavaScript/127"}
{"generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= start2) {\n    if (end1 < start2) {\n      return \"NO\";\n    }\n    if (end1 <= end2) {\n      return \"NO\";\n    }\n    return \"YES\";\n  }\n  if (start2 <= start1) {\n    if (end2 < start1) {\n      return \"NO\";\n    }\n    if (end2 <= end1) {\n      return \"NO\";\n    }\n    return \"YES\";\n  }\n  return \"NO\";\n};\n", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "task_id": "JavaScript/127"}
{"generation": "\n  if (arr.length === 0) return null;\n  let result = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      result *= -1;\n    } else if (arr[i]", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "task_id": "JavaScript/128"}
{"generation": "\n  if (arr.length === 0) return null;\n  let result = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    }\n    result += Math.abs", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "task_id": "JavaScript/128"}
{"generation": "\n  if (arr.length === 0) {\n    return null;\n  }\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    } else", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "task_id": "JavaScript/128"}
{"generation": "\n  const n = grid.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  const visited = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(false));\n  const path = [];\n  const rec", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "task_id": "JavaScript/129"}
{"generation": "\n  const n = grid.length;\n  const dp = Array(n)\n    .fill()\n    .map(() => Array(n).fill(Infinity));\n  dp[0][0] = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "task_id": "JavaScript/129"}
{"generation": "\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n  const queue = [];\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let path", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "task_id": "JavaScript/129"}
{"generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\nmodule.exports = greatestCommonDivisor;\n", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "task_id": "JavaScript/13"}
{"generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\nmodule.exports = greatestCommonDivisor;\n", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "task_id": "JavaScript/13"}
{"generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "task_id": "JavaScript/13"}
{"generation": "\n  let tribonacci = [1, 3, 2];\n  for (let i = 3; i < n + 1; i++) {\n    if (i % 2 === 0) {\n      tribonacci.push(1 + i / 2);\n    } else {\n      tribonacci.push(\n        trib", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "task_id": "JavaScript/130"}
{"generation": "\n  const tribonacci = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "task_id": "JavaScript/130"}
{"generation": "\n  if (n === 0) return [1];\n  if (n === 1) return [1, 3];\n  if (n === 2) return [1, 3, 2];\n  const tribonacci = [1, 3, 2];\n  for (let i = 3; i <= n; i++)", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "task_id": "JavaScript/130"}
{"generation": "\n  let product = 1;\n  let oddDigits = [];\n  let evenDigits = [];\n  let digits = n.toString().split('');\n\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 === 0) {\n      evenDigits.push", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "task_id": "JavaScript/131"}
{"generation": "\n  let product = 1;\n  while (n > 0) {\n    let lastDigit = n % 10;\n    if (lastDigit % 2 !== 0) {\n      product *= lastDigit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "task_id": "JavaScript/131"}
{"generation": "\n  let product = 1;\n  let oddDigits = 0;\n  while (n > 0) {\n    const lastDigit = n % 10;\n    if (lastDigit % 2 !== 0) {\n      oddDigits += 1;\n      product *= lastDigit;\n    }\n    n", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "task_id": "JavaScript/131"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n", "task_id": "JavaScript/132"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n", "task_id": "JavaScript/132"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n", "task_id": "JavaScript/132"}
{"generation": "\n  let sum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(Math.ceil(element), 2);\n  });\n  return sum;\n};\n", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/133"}
{"generation": "\n  return lst.map(Math.ceil).reduce((acc, val) => acc + val ** 2, 0);\n};\n", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/133"}
{"generation": "\n  let newArr = lst.map((num) => Math.ceil(num));\n  let sum = 0;\n  for (let i = 0; i < newArr.length; i++) {\n    sum += newArr[i] ** 2;\n  }\n  return sum;\n};\n", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/133"}
{"generation": "\n  const lastChar = txt.slice(-1);\n  const word = txt.split(\" \");\n  const lastWord = word[word.length - 1];\n  if (lastChar.match(/[a-zA-Z]/g) && lastWord.length === 1) {\n    return true;\n  } else {\n    return false;\n  }\n};", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "task_id": "JavaScript/134"}
{"generation": "\n  let lastChar = txt.slice(-1);\n  let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  let lastCharIsWord = lastChar.match(/\\s/);\n  if (lastCharIsLetter && !lastCharIsWord) {\n    return true;\n  } else {\n    return false;\n  }\n};\n", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "task_id": "JavaScript/134"}
{"generation": "\n  const lastChar = txt[txt.length - 1];\n  const lastWord = txt.split(\" \").pop();\n  const lastCharOfLastWord = lastWord[lastWord.length - 1];\n  return lastChar === lastCharOfLastWord && !isNaN(lastChar);\n};", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "task_id": "JavaScript/134"}
{"generation": "\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "task_id": "JavaScript/135"}
{"generation": "\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "task_id": "JavaScript/135"}
{"generation": "\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      maxIndex = Math.max(maxIndex, i);\n    }\n  }\n  return maxIndex;\n};\n", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "task_id": "JavaScript/135"}
{"generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};\n", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "task_id": "JavaScript/136"}
{"generation": "\n  let smallestPositive = null;\n  let largestNegative = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};\n", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "task_id": "JavaScript/136"}
{"generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n};\n", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "task_id": "JavaScript/136"}
{"generation": "\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b ? a : b;\n  } else if (typeof a === 'number' && typeof b === 'string') {\n    return a > parseFloat(b) ? a : parseFloat(b);\n  } else if (typeof a === 'string' && typeof b === 'number') {\n    return parseFloat(a) > b ? parseFloat(a) : b;\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return parseFloat(a) > parseFloat(b) ? parseFloat(a) : parseFloat(b);\n  }\n};\n", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n", "task_id": "JavaScript/137"}
{"generation": "\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return Math.max(a, b);\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b ? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > parseFloat(b) ? a : parseFloat(b);\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > b ? parseFloat(a) : b;\n  }\n};\n", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n", "task_id": "JavaScript/137"}
{"generation": "\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b ? a : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b ? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > parseFloat(b) ? a : parseFloat(b);\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > b ? parseFloat(a) : b;\n  }\n  return null;\n};\n", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n", "task_id": "JavaScript/137"}
{"generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n    if (sum === n) return true;\n  }\n  return false;\n};\n", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "task_id": "JavaScript/138"}
{"generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "task_id": "JavaScript/138"}
{"generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i += 2) {\n    if (n - i >= 0) {\n      count++;\n      n -= i;\n    }\n  }\n  return count === 4;\n};\n", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "task_id": "JavaScript/138"}
{"generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "task_id": "JavaScript/139"}
{"generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "task_id": "JavaScript/139"}
{"generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};\n", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "task_id": "JavaScript/139"}
{"generation": "\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "task_id": "JavaScript/14"}
{"generation": "\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "task_id": "JavaScript/14"}
{"generation": "\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "task_id": "JavaScript/14"}
{"generation": "\n  let newText = text.replace(/\\s+/g, '_');\n  return newText.replace(/_+/g, '-');\n}\n", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "task_id": "JavaScript/140"}
{"generation": "\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length > 2) {\n      return '-';\n    }\n    return '_';\n  });\n};\n", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "task_id": "JavaScript/140"}
{"generation": "\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length === 1) {\n      return '_';\n    } else {\n      return '-';\n    }\n  });\n};\n", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "task_id": "JavaScript/140"}
{"generation": "\n  let count = 0;\n  let dot = false;\n  let valid = false;\n  let ext = '';\n  for (let i = 0; i < file_name.length; i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      count++;\n    }\n    if (file_name[i] === '.') {\n      dot = true;\n    }\n    if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n      valid = true;\n    }\n    if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n      valid = true;\n    }\n    if (dot) {\n      ext += file_name[i];\n    }\n  }\n  if (count > 3) {\n    return 'No';\n  }\n  if (!dot) {\n    return 'No';\n  }\n  if (!valid) {\n    return 'No';\n  }\n  if (ext === 'txt' || ext === 'exe' || ext === 'dll') {\n    return 'Yes';\n  }", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "task_id": "JavaScript/141"}
{"generation": "\n  let isValid = true;\n  let count = 0;\n  let dot = false;\n  let dot_after = false;\n  let dot_before = false;\n  let dot_after_valid = false;\n  let dot_before_valid = false;\n  let dot_valid = false;\n  let dot_after_valid_array = ['txt', 'exe', 'dll'];\n  for (let i = 0; i < file_name.length; i++) {\n    if (file_name[i] === '.') {\n      dot = true;\n      dot_before = true;\n    }\n    if (file_name[i] === '.') {\n      dot_after = true;\n    }\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      count++;\n    }\n    if (count > 3) {\n      isValid = false;\n    }\n    if (dot_after && !dot_after_valid) {\n      if (dot_after_valid_array.includes(file_name.substring(i + 1))) {\n        dot_after_valid = true;\n      }\n    }", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "task_id": "JavaScript/141"}
{"generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-z]{3}$/;\n  return regex.test(file_name) ? \"Yes\" : \"No\";\n};\n", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "task_id": "JavaScript/141"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/142"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/142"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "task_id": "JavaScript/142"}
{"generation": "\n  const words = sentence.split(' ');\n  const primeWords = [];\n  const isPrime = (num) => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) primeWords.push(words[i]);\n  }\n\n  return primeWords.join(' ');\n};\n\nexport default wordsInSentence;\n", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "task_id": "JavaScript/143"}
{"generation": "\n  const words = sentence.split(' ');\n  const primeWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "task_id": "JavaScript/143"}
{"generation": "\n  const words = sentence.split(' ');\n  const primeWords = [];\n\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n\n  return primeWords.join(' ');\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default wordsInSentence;\n", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "task_id": "JavaScript/143"}
{"generation": "\n  const [xNumerator, xDenominator] = x.split(\"/\");\n  const [nNumerator, nDenominator] = n.split(\"/\");\n\n  const xMultiplied = xNumerator * nDenominator;\n  const nMultiplied = nNumerator * xDenominator;\n\n  return xMultiplied % nMultiplied === 0;\n};\n", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "task_id": "JavaScript/144"}
{"generation": "\n  let numX = x.split(\"/\")[0];\n  let denX = x.split(\"/\")[1];\n  let numN = n.split(\"/\")[0];\n  let denN = n.split(\"/\")[1];\n  let result = numX * numN;\n  let result2 = denX * denN;\n  if (result % result2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "task_id": "JavaScript/144"}
{"generation": "\n  const [numX, denX] = x.split(\"/\");\n  const [numN, denN] = n.split(\"/\");\n  const result = numX * numN / denX / denN;\n  return result % 1 === 0;\n};\n", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "task_id": "JavaScript/144"}
{"generation": "\n  return nums.sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n};\n\nconst sumDigits = (num) => {\n  let sum = 0;\n  while (num !== 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n};\n\nmodule.exports = orderByPoints;\n", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "task_id": "JavaScript/145"}
{"generation": "\n  const sumOfDigits = nums.map((num) => {\n    let sum = 0;\n    while (num !== 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  });\n\n  return nums.sort((a, b) => {\n    if (sumOfDigits[a] === sumOfDigits[b]) {\n      return a - b;\n    }\n    return sumOfDigits[a] - sumOfDigits[b];\n  });\n};\n", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "task_id": "JavaScript/145"}
{"generation": "\n  return nums.sort((a, b) => {\n    const sumA = sumOfDigits(a);\n    const sumB = sumOfDigits(b);\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n};\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n};\n\nmodule.exports = { orderByPoints };\n", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "task_id": "JavaScript/145"}
{"generation": "\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10) {\n            if (nums[i].toString()[0] % 2 !== 0 && nums[i].toString()[nums[i].toString().length - 1] % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "task_id": "JavaScript/146"}
{"generation": "\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10) {\n            if (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9) {\n                if (nums[i] / 10 % 10 === 1 || nums[i] / 10 % 10 === 3 || nums[i] / 10 % 10 === 5 || nums[i] / 10 % 10 === 7 || nums[i] / 10 % 10 === 9) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "task_id": "JavaScript/146"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      let firstDigit = Math.abs(nums[i]) % 10;\n      let lastDigit = Math.abs(nums[i]) / 10;\n      if (firstDigit % 2 === 1 && lastDigit % 2 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "task_id": "JavaScript/146"}
{"generation": "\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "task_id": "JavaScript/147"}
{"generation": "\n  let count = 0;\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "task_id": "JavaScript/147"}
{"generation": "\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "task_id": "JavaScript/147"}
{"generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  if (planet1Index === -1 || planet2Index === -1) return [];\n  if (planet1Index > planet2Index) {\n    [planet1Index, planet2Index] = [planet2Index, planet1Index];\n  }\n  return planets.slice(planet1Index + 1, planet2Index);\n};\n", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "task_id": "JavaScript/148"}
{"generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    return planets.slice(index2 + 1, index1);\n  }\n  return planets.slice(index1 + 1, index2);\n};\n", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "task_id": "JavaScript/148"}
{"generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  if (planet1Index === -1 || planet2Index === -1) {\n    return [];\n  }\n  if (planet1Index > planet2Index) {\n    return planets.slice(planet2Index, planet1Index + 1);\n  }\n  return planets.slice(planet1Index, planet2Index + 1);\n};\n", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "task_id": "JavaScript/148"}
{"generation": "\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i].length % 2 === 0) {\n      result.push(sortedList[i]);\n    }\n  }\n  return result.sort();\n};\n", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "task_id": "JavaScript/149"}
{"generation": "\n  const newList = lst.filter((word) => word.length % 2 === 0);\n  return newList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n};\n\nmodule.exports = sortedListSum;\n", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "task_id": "JavaScript/149"}
{"generation": "\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i].length % 2 === 0) {\n      result.push(sortedList[i]);\n    }\n  }\n  return result.sort();\n};\n", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "task_id": "JavaScript/149"}
{"generation": "\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += `${i} `;\n  }\n  return str.trim();\n};\n\nmodule.exports = stringSequence;\n", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "task_id": "JavaScript/15"}
{"generation": "\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += `${i} `;\n  }\n  return str.trim();\n};\n\nmodule.exports = stringSequence;\n", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "task_id": "JavaScript/15"}
{"generation": "\n  return Array.from(Array(n + 1).keys()).join(' ');\n};\n\nmodule.exports = stringSequence;\n", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "task_id": "JavaScript/15"}
{"generation": "\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "task_id": "JavaScript/150"}
{"generation": "\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "task_id": "JavaScript/150"}
{"generation": "\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "task_id": "JavaScript/150"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "task_id": "JavaScript/151"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] >= 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "task_id": "JavaScript/151"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "task_id": "JavaScript/151"}
{"generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "task_id": "JavaScript/152"}
{"generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n};\n", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "task_id": "JavaScript/152"}
{"generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "task_id": "JavaScript/152"}
{"generation": "\n  let strongest = {\n    name: class_name,\n    strength: -Infinity,\n  };\n  for (let ext of extensions) {\n    let strength = 0;\n    for (let i = 0; i < ext.length; i++) {\n      if (ext[i] === ext[i].toUpperCase()) {\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if (strength > strongest.strength) {\n      strongest = {\n        name: ext,\n        strength: strength,\n      };\n    } else if (strength === strongest.strength) {\n      if (ext < strongest.name) {\n        strongest = {\n          name: ext,\n          strength: strength,\n        };\n      }\n    }\n  }\n  return `${class_name}.${strongest.name}`;\n};\n\nconsole.", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "task_id": "JavaScript/153"}
{"generation": "\n  let strongest = {\n    name: \"\",\n    strength: 0,\n  };\n\n  for (let i = 0; i < extensions.length; i++) {\n    let current = {\n      name: extensions[i],\n      strength: 0,\n    };\n\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        current.strength++;\n      } else {\n        current.strength--;\n      }\n    }\n\n    if (current.strength > strongest.strength) {\n      strongest = current;\n    } else if (current.strength === strongest.strength) {\n      if (extensions.indexOf(current.name) < extensions.indexOf(strongest.name)) {\n        strongest = current;\n      }\n    }\n  }", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "task_id": "JavaScript/153"}
{"generation": "\n  let strongest = {\n    strength: 0,\n    extension: \"\",\n  };\n  for (let i = 0; i < extensions.length; i++) {\n    let current = {\n      strength: 0,\n      extension: \"\",\n    };\n    let uppercase = 0;\n    let lowercase = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j].toUpperCase() === extensions[i][j]) {\n        uppercase++;\n      } else {\n        lowercase++;\n      }\n    }\n    current.strength = uppercase - lowercase;\n    current.extension = extensions[i];\n    if (current.strength > strongest.strength) {\n      strongest = current;\n    }\n  }\n  return `${class_name}.${strongest.extension}`;\n};\n\nconsole", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "task_id": "JavaScript/153"}
{"generation": "\n  if (a.includes(b)) return true;\n  let bb = b;\n  for (let i = 0; i < a.length; i++) {\n    if (bb.includes(a.slice(i))) return true;\n    bb = bb.slice(1) + bb[0];\n  }\n  return false;\n};\n", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "task_id": "JavaScript/154"}
{"generation": "\n  let bb = b;\n  for (let i = 0; i < a.length; i++) {\n    if (a.includes(bb)) {\n      return true;\n    } else {\n      bb = bb.slice(1) + bb[0];\n    }\n  }\n  return false;\n};\n", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "task_id": "JavaScript/154"}
{"generation": "\n  let bLength = b.length;\n  let aLength = a.length;\n  if (bLength > aLength) {\n    return false;\n  }\n  for (let i = 0; i < aLength; i++) {\n    if (a.slice(i, i + bLength) === b) {\n      return true;\n    }\n  }\n  return false;\n};\n", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "task_id": "JavaScript/154"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "task_id": "JavaScript/155"}
{"generation": "\n    let even = 0;\n    let odd = 0;\n    let numStr = num.toString();\n    for (let i = 0; i < numStr.length; i++) {\n        if (numStr[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n};\n", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "task_id": "JavaScript/155"}
{"generation": "\n  let even = 0;\n  let odd = 0;\n  const str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "task_id": "JavaScript/155"}
{"generation": "\n  const romanNumerals = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000: 'm',\n  };\n\n  const romanNumeral = [];\n  const nums = [1000, 500, 100, 50, 10, 5, 1];\n\n  nums.forEach((num) => {\n    const quotient = Math.floor(number / num);\n    if (quotient > 0) {\n      const roman = romanNumerals[num];\n      const", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "task_id": "JavaScript/156"}
{"generation": "\n  const romanNumerals = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000: 'm',\n  };\n\n  const romanNumeral = Object.keys(romanNumerals)\n    .sort((a, b) => b - a)\n    .reduce((acc, key) => {\n      const romanNumeral = romanNumerals[key];\n      const quotient = Math.floor(number / key);\n      const remainder = number % key;\n\n      return quotient > 0\n        ? acc + romanN", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "task_id": "JavaScript/156"}
{"generation": "\n  const romanNumerals = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000: 'm',\n  };\n  const romanNumeralKeys = Object.keys(romanNumerals);\n  const romanNumeralValues = Object.values(romanNumerals);\n  let romanNumeral = '';\n  let remainder = number;\n\n  for (let i = romanNumeralKeys.length - 1; i >= 0; i -= 1) {\n    const key = romanNumeralKeys[i];\n", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "task_id": "JavaScript/156"}
{"generation": "\n  if (a ** 2 + b ** 2 === c ** 2) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = rightAngleTriangle;\n", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "task_id": "JavaScript/157"}
{"generation": "\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n};\n\nmodule.exports = rightAngleTriangle;\n", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "task_id": "JavaScript/157"}
{"generation": "\n  if (a**2 + b**2 === c**2) {\n    return true;\n  }\n  return false;\n};\n", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "task_id": "JavaScript/157"}
{"generation": "\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    } else if (unique.size === max) {\n      if (word < maxWord) {\n        maxWord = word;\n      }\n    }\n  }\n  return maxWord;\n};\n", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "task_id": "JavaScript/158"}
{"generation": "\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      word = words[i];\n    }\n  }\n  return word;\n};\n", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "task_id": "JavaScript/158"}
{"generation": "\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    } else if (unique.size === max) {\n      if (word < maxWord) {\n        maxWord = word;\n      }\n    }\n  }\n  return maxWord;\n};\n", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "task_id": "JavaScript/158"}
{"generation": "\n  const total = number + need;\n  const left = total - remaining;\n  return [total, left < 0 ? 0 : left];\n};\n\nmodule.exports = eat;\n", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "task_id": "JavaScript/159"}
{"generation": "\n  let total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    total += left;\n    left = 0;\n  }\n  return [total, left];\n};\n\nmodule.exports = eat;\n", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "task_id": "JavaScript/159"}
{"generation": "\n  const total = number + need;\n  const left = total > remaining ? remaining - number : 0;\n  return [total, left];\n};\n\nmodule.exports = eat;\n", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "task_id": "JavaScript/159"}
{"generation": "\n  const characters = string.toLowerCase().split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\nmodule.exports = countDistinctCharacters;\n", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "task_id": "JavaScript/16"}
{"generation": "\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\nmodule.exports = countDistinctCharacters;\n", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "task_id": "JavaScript/16"}
{"generation": "\n  const distinctCharacters = new Set();\n  for (const character of string) {\n    distinctCharacters.add(character.toLowerCase());\n  }\n  return distinctCharacters.size;\n};\n\nmodule.exports = countDistinctCharacters;\n", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "task_id": "JavaScript/16"}
{"generation": "\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "task_id": "JavaScript/160"}
{"generation": "\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "task_id": "JavaScript/160"}
{"generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"+\":\n        result += operand[i + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n        break;\n      case \"*\":\n        result *= operand[i + 1];\n        break;\n      case \"/\":\n        result /= operand[i + 1];\n        break;\n      case \"**\":\n        result **= operand[i + 1];\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n};\n", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "task_id": "JavaScript/160"}
{"generation": "\n  let str = s.split(\"\");\n  let letters = [];\n  let numbers = [];\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-zA-Z]/)) {\n      letters.push(str[i]);\n    } else {\n      numbers.push(str[i]);\n    }\n  }\n  if (letters.length === 0) {\n    for (let i = numbers.length - 1; i >= 0; i--) {\n      result.push(numbers[i]);\n    }\n    return result.join(\"\");\n  } else {\n    for (let i = letters.length - 1; i >= 0; i--) {\n      result.push(letters[i].toUpperCase());\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      result.push(numbers[i]);\n    }\n    return result.join(\"\");\n  }\n};\n", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "task_id": "JavaScript/161"}
{"generation": "\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result.split(\"\").reverse().join(\"\");\n};\n", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "task_id": "JavaScript/161"}
{"generation": "\n  let result = \"\";\n  let isLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      isLetter = true;\n      if (s[i].match(/[a-z]/)) {\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  if (!isLetter) {\n    result = result.split(\"\").reverse().join(\"\");\n  }\n  return result;\n};\n", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "task_id": "JavaScript/161"}
{"generation": "\n  if (text === '') {\n    return null;\n  }\n\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "task_id": "JavaScript/162"}
{"generation": "\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "task_id": "JavaScript/162"}
{"generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "task_id": "JavaScript/162"}
{"generation": "\n  const evenDigits = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) evenDigits.push(i);\n  }\n  return evenDigits;\n};\n\nmodule.exports = generateIntegers;\n", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "task_id": "JavaScript/163"}
{"generation": "\n  const evenDigits = [];\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n\n  for (let i = min; i <= max; i += 1) {\n    if (i % 2 === 0) {\n      evenDigits.push(i);\n    }\n  }\n\n  return evenDigits;\n};\n\nexport default generateIntegers;\n", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "task_id": "JavaScript/163"}
{"generation": "\n  const result = [];\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n\n  for (let i = min; i <= max; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = generateIntegers;\n", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "task_id": "JavaScript/163"}
{"generation": "\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  }\n  const notes = music_string.split(' ');\n  const note_durations = notes.map(note => note_lengths[note]);\n  return note_durations;\n}\n", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "task_id": "JavaScript/17"}
{"generation": "\n  const notes = music_string.split(' ');\n  const note_lengths = [];\n  notes.forEach((note) => {\n    if (note === 'o') {\n      note_lengths.push(4);\n    } else if (note === 'o|') {\n      note_lengths.push(2);\n    } else if (note === '.|') {\n      note_lengths.push(1);\n    }\n  });\n  return note_lengths;\n};\n\nmodule.exports = parseMusic;\n", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "task_id": "JavaScript/17"}
{"generation": "\n  const note_lengths = {\n    'o': 4,\n    '|': 2,\n    '.': 1,\n  };\n  const notes = music_string.split(' ');\n  const note_durations = notes.map((note) => note_lengths[note[0]]);\n  return note_durations;\n};\n\nmodule.exports = parseMusic;\n", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "task_id": "JavaScript/17"}
{"generation": "\n  if (string.length < substring.length) {\n    return 0;\n  }\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "task_id": "JavaScript/18"}
{"generation": "\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.slice(i, i + substring.length) === substring) {\n      count += 1;\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "task_id": "JavaScript/18"}
{"generation": "\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.slice(i, i + substring.length) === substring) {\n      count += 1;\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "task_id": "JavaScript/18"}
{"generation": "\n  const numbersArray = numbers.split(' ');\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a === 'zero' && b === 'zero') {\n      return 0;\n    }\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    return a.localeCompare(b);\n  });\n  return sortedArray.join(' ');\n};\n\nmodule.exports = sortNumbers;\n", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "task_id": "JavaScript/19"}
{"generation": "\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numberArray = numbers.split(' ').map((number) => numberMap[number]);\n  return numberArray.sort((a, b) => a - b).map((number) => Object.keys(numberMap).find((key) => numberMap[key] === number)).join(' ');\n};\n\nmodule.exports = sortNumbers;\n", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "task_id": "JavaScript/19"}
{"generation": "\n  const numberals = numbers.split(' ');\n  const sorted = numberals.sort((a, b) => {\n    const numA = parseInt(a.slice(-1), 10);\n    const numB = parseInt(b.slice(-1), 10);\n    return numA - numB;\n  });\n  return sorted.join(' ');\n};\n\nmodule.exports = sortNumbers;\n", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "task_id": "JavaScript/19"}
{"generation": "\n  return number - Math.floor(number);\n};\n", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "task_id": "JavaScript/2"}
{"generation": "\n  const decimals = number - Math.floor(number);\n  return decimals;\n};\n\nmodule.exports = truncateNumber;\n", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "task_id": "JavaScript/2"}
{"generation": "\n  return number - Math.floor(number);\n};\n\nmodule.exports = truncateNumber;\n", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "task_id": "JavaScript/2"}
{"generation": "\n  let closest = [numbers[0], numbers[1]];\n  let minDiff = Math.abs(closest[0] - closest[1]);\n\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i - 1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n      closest = [numbers[i - 1], numbers[i]];\n    }\n  }\n\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "task_id": "JavaScript/20"}
{"generation": "\n  let minDiff = Infinity;\n  let closestPair = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closestPair;\n};\n\nmodule.exports = findClosestElements;\n", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "task_id": "JavaScript/20"}
{"generation": "\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffIndex2 = 0;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        minDiffIndex = i;\n        minDiffIndex2 = j;\n      }\n    }\n  }\n  return [numbers[minDiffIndex], numbers[minDiffIndex2]];\n};\n\nmodule.exports = findClosestElements;\n", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "task_id": "JavaScript/20"}
{"generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n\nmodule.exports = rescaleToUnit;\n", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "task_id": "JavaScript/21"}
{"generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(x => (x - min) / (max - min));\n};\n\nmodule.exports = rescaleToUnit;\n", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "task_id": "JavaScript/21"}
{"generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n\nmodule.exports = rescaleToUnit;\n", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "task_id": "JavaScript/21"}
{"generation": "\n  return values.filter((value) => {\n    return typeof value === 'number' && Number.isInteger(value);\n  });\n};\n", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "task_id": "JavaScript/22"}
{"generation": "\n  return values.filter(value => typeof value === 'number' && Number.isInteger(value));\n};\n", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "task_id": "JavaScript/22"}
{"generation": "\n  return values.filter(value => typeof value === 'number' && Number.isInteger(value));\n};\n", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "task_id": "JavaScript/22"}
{"generation": "\n  return string.length;\n};\n", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "task_id": "JavaScript/23"}
{"generation": "\n  return string.length;\n};\n", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "task_id": "JavaScript/23"}
{"generation": "\n  return string.length;\n};\n\nmodule.exports = strlen;\n", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "task_id": "JavaScript/23"}
{"generation": "\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\nmodule.exports = largestDivisor;\n", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "task_id": "JavaScript/24"}
{"generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};\n\nmodule.exports = largestDivisor;\n", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "task_id": "JavaScript/24"}
{"generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};\n\nmodule.exports = largestDivisor;\n", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "task_id": "JavaScript/24"}
{"generation": "\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "task_id": "JavaScript/25"}
{"generation": "\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "task_id": "JavaScript/25"}
{"generation": "\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "task_id": "JavaScript/25"}
{"generation": "\n  const seen = {};\n  return numbers.filter((number) => {\n    if (seen[number]) {\n      return false;\n    }\n    seen[number] = true;\n    return true;\n  });\n};\n\nmodule.exports = removeDuplicates;\n", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "task_id": "JavaScript/26"}
{"generation": "\n  const uniqueNumbers = [];\n  const seen = {};\n  numbers.forEach((number) => {\n    if (!seen[number]) {\n      uniqueNumbers.push(number);\n      seen[number] = true;\n    }\n  });\n  return uniqueNumbers;\n};\n\nmodule.exports = removeDuplicates;\n", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "task_id": "JavaScript/26"}
{"generation": "\n  const seen = {};\n  return numbers.filter((number) => {\n    if (seen[number]) {\n      return false;\n    }\n    seen[number] = true;\n    return true;\n  });\n};\n\nexport default removeDuplicates;\n", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "task_id": "JavaScript/26"}
{"generation": "\n  return string.replace(/[a-z]/gi, (char) => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  });\n};\n\nmodule.exports = flipCase;\n", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "task_id": "JavaScript/27"}
{"generation": "\n  return string.replace(/[a-z]/gi, (char) => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  });\n};\n\nmodule.exports = flipCase;\n", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "task_id": "JavaScript/27"}
{"generation": "\n  return string.split('').map((char) => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n};\n\nmodule.exports = flipCase;\n", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "task_id": "JavaScript/27"}
{"generation": "\n  return strings.join('');\n};\n\nexport default concatenate;\n", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "task_id": "JavaScript/28"}
{"generation": "\n  return strings.join('');\n};\n\nexport default concatenate;\n", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "task_id": "JavaScript/28"}
{"generation": "\n  return strings.join('');\n};\n\nmodule.exports = concatenate;\n", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "task_id": "JavaScript/28"}
{"generation": "\n  return strings.filter(str => str.startsWith(prefix));\n};\n", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "task_id": "JavaScript/29"}
{"generation": "\n  return strings.filter(str => str.startsWith(prefix));\n};\n", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "task_id": "JavaScript/29"}
{"generation": "\n  return strings.filter(str => str.startsWith(prefix));\n};\n", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "task_id": "JavaScript/29"}
{"generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "task_id": "JavaScript/3"}
{"generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "task_id": "JavaScript/3"}
{"generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "task_id": "JavaScript/3"}
{"generation": "\n  return l.filter(x => x > 0);\n};\n", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "task_id": "JavaScript/30"}
{"generation": "\n  return l.filter(n => n > 0);\n};\n", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "task_id": "JavaScript/30"}
{"generation": "\n  return l.filter(n => n > 0);\n};\n", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "task_id": "JavaScript/30"}
{"generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "task_id": "JavaScript/31"}
{"generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "task_id": "JavaScript/31"}
{"generation": "\n  if (n <= 1) return false;\n  if (n === 2 || n === 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "task_id": "JavaScript/31"}
{"generation": "\n  if (xs.length % 2 === 0) {\n    throw new Error('findZero only takes list xs having even number of coefficients');\n  }\n  const largestNonZeroCoefficient = xs.reduce((prev, item) => {\n    return Math.abs(item) > Math.abs(prev) ? item : prev;\n  }, 0);\n  if (largestNonZeroCoefficient === 0) {\n    throw new Error('findZero only takes list xs having largest non zero coefficient');\n  }\n  const n = xs.length - 1;\n  const a = xs[n];\n  const b = xs[n - 1];\n  const c = xs[n - 2];\n  const d = xs[n - 3];\n  const e = xs[n - 4];\n  const f = xs[n - 5];\n  const g = xs[n - 6];\n  const h = xs[n -", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "task_id": "JavaScript/32"}
{"generation": "\n  if (xs.length % 2 === 0) {\n    const n = xs.length;\n    const a = xs[n - 1];\n    const b = xs[n - 2];\n    const c = xs[n - 3];\n    const d = xs[n - 4];\n    const x = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n    return x;\n  }\n  throw new Error('xs must have even number of coefficients');\n}\n", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "task_id": "JavaScript/32"}
{"generation": "\n  if (xs.length % 2 === 0) {\n    const n = xs.length;\n    const a = xs[n - 1];\n    const b = xs[n - 2];\n    const c = xs[n - 3];\n    const d = xs[n - 4];\n    const x = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n    return x;\n  }\n  return null;\n}\n", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "task_id": "JavaScript/32"}
{"generation": "\n  let lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 1; i < l.length; i++) {\n    if (i % 3 === 1) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 2; i < l.length; i++) {\n    if (i % 3 === 2) {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};\n\nmodule.exports = sortThird;\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "task_id": "JavaScript/33"}
{"generation": "\n  let lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 1; i < l.length; i++) {\n    if (i % 3 === 1) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 2; i < l.length; i++) {\n    if (i % 3 === 2) {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};\n\nmodule.exports = sortThird;\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "task_id": "JavaScript/33"}
{"generation": "\n  let lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 1; i < l.length; i++) {\n    if (i % 3 === 1) {\n      lPrime.push(l[i]);\n    }\n  }\n  for (let i = 2; i < l.length; i++) {\n    if (i % 3 === 2) {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};\n\nmodule.exports = sortThird;\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "task_id": "JavaScript/33"}
{"generation": "\n  return l.sort().filter((v, i, a) => a.indexOf(v) === i);\n};\n", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "task_id": "JavaScript/34"}
{"generation": "\n  return l.sort().filter((v, i, a) => {\n    return i === 0 || v !== a[i - 1];\n  });\n};\n\nmodule.exports = unique;\n", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "task_id": "JavaScript/34"}
{"generation": "\n  return l.sort().filter((x, i, a) => !i || x !== a[i - 1]);\n};\n", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "task_id": "JavaScript/34"}
{"generation": "\n  return l.reduce((a, b) => (a > b ? a : b));\n};\n\nmodule.exports = { maxElement };\n", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "task_id": "JavaScript/35"}
{"generation": "\n  return l.reduce((a, b) => (a > b ? a : b));\n};\n", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "task_id": "JavaScript/35"}
{"generation": "\n  return l.reduce((a, b) => (a > b ? a : b));\n};\n", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "task_id": "JavaScript/35"}
{"generation": "\n  let count = 0;\n  for (let i = 11; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += String(i).split('').filter((x) => x === '7').length;\n    }\n  }\n  return count;\n};\n", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "task_id": "JavaScript/36"}
{"generation": "\n  let count = 0;\n  for (let i = 11; i < n; i += 11) {\n    if (i % 11 === 0) {\n      count++;\n    }\n  }\n  for (let i = 13; i < n; i += 13) {\n    if (i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "task_id": "JavaScript/36"}
{"generation": "\n  let count = 0;\n  for (let i = 11; i < n; i += 11) {\n    if (i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "task_id": "JavaScript/36"}
{"generation": "\n  let lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      lPrime.push(l[i]);\n    } else {\n      lPrime.push(l[i]);\n      lPrime[i] = lPrime[i].sort();\n    }\n  }\n  return lPrime;\n};\n\nmodule.exports = sortEven;\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "task_id": "JavaScript/37"}
{"generation": "\n  const lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      lPrime.push(l[i]);\n    } else {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "task_id": "JavaScript/37"}
{"generation": "\n  let lPrime = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      lPrime.push(l[i]);\n    } else {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};\n", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "task_id": "JavaScript/37"}
{"generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "task_id": "JavaScript/38"}
{"generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "task_id": "JavaScript/38"}
{"generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "task_id": "JavaScript/38"}
{"generation": "\n  const fib = (n) => {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  let i = 0;\n  let prime = fib(i);\n  while (!isPrime(prime)) {\n    i++;\n    prime = fib(i);\n  }\n  return prime;\n};\n\nexport default primeFib;\n", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "task_id": "JavaScript/39"}
{"generation": "\n  const fib = (n) => {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  let i = 0;\n  let num = fib(i);\n  while (!isPrime(num)) {\n    i++;\n    num = fib(i);\n  }\n  return num;\n};\n", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "task_id": "JavaScript/39"}
{"generation": "\n  if (n < 1) {\n    throw new Error(\"n must be greater than 0\");\n  }\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  const fibs = [2, 3];\n  let fib = 5;\n  let i = 3;\n  while (i < n) {\n    fib = fibs[i - 1] + fibs[i - 2];\n    if (isPrime(fib)) {\n      fibs.push(fib);\n      i++;\n    }\n  }\n  return fib;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeFib;\n", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "task_id": "JavaScript/39"}
{"generation": "\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return deviations.reduce((a, b) => a + b) / deviations.length;\n};\n\nexport default meanAbsoluteDeviation;\n", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "task_id": "JavaScript/4"}
{"generation": "\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return deviations.reduce((a, b) => a + b) / deviations.length;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "task_id": "JavaScript/4"}
{"generation": "\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  const absoluteDifferences = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDifferences.reduce((a, b) => a + b) / numbers.length;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "task_id": "JavaScript/4"}
{"generation": "\n  const s = new Set(l);\n  if (s.size < 3) {\n    return false;\n  }\n  for (const a of s) {\n    for (const b of s) {\n      if (a + b === 0) {\n        for (const c of s) {\n          if (a + b + c === 0) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\nexport default triplesSumToZero;\n", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "task_id": "JavaScript/40"}
{"generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "task_id": "JavaScript/40"}
{"generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "task_id": "JavaScript/40"}
{"generation": "\n  let collisions = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "task_id": "JavaScript/41"}
{"generation": "\n  // The cars are moving in the same speed, so the distance between them is constant.\n  // The cars are infinitely sturdy and strong, so the distance between them is constant.\n  // The cars are infinitely long, so the distance between them is constant.\n  // The cars are moving in the same speed, so the distance between them is constant.\n  // The cars are infinitely sturdy and strong, so the distance between them is constant.\n  // The cars are infinitely long, so the distance between them is constant.\n  // The cars are moving in the same speed, so the distance between them is constant.\n  // The cars are infinitely sturdy and strong, so the distance between them is constant.\n  // The cars are infinitely long, so the distance between them is constant.\n  // The cars are moving in the same speed, so the distance between them is constant.\n  // The cars are infinitely sturdy and strong, so the distance between them is constant.\n  // The cars are infinitely long, so the distance between them is constant.\n  // The cars are moving in the same speed, so the distance between them is constant.\n  // The cars are infinitely sturdy and strong, so the distance between them is constant.\n  // The cars are infinitely long, so the distance between them is constant.\n  // The cars are moving in the same speed, so the distance between them is", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "task_id": "JavaScript/41"}
{"generation": "\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n  return n * (n - 1) / 2;\n};\n\nmodule.exports = carRaceCollision;\n", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "task_id": "JavaScript/41"}
{"generation": "\n  return l.map(x => x + 1);\n}\n", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "task_id": "JavaScript/42"}
{"generation": "\n  return l.map(x => x + 1);\n};\n\nmodule.exports = incrList;\n", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "task_id": "JavaScript/42"}
{"generation": "\n  return l.map(x => x + 1);\n}\n", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "task_id": "JavaScript/42"}
{"generation": "\n  const s = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "task_id": "JavaScript/43"}
{"generation": "\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result = true;\n        break;\n      }\n    }\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = pairsSumToZero;\n", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "task_id": "JavaScript/43"}
{"generation": "\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] + l[j] === 0) {\n      return true;\n    }\n    if (l[i] + l[j] > 0) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "task_id": "JavaScript/43"}
{"generation": "\n  if (x < base) return x.toString();\n  return changeBase(Math.floor(x / base), base) + (x % base).toString();\n};\n\nmodule.exports = changeBase;\n", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "task_id": "JavaScript/44"}
{"generation": "\n  let result = '';\n  while (x > 0) {\n    result = `${x % base}${result}`;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nmodule.exports = changeBase;\n", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "task_id": "JavaScript/44"}
{"generation": "\n  let result = '';\n  while (x > 0) {\n    result = `${x % base}${result}`;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nmodule.exports = changeBase;\n", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "task_id": "JavaScript/44"}
{"generation": "\n  return (a * h) / 2;\n};\n", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "task_id": "JavaScript/45"}
{"generation": "\n  return (a * h) / 2;\n};\n", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "task_id": "JavaScript/45"}
{"generation": "\n  return (a * h) / 2;\n};\n\nmodule.exports = triangleArea;\n", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "task_id": "JavaScript/45"}
{"generation": "\n  if (n < 0) {\n    return -1;\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let fib4Array = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4Array.push(\n      fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4]\n    );\n  }\n  return fib4Array[n];\n};\n", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "task_id": "JavaScript/46"}
{"generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  let fib4Array = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4Array.push(fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4]);\n  }\n  return fib4Array[n];\n};\n", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "task_id": "JavaScript/46"}
{"generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  let fib4Array = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4Array.push(fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4]);\n  }\n  return fib4Array[n];\n};\n", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "task_id": "JavaScript/46"}
{"generation": "\n  l.sort((a, b) => a - b);\n  const half = l.length / 2;\n  return half % 1 ? l[Math.floor(half)] : (l[half - 1] + l[half]) / 2;\n};\n", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "task_id": "JavaScript/47"}
{"generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n  return sorted[half];\n};\n\nmodule.exports = median;\n", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "task_id": "JavaScript/47"}
{"generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted.length % 2 === 0 ? (sorted[half - 1] + sorted[half]) / 2 : sorted[half];\n};\n", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "task_id": "JavaScript/47"}
{"generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\nmodule.exports = isPalindrome;\n", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "task_id": "JavaScript/48"}
{"generation": "\n  return text === text.split('').reverse().join('');\n};\n\nmodule.exports = isPalindrome;\n", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "task_id": "JavaScript/48"}
{"generation": "\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\nmodule.exports = isPalindrome;\n", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "task_id": "JavaScript/48"}
{"generation": "\n  let result = 1;\n  for (let i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return result;\n};\n", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "task_id": "JavaScript/49"}
{"generation": "\n  let result = 1;\n  for (let i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return result;\n};\n", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "task_id": "JavaScript/49"}
{"generation": "\n  let result = 1;\n  for (let i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return result;\n};\n", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "task_id": "JavaScript/49"}
{"generation": "\n  if (numbers.length === 0) return [];\n  return numbers.slice(0, -1).map((x, i) => [x, delimeter[i % delimeter.length]]).flat();\n};\n", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "task_id": "JavaScript/5"}
{"generation": "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "task_id": "JavaScript/5"}
{"generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};\n", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "task_id": "JavaScript/5"}
{"generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "task_id": "JavaScript/50"}
{"generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "task_id": "JavaScript/50"}
{"generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "task_id": "JavaScript/50"}
{"generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n};\n\nmodule.exports = removeVowels;\n", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "task_id": "JavaScript/51"}
{"generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text.split('').filter((char) => !vowels.includes(char)).join('');\n};\n\nmodule.exports = removeVowels;\n", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "task_id": "JavaScript/51"}
{"generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter((char) => vowels.indexOf(char) === -1).join('');\n};\n", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "task_id": "JavaScript/51"}
{"generation": "\n  return l.every(n => n < t);\n};\n", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "task_id": "JavaScript/52"}
{"generation": "\n  return l.every(x => x < t);\n};\n", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "task_id": "JavaScript/52"}
{"generation": "\n  return l.every(n => n < t);\n};\n", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "task_id": "JavaScript/52"}
{"generation": "\n  return x + y;\n};\n", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "task_id": "JavaScript/53"}
{"generation": "\n  return x + y;\n};\n", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "task_id": "JavaScript/53"}
{"generation": "\n  return x + y;\n};\n", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "task_id": "JavaScript/53"}
{"generation": "\n  const s0Chars = s0.split('').sort();\n  const s1Chars = s1.split('').sort();\n  return s0Chars.every(char => s1Chars.includes(char));\n};\n\nmodule.exports = sameChars;\n", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "task_id": "JavaScript/54"}
{"generation": "\n  const s0Set = new Set(s0);\n  const s1Set = new Set(s1);\n  return s0Set.size === s1Set.size && [...s0Set].every(c => s1Set.has(c));\n};\n\nexport default sameChars;\n", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "task_id": "JavaScript/54"}
{"generation": "\n  const s0Arr = s0.split('');\n  const s1Arr = s1.split('');\n  const s0Obj = s0Arr.reduce((acc, cur) => {\n    acc[cur] = acc[cur] ? acc[cur] + 1 : 1;\n    return acc;\n  }, {});\n  const s1Obj = s1Arr.reduce((acc, cur) => {\n    acc[cur] = acc[cur] ? acc[cur] + 1 : 1;\n    return acc;\n  }, {});\n  return Object.keys(s0Obj).every(key => s1Obj[key] === s0Obj[key]);\n};\n\nmodule.exports = sameChars;\n", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "task_id": "JavaScript/54"}
{"generation": "\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "task_id": "JavaScript/55"}
{"generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "task_id": "JavaScript/55"}
{"generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "task_id": "JavaScript/55"}
{"generation": "\n  // your code here\n};\n", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/56"}
{"generation": "\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/56"}
{"generation": "\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/56"}
{"generation": "\n  let dir = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (dir === 0) {\n      if (l[i] > l[i - 1]) {\n        dir = 1;\n      } else if (l[i] < l[i - 1]) {\n        dir = -1;\n      }\n    } else if (dir === 1 && l[i] < l[i - 1]) {\n      return false;\n    } else if (dir === -1 && l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "task_id": "JavaScript/57"}
{"generation": "\n  const len = l.length;\n  if (len < 2) return true;\n  const dir = l[1] - l[0];\n  for (let i = 2; i < len; i++) {\n    if (dir * (l[i] - l[i - 1]) < 0) return false;\n  }\n  return true;\n};\n", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "task_id": "JavaScript/57"}
{"generation": "\n  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      isIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing || isDecreasing;\n};\n", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "task_id": "JavaScript/57"}
{"generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = new Set();\n  for (const elem of set1) {\n    if (set2.has(elem)) {\n      intersection.add(elem);\n    }\n  }\n  return [...intersection];\n};\n\nmodule.exports = common;\n", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "task_id": "JavaScript/58"}
{"generation": "\n  const s1 = new Set(l1);\n  const s2 = new Set(l2);\n  return [...new Set([...s1].filter(x => s2.has(x)))].sort((a, b) => a - b);\n};\n", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "task_id": "JavaScript/58"}
{"generation": "\n  const s1 = new Set(l1);\n  const s2 = new Set(l2);\n  return [...new Set(l1.filter(x => s2.has(x)))].sort((a, b) => a - b);\n};\n\nmodule.exports = common;\n", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "task_id": "JavaScript/58"}
{"generation": "\n  let largest = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\nmodule.exports = largestPrimeFactor;\n", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "task_id": "JavaScript/59"}
{"generation": "\n  const primeFactors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return Math.max(...primeFactors);\n};\n\nmodule.exports = largestPrimeFactor;\n", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "task_id": "JavaScript/59"}
{"generation": "\n  let largest = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\nmodule.exports = largestPrimeFactor;\n", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "task_id": "JavaScript/59"}
{"generation": "\n  let paren_level = 0;\n  let max_level = 0;\n  let max_levels = [];\n  let current_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_level++;\n      if (paren_level > max_level) {\n        max_level = paren_level;\n      }\n    } else if (paren_string[i] === ')') {\n      paren_level--;\n    }\n    if (paren_string[i] === ' ' && paren_level > current_level) {\n      max_levels.push(max_level);\n      current_level = paren_level;\n    }\n  }\n  return max_levels;\n};\n", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "task_id": "JavaScript/6"}
{"generation": "\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let nesting_levels = [];\n  let paren_string_array = paren_string.split(' ');\n\n  for (let i = 0; i < paren_string_array.length; i++) {\n    let current_string = paren_string_array[i];\n    let current_string_length = current_string.length;\n    let current_string_char_array = current_string.split('');\n\n    for (let j = 0; j < current_string_length; j++) {\n      if (current_string_char_array[j] === '(') {\n        current_nesting++;\n      } else if (current_string_char_array[j] === ')') {\n        current_nesting--;\n      }\n    }\n\n    if (current_nesting > max_nesting) {\n      max_nesting = current_nesting;\n    }\n\n    nesting_levels.push(max_nesting);\n    current_nesting = 0;\n  }\n\n  return nesting_levels;\n};\n\nmodule.exports = parseNestedParens;\n", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "task_id": "JavaScript/6"}
{"generation": "\n  let paren_level = 0;\n  let max_paren_level = 0;\n  let max_paren_level_list = [];\n  let paren_level_list = [];\n  let paren_string_list = paren_string.split(' ');\n\n  for (let i = 0; i < paren_string_list.length; i++) {\n    let paren_string_element = paren_string_list[i];\n    for (let j = 0; j < paren_string_element.length; j++) {\n      if (paren_string_element[j] === '(') {\n        paren_level++;\n      } else if (paren_string_element[j] === ')') {\n        paren_level--;\n      }\n    }\n    if (paren_level > max_paren_level) {\n      max_paren_level = paren_level;\n    }\n    paren_level_list.push(paren_level);\n  }\n\n  for (let i = 0; i < paren_level_list.length; i++) {\n    if (paren_level_list[i] === max_paren_level) {\n      max_paren_level_list.push(i + 1);\n    }\n  }\n\n  return max_paren_level_list;\n};\n", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "task_id": "JavaScript/6"}
{"generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "task_id": "JavaScript/60"}
{"generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "task_id": "JavaScript/60"}
{"generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "task_id": "JavaScript/60"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/61"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/61"}
{"generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "task_id": "JavaScript/61"}
{"generation": "\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};\n\nexport default derivative;\n", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "task_id": "JavaScript/62"}
{"generation": "\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};\n\nexport default derivative;\n", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "task_id": "JavaScript/62"}
{"generation": "\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};\n\nexport default derivative;\n", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "task_id": "JavaScript/62"}
{"generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "task_id": "JavaScript/63"}
{"generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "task_id": "JavaScript/63"}
{"generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "task_id": "JavaScript/63"}
{"generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "task_id": "JavaScript/64"}
{"generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "task_id": "JavaScript/64"}
{"generation": "\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "task_id": "JavaScript/64"}
{"generation": "\n  const digits = x.toString().split('');\n  const length = digits.length;\n  if (shift > length) {\n    return digits.reverse().join('');\n  }\n  const shifted = digits.slice(shift, length).concat(digits.slice(0, shift));\n  return shifted.join('');\n};\n\nmodule.exports = circularShift;\n", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "task_id": "JavaScript/65"}
{"generation": "\n  let digits = x.toString().split('');\n  let reversed = digits.reverse();\n  let shifted = digits.slice(shift).concat(digits.slice(0, shift));\n  return shift > digits.length ? reversed.join('') : shifted.join('');\n};\n\nmodule.exports = circularShift;\n", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "task_id": "JavaScript/65"}
{"generation": "\n  const digits = x.toString().split('');\n  const length = digits.length;\n  if (shift > length) {\n    return digits.reverse().join('');\n  }\n  const shifted = digits.slice(shift, length).concat(digits.slice(0, shift));\n  return shifted.join('');\n};\n\nmodule.exports = circularShift;\n", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "task_id": "JavaScript/65"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "task_id": "JavaScript/66"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "task_id": "JavaScript/66"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "task_id": "JavaScript/66"}
{"generation": "\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  let applesAndOranges = s.split(\" \");\n  for (let i = 0; i < applesAndOranges.length; i++) {\n    if (applesAndOranges[i] === \"apples\") {\n      apples = parseInt(applesAndOranges[i - 1]);\n    }\n    if (applesAndOranges[i] === \"oranges\") {\n      oranges = parseInt(applesAndOranges[i - 1]);\n    }\n ", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "task_id": "JavaScript/67"}
{"generation": "\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let arr = s.split(\" \");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"apples\") {\n      apples = parseInt(arr[i - 1]);\n    } else if (arr[i] === \"oranges\") {\n      oranges = parseInt(arr[i - 1]);\n    }\n  }\n  mangoes = n - apples - oranges;\n  return mangoes;\n};\n", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "task_id": "JavaScript/67"}
{"generation": "\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let arr = s.split(\" \");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"apples\") {\n      apples = parseInt(arr[i - 1]);\n    }\n    if (arr[i] === \"oranges\") {\n      oranges = parseInt(arr[i - 1]);\n    }\n  }\n  mangoes = n - apples - oranges;\n  return mangoes;\n};\n", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "task_id": "JavaScript/67"}
{"generation": "\n  const even = arr.filter((num) => num % 2 === 0);\n  const smallest = even.reduce((a, b) => (a < b ? a : b));\n  const index = arr.indexOf(smallest);\n  return [smallest, index];\n};\n\nmodule.exports = pluck;\n", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "task_id": "JavaScript/68"}
{"generation": "\n  const even = arr.filter((val) => val % 2 === 0);\n  if (even.length === 0) return [];\n  const min = Math.min(...even);\n  const minIndex = arr.indexOf(min);\n  return [min, minIndex];\n};\n\nmodule.exports = pluck;\n", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "task_id": "JavaScript/68"}
{"generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEvenIndex === -1) return [];\n  return [smallestEven, smallestEvenIndex];\n};\n\nmodule.exports = pluck;\n", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "task_id": "JavaScript/68"}
{"generation": "\n  let max = 0;\n  let maxFreq = 0;\n  let result = -1;\n  const freq = {};\n  lst.forEach((item) => {\n    if (freq[item]) {\n      freq[item] += 1;\n    } else {\n      freq[item] = 1;\n    }\n    if (freq[item] > maxFreq) {\n      max = item;\n      maxFreq = freq[item];\n    }\n  });\n  if (maxFreq > 1) {\n    result = max;\n  }\n  return result;\n};\n\nmodule.exports =", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "task_id": "JavaScript/69"}
{"generation": "\n  const freq = {};\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (freq[num]) {\n      freq[num]++;\n    } else {\n      freq[num] = 1;\n    }\n    if (freq[num] > maxFreq) {\n      max = num;\n      maxFreq = freq[num];\n    }\n  }\n  if (maxFreq > 1) {\n    return max;\n  }\n  return -1;\n};\n\nmodule.exports = search;\n", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "task_id": "JavaScript/69"}
{"generation": "\n  const freq = {};\n  let max = 0;\n  let result = -1;\n  lst.forEach((n) => {\n    if (freq[n]) {\n      freq[n] += 1;\n    } else {\n      freq[n] = 1;\n    }\n    if (freq[n] > max) {\n      max = freq[n];\n      result = n;\n    }\n  });\n  if (max < 2) {\n    return -1;\n  }\n  return result;\n};\n\nmodule.exports = search;\n", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "task_id": "JavaScript/69"}
{"generation": "\n  return strings.filter(s => s.includes(substring));\n};\n", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "task_id": "JavaScript/7"}
{"generation": "\n  return strings.filter(string => string.includes(substring));\n};\n", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "task_id": "JavaScript/7"}
{"generation": "\n  return strings.filter(string => string.includes(substring));\n};\n", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "task_id": "JavaScript/7"}
{"generation": "\n  if (lst.length === 0) return [];\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n    sorted.push(sorted.shift());\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "task_id": "JavaScript/70"}
{"generation": "\n  if (lst.length === 0) return [];\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n    sorted.push(sorted.shift());\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "task_id": "JavaScript/70"}
{"generation": "\n  if (lst.length === 0) {\n    return [];\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  while (i < sorted.length) {\n    result.push(sorted[i]);\n    i += 1;\n    result.push(sorted[sorted.length - i]);\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "task_id": "JavaScript/70"}
{"generation": "\n  if (a + b > c && b + c > a && a + c > b) {\n    const s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n  }\n  return -1;\n};\n\nexport default triangleArea;\n", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "task_id": "JavaScript/71"}
{"generation": "\n  if (a + b > c && b + c > a && a + c > b) {\n    const s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n  }\n  return -1;\n};\n\nexport default triangleArea;\n", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "task_id": "JavaScript/71"}
{"generation": "\n  if (a + b > c && b + c > a && a + c > b) {\n    const s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n  }\n  return -1;\n};\n\nexport default triangleArea;\n", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "task_id": "JavaScript/71"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) return false;\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] !== q[q.length - 1 - i]) return false;\n  }\n  return true;\n};\n", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "task_id": "JavaScript/72"}
{"generation": "\n  let sum = 0;\n  let isBalanced = true;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (q[i] !== q[q.length - 1 - i]) {\n      isBalanced = false;\n    }\n  }\n  return sum <= w && isBalanced;\n};\n", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "task_id": "JavaScript/72"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) return false;\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] !== q[q.length - i - 1]) return false;\n  }\n  return true;\n};\n", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "task_id": "JavaScript/72"}
{"generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n      if (arr[left] === arr[right - 1]) {\n        left++;\n      } else if (arr[left + 1] === arr[right]) {\n        right--;\n      } else {\n        arr[left] = arr[right];\n        left++;\n        right--;\n      }\n    } else {\n      left++;\n      right--;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "task_id": "JavaScript/73"}
{"generation": "\n  const len = arr.length;\n  const mid = Math.floor(len / 2);\n  let count = 0;\n  for (let i = 0; i < mid; i++) {\n    if (arr[i] !== arr[len - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = smallestChange;\n", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "task_id": "JavaScript/73"}
{"generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n      if (arr[left] !== arr[right - 1]) {\n        count++;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n};\n\nmodule.exports = smallestChange;\n", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "task_id": "JavaScript/73"}
{"generation": "\n  const totalChars = (str) => str.split('').reduce((acc, char) => acc + char.length, 0);\n  const totalCharsInLst1 = lst1.map(totalChars);\n  const totalCharsInLst2 = lst2.map(totalChars);\n\n  const totalCharsInLst1Sum = totalCharsInLst1.reduce((acc, char) => acc + char, 0);\n  const totalCharsInLst2Sum = totalCharsInLst2.reduce((acc, char) => acc + char, 0);\n\n  if (totalCharsInLst1Sum < totalCharsInLst2Sum) {\n    return lst1;\n  }\n  if (totalCharsInLst1Sum > totalCharsInLst2Sum) {\n    return lst2;\n  }\n  return lst1;\n};\n", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "task_id": "JavaScript/74"}
{"generation": "\n  const total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};\n", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "task_id": "JavaScript/74"}
{"generation": "\n  let total1 = 0;\n  let total2 = 0;\n  lst1.forEach((str) => {\n    total1 += str.length;\n  });\n  lst2.forEach((str) => {\n    total2 += str.length;\n  });\n  if (total1 < total2) {\n    return lst1;\n  } else if (total1 > total2) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};\n", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "task_id": "JavaScript/74"}
{"generation": "\n  let primeNumbers = [];\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  if (primeNumbers.length === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "task_id": "JavaScript/75"}
{"generation": "\n  let prime = [];\n  let result = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      prime.push(i);\n    }\n  }\n  if (prime.length === 3) {\n    result = true;\n  }\n  return result;\n};\n", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "task_id": "JavaScript/75"}
{"generation": "\n  let prime = [];\n  let result = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      prime.push(i);\n    }\n  }\n  for (let i = 0; i < prime.length; i++) {\n    for (let j = i + 1; j < prime.length; j++) {\n      if (prime[i] * prime[j] === a) {\n        result = true;\n      }\n    }\n  }\n  return result;\n};\n", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "task_id": "JavaScript/75"}
{"generation": "\n  return x === Math.pow(n, parseInt(Math.log(x) / Math.log(n)));\n};\n", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "task_id": "JavaScript/76"}
{"generation": "\n  return n ** parseInt(Math.log(x) / Math.log(n)) === x;\n};\n", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "task_id": "JavaScript/76"}
{"generation": "\n  return x === Math.pow(n, parseInt(Math.log(x) / Math.log(n)));\n};\n", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "task_id": "JavaScript/76"}
{"generation": "\n  const cube = Math.pow(a, 1 / 3);\n  return Math.round(cube) === cube;\n};\n", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "task_id": "JavaScript/77"}
{"generation": "\n  const b = Math.pow(a, 1/3);\n  return Math.pow(b, 3) === a;\n}\n", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "task_id": "JavaScript/77"}
{"generation": "\n  const b = Math.pow(a, 1 / 3);\n  return Math.round(b) === b;\n};\n\nmodule.exports = { iscube };\n", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "task_id": "JavaScript/77"}
{"generation": "\n  const hex = {\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n  };\n  const hexArray = num.split(\"\");\n  const hexArrayLength = hexArray.length;\n  let hexArrayPrime = 0;\n\n  for (let i = 0; i < hexArrayLength; i++) {\n    if (hexArray[i] in hex) {\n      hexArray[i] = hex[hexArray[i]];\n    }\n  }\n\n  for (let i = 0; i < hexArrayLength; i++) {", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "task_id": "JavaScript/78"}
{"generation": "\n  const hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  let count = 0;\n  for (let i = 0; i < num.length; i += 1) {\n    if (hex.indexOf(num[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "task_id": "JavaScript/78"}
{"generation": "\n  const hex = {\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n  };\n  const hexArr = num.split(\"\");\n  let count = 0;\n  for (let i = 0; i < hexArr.length; i++) {\n    if (hexArr[i] in hex) {\n      if (hex[hexArr[i]] === 2 || hex[hexArr[i]] === 3 || hex[hexArr[i]] === 5 || hex[hexArr[i]] === 7) {\n        count++;\n      }", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "task_id": "JavaScript/78"}
{"generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n};\n", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "task_id": "JavaScript/79"}
{"generation": "\n  let binary = decimal.toString(2);\n  let binaryLength = binary.length;\n  let binaryArray = binary.split('');\n  let binaryArrayLength = binaryArray.length;\n  let binaryArrayReversed = binaryArray.reverse();\n  let binaryArrayReversedLength = binaryArrayReversed.length;\n  let binaryArrayReversedString = binaryArrayReversed.join('');\n  let binaryArrayReversedStringLength = binaryArrayReversedString.length;\n  let binaryArrayReversedStringLengthWithoutDb = binaryArrayReversedStringLength - 2;\n  let binaryArrayReversedStringLengthWithoutDbArray = binaryArrayReversedString.slice(2", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "task_id": "JavaScript/79"}
{"generation": "\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "task_id": "JavaScript/79"}
{"generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "task_id": "JavaScript/8"}
{"generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "task_id": "JavaScript/8"}
{"generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "task_id": "JavaScript/8"}
{"generation": "\n  if (s.length < 3) return false;\n  const arr = s.split(\"\");\n  for (let i = 0; i < arr.length - 2; i++) {\n    const three = arr.slice(i, i + 3);\n    if (new Set(three).size !== 3) return false;\n  }\n  return true;\n};\n", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "task_id": "JavaScript/80"}
{"generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    const sub = s.substring(i, i + 3);\n    if (sub.length !== new Set(sub).size) return false;\n  }\n  return true;\n};\n", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "task_id": "JavaScript/80"}
{"generation": "\n  let count = 0;\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + 2 < s.length) {\n      let three = s.slice(i, i + 3);\n      if (arr.includes(three)) {\n        return false;\n      }\n      arr.push(three);\n    }\n  }\n  return true;\n};\n", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "task_id": "JavaScript/80"}
{"generation": "\n  const letterGrades = [];\n  const gradeTable = {\n    A: [4.0, 3.7],\n    A_minus: [3.3, 3.0],\n    B: [2.7, 2.3],\n    B_minus: [2.0, 1.7],\n    C: [1.3, 1.0],\n    C_minus: [0.7, 0.0],\n    D: [0.3, 0.0],\n    E: [0.0, 0.0],\n  };\n  grades.forEach((grade) => {\n    for (const [letter, range] of Object.entries(gradeTable)) {\n      if (grade >= range[0] && grade <= range[1]) {\n        letterGrades.push(letter);\n      }\n    }\n  });\n  return letterGrades;\n};\n", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "task_id": "JavaScript/81"}
{"generation": "\n  const letterGrade = [\n    {\n      gpa: 4.0,\n      grade: 'A+'\n    },\n    {\n      gpa: 3.7,\n      grade: 'A'\n    },\n    {\n      gpa: 3.3,\n      grade: 'A-'\n    },\n    {\n      gpa: 3.0,\n      grade: 'B+'\n    },\n    {\n      gpa: 2.7,\n      grade: 'B'\n    },\n    {\n      gpa: 2.3,\n      grade: 'B-'\n    },\n    {\n      gpa: 2.0,\n      grade: 'C+'\n    },\n    {\n      gpa: 1.7,\n      grade: 'C'\n    },\n    {\n      gpa: 1.3,\n      grade: 'C-'\n    },\n", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "task_id": "JavaScript/81"}
{"generation": "\n  const letterGrades = [];\n  for (let i = 0; i < grades.length; i += 1) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 2.0) {", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "task_id": "JavaScript/81"}
{"generation": "\n  const isPrime = (num) => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "task_id": "JavaScript/82"}
{"generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "task_id": "JavaScript/82"}
{"generation": "\n  const isPrime = (num) => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "task_id": "JavaScript/82"}
{"generation": "\n  let count = 0;\n  for (let i = 1; i < 10; i++) {\n    count += Math.pow(10, n - 1);\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "task_id": "JavaScript/83"}
{"generation": "\n  let count = 0;\n  for (let i = 1; i < 10; i++) {\n    count += Math.pow(10, n - 1);\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "task_id": "JavaScript/83"}
{"generation": "\n  let count = 0;\n  for (let i = 1; i < 10; i++) {\n    count += Math.pow(10, n - 1);\n  }\n  for (let i = 1; i < 10; i++) {\n    count += Math.pow(10, n - 1);\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "task_id": "JavaScript/83"}
{"generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "task_id": "JavaScript/84"}
{"generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n};\n", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "task_id": "JavaScript/84"}
{"generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\n", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "task_id": "JavaScript/84"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "task_id": "JavaScript/85"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "task_id": "JavaScript/85"}
{"generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "task_id": "JavaScript/85"}
{"generation": "\n  const words = s.split(' ');\n  return words.map((word) => {\n    return word.split('').sort().join('');\n  }).join(' ');\n};\n\nmodule.exports = antiShuffle;\n", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "task_id": "JavaScript/86"}
{"generation": "\n  const words = s.split(' ');\n  const shuffledWords = words.map((word) => {\n    return word.split('').sort().join('');\n  });\n  return shuffledWords.join(' ');\n};\n", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "task_id": "JavaScript/86"}
{"generation": "\n  const words = s.split(' ');\n  return words.map((word) => {\n    return word.split('').sort().join('');\n  }).join(' ');\n};\n\nmodule.exports = antiShuffle;\n", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "task_id": "JavaScript/86"}
{"generation": "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    }\n    return b[1] - a[1];\n  });\n};\n\nmodule.exports = getRow;\n", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "task_id": "JavaScript/87"}
{"generation": "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    }\n    return b[1] - a[1];\n  });\n};\n\nmodule.exports = getRow;\n", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "task_id": "JavaScript/87"}
{"generation": "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const index = row.indexOf(x);\n    if (index !== -1) {\n      result.push([i, index]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = getRow;\n", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "task_id": "JavaScript/87"}
{"generation": "\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n\n  const sum = array[0] + array[array.length - 1];\n  const isEven = sum % 2 === 0;\n\n  const sortedArray = isEven ? array.sort((a, b) => b - a) : array.sort((a, b) => a - b);\n\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "task_id": "JavaScript/88"}
{"generation": "\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n\n  const sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  }\n  return array.sort((a, b) => a - b);\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "task_id": "JavaScript/88"}
{"generation": "\n  if (array.length === 0) return [];\n  if (array.length === 1) return [array[0]];\n\n  const sortedArray = [...array].sort((a, b) => a - b);\n\n  if (array[0] + array[array.length - 1] % 2 === 0) {\n    return sortedArray.reverse();\n  }\n\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "task_id": "JavaScript/88"}
{"generation": "\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let encrypted = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index !== -1) {\n      index = index + 2;\n      if (index > 25) {\n        index = index - 26;\n      }\n      encrypted += alphabet[index];\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n};\n", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "task_id": "JavaScript/89"}
{"generation": "\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      charCode += 2;\n      if (charCode > 122) {\n        charCode -= 26;\n      }\n      newString += String.fromCharCode(charCode);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "task_id": "JavaScript/89"}
{"generation": "\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index !== -1) {\n      encrypted += alphabet[index + 2];\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n};\n", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "task_id": "JavaScript/89"}
{"generation": "\n  const result = [];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "task_id": "JavaScript/9"}
{"generation": "\n  const result = [];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "task_id": "JavaScript/9"}
{"generation": "\n  const result = [];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "task_id": "JavaScript/9"}
{"generation": "\n  if (lst.length < 2) return null;\n  const sorted = lst.sort((a, b) => a - b);\n  const smallest = sorted[0];\n  const secondSmallest = sorted.find((num) => num !== smallest);\n  return secondSmallest;\n};\n\nmodule.exports = nextSmallest;\n", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "task_id": "JavaScript/90"}
{"generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  let smallest = lst[0];\n  let secondSmallest = null;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (secondSmallest === null) {\n      secondSmallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\nmodule.exports = nextSmallest;\n", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "task_id": "JavaScript/90"}
{"generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = null;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (secondSmallest === null) {\n      secondSmallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "task_id": "JavaScript/90"}
{"generation": "\n  let count = 0;\n  let words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "task_id": "JavaScript/91"}
{"generation": "\n  let count = 0;\n  let words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "task_id": "JavaScript/91"}
{"generation": "\n  let count = 0;\n  let words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "task_id": "JavaScript/91"}
{"generation": "\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return (x + y === z || x + z === y || y + z === x);\n  }\n  return false;\n}\n", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n", "task_id": "JavaScript/92"}
{"generation": "\n  if (x + y === z || x + z === y || y + z === x) {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n", "task_id": "JavaScript/92"}
{"generation": "\n  if (Number.isInteger(x + y) && Number.isInteger(y + z) && Number.isInteger(x + z)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n", "task_id": "JavaScript/92"}
{"generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsMap = {\n    a: 'c',\n    e: 'g',\n    i: 'i',\n    o: 'm',\n    u: 'v',\n  };\n  const vowelsReverseMap = {\n    c: 'a',\n    g: 'e',\n    i: 'i',\n    m: 'o',\n    v: 'u',\n  };\n  const vowelsReverse = (letter) => vowelsReverseMap[letter];\n  const vowelsMapTo = (letter) => vowelsMap[letter];\n  const vowelsMapFrom = (letter) => vowelsReverseMap[letter", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "task_id": "JavaScript/93"}
{"generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const encoded = message.split('').map((letter) => {\n    if (vowels.includes(letter)) {\n      const index = alphabet.indexOf(letter);\n      const newIndex = index + 2;\n      return alphabet[newIndex];\n    }\n    if (letter === letter.toLowerCase()) {\n      return letter.toUpperCase();\n    }\n    return letter.toLowerCase();\n  });\n  return encoded.join('');\n};\n\nmodule.exports = encode;\n", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "task_id": "JavaScript/93"}
{"generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a') {\n      encodedMessage += 'c';\n    } else if (message[i] === 'A') {\n      encodedMessage += 'C';\n    } else if (message[i] === 'e') {\n      encodedMessage += 'g';\n    } else if (message[i] === 'E') {\n      encodedMessage += 'G';\n    } else if (message[i] === 'i') {\n      encodedMessage += 'k';\n    } else if (message[i] === 'I') {\n      encodedMessage += 'K';\n    } else if (message[i] === 'o') {\n      encodedMessage", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "task_id": "JavaScript/93"}
{"generation": "\n  let largestPrime = 0;\n  let sumOfDigits = 0;\n  let sumOfPrimes = 0;\n  let primes = [];\n  let primeSum = 0;\n  let largestPrimeSum = 0;\n  let largestPrimeSumDigits = 0;\n  let largestPrimeSumDigitsSum = 0;\n  let largestPrimeSumDigitsSumSum = 0;\n  let largestPrimeSumDigitsSumSumSum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      primes.push(lst[i]);\n    }\n  }\n\n  for (let i = 0; i < pr", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "task_id": "JavaScript/94"}
{"generation": "\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let str = max.toString();\n  for (let i = 0; i < str.length; i++) {\n    sum += Number(str[i]);\n  }\n  return sum;\n};\n", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "task_id": "JavaScript/94"}
{"generation": "\n  let maxPrime = 0;\n  let sumOfDigits = 0;\n  let prime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  prime = maxPrime;\n  while (prime > 0) {\n    sumOfDigits += prime % 10;\n    prime = Math.floor(prime / 10);\n  }\n  return sumOfDigits;\n};\n", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "task_id": "JavaScript/94"}
{"generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const keys = Object.keys(dict);\n  const isLower = keys.every((key) => key === key.toLowerCase());\n  const isUpper = keys.every((key) => key === key.toUpperCase());\n  return isLower || isUpper;\n};\n", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "task_id": "JavaScript/95"}
{"generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const keys = Object.keys(dict);\n  const isLower = keys.every((key) => key === key.toLowerCase());\n  const isUpper = keys.every((key) => key === key.toUpperCase());\n  return isLower || isUpper;\n};\n\nmodule.exports = checkDictCase;\n", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "task_id": "JavaScript/95"}
{"generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const keys = Object.keys(dict);\n  const isLower = keys.every((key) => key === key.toLowerCase());\n  const isUpper = keys.every((key) => key === key.toUpperCase());\n  return isLower || isUpper;\n};\n\nmodule.exports = checkDictCase;\n", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "task_id": "JavaScript/95"}
{"generation": "\n  const primeNumbers = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "task_id": "JavaScript/96"}
{"generation": "\n  const primeNumbers = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "task_id": "JavaScript/96"}
{"generation": "\n  let primeNumbers = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "task_id": "JavaScript/96"}
{"generation": "\n  let unitDigitA = a % 10;\n  let unitDigitB = b % 10;\n  return unitDigitA * unitDigitB;\n};\n", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "task_id": "JavaScript/97"}
{"generation": "\n  return Math.abs(a % 10 * b % 10);\n};\n", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "task_id": "JavaScript/97"}
{"generation": "\n  const units = a % 10 * b % 10;\n  return units;\n};\n", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "task_id": "JavaScript/97"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "task_id": "JavaScript/98"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "task_id": "JavaScript/98"}
{"generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 2 === 0 && s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "task_id": "JavaScript/98"}
{"generation": "\n  const num = parseFloat(value);\n  if (num % 1 === 0) {\n    return num;\n  }\n  return num > 0 ? Math.ceil(num) : Math.floor(num);\n};\n\nmodule.exports = closestInteger;\n", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "task_id": "JavaScript/99"}
{"generation": "\n  const num = parseFloat(value);\n  if (num % 1 === 0) return num;\n  return Math.round(num);\n};\n\nmodule.exports = closestInteger;\n", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "task_id": "JavaScript/99"}
{"generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};\n\nmodule.exports = closestInteger;\n", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "task_id": "JavaScript/99"}
